/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var socketServer = __webpack_require__(2);

	socketServer.start();


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	//var redis = require('socket.io-redis');
	var config = __webpack_require__(3);
	var io = __webpack_require__(16).listen(config.get('socketPort'));
	var api = __webpack_require__(164);
	var mongo = __webpack_require__(165);

	//io.adapter(redis({ host: settings.redisHost, port: settings.redisPort}));

	console.log('Socket on ' + config.get('socketPort'));

	var model = {
	    start: function () {
	        // Навешиваем обработчик на подключение нового клиента
	        io.on('connection', function (socket) {
	            console.log('new user');
	            model.connect(socket);
	        });
	    },
	    /**
	     * Подключаем пользователя
	     * @param {Socket} socket - сокет вновь подключенного пользователя
	     * @returns {Promise}
	     */
	    connect: function (socket) {
	        // Храним информацию о подключенном пользователе
	        var userInfo = null;

	        return model.checkUser(socket)
	            // Пользователь проверен
	            .then(function (user) {
	                console.log('user checked');
	                userInfo = user;
	                if (user.isNew) {
	                    model.connectNewUser(user);
	                }
	                socket.join('general'); // Сейчас подключаем к общему каналу, по которому сейчас идут сообщения
	                // Подключаем пользователя к его каналам, информации о пользователях и отправляем ему эти данные
	                return Promise.all([model.joinChannel(user, socket), model.joinUserInfo(user, socket), model.joinSelf(user, socket)]);
	            })
	            .then(function () {
	                // Сообщаем всем что пользователь подключился
	                model.connected(userInfo);
	                // Обработка всех поступающих от пользователя сообщений
	                socket.on('message', function (message) {
	                    console.log('got message', message);
	                    // Процессим сообщение
	                    api.processMessage(userInfo, message)
	                        // Если обработка сообщения прошла успешна
	                        .then(function (response) {
	                            console.log('sending', response);
	                            // Отправляем необходимые данные в комнату
	                            if (response.message) {
	                                io.to(response.channel).send(response.message);
	                            }
	                        })
	                        // Если обработка прошла с ошибкой, отправляем сообщение об ошибке
	                        .catch(function (errorMessage) {
	                            socket.send(errorMessage);
	                        });
	                });
	                socket.on('disconnect', function () {
	                    model.disconnected(userInfo);
	                    console.log('user disconnected');
	                });
	            })
	            // Если что-то пошло не так, то отключаем пользователя
	            .catch(function (error) {
	                console.log('error', error);
	                socket.send(error);
	                socket.disconnect();
	                model.disconnected(userInfo);
	                console.log(error);
	            });
	    },
	    /**
	     * Ждём от пользователя сообщение с токеном для проверки личности
	     * @returns {Promise}
	     */
	    checkUser: function (socket) {
	        console.log('checkUser');
	        return new Promise(function (resolve, reject) {
	            socket.on('authenticate', function (message) {
	                console.log('authenticate', message);
	                socket.removeAllListeners('authenticate');
	                api.processMessage(null, message)
	                    .then(function (response) { // Проверка прошла
	                        socket.send(response.message);
	                        resolve(response.user);
	                    })
	                    .catch(function (error) { // Проверка не прошла
	                        reject(error);
	                    });
	            });
	        });
	    },
	    /**
	     * Подключам пользователя к каналам сообщений
	     * @param {User} user
	     * @param {Socket} socket
	     * @returns {Promise.<T>}
	     */
	    joinChannel: function (user, socket) {
	        return mongo.getChannels(user)
	            .then(function (channels) {
	                channels.forEach(function (channel) {
	                    socket.join('channel_' + channel.channelId);
	                });
	                console.log('send channelsList');
	                socket.send(api.channelsList(channels));
	            });
	    },
	    /**
	     * Подключаем пользователя к информации о других пользователях
	     * @param user
	     * @param socket
	     * @returns {Promise.<T>}
	     */
	    joinUserInfo: function (currentUser, socket) {
	        return mongo.getUsers(currentUser)
	            .then(function (users) {
	                var rooms = Object.keys(io.sockets.adapter.rooms)
	                    .map(function (room) {
	                        return room.split('self_')[1];
	                    })
	                    .filter(function (room) {
	                        return !!room;
	                    });
	                users.forEach(function (user) {
	                    user.online = rooms.indexOf(user.id) !== -1;
	                    socket.join('user_' + user.id);
	                });
	                console.log('send usersList');
	                socket.send(api.usersList(users));
	            });

	    },
	    /**
	     * Подключаем пользователя в его личный канал. Сюда передаются сообщения только для конкретного пользователя
	     * @param user
	     * @param socket
	     * @returns {Promise.<T>}
	     */
	    joinSelf: function (user, socket) {
	        socket.join('self_' + user.id);

	    },
	    /**
	     * Сообщаем всем, что пользователь подключился
	     * @param {User} user
	     */
	    connected: function (user) {
	        console.log('connected', 'user_' + user.id);
	        io.to('user_' + user.id).send(api.connected(user));
	    },
	    /**
	     * Сообщаем всем, что пользователь вышел
	     * @param {User} user
	     */
	    disconnected: function (user) {
	        console.log('disconnected', 'user_' + user.id);
	        io.to('user_' + user.id).send(api.disconnected(user));
	    },
	    /**
	     * Залогинился новый пользователь, сообщить всем о нём
	     * @param user
	     */
	    connectNewUser: function(user) {
	        io.sockets.sockets.forEach(function(item) {
	            item.join('user_' + user.id);
	        });
	        io.to('user_' + user.id).send(api.newUser(user));
	    }
	};

	module.exports = model;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {// config.js (c) 2010-2015 Loren West and other contributors
	// May be freely distributed under the MIT license.
	// For further details and documentation:
	// http://lorenwest.github.com/node-config

	// Dependencies
	var Yaml = null,    // External libraries are lazy-loaded
	    VisionmediaYaml = null,  // only if these file types exist.
	    Coffee = null,
	    Iced = null,
	    CSON = null,
	    PPARSER = null,
	    JSON5 = null,
	    TOML = null,
	    HJSON = null,
	    deferConfig = __webpack_require__(9).deferConfig,
	    DeferredConfig = __webpack_require__(9).DeferredConfig,
	    Utils = __webpack_require__(10),
	    Path = __webpack_require__(13),
	    FileSystem = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	// Static members
	var DEFAULT_CLONE_DEPTH = 20,
	    NODE_CONFIG, CONFIG_DIR, RUNTIME_JSON_FILENAME, NODE_ENV, APP_INSTANCE,
	    HOST, HOSTNAME, ALLOW_CONFIG_MUTATIONS,
	    env = {},
	    privateUtil = {},
	    deprecationWarnings = {},
	    configSources = [],          // Configuration sources - array of {name, original, parsed}
	    checkMutability = true;      // Check for mutability/immutability on first get

	/**
	 * <p>Application Configurations</p>
	 *
	 * <p>
	 * The config module exports a singleton object representing all
	 * configurations for this application deployment.
	 * </p>
	 *
	 * <p>
	 * Application configurations are stored in files within the config directory
	 * of your application.  The default configuration file is loaded, followed
	 * by files specific to the deployment type (development, testing, staging,
	 * production, etc.).
	 * </p>
	 *
	 * <p>
	 * For example, with the following config/default.yaml file:
	 * </p>
	 *
	 * <pre>
	 *   ...
	 *   customer:
	 *     &nbsp;&nbsp;initialCredit: 500
	 *     &nbsp;&nbsp;db:
	 *       &nbsp;&nbsp;&nbsp;&nbsp;name: customer
	 *       &nbsp;&nbsp;&nbsp;&nbsp;port: 5984
	 *   ...
	 * </pre>
	 *
	 * <p>
	 * The following code loads the customer section into the CONFIG variable:
	 * <p>
	 *
	 * <pre>
	 *   var CONFIG = require('config').customer;
	 *   ...
	 *   newCustomer.creditLimit = CONFIG.initialCredit;
	 *   database.open(CONFIG.db.name, CONFIG.db.port);
	 *   ...
	 * </pre>
	 *
	 * @module config
	 * @class Config
	 */

	/**
	 * <p>Get the configuration object.</p>
	 *
	 * <p>
	 * The configuration object is a shared singleton object within the application,
	 * attained by calling require('config').
	 * </p>
	 *
	 * <p>
	 * Usually you'll specify a CONFIG variable at the top of your .js file
	 * for file/module scope. If you want the root of the object, you can do this:
	 * </p>
	 * <pre>
	 * var CONFIG = require('config');
	 * </pre>
	 *
	 * <p>
	 * Sometimes you only care about a specific sub-object within the CONFIG
	 * object.  In that case you could do this at the top of your file:
	 * </p>
	 * <pre>
	 * var CONFIG = require('config').customer;
	 * or
	 * var CUSTOMER_CONFIG = require('config').customer;
	 * </pre>
	 *
	 * <script type="text/javascript">
	 *   document.getElementById("showProtected").style.display = "block";
	 * </script>
	 *
	 * @method constructor
	 * @return CONFIG {object} - The top level configuration object
	 */
	var Config = function() {
	  var t = this;

	  // Bind all utility functions to this
	  for (var fnName in util) {
	    util[fnName] = util[fnName].bind(t);
	  }

	  // Merge configurations into this
	  util.extendDeep(t, util.loadFileConfigs());
	  util.attachProtoDeep(t);

	  // Perform strictness checks and possibly throw an exception.
	  util.runStrictnessChecks(t);
	};

	/**
	 * Utilities are under the util namespace vs. at the top level
	 */
	var util = Config.prototype.util = {};

	/**
	 * Underlying get mechanism
	 *
	 * @private
	 * @method getImpl
	 * @param object {object} - Object to get the property for
	 * @param property {string | array[string]} - The property name to get (as an array or '.' delimited string)
	 * @return value {mixed} - Property value, including undefined if not defined.
	 */
	var getImpl= function(object, property) {
	  var t = this,
	      elems = Array.isArray(property) ? property : property.split('.'),
	      name = elems[0],
	      value = object[name];
	  if (elems.length <= 1) {
	    return value;
	  }
	  if (typeof value !== 'object') {
	    return undefined;
	  }
	  return getImpl(value, elems.slice(1));
	};


	/**
	 * <p>Get a configuration value</p>
	 *
	 * <p>
	 * This will return the specified property value, throwing an exception if the
	 * configuration isn't defined.  It is used to assure configurations are defined
	 * before being used, and to prevent typos.
	 * </p>
	 *
	 * @method get
	 * @param property {string} - The configuration property to get. Can include '.' sub-properties.
	 * @return value {mixed} - The property value
	 */
	Config.prototype.get = function(property) {
	  if(property === null || property === undefined){
	    throw new Error("Calling config.get with null or undefined argument");
	  }
	  var t = this,
	      value = getImpl(t, property);

	  // Produce an exception if the property doesn't exist
	  if (value === undefined) {
	    throw new Error('Configuration property "' + property + '" is not defined');
	  }

	  // Make configurations immutable after first get (unless disabled)
	  if (checkMutability) {
	    if (!util.initParam('ALLOW_CONFIG_MUTATIONS', false)) {
	      util.makeImmutable(config);
	    }
	    checkMutability = false;
	  }

	  // Return the value
	  return value;
	};

	/**
	 * Test that a configuration parameter exists
	 *
	 * <pre>
	 *    var config = require('config');
	 *    if (config.has('customer.dbName')) {
	 *      console.log('Customer database name: ' + config.customer.dbName);
	 *    }
	 * </pre>
	 *
	 * @method has
	 * @param property {string} - The configuration property to test. Can include '.' sub-properties.
	 * @return isPresent {boolean} - True if the property is defined, false if not defined.
	 */
	Config.prototype.has = function(property) {
	  // While get() throws an exception for undefined input, has() is designed to test validity, so false is appropriate
	  if(property === null || property === undefined){
	    return false;
	  }
	  var t = this;
	  return (getImpl(t, property) !== undefined);
	};

	/**
	 * <p>Monitor a javascript property for runtime changes.</p>
	 *
	 * <p>
	 * This method was built for an earlier version of node-config that allowed
	 * configuration value mutations.  Since version 1.0.0, node-config no longer
	 * allows configuration mutations, and is no longer used in node-config.
	 * </p>
	 *
	 * <p>
	 * It is deprecated, and will be removed in the next semver incompatible release 2.0.0.
	 * </p>
	 *
	 * @method watch
	 * @deprecated
	 * @param object {object} - The object to watch.
	 * @param property {string} - The property name to watch.  Watch all object properties if null.
	 * @param handler {function(object, propertyName, priorValue, newValue)} - Handler called when a property change is detected.
	 *   The handler is run along with other handlers registered for notification.
	 *   If your handler changes the value of the property, that change is applied after all handlers have finished processing the current change.
	 *   Then all handlers (including this one) will be called again with the newly changed value.
	 * @param depth {integer} (optional) - If watching all object properties or if the specified property is an object, this specifies the depth of the object graph to watch for changes.  Default 6.
	 * @return object {object} - The original object is returned - for chaining.
	 */
	util.watch = function(object, property, handler, depth) {

	  // Initialize
	  var t = this, o = object;
	  var allProperties = property ? [property] : Object.keys(o);

	  // Deprecation warning
	  if (!deprecationWarnings.watch) {
	    console.error('WARNING: config.' + fnName + '() is deprecated, and will not be supported in release 2.0.');
	    console.error('WARNING: See https://github.com/lorenwest/node-config/wiki/Future-Compatibility#upcoming-incompatibilities');
	    deprecationWarnings.watch = true;
	  }

	  // Depth detection
	  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);
	  if (depth < 0) {
	    return;
	  }

	  // Create hidden properties on the object
	  if (!o.__watchers)
	    util.makeHidden(o, '__watchers', {});
	  if (!o.__propertyValues)
	    util.makeHidden(o, '__propertyValues', {});

	  // Attach watchers to all requested properties
	  allProperties.forEach(function(prop){

	    // Setup the property for watching (first time only)
	    if (typeof(o.__propertyValues[prop]) === 'undefined') {

	      // Don't error re-defining the property if immutable
	      var descriptor = Object.getOwnPropertyDescriptor(o, prop);
	      if (descriptor && descriptor.writable === false)
	        return;

	      // Copy the value to the hidden field, and add the property to watchers
	      o.__propertyValues[prop] = [o[prop]];
	      o.__watchers[prop] = [];

	      // Attach the property watcher
	      Object.defineProperty(o, prop, {
	        enumerable : true,

	        get : function(){
	          // If more than 1 item is in the values array,
	          // then we're currently processing watchers.
	          if (o.__propertyValues[prop].length === 1)
	            // Current value
	            return o.__propertyValues[prop][0];
	          else
	            // [0] is prior value, [1] is new value being processed
	            return o.__propertyValues[prop][1];
	        },

	        set : function(newValue) {

	          // Return early if no change
	          var origValue = o[prop];
	          if (util.equalsDeep(origValue, newValue))
	            return;

	          // Remember the new value, and return if we're in another setter
	          o.__propertyValues[prop].push(newValue);
	          if (o.__propertyValues[prop].length > 2)
	            return;

	          // Call all watchers for each change requested
	          var numIterations = 0;
	          while (o.__propertyValues[prop].length > 1) {

	            // Detect recursion
	            if (++numIterations > 20) {
	              o.__propertyValues[prop] = [origValue];
	              throw new Error('Recursion detected while setting [' + prop + ']');
	            }

	            // Call each watcher for the current values
	            var oldValue = o.__propertyValues[prop][0];
	            newValue = o.__propertyValues[prop][1];
	            o.__watchers[prop].forEach(function(watcher) {
	              try {
	                watcher(o, prop, oldValue, newValue);
	              } catch (e) {
	                // Log an error and continue with subsequent watchers
	                console.error("Exception in object watcher for " + prop, e);
	              }
	            });

	            // Done processing this value
	            o.__propertyValues[prop].splice(0,1);
	          }
	        }
	      });

	    } // Done setting up the property for watching (first time)

	    // Add the watcher to the property
	    o.__watchers[prop].push(handler);

	    // Recurs if this is an object...
	    if (o[prop] && typeof(o[prop]) === 'object') {
	      util.watch(o[prop], null, handler, depth - 1);
	    }

	  }); // Done processing each property

	  // Return the original object - for chaining
	  return o;
	};

	/**
	 * <p>
	 * Set default configurations for a node.js module.
	 * </p>
	 *
	 * <p>
	 * This allows module developers to attach their configurations onto the
	 * default configuration object so they can be configured by the consumers
	 * of the module.
	 * </p>
	 *
	 * <p>Using the function within your module:</p>
	 * <pre>
	 *   var CONFIG = require("config");
	 *   CONFIG.util.setModuleDefaults("MyModule", {
	 *   &nbsp;&nbsp;templateName: "t-50",
	 *   &nbsp;&nbsp;colorScheme: "green"
	 *   });
	 * <br>
	 *   // Template name may be overridden by application config files
	 *   console.log("Template: " + CONFIG.MyModule.templateName);
	 * </pre>
	 *
	 * <p>
	 * The above example results in a "MyModule" element of the configuration
	 * object, containing an object with the specified default values.
	 * </p>
	 *
	 * @method setModuleDefaults
	 * @param moduleName {string} - Name of your module.
	 * @param defaultProperties {object} - The default module configuration.
	 * @return moduleConfig {object} - The module level configuration object.
	 */
	util.setModuleDefaults = function (moduleName, defaultProperties) {

	  // Copy the properties into a new object
	  var t = this,
	    moduleConfig = util.cloneDeep(defaultProperties);

	  // Set module defaults into the first sources element
	  if (configSources.length === 0 || configSources[0].name !== 'Module Defaults') {
	    configSources.splice(0, 0, {
	      name: 'Module Defaults',
	      parsed: {}
	    });
	  }
	  configSources[0].parsed[moduleName] = {};
	  util.extendDeep(configSources[0].parsed[moduleName], defaultProperties);

	  // Create a top level config for this module if it doesn't exist
	  t[moduleName] = t[moduleName] || {};

	  // Extend local configurations into the module config
	  util.extendDeep(moduleConfig, t[moduleName]);

	  // Merge the extended configs without replacing the original
	  util.extendDeep(t[moduleName], moduleConfig);

	  // reset the mutability check for "config.get" method.
	  // we are not making t[moduleName] immutable immediately,
	  // since there might be more modifications before the first config.get
	  if (!util.initParam('ALLOW_CONFIG_MUTATIONS', false)) {
	    checkMutability = true; 
	  }
	  
	  // Attach handlers & watchers onto the module config object
	  return util.attachProtoDeep(t[moduleName]);
	};

	/**
	 * <p>Make a configuration property hidden so it doesn't appear when enumerating
	 * elements of the object.</p>
	 *
	 * <p>
	 * The property still exists and can be read from and written to, but it won't
	 * show up in for ... in loops, Object.keys(), or JSON.stringify() type methods.
	 * </p>
	 *
	 * <p>
	 * If the property already exists, it will be made hidden.  Otherwise it will
	 * be created as a hidden property with the specified value.
	 * </p>
	 *
	 * <p><i>
	 * This method was built for hiding configuration values, but it can be applied
	 * to <u>any</u> javascript object.
	 * </i></p>
	 *
	 * <p>Example:</p>
	 * <pre>
	 *   var CONFIG = require('config');
	 *   ...
	 *
	 *   // Hide the Amazon S3 credentials
	 *   CONFIG.util.makeHidden(CONFIG.amazonS3, 'access_id');
	 *   CONFIG.util.makeHidden(CONFIG.amazonS3, 'secret_key');
	 * </pre>
	 *
	 * @method makeHidden
	 * @param object {object} - The object to make a hidden property into.
	 * @param property {string} - The name of the property to make hidden.
	 * @param value {mixed} - (optional) Set the property value to this (otherwise leave alone)
	 * @return object {object} - The original object is returned - for chaining.
	 */
	util.makeHidden = function(object, property, value) {

	  // If the new value isn't specified, just mark the property as hidden
	  if (typeof value === 'undefined') {
	    Object.defineProperty(object, property, {
	      enumerable : false
	    });
	  }
	  // Otherwise set the value and mark it as hidden
	  else {
	    Object.defineProperty(object, property, {
	      value      : value,
	      enumerable : false
	    });
	  }

	  return object;
	}

	/**
	 * <p>Make a javascript object property immutable (assuring it cannot be changed
	 * from the current value).</p>
	 * <p>
	 * If the specified property is an object, all attributes of that object are
	 * made immutable, including properties of contained objects, recursively.
	 * If a property name isn't supplied, all properties of the object are made
	 * immutable.
	 * </p>
	 * <p>
	 *
	 * </p>
	 * <p>
	 * New properties can be added to the object and those properties will not be
	 * immutable unless this method is called on those new properties.
	 * </p>
	 * <p>
	 * This operation cannot be undone.
	 * </p>
	 *
	 * <p>Example:</p>
	 * <pre>
	 *   var config = require('config');
	 *   var myObject = {hello:'world'};
	 *   config.util.makeImmutable(myObject);
	 * </pre>
	 *
	 * @method makeImmutable
	 * @param object {object} - The object to specify immutable properties for
	 * @param [property] {string | [string]} - The name of the property (or array of names) to make immutable.
	 *        If not provided, all owned properties of the object are made immutable.
	 * @param [value] {mixed | [mixed]} - Property value (or array of values) to set
	 *        the property to before making immutable. Only used when setting a single
	 *        property. Retained for backward compatibility.
	 * @return object {object} - The original object is returned - for chaining.
	 */
	util.makeImmutable = function(object, property, value) {
	  var properties = null;

	  // Backwards compatibility mode where property/value can be specified
	  if (typeof property === 'string') {
	    return Object.defineProperty(object, property, {
	      value : (typeof value === 'undefined') ? object[property] : value,
	      writable : false,
	      configurable: false
	    });
	  }

	  // Get the list of properties to work with
	  if (Array.isArray(property)) {
	    properties = property;
	  }
	  else {
	    properties = Object.keys(object);
	  }

	  // Process each property
	  for (var i = 0; i < properties.length; i++) {
	    var propertyName = properties[i],
	        value = object[propertyName];

	    Object.defineProperty(object, propertyName, {
	      value: value,
	      writable : false,
	      configurable: false
	    });

	    // Call recursively if an object.
	    if (util.isObject(value)) {
	      util.makeImmutable(value);
	    }
	  }

	  return object;
	};

	/**
	 * Return the sources for the configurations
	 *
	 * <p>
	 * All sources for configurations are stored in an array of objects containing
	 * the source name (usually the filename), the original source (as a string),
	 * and the parsed source as an object.
	 * </p>
	 *
	 * @method getConfigSources
	 * @return configSources {Array[Object]} - An array of objects containing
	 *    name, original, and parsed elements
	 */
	util.getConfigSources = function() {
	  var t = this;
	  return configSources.slice(0);
	};

	/**
	 * Load the individual file configurations.
	 *
	 * <p>
	 * This method builds a map of filename to the configuration object defined
	 * by the file.  The search order is:
	 * </p>
	 *
	 * <pre>
	 *   default.EXT
	 *   (deployment).EXT
	 *   (hostname).EXT
	 *   (hostname)-(deployment).EXT
	 *   local.EXT
	 *   local-(deployment).EXT
	 *   runtime.json
	 * </pre>
	 *
	 * <p>
	 * EXT can be yml, yaml, coffee, iced, json, cson or js signifying the file type.
	 * yaml (and yml) is in YAML format, coffee is a coffee-script, iced is iced-coffee-script,
	 * json is in JSON format, cson is in CSON format, properties is in .properties format
	 * (http://en.wikipedia.org/wiki/.properties), and js is a javascript executable file that is
	 * require()'d with module.exports being the config object.
	 * </p>
	 *
	 * <p>
	 * hostname is the $HOST environment variable (or --HOST command line parameter)
	 * if set, otherwise the $HOSTNAME environment variable (or --HOSTNAME command
	 * line parameter) if set, otherwise the hostname found from
	 * require('os').hostname().
	 * </p>
	 *
	 * <p>
	 * Once a hostname is found, everything from the first period ('.') onwards
	 * is removed. For example, abc.example.com becomes abc
	 * </p>
	 *
	 * <p>
	 * (deployment) is the deployment type, found in the $NODE_ENV environment
	 * variable or --NODE_ENV command line parameter.  Defaults to 'development'.
	 * </p>
	 *
	 * <p>
	 * The runtime.json file contains configuration changes made at runtime either
	 * manually, or by the application setting a configuration value.
	 * </p>
	 *
	 * <p>
	 * If the $NODE_APP_INSTANCE environment variable (or --NODE_APP_INSTANCE
	 * command line parameter) is set, then files with this appendage will be loaded.
	 * See the Multiple Application Instances section of the main documentaion page
	 * for more information.
	 * </p>
	 *
	 * @protected
	 * @method loadFileConfigs
	 * @return config {Object} The configuration object
	 */
	util.loadFileConfigs = function() {

	  // Initialize
	  var t = this,
	      config = {};

	  // Initialize parameters from command line, environment, or default
	  NODE_ENV = util.initParam('NODE_ENV', 'development');
	  CONFIG_DIR = util.initParam('NODE_CONFIG_DIR', Path.join( process.cwd(), 'config') );
	  if (CONFIG_DIR.indexOf('.') === 0) {
	    CONFIG_DIR = Path.join(process.cwd() , CONFIG_DIR);
	  }
	  APP_INSTANCE = util.initParam('NODE_APP_INSTANCE');
	  HOST = util.initParam('HOST');
	  HOSTNAME = util.initParam('HOSTNAME');

	  // This is for backward compatibility
	  RUNTIME_JSON_FILENAME = util.initParam('NODE_CONFIG_RUNTIME_JSON', Path.join(CONFIG_DIR , 'runtime.json') );

	  // Determine the host name from the OS module, $HOST, or $HOSTNAME
	  // Remove any . appendages, and default to null if not set
	  try {
	    var hostName = HOST || HOSTNAME;

	    // Store the hostname that won.
	    env.HOSTNAME = hostName;

	    if (!hostName) {
	        var OS = __webpack_require__(14);
	        hostName = OS.hostname();
	    }
	  } catch (e) {
	    hostName = '';
	  }

	  // Read each file in turn
	  var baseNames = ['default', NODE_ENV];

	  // #236: Also add full hostname when they are different.
	  if ( hostName ) {
	    var firstDomain = hostName.split('.')[0];

	    // Backward compatibility
	    baseNames.push(firstDomain, firstDomain + '-' + NODE_ENV);

	    // Add full hostname when it is not the same
	    if ( hostName != firstDomain ) {
	      baseNames.push(hostName, hostName + '-' + NODE_ENV);
	    }
	  }

	  baseNames.push('local', 'local-' + NODE_ENV);

	  var extNames = ['js', 'json', 'json5', 'hjson', 'toml', 'coffee', 'iced', 'yaml', 'yml', 'cson', 'properties'];
	  baseNames.forEach(function(baseName) {
	    extNames.forEach(function(extName) {

	      // Try merging the config object into this object
	      var fullFilename = Path.join(CONFIG_DIR , baseName + '.' + extName);
	      var configObj = util.parseFile(fullFilename);
	      if (configObj) {
	        util.extendDeep(config, configObj);
	      }

	      // See if the application instance file is available
	      if (APP_INSTANCE) {
	        fullFilename = Path.join(CONFIG_DIR, baseName + '-' + APP_INSTANCE + '.' + extName);
	        configObj = util.parseFile(fullFilename);
	        if (configObj) {
	          util.extendDeep(config, configObj);
	        }
	      }
	    });
	  });

	  // Override configurations from the $NODE_CONFIG environment variable
	  var envConfig = {};
	  if (process.env.NODE_CONFIG) {
	    try {
	      envConfig = JSON.parse(process.env.NODE_CONFIG);
	    } catch(e) {
	      console.error('The $NODE_CONFIG environment variable is malformed JSON');
	    }
	    util.extendDeep(config, envConfig);
	    configSources.push({
	      name: "$NODE_CONFIG",
	      parsed: envConfig,
	    });
	  }

	  // Override configurations from the --NODE_CONFIG command line
	  var cmdLineConfig = util.getCmdLineArg('NODE_CONFIG');
	  if (cmdLineConfig) {
	    try {
	      cmdLineConfig = JSON.parse(cmdLineConfig);
	    } catch(e) {
	      console.error('The --NODE_CONFIG={json} command line argument is malformed JSON');
	    }
	    util.extendDeep(config, cmdLineConfig);
	    configSources.push({
	      name: "--NODE_CONFIG argument",
	      parsed: cmdLineConfig,
	    });
	  }

	  // Override with environment variables if there is a custom-environment-variables.EXT mapping file
	  var customEnvVars = util.getCustomEnvVars(CONFIG_DIR, extNames);
	  util.extendDeep(config, customEnvVars);

	  // Place the mixed NODE_CONFIG into the environment
	  env['NODE_CONFIG'] = JSON.stringify(util.extendDeep(envConfig, cmdLineConfig, {}));

	  // Extend the original config with the contents of runtime.json (backwards compatibility)
	  var runtimeJson = util.parseFile(RUNTIME_JSON_FILENAME) || {};
	  util.extendDeep(config, runtimeJson);

	  util.resolveDeferredConfigs(config);

	  // Return the configuration object
	  return config;
	};

	// Using basic recursion pattern, find all the deferred values and resolve them.
	util.resolveDeferredConfigs = function (config) {
	    var completeConfig = config;

	    function _iterate (prop) {
	      for (var property in prop) {
	          if (prop.hasOwnProperty(property) && prop[property] != null) {
	              if (prop[property].constructor == Object) {
	                  _iterate(prop[property]);
	              } else if (prop[property].constructor == Array) {
	                  for (var i = 0; i < prop[property].length; i++) {
	                      _iterate(prop[property][i]);
	                  }
	              } else {
	                  if (prop[property] instanceof DeferredConfig ) {
	                    prop[property]= prop[property].resolve.call(completeConfig,completeConfig)
	                  }
	                  else {
	                    // Nothing to do. Keep the property how it is.
	                  }
	              }
	          }
	      }
	    }

	    _iterate(config);
	}

	/**
	 * Parse and return the specified configuration file.
	 *
	 * If the file exists in the application config directory, it will
	 * parse and return it as a JavaScript object.
	 *
	 * The file extension determines the parser to use.
	 *
	 * .js = File to run that has a module.exports containing the config object
	 * .coffee = File to run that has a module.exports with coffee-script containing the config object
	 * .iced = File to run that has a module.exports with iced-coffee-script containing the config object
	 * All other supported file types (yaml, toml, json, cson, hjson, json5, properties)
	 * are parsed with util.parseString.
	 *
	 * If the file doesn't exist, a null will be returned.  If the file can't be
	 * parsed, an exception will be thrown.
	 *
	 * This method performs synchronous file operations, and should not be called
	 * after synchronous module loading.
	 *
	 * @protected
	 * @method parseFile
	 * @param fullFilename {string} The full file path and name
	 * @return {configObject} The configuration object parsed from the file
	 */
	util.parseFile = function(fullFilename) {

	  // Initialize
	  var t = this,
	      extension = fullFilename.substr(fullFilename.lastIndexOf('.') + 1),
	      configObject = null,
	      fileContent = null;

	  // Return null if the file doesn't exist.
	  // Note that all methods here are the Sync versions.  This is appropriate during
	  // module loading (which is a synchronous operation), but not thereafter.
	  try {
	    var stat = FileSystem.statSync(fullFilename);
	    if (!stat || stat.size < 1) {
	      return null;
	    }
	  } catch (e1) {
	    return null
	  }

	  // Try loading the file.
	  try {
	    fileContent = FileSystem.readFileSync(fullFilename, 'UTF-8');
	    fileContent = fileContent.replace(/^\uFEFF/, '');
	  }
	  catch (e2) {
	    throw new Error('Config file ' + fullFilename + ' cannot be read');
	  }

	  // Parse the file based on extension
	  try {
	    if (extension === 'js') {
	      // Use the built-in parser for .js files
	      configObject = __webpack_require__(15)(fullFilename);
	    }
	    else if (extension === 'coffee') {
	      // .coffee files can be loaded with either coffee-script or iced-coffee-script.
	      // Prefer iced-coffee-script, if it exists.
	      // Lazy load the appropriate extension
	      if (!Coffee) {
	        Coffee = {};

	        // The following enables iced-coffee-script on .coffee files, if iced-coffee-script is available.
	        // This is commented as per a decision on a pull request.
	        //try {
	        //  Coffee = require("iced-coffee-script");
	        //}
	        //catch (e) {
	        //  Coffee = require("coffee-script");
	        //}

	        Coffee = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"coffee-script\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	        // coffee-script >= 1.7.0 requires explicit registration for require() to work
	        if (Coffee.register) {
	          Coffee.register();
	        }
	      }
	      // Use the built-in parser for .coffee files with coffee-script
	      configObject = __webpack_require__(15)(fullFilename);
	    }
	    else if (extension === 'iced') {
	      Iced = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"iced-coffee-script\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	      // coffee-script >= 1.7.0 requires explicit registration for require() to work
	      if (Iced.register) {
	        Iced.register();
	      }
	    }
	    else {
	      configObject = util.parseString(fileContent, extension);
	    }
	  }
	  catch (e3) {
	    throw new Error("Cannot parse config file: '" + fullFilename + "': " + e3);
	  }

	  // Keep track of this configuration sources, including empty ones
	  if (typeof configObject === 'object') {
	    configSources.push({
	      name: fullFilename,
	      original: fileContent,
	      parsed: configObject,
	    });
	  }

	  return configObject;
	};

	/**
	 * Parse and return the specied string with the specified format.
	 *
	 * The format determines the parser to use.
	 *
	 * json = File is parsed using JSON.parse()
	 * yaml (or yml) = Parsed with a YAML parser
	 * toml = Parsed with a TOML parser
	 * cson = Parsed with a CSON parser
	 * hjson = Parsed with a HJSON parser
	 * json5 = Parsed with a JSON5 parser
	 * properties = Parsed with the 'properties' node package
	 *
	 * If the file doesn't exist, a null will be returned.  If the file can't be
	 * parsed, an exception will be thrown.
	 *
	 * This method performs synchronous file operations, and should not be called
	 * after synchronous module loading.
	 *
	 * @protected
	 * @method parseString
	 * @param content {string} The full content
	 * @param format {string} The format to be parsed
	 * @return {configObject} The configuration object parsed from the string
	 */
	util.parseString = function (content, format) {
	  // Initialize
	  var configObject = null;

	  // Parse the file based on extension
	  if (format === 'yaml' || format === 'yml') {
	    if (!Yaml && !VisionmediaYaml) {
	      // Lazy loading
	      try {
	        // Try to load the better js-yaml module
	        Yaml = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"js-yaml\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	      }
	      catch (e) {
	        try {
	          // If it doesn't exist, load the fallback visionmedia yaml module.
	          VisionmediaYaml = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"yaml\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	        }
	        catch (e) { }
	      }
	    }

	    if (Yaml) {
	      configObject = Yaml.load(content);
	    }
	    else if (VisionmediaYaml) {
	      // The yaml library doesn't like strings that have newlines but don't
	      // end in a newline: https://github.com/visionmedia/js-yaml/issues/issue/13
	      content += '\n';
	      configObject = VisionmediaYaml.eval(util.stripYamlComments(content));
	    }
	    else {
	      console.error("No YAML parser loaded.  Suggest adding js-yaml dependency to your package.json file.")
	    }
	  }
	  else if (format === 'json') {
	    // Allow comments in JSON files
	    configObject = JSON.parse(util.stripComments(content));
	  }
	  else if (format === 'json5') {

	    if (!JSON5) {
	      JSON5 = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"json5\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    }

	    configObject = JSON5.parse(content);

	  } else if (format === 'hjson') {

	    if (!HJSON) {
	      HJSON = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"hjson\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    }

	    configObject = HJSON.parse(content);

	  } else if (format === 'toml') {

	    if(!TOML) {
	      TOML = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"toml\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    }

	    configObject = TOML.parse(content);
	  }
	  else if (format === 'cson') {
	    if (!CSON) {
	      CSON = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"cson\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    }
	    // Allow comments in CSON files
	    if (typeof CSON.parseSync === 'function') {
	      configObject = CSON.parseSync(util.stripComments(content));
	    } else {
	      configObject = CSON.parse(util.stripComments(content));
	    }
	  }
	  else if (format === 'properties') {
	    if (!PPARSER) {
	      PPARSER = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"properties\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    }
	    configObject = PPARSER.parse(content, { namespaces: true, variables: true, sections: true });
	  }

	  return configObject;
	};

	/**
	 * Attach the Config class prototype to all config objects recursively.
	 *
	 * <p>
	 * This allows you to do anything with CONFIG sub-objects as you can do with
	 * the top-level CONFIG object.  It's so you can do this:
	 * </p>
	 *
	 * <pre>
	 *   var CUST_CONFIG = require('config').Customer;
	 *   CUST_CONFIG.get(...)
	 * </pre>
	 *
	 * @protected
	 * @method attachProtoDeep
	 * @param toObject
	 * @param depth
	 * @return toObject
	 */
	util.attachProtoDeep = function(toObject, depth) {

	  // Recursion detection
	  var t = this;
	  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);
	  if (depth < 0) {
	    return toObject;
	  }

	  // Adding Config.prototype methods directly to toObject as hidden properties
	  // because adding to toObject.__proto__ exposes the function in toObject
	  for (var fnName in Config.prototype) {
	    if (!toObject[fnName]) {
	      util.makeHidden(toObject, fnName, Config.prototype[fnName]);
	    }
	  }

	  // Add prototypes to sub-objects
	  for (var prop in toObject) {
	    if (util.isObject(toObject[prop])) {
	      util.attachProtoDeep(toObject[prop], depth - 1);
	    }
	  }

	  // Return the original object
	  return toObject;
	};

	/**
	 * Return a deep copy of the specified object.
	 *
	 * This returns a new object with all elements copied from the specified
	 * object.  Deep copies are made of objects and arrays so you can do anything
	 * with the returned object without affecting the input object.
	 *
	 * @protected
	 * @method cloneDeep
	 * @param parent {object} The original object to copy from
	 * @param [depth=20] {Integer} Maximum depth (default 20)
	 * @return {object} A new object with the elements copied from the copyFrom object
	 *
	 * This method is copied from https://github.com/pvorb/node-clone/blob/17eea36140d61d97a9954c53417d0e04a00525d9/clone.js
	 *
	 * Copyright © 2011-2014 Paul Vorbach and contributors.
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the “Software”), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	 * of the Software, and to permit persons to whom the Software is furnished to do so,
	 * subject to the following conditions: The above copyright notice and this permission
	 * notice shall be included in all copies or substantial portions of the Software.
	 */
	util.cloneDeep = function cloneDeep(parent, depth, circular, prototype) {
	  // maintain two arrays for circular references, where corresponding parents
	  // and children have the same index
	  var allParents = [];
	  var allChildren = [];

	  var useBuffer = typeof Buffer != 'undefined';

	  if (typeof circular === 'undefined')
	    circular = true;

	  if (typeof depth === 'undefined')
	    depth = 20;

	  // recurse this function so we don't reset allParents and allChildren
	  function _clone(parent, depth) {
	    // cloning null always returns null
	    if (parent === null)
	      return null;

	    if (depth === 0)
	      return parent;

	    var child;
	    if (typeof parent != 'object') {
	      return parent;
	    }

	    if (Utils.isArray(parent)) {
	      child = [];
	    } else if (Utils.isRegExp(parent)) {
	      child = new RegExp(parent.source, util.getRegExpFlags(parent));
	      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
	    } else if (Utils.isDate(parent)) {
	      child = new Date(parent.getTime());
	    } else if (useBuffer && Buffer.isBuffer(parent)) {
	      child = new Buffer(parent.length);
	      parent.copy(child);
	      return child;
	    } else {
	      if (typeof prototype === 'undefined') child = Object.create(Object.getPrototypeOf(parent));
	      else child = Object.create(prototype);
	    }

	    if (circular) {
	      var index = allParents.indexOf(parent);

	      if (index != -1) {
	        return allChildren[index];
	      }
	      allParents.push(parent);
	      allChildren.push(child);
	    }

	    for (var i in parent) {
	      var propDescriptor  = Object.getOwnPropertyDescriptor(parent,i);
	      var hasGetter = ((propDescriptor !== undefined) && (propDescriptor.get !== undefined));

	      if (hasGetter){
	        Object.defineProperty(child,i,propDescriptor);
	      } else {
	        child[i] = _clone(parent[i], depth - 1);
	      }
	    }

	    return child;
	  }

	  return _clone(parent, depth);
	};

	/**
	 * Set objects given a path as a string list
	 *
	 * @protected
	 * @method setPath
	 * @param object {object} - Object to set the property on
	 * @param path {array[string]} - Array path to the property
	 * @param value {mixed} - value to set, ignoring null
	 */
	util.setPath = function (object, path, value) {
	  var nextKey = null;
	  if (value === null || path.length === 0) {
	    return;
	  }
	  else if (path.length === 1) { // no more keys to make, so set the value
	    object[path.shift()] = value;
	  }
	  else {
	    nextKey = path.shift();
	    if (!object.hasOwnProperty(nextKey)) {
	      object[nextKey] = {};
	    }
	    util.setPath(object[nextKey], path, value);
	  }
	};

	/**
	 * Create a new object patterned after substitutionMap, where:
	 * 1. Terminal string values in substitutionMap are used as keys
	 * 2. To look up values in a key-value store, variables
	 * 3. And parent keys are created as necessary to retain the structure of substitutionMap.
	 *
	 * @protected
	 * @method substituteDeep
	 * @param substitionMap {object} - an object whose terminal (non-subobject) values are strings
	 * @param variables {object[string:value]} - usually process.env, a flat object used to transform
	 *      terminal values in a copy of substititionMap.
	 * @returns {object} - deep copy of substitutionMap with only those paths whose terminal values
	 *      corresponded to a key in `variables`
	 */
	util.substituteDeep = function (substitutionMap, variables) {
	  var result = {};

	  function _substituteVars(map, vars, pathTo) {
	    for (var prop in map) {
	      var value = map[prop];
	      if (typeof(value) === 'string') { // We found a leaf variable name
	        if (vars[value]) { // if the vars provide a value set the value in the result map
	          util.setPath(result, pathTo.concat(prop), vars[value]);
	        }
	      }
	      else if (util.isObject(value)) { // work on the subtree, giving it a clone of the pathTo
	        if('__name' in value && '__format' in value && vars[value.__name]) {
	          var parsedValue = util.parseString(vars[value.__name], value.__format);
	          util.setPath(result, pathTo.concat(prop), parsedValue);
	        } else {
	          _substituteVars(value, vars, pathTo.concat(prop));
	        }
	      }
	      else {
	        msg = "Illegal key type for substitution map at " + pathTo.join('.') + ': ' + typeof(value);
	        throw Error(msg);
	      }
	    }
	  }

	  _substituteVars(substitutionMap, variables, []);
	  return result;

	};

	/* Map environment variables into the configuration if a mapping file,
	 * `custom-environment-variables.EXT` exists.
	 *
	 * @protected
	 * @method getCustomEnvVars
	 * @param CONFIG_DIR {string} - the passsed configuration directory
	 * @param extNames {Array[string]} - acceptable configuration file extension names.
	 * @returns {object} - mapped environment variables or {} if there are none
	 */
	util.getCustomEnvVars = function (CONFIG_DIR, extNames) {
	  var result = {};
	  extNames.forEach(function (extName) {
	    var fullFilename = Path.join(CONFIG_DIR , 'custom-environment-variables' + '.' + extName);
	    var configObj = util.parseFile(fullFilename);
	    if (configObj) {
	      var environmentSubstitutions = util.substituteDeep(configObj, process.env);
	      util.extendDeep(result, environmentSubstitutions);
	    }
	  });
	  return result;
	};

	/**
	 * Return true if two objects have equal contents.
	 *
	 * @protected
	 * @method equalsDeep
	 * @param object1 {object} The object to compare from
	 * @param object2 {object} The object to compare with
	 * @param depth {integer} An optional depth to prevent recursion.  Default: 20.
	 * @return {boolean} True if both objects have equivalent contents
	 */
	util.equalsDeep = function(object1, object2, depth) {

	  // Recursion detection
	  var t = this;
	  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);
	  if (depth < 0) {
	    return {};
	  }

	  // Fast comparisons
	  if (!object1 || !object2) {
	    return false;
	  }
	  if (object1 === object2) {
	    return true;
	  }
	  if (typeof(object1) != 'object' || typeof(object2) != 'object') {
	    return false;
	  }

	  // They must have the same keys.  If their length isn't the same
	  // then they're not equal.  If the keys aren't the same, the value
	  // comparisons will fail.
	  if (Object.keys(object1).length != Object.keys(object2).length) {
	    return false;
	  }

	  // Compare the values
	  for (var prop in object1) {

	    // Call recursively if an object or array
	    if (object1[prop] && typeof(object1[prop]) === 'object') {
	      if (!util.equalsDeep(object1[prop], object2[prop], depth - 1)) {
	        return false;
	      }
	    }
	    else {
	      if (object1[prop] !== object2[prop]) {
	        return false;
	      }
	    }
	  }

	  // Test passed.
	  return true;
	};

	/**
	 * Returns an object containing all elements that differ between two objects.
	 * <p>
	 * This method was designed to be used to create the runtime.json file
	 * contents, but can be used to get the diffs between any two Javascript objects.
	 * </p>
	 * <p>
	 * It works best when object2 originated by deep copying object1, then
	 * changes were made to object2, and you want an object that would give you
	 * the changes made to object1 which resulted in object2.
	 * </p>
	 *
	 * @protected
	 * @method diffDeep
	 * @param object1 {object} The base object to compare to
	 * @param object2 {object} The object to compare with
	 * @param depth {integer} An optional depth to prevent recursion.  Default: 20.
	 * @return {object} A differential object, which if extended onto object1 would
	 *                  result in object2.
	 */
	util.diffDeep = function(object1, object2, depth) {

	  // Recursion detection
	  var t = this, diff = {};
	  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);
	  if (depth < 0) {
	    return {};
	  }

	  // Process each element from object2, adding any element that's different
	  // from object 1.
	  for (var parm in object2) {
	    var value1 = object1[parm];
	    var value2 = object2[parm];
	    if (value1 && value2 && util.isObject(value2)) {
	      if (!(util.equalsDeep(value1, value2))) {
	        diff[parm] = util.diffDeep(value1, value2, depth - 1);
	      }
	    }
	    else if (Array.isArray(value1) && Array.isArray(value2)) {
	      if(!util.equalsDeep(value1, value2)) {
	        diff[parm] = value2;
	      }
	    }
	    else if (value1 !== value2){
	      diff[parm] = value2;
	    }
	  }

	  // Return the diff object
	  return diff;

	};

	/**
	 * Extend an object, and any object it contains.
	 *
	 * This does not replace deep objects, but dives into them
	 * replacing individual elements instead.
	 *
	 * @protected
	 * @method extendDeep
	 * @param mergeInto {object} The object to merge into
	 * @param mergeFrom... {object...} - Any number of objects to merge from
	 * @param depth {integer} An optional depth to prevent recursion.  Default: 20.
	 * @return {object} The altered mergeInto object is returned
	 */
	util.extendDeep = function(mergeInto) {

	  // Initialize
	  var t = this;
	  var vargs = Array.prototype.slice.call(arguments, 1);
	  var depth = vargs.pop();
	  if (typeof(depth) != 'number') {
	    vargs.push(depth);
	    depth = DEFAULT_CLONE_DEPTH;
	  }

	  // Recursion detection
	  if (depth < 0) {
	    return mergeInto;
	  }

	  // Cycle through each object to extend
	  vargs.forEach(function(mergeFrom) {

	    // Cycle through each element of the object to merge from
	    for (var prop in mergeFrom) {

	      // Extend recursively if both elements are objects and target is not really a deferred function
	      var isDeferredFunc = mergeInto[prop] instanceof DeferredConfig;
	      if (mergeFrom[prop] instanceof Date) {
	        mergeInto[prop] = mergeFrom[prop];
	      } else if (util.isObject(mergeInto[prop]) && util.isObject(mergeFrom[prop]) && !isDeferredFunc) {
	        util.extendDeep(mergeInto[prop], mergeFrom[prop], depth - 1);
	      }

	      // Copy recursively if the mergeFrom element is an object (or array or fn)
	      else if (mergeFrom[prop] && typeof mergeFrom[prop] === 'object') {
	        mergeInto[prop] = util.cloneDeep(mergeFrom[prop], depth -1);
	      }

	      // Copy getter if the property on original object is an accessor
	      else if (mergeFrom.__lookupGetter__(prop)) {
	        mergeInto.__defineGetter__(prop, mergeFrom.__lookupGetter__(prop));
	      }

	      // Simple assignment otherwise
	      else {
	        mergeInto[prop] = mergeFrom[prop];
	      }
	    }
	  });

	  // Chain
	  return mergeInto;

	};

	/**
	 * Strip YAML comments from the string
	 *
	 * The 2.0 yaml parser doesn't allow comment-only or blank lines.  Strip them.
	 *
	 * @protected
	 * @method stripYamlComments
	 * @param fileString {string} The string to strip comments from
	 * @return {string} The string with comments stripped.
	 */
	util.stripYamlComments = function(fileStr) {
	  // First replace removes comment-only lines
	  // Second replace removes blank lines
	  return fileStr.replace(/^\s*#.*/mg,'').replace(/^\s*[\n|\r]+/mg,'');
	}

	/**
	 * Strip all Javascript type comments from the string.
	 *
	 * The string is usually a file loaded from the O/S, containing
	 * newlines and javascript type comments.
	 *
	 * Thanks to James Padolsey, and all who conributed to this implementation.
	 * http://james.padolsey.com/javascript/javascript-comment-removal-revisted/
	 *
	 * @protected
	 * @method stripComments
	 * @param fileString {string} The string to strip comments from
	 * @return {string} The string with comments stripped.
	 */
	util.stripComments = function(fileStr) {

	  var uid = '_' + +new Date(),
	      primitives = [],
	      primIndex = 0;

	  return (
	    fileStr

	    /* Remove strings */
	    .replace(/(['"])(\\\1|.)+?\1/g, function(match){
	      primitives[primIndex] = match;
	      return (uid + '') + primIndex++;
	    })

	    /* Remove Regexes */
	    .replace(/([^\/])(\/(?!\*|\/)(\\\/|.)+?\/[gim]{0,3})/g, function(match, $1, $2){
	      primitives[primIndex] = $2;
	      return $1 + (uid + '') + primIndex++;
	    })

	    /*
	    - Remove single-line comments that contain would-be multi-line delimiters
	        E.g. // Comment /* <--
	    - Remove multi-line comments that contain would be single-line delimiters
	        E.g. /* // <--
	   */
	    .replace(/\/\/.*?\/?\*.+?(?=\n|\r|$)|\/\*[\s\S]*?\/\/[\s\S]*?\*\//g, '')

	    /*
	    Remove single and multi-line comments,
	    no consideration of inner-contents
	   */
	    .replace(/\/\/.+?(?=\n|\r|$)|\/\*[\s\S]+?\*\//g, '')

	    /*
	    Remove multi-line comments that have a replaced ending (string/regex)
	    Greedy, so no inner strings/regexes will stop it.
	   */
	    .replace(RegExp('\\/\\*[\\s\\S]+' + uid + '\\d+', 'g'), '')

	    /* Bring back strings & regexes */
	    .replace(RegExp(uid + '(\\d+)', 'g'), function(match, n){
	      return primitives[n];
	    })
	  );

	};

	/**
	 * Is the specified argument a regular javascript object?
	 *
	 * The argument is an object if it's a JS object, but not an array.
	 *
	 * @protected
	 * @method isObject
	 * @param arg {MIXED} An argument of any type.
	 * @return {boolean} TRUE if the arg is an object, FALSE if not
	 */
	util.isObject = function(obj) {
	  return (obj !== null) && (typeof obj === 'object') && !(Array.isArray(obj));
	};

	/**
	 * <p>Initialize a parameter from the command line or process environment</p>
	 *
	 * <p>
	 * This method looks for the parameter from the command line in the format
	 * --PARAMETER=VALUE, then from the process environment, then from the
	 * default specified as an argument.
	 * </p>
	 *
	 * @method initParam
	 * @param paramName {String} Name of the parameter
	 * @param [defaultValue] {Any} Default value of the parameter
	 * @return {Any} The found value, or default value
	 */
	util.initParam = function (paramName, defaultValue) {
	  var t = this;

	  // Record and return the value
	  var value = util.getCmdLineArg(paramName) || process.env[paramName] || defaultValue;
	  env[paramName] = value;
	  return value;
	}

	/**
	 * <p>Get Command Line Arguments</p>
	 *
	 * <p>
	 * This method allows you to retrieve the value of the specified command line argument.
	 * </p>
	 *
	 * <p>
	 * The argument is case sensitive, and must be of the form '--ARG_NAME=value'
	 * </p>
	 *
	 * @method getCmdLineArg
	 * @param searchFor {STRING} The argument name to search for
	 * @return {MIXED} FALSE if the argument was not found, the argument value if found
	 */
	util.getCmdLineArg = function (searchFor) {
	    var cmdLineArgs = process.argv.slice(2, process.argv.length),
	        argName = '--' + searchFor + '=';

	    for (var argvIt = 0; argvIt < cmdLineArgs.length; argvIt++) {
	      if (cmdLineArgs[argvIt].indexOf(argName) === 0) {
	        return cmdLineArgs[argvIt].substr(argName.length);
	      }
	    }

	    return false;
	}

	/**
	 * <p>Get a Config Environment Variable Value</p>
	 *
	 * <p>
	 * This method returns the value of the specified config environment variable,
	 * including any defaults or overrides.
	 * </p>
	 *
	 * @method getEnv
	 * @param varName {STRING} The environment variable name
	 * @return value {String} The value of the environment variable
	 */
	util.getEnv = function (varName) {
	  return env[varName];
	}



	/**
	 * Returns a string of flags for regular expression `re`.
	 *
	 * @param {RegExp} re Regular expression
	 * @returns {string} Flags
	 */
	util.getRegExpFlags = function (re) {
	  var flags = '';
	  re.global && (flags += 'g');
	  re.ignoreCase && (flags += 'i');
	  re.multiline && (flags += 'm');
	  return flags;
	};

	// Run strictness checks on NODE_ENV and NODE_APP_INSTANCE and throw an error if there's a problem.
	util.runStrictnessChecks = function (config) {
	  var sources = config.util.getConfigSources();

	  var sourceFilenames = sources.map(function (src) {
	    return Path.basename(src.name);
	  });


	  // Throw an exception if there's no explicit config file for NODE_ENV
	  var anyFilesMatchEnv = sourceFilenames.some(function (filename) {
	      return filename.match(NODE_ENV);
	  });
	  // devleopment is special-cased because it's the default value
	  if (NODE_ENV && (NODE_ENV !== 'development') && !anyFilesMatchEnv) {
	    _warnOrThrow("NODE_ENV value of '"+NODE_ENV+"' did not match any deployment config file names.");
	  }

	  // Throw an exception if there's no explict config file for NODE_APP_INSTANCE
	  var anyFilesMatchInstance = sourceFilenames.some(function (filename) {
	      return filename.match(APP_INSTANCE);
	  });
	  if (APP_INSTANCE && !anyFilesMatchInstance) {
	    _warnOrThrow("NODE_APP_INSTANCE value of '"+APP_INSTANCE+"' did not match any instance config file names.");
	  }

	  // Throw if NODE_ENV matches' default' or 'local'
	  if ((NODE_ENV === 'default') || (NODE_ENV === 'local')) {
	    _warnOrThrow("NODE_ENV value of '"+NODE_ENV+"' is ambiguous.");
	  }

	  function _warnOrThrow (msg) {
	    var beStrict = process.env.NODE_CONFIG_STRICT_MODE;
	    var prefix = beStrict ? 'FATAL: ' : 'WARNING: ';
	    var seeURL = 'See https://github.com/lorenwest/node-config/wiki/Strict-Mode';

	    console.error(prefix+msg);
	    console.error(prefix+seeURL);

	    if (beStrict) {
	      throw new Error(prefix+msg+' '+seeURL);
	    }
	  }
	}

	// Process pre-1.0 utility names
	var utilWarnings = {};
	['watch', 'setModuleDefaults', 'makeHidden', 'makeImmutable', 'getConfigSources', '_loadFileConfigs',
	 '_parseFile', '_attachProtoDeep', '_cloneDeep', '_equalsDeep', '_diffDeep', '_extendDeep', '_stripYamlComments',
	 '_stripComments', '_isObject', '_initParam', '_getCmdLineArg'].forEach(function(oldName) {

	  // Config.util names don't have underscores
	  var newName = oldName;
	  if (oldName.indexOf('_') === 0) {
	    newName = oldName.substr(1);
	  }

	  // Build the wrapper with warning
	  Config.prototype[oldName] = function(){

	    // Produce the warning
	    if (!utilWarnings[oldName]) {
	      console.error('WARNING: config.' + oldName + '() is deprecated.  Use config.util.' + newName + '() instead.');
	      console.error('WARNING: See https://github.com/lorenwest/node-config/wiki/Future-Compatibility#upcoming-incompatibilities');
	      utilWarnings[oldName] = true;
	    }

	    // Forward the call
	    return util[newName].apply(this, arguments);
	  }
	});



	// Instantiate and export the configuration
	var config = module.exports = new Config();

	// Produce warnings if the configuration is empty
	var showWarnings = !(util.initParam('SUPPRESS_NO_CONFIG_WARNING'));
	if (showWarnings && Object.keys(config).length === 0) {
	  console.error('WARNING: No configurations found in configuration directory:');
	  console.error('WARNING: ' + CONFIG_DIR);
	  console.error('WARNING: See https://www.npmjs.org/package/config for more information.');
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(5).Buffer))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	var base64 = __webpack_require__(6)
	var ieee754 = __webpack_require__(7)
	var isArray = __webpack_require__(8)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : (function () {
	      function Bar () {}
	      try {
	        var arr = new Uint8Array(1)
	        arr.foo = function () { return 42 }
	        arr.constructor = Bar
	        return arr.foo() === 42 && // typed array instances can be augmented
	            arr.constructor === Bar && // constructor can be set
	            typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	            arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	      } catch (e) {
	        return false
	      }
	    })()

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 7 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 9 */
/***/ function(module, exports) {

	// Create a deferredConfig prototype so that we can check for it when reviewing the configs later.
	function DeferredConfig () {
	}
	DeferredConfig.prototype.resolve = function (config) {};

	// Accept a function that we'll use to resolve this value later and return a 'deferred' configuration value to resolve it later.
	function deferConfig (func) {
	  var obj = Object.create(DeferredConfig.prototype);
	  obj.resolve = func;
	  return obj;
	}

	module.exports.deferConfig = deferConfig;
	module.exports.DeferredConfig = DeferredConfig;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(11);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(12);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 12 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	exports.endianness = function () { return 'LE' };

	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};

	exports.loadavg = function () { return [] };

	exports.uptime = function () { return 0 };

	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};

	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};

	exports.cpus = function () { return [] };

	exports.type = function () { return 'Browser' };

	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};

	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };

	exports.arch = function () { return 'javascript' };

	exports.platform = function () { return 'browser' };

	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};

	exports.EOL = '\n';


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./config": 3,
		"./config.js": 3
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 15;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(17);


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var http = __webpack_require__(18);
	var read = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).readFileSync;
	var parse = __webpack_require__(41).parse;
	var engine = __webpack_require__(47);
	var client = __webpack_require__(88);
	var clientVersion = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"socket.io-client/package\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;
	var Client = __webpack_require__(138);
	var Namespace = __webpack_require__(149);
	var Adapter = __webpack_require__(153);
	var debug = __webpack_require__(146)('socket.io:server');
	var url = __webpack_require__(41);

	/**
	 * Module exports.
	 */

	module.exports = Server;

	/**
	 * Socket.IO client source.
	 */

	var clientSource = read(/*require.resolve*/(163), 'utf-8');

	/**
	 * Server constructor.
	 *
	 * @param {http.Server|Number|Object} http server, port or options
	 * @param {Object} options
	 * @api public
	 */

	function Server(srv, opts){
	  if (!(this instanceof Server)) return new Server(srv, opts);
	  if ('object' == typeof srv && !srv.listen) {
	    opts = srv;
	    srv = null;
	  }
	  opts = opts || {};
	  this.nsps = {};
	  this.path(opts.path || '/socket.io');
	  this.serveClient(false !== opts.serveClient);
	  this.adapter(opts.adapter || Adapter);
	  this.origins(opts.origins || '*:*');
	  this.sockets = this.of('/');
	  if (srv) this.attach(srv, opts);
	}

	/**
	 * Server request verification function, that checks for allowed origins
	 *
	 * @param {http.IncomingMessage} request
	 * @param {Function} callback to be called with the result: `fn(err, success)`
	 */

	Server.prototype.checkRequest = function(req, fn) {
	  var origin = req.headers.origin || req.headers.referer;

	  // file:// URLs produce a null Origin which can't be authorized via echo-back
	  if ('null' == origin || null == origin) origin = '*';

	  if (!!origin && typeof(this._origins) == 'function') return this._origins(origin, fn);
	  if (this._origins.indexOf('*:*') !== -1) return fn(null, true);
	  if (origin) {
	    try {
	      var parts = url.parse(origin);
	      parts.port = parts.port || 80;
	      var ok =
	        ~this._origins.indexOf(parts.hostname + ':' + parts.port) ||
	        ~this._origins.indexOf(parts.hostname + ':*') ||
	        ~this._origins.indexOf('*:' + parts.port);
	      return fn(null, !!ok);
	    } catch (ex) {
	    }
	  }
	  fn(null, false);
	};

	/**
	 * Sets/gets whether client code is being served.
	 *
	 * @param {Boolean} whether to serve client code
	 * @return {Server|Boolean} self when setting or value when getting
	 * @api public
	 */

	Server.prototype.serveClient = function(v){
	  if (!arguments.length) return this._serveClient;
	  this._serveClient = v;
	  return this;
	};

	/**
	 * Old settings for backwards compatibility
	 */

	var oldSettings = {
	  "transports": "transports",
	  "heartbeat timeout": "pingTimeout",
	  "heartbeat interval": "pingInterval",
	  "destroy buffer size": "maxHttpBufferSize"
	};

	/**
	 * Backwards compatiblity.
	 *
	 * @api public
	 */

	Server.prototype.set = function(key, val){
	  if ('authorization' == key && val) {
	    this.use(function(socket, next) {
	      val(socket.request, function(err, authorized) {
	        if (err) return next(new Error(err));
	        if (!authorized) return next(new Error('Not authorized'));
	        next();
	      });
	    });
	  } else if ('origins' == key && val) {
	    this.origins(val);
	  } else if ('resource' == key) {
	    this.path(val);
	  } else if (oldSettings[key] && this.eio[oldSettings[key]]) {
	    this.eio[oldSettings[key]] = val;
	  } else {
	    console.error('Option %s is not valid. Please refer to the README.', key);
	  }

	  return this;
	};

	/**
	 * Sets the client serving path.
	 *
	 * @param {String} pathname
	 * @return {Server|String} self when setting or value when getting
	 * @api public
	 */

	Server.prototype.path = function(v){
	  if (!arguments.length) return this._path;
	  this._path = v.replace(/\/$/, '');
	  return this;
	};

	/**
	 * Sets the adapter for rooms.
	 *
	 * @param {Adapter} pathname
	 * @return {Server|Adapter} self when setting or value when getting
	 * @api public
	 */

	Server.prototype.adapter = function(v){
	  if (!arguments.length) return this._adapter;
	  this._adapter = v;
	  for (var i in this.nsps) {
	    if (this.nsps.hasOwnProperty(i)) {
	      this.nsps[i].initAdapter();
	    }
	  }
	  return this;
	};

	/**
	 * Sets the allowed origins for requests.
	 *
	 * @param {String} origins
	 * @return {Server|Adapter} self when setting or value when getting
	 * @api public
	 */

	Server.prototype.origins = function(v){
	  if (!arguments.length) return this._origins;

	  this._origins = v;
	  return this;
	};

	/**
	 * Attaches socket.io to a server or port.
	 *
	 * @param {http.Server|Number} server or port
	 * @param {Object} options passed to engine.io
	 * @return {Server} self
	 * @api public
	 */

	Server.prototype.listen =
	Server.prototype.attach = function(srv, opts){
	  if ('function' == typeof srv) {
	    var msg = 'You are trying to attach socket.io to an express ' +
	    'request handler function. Please pass a http.Server instance.';
	    throw new Error(msg);
	  }

	  // handle a port as a string
	  if (Number(srv) == srv) {
	    srv = Number(srv);
	  }

	  if ('number' == typeof srv) {
	    debug('creating http server and binding to %d', srv);
	    var port = srv;
	    srv = http.Server(function(req, res){
	      res.writeHead(404);
	      res.end();
	    });
	    srv.listen(port);

	  }

	  // set engine.io path to `/socket.io`
	  opts = opts || {};
	  opts.path = opts.path || this.path();
	  // set origins verification
	  opts.allowRequest = this.checkRequest.bind(this);

	  // initialize engine
	  debug('creating engine.io instance with opts %j', opts);
	  this.eio = engine.attach(srv, opts);

	  // attach static file serving
	  if (this._serveClient) this.attachServe(srv);

	  // Export http server
	  this.httpServer = srv;

	  // bind to engine events
	  this.bind(this.eio);

	  return this;
	};

	/**
	 * Attaches the static file serving.
	 *
	 * @param {Function|http.Server} http server
	 * @api private
	 */

	Server.prototype.attachServe = function(srv){
	  debug('attaching client serving req handler');
	  var url = this._path + '/socket.io.js';
	  var evs = srv.listeners('request').slice(0);
	  var self = this;
	  srv.removeAllListeners('request');
	  srv.on('request', function(req, res) {
	    if (0 == req.url.indexOf(url)) {
	      self.serve(req, res);
	    } else {
	      for (var i = 0; i < evs.length; i++) {
	        evs[i].call(srv, req, res);
	      }
	    }
	  });
	};

	/**
	 * Handles a request serving `/socket.io.js`
	 *
	 * @param {http.Request} req
	 * @param {http.Response} res
	 * @api private
	 */

	Server.prototype.serve = function(req, res){
	  var etag = req.headers['if-none-match'];
	  if (etag) {
	    if (clientVersion == etag) {
	      debug('serve client 304');
	      res.writeHead(304);
	      res.end();
	      return;
	    }
	  }

	  debug('serve client source');
	  res.setHeader('Content-Type', 'application/javascript');
	  res.setHeader('ETag', clientVersion);
	  res.writeHead(200);
	  res.end(clientSource);
	};

	/**
	 * Binds socket.io to an engine.io instance.
	 *
	 * @param {engine.Server} engine.io (or compatible) server
	 * @return {Server} self
	 * @api public
	 */

	Server.prototype.bind = function(engine){
	  this.engine = engine;
	  this.engine.on('connection', this.onconnection.bind(this));
	  return this;
	};

	/**
	 * Called with each incoming transport connection.
	 *
	 * @param {engine.Socket} socket
	 * @return {Server} self
	 * @api public
	 */

	Server.prototype.onconnection = function(conn){
	  debug('incoming connection with id %s', conn.id);
	  var client = new Client(this, conn);
	  client.connect('/');
	  return this;
	};

	/**
	 * Looks up a namespace.
	 *
	 * @param {String} nsp name
	 * @param {Function} optional, nsp `connection` ev handler
	 * @api public
	 */

	Server.prototype.of = function(name, fn){
	  if (String(name)[0] !== '/') name = '/' + name;
	  
	  if (!this.nsps[name]) {
	    debug('initializing namespace %s', name);
	    var nsp = new Namespace(this, name);
	    this.nsps[name] = nsp;
	  }
	  if (fn) this.nsps[name].on('connect', fn);
	  return this.nsps[name];
	};

	/**
	 * Closes server connection
	 *
	 * @api public
	 */

	Server.prototype.close = function(){
	  this.nsps['/'].sockets.forEach(function(socket){
	    socket.onclose();
	  });

	  this.engine.close();

	  if(this.httpServer){
	    this.httpServer.close();
	  }
	};

	/**
	 * Expose main namespace (/).
	 */

	['on', 'to', 'in', 'use', 'emit', 'send', 'write'].forEach(function(fn){
	  Server.prototype[fn] = function(){
	    var nsp = this.sockets[fn];
	    return nsp.apply(this.sockets, arguments);
	  };
	});

	Namespace.flags.forEach(function(flag){
	  Server.prototype.__defineGetter__(flag, function(name){
	    this.flags.push(name);
	    return this;
	  });
	});

	/**
	 * BC with `io.listen`
	 */

	Server.listen = Server;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var http = module.exports;
	var EventEmitter = __webpack_require__(19).EventEmitter;
	var Request = __webpack_require__(20);
	var url = __webpack_require__(41)

	http.request = function (params, cb) {
	    if (typeof params === 'string') {
	        params = url.parse(params)
	    }
	    if (!params) params = {};
	    if (!params.host && !params.port) {
	        params.port = parseInt(window.location.port, 10);
	    }
	    if (!params.host && params.hostname) {
	        params.host = params.hostname;
	    }

	    if (!params.protocol) {
	        if (params.scheme) {
	            params.protocol = params.scheme + ':';
	        } else {
	            params.protocol = window.location.protocol;
	        }
	    }

	    if (!params.host) {
	        params.host = window.location.hostname || window.location.host;
	    }
	    if (/:/.test(params.host)) {
	        if (!params.port) {
	            params.port = params.host.split(':')[1];
	        }
	        params.host = params.host.split(':')[0];
	    }
	    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
	    
	    var req = new Request(new xhrHttp, params);
	    if (cb) req.on('response', cb);
	    return req;
	};

	http.get = function (params, cb) {
	    params.method = 'GET';
	    var req = http.request(params, cb);
	    req.end();
	    return req;
	};

	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;

	var xhrHttp = (function () {
	    if (typeof window === 'undefined') {
	        throw new Error('no window object present');
	    }
	    else if (window.XMLHttpRequest) {
	        return window.XMLHttpRequest;
	    }
	    else if (window.ActiveXObject) {
	        var axs = [
	            'Msxml2.XMLHTTP.6.0',
	            'Msxml2.XMLHTTP.3.0',
	            'Microsoft.XMLHTTP'
	        ];
	        for (var i = 0; i < axs.length; i++) {
	            try {
	                var ax = new(window.ActiveXObject)(axs[i]);
	                return function () {
	                    if (ax) {
	                        var ax_ = ax;
	                        ax = null;
	                        return ax_;
	                    }
	                    else {
	                        return new(window.ActiveXObject)(axs[i]);
	                    }
	                };
	            }
	            catch (e) {}
	        }
	        throw new Error('ajax not supported in this browser')
	    }
	    else {
	        throw new Error('ajax not supported in this browser');
	    }
	})();

	http.STATUS_CODES = {
	    100 : 'Continue',
	    101 : 'Switching Protocols',
	    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
	    200 : 'OK',
	    201 : 'Created',
	    202 : 'Accepted',
	    203 : 'Non-Authoritative Information',
	    204 : 'No Content',
	    205 : 'Reset Content',
	    206 : 'Partial Content',
	    207 : 'Multi-Status',               // RFC 4918
	    300 : 'Multiple Choices',
	    301 : 'Moved Permanently',
	    302 : 'Moved Temporarily',
	    303 : 'See Other',
	    304 : 'Not Modified',
	    305 : 'Use Proxy',
	    307 : 'Temporary Redirect',
	    400 : 'Bad Request',
	    401 : 'Unauthorized',
	    402 : 'Payment Required',
	    403 : 'Forbidden',
	    404 : 'Not Found',
	    405 : 'Method Not Allowed',
	    406 : 'Not Acceptable',
	    407 : 'Proxy Authentication Required',
	    408 : 'Request Time-out',
	    409 : 'Conflict',
	    410 : 'Gone',
	    411 : 'Length Required',
	    412 : 'Precondition Failed',
	    413 : 'Request Entity Too Large',
	    414 : 'Request-URI Too Large',
	    415 : 'Unsupported Media Type',
	    416 : 'Requested Range Not Satisfiable',
	    417 : 'Expectation Failed',
	    418 : 'I\'m a teapot',              // RFC 2324
	    422 : 'Unprocessable Entity',       // RFC 4918
	    423 : 'Locked',                     // RFC 4918
	    424 : 'Failed Dependency',          // RFC 4918
	    425 : 'Unordered Collection',       // RFC 4918
	    426 : 'Upgrade Required',           // RFC 2817
	    428 : 'Precondition Required',      // RFC 6585
	    429 : 'Too Many Requests',          // RFC 6585
	    431 : 'Request Header Fields Too Large',// RFC 6585
	    500 : 'Internal Server Error',
	    501 : 'Not Implemented',
	    502 : 'Bad Gateway',
	    503 : 'Service Unavailable',
	    504 : 'Gateway Time-out',
	    505 : 'HTTP Version Not Supported',
	    506 : 'Variant Also Negotiates',    // RFC 2295
	    507 : 'Insufficient Storage',       // RFC 4918
	    509 : 'Bandwidth Limit Exceeded',
	    510 : 'Not Extended',               // RFC 2774
	    511 : 'Network Authentication Required' // RFC 6585
	};

/***/ },
/* 19 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(21);
	var Response = __webpack_require__(38);
	var Base64 = __webpack_require__(39);
	var inherits = __webpack_require__(40);

	var Request = module.exports = function (xhr, params) {
	    var self = this;
	    self.writable = true;
	    self.xhr = xhr;
	    self.body = [];
	    
	    self.uri = (params.protocol || 'http:') + '//'
	        + params.host
	        + (params.port ? ':' + params.port : '')
	        + (params.path || '/')
	    ;
	    
	    if (typeof params.withCredentials === 'undefined') {
	        params.withCredentials = true;
	    }

	    try { xhr.withCredentials = params.withCredentials }
	    catch (e) {}
	    
	    if (params.responseType) try { xhr.responseType = params.responseType }
	    catch (e) {}
	    
	    xhr.open(
	        params.method || 'GET',
	        self.uri,
	        true
	    );

	    xhr.onerror = function(event) {
	        self.emit('error', new Error('Network error'));
	    };

	    self._headers = {};
	    
	    if (params.headers) {
	        var keys = objectKeys(params.headers);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	        }
	    }
	    
	    if (params.auth) {
	        //basic auth
	        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
	    }

	    var res = new Response;
	    res.on('close', function () {
	        self.emit('close');
	    });
	    
	    res.on('ready', function () {
	        self.emit('response', res);
	    });

	    res.on('error', function (err) {
	        self.emit('error', err);
	    });
	    
	    xhr.onreadystatechange = function () {
	        // Fix for IE9 bug
	        // SCRIPT575: Could not complete the operation due to error c00c023f
	        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	        if (xhr.__aborted) return;
	        res.handle(xhr);
	    };
	};

	inherits(Request, Stream);

	Request.prototype.setHeader = function (key, value) {
	    this._headers[key.toLowerCase()] = value
	};

	Request.prototype.getHeader = function (key) {
	    return this._headers[key.toLowerCase()]
	};

	Request.prototype.removeHeader = function (key) {
	    delete this._headers[key.toLowerCase()]
	};

	Request.prototype.write = function (s) {
	    this.body.push(s);
	};

	Request.prototype.destroy = function (s) {
	    this.xhr.__aborted = true;
	    this.xhr.abort();
	    this.emit('close');
	};

	Request.prototype.end = function (s) {
	    if (s !== undefined) this.body.push(s);

	    var keys = objectKeys(this._headers);
	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var value = this._headers[key];
	        if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	                this.xhr.setRequestHeader(key, value[j]);
	            }
	        }
	        else this.xhr.setRequestHeader(key, value)
	    }

	    if (this.body.length === 0) {
	        this.xhr.send('');
	    }
	    else if (typeof this.body[0] === 'string') {
	        this.xhr.send(this.body.join(''));
	    }
	    else if (isArray(this.body[0])) {
	        var body = [];
	        for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	        }
	        this.xhr.send(body);
	    }
	    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	        var len = 0;
	        for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	        }
	        var body = new(this.body[0].constructor)(len);
	        var k = 0;
	        
	        for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	                body[k++] = b[j];
	            }
	        }
	        this.xhr.send(body);
	    }
	    else if (isXHR2Compatible(this.body[0])) {
	        this.xhr.send(this.body[0]);
	    }
	    else {
	        var body = '';
	        for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	        }
	        this.xhr.send(body);
	    }
	};

	// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	Request.unsafeHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "cookie",
	    "cookie2",
	    "content-transfer-encoding",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "user-agent",
	    "via"
	];

	Request.prototype.isSafeRequestHeader = function (headerName) {
	    if (!headerName) return false;
	    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	};

	var objectKeys = Object.keys || function (obj) {
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    return keys;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

	var indexOf = function (xs, x) {
	    if (xs.indexOf) return xs.indexOf(x);
	    for (var i = 0; i < xs.length; i++) {
	        if (xs[i] === x) return i;
	    }
	    return -1;
	};

	var isXHR2Compatible = function (obj) {
	    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
	    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
	    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(19).EventEmitter;
	var inherits = __webpack_require__(22);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(23);
	Stream.Writable = __webpack_require__(34);
	Stream.Duplex = __webpack_require__(35);
	Stream.Transform = __webpack_require__(36);
	Stream.PassThrough = __webpack_require__(37);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 22 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(24);
	exports.Stream = __webpack_require__(21);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(30);
	exports.Duplex = __webpack_require__(29);
	exports.Transform = __webpack_require__(32);
	exports.PassThrough = __webpack_require__(33);


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(25);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(5).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(19).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(21);

	/*<replacement>*/
	var util = __webpack_require__(26);
	util.inherits = __webpack_require__(27);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(28);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(29);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(31).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(29);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(31).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 25 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 27 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 28 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(26);
	util.inherits = __webpack_require__(27);
	/*</replacement>*/

	var Readable = __webpack_require__(24);
	var Writable = __webpack_require__(30);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(5).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(26);
	util.inherits = __webpack_require__(27);
	/*</replacement>*/

	var Stream = __webpack_require__(21);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(29);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(29);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(5).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(29);

	/*<replacement>*/
	var util = __webpack_require__(26);
	util.inherits = __webpack_require__(27);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(32);

	/*<replacement>*/
	var util = __webpack_require__(26);
	util.inherits = __webpack_require__(27);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(30)


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(29)


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(32)


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(33)


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(21);
	var util = __webpack_require__(10);

	var Response = module.exports = function (res) {
	    this.offset = 0;
	    this.readable = true;
	};

	util.inherits(Response, Stream);

	var capable = {
	    streaming : true,
	    status2 : true
	};

	function parseHeaders (res) {
	    var lines = res.getAllResponseHeaders().split(/\r?\n/);
	    var headers = {};
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i];
	        if (line === '') continue;
	        
	        var m = line.match(/^([^:]+):\s*(.*)/);
	        if (m) {
	            var key = m[1].toLowerCase(), value = m[2];
	            
	            if (headers[key] !== undefined) {
	            
	                if (isArray(headers[key])) {
	                    headers[key].push(value);
	                }
	                else {
	                    headers[key] = [ headers[key], value ];
	                }
	            }
	            else {
	                headers[key] = value;
	            }
	        }
	        else {
	            headers[line] = true;
	        }
	    }
	    return headers;
	}

	Response.prototype.getResponse = function (xhr) {
	    var respType = String(xhr.responseType).toLowerCase();
	    if (respType === 'blob') return xhr.responseBlob || xhr.response;
	    if (respType === 'arraybuffer') return xhr.response;
	    return xhr.responseText;
	}

	Response.prototype.getHeader = function (key) {
	    return this.headers[key.toLowerCase()];
	};

	Response.prototype.handle = function (res) {
	    if (res.readyState === 2 && capable.status2) {
	        try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	        }
	        catch (err) {
	            capable.status2 = false;
	        }
	        
	        if (capable.status2) {
	            this.emit('ready');
	        }
	    }
	    else if (capable.streaming && res.readyState === 3) {
	        try {
	            if (!this.statusCode) {
	                this.statusCode = res.status;
	                this.headers = parseHeaders(res);
	                this.emit('ready');
	            }
	        }
	        catch (err) {}
	        
	        try {
	            this._emitData(res);
	        }
	        catch (err) {
	            capable.streaming = false;
	        }
	    }
	    else if (res.readyState === 4) {
	        if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit('ready');
	        }
	        this._emitData(res);
	        
	        if (res.error) {
	            this.emit('error', this.getResponse(res));
	        }
	        else this.emit('end');
	        
	        this.emit('close');
	    }
	};

	Response.prototype._emitData = function (res) {
	    var respBody = this.getResponse(res);
	    if (respBody.toString().match(/ArrayBuffer/)) {
	        this.emit('data', new Uint8Array(respBody, this.offset));
	        this.offset = respBody.byteLength;
	        return;
	    }
	    if (respBody.length > this.offset) {
	        this.emit('data', respBody.slice(this.offset));
	        this.offset = respBody.length;
	    }
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {

	  var object =  true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });

	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '');
	    if (input.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });

	}());


/***/ },
/* 40 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(42);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(44);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43)(module), (function() { return this; }())))

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(45);
	exports.encode = exports.stringify = __webpack_require__(46);


/***/ },
/* 45 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 46 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var http = __webpack_require__(18);

	/**
	 * Invoking the library as a function delegates to attach if the first argument
	 * is an `http.Server`.
	 *
	 * If there are no arguments or the first argument is an options object, then
	 * a new Server instance is returned.
	 *
	 * @param {http.Server} server (if specified, will be attached to by the new Server instance)
	 * @param {Object} options
	 * @return {Server} engine server
	 * @api public
	 */

	exports = module.exports = function() {
	  // backwards compatible use as `.attach`
	  // if first argument is an http server
	  if (arguments.length && arguments[0] instanceof http.Server) {
	    return attach.apply(this, arguments);
	  }

	  // if first argument is not an http server, then just make a regular eio server
	  return exports.Server.apply(null, arguments);
	};

	/**
	 * Protocol revision number.
	 *
	 * @api public
	 */

	exports.protocol = 1;

	/**
	 * Expose Server constructor.
	 *
	 * @api public
	 */

	exports.Server = __webpack_require__(48);

	/**
	 * Expose Server constructor.
	 *
	 * @api public
	 */

	exports.Socket = __webpack_require__(86);

	/**
	 * Expose Transport constructor.
	 *
	 * @api public
	 */

	exports.Transport = __webpack_require__(71);

	/**
	 * Expose mutable list of available transports.
	 *
	 * @api public
	 */

	exports.transports = __webpack_require__(68);

	/**
	 * Exports parser.
	 *
	 * @api public
	 */

	exports.parser = __webpack_require__(72);

	/**
	 * Creates an http.Server exclusively used for WS upgrades.
	 *
	 * @param {Number} port
	 * @param {Function} callback
	 * @param {Object} options
	 * @return {Server} websocket.io server
	 * @api public
	 */

	exports.listen = listen;

	function listen(port, options, fn) {
	  if ('function' == typeof options) {
	    fn = options;
	    options = {};
	  }

	  var server = http.createServer(function (req, res) {
	    res.writeHead(501);
	    res.end('Not Implemented');
	  });

	  server.listen(port, fn);

	  // create engine server
	  var engine = exports.attach(server, options);
	  engine.httpServer = server;

	  return engine;
	};

	/**
	 * Captures upgrade requests for a http.Server.
	 *
	 * @param {http.Server} server
	 * @param {Object} options
	 * @return {Server} engine server
	 * @api public
	 */

	exports.attach = attach;

	function attach(server, options) {
	  var engine = new exports.Server(options);
	  engine.attach(server, options);
	  return engine;
	};


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	/**
	 * Module dependencies.
	 */

	var qs = __webpack_require__(49)
	  , parse = __webpack_require__(41).parse
	  , readFileSync = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).readFileSync
	  , crypto = __webpack_require__(52)
	  , base64id = __webpack_require__(67)
	  , transports = __webpack_require__(68)
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , Socket = __webpack_require__(86)
	  , WebSocketServer = __webpack_require__(87).Server
	  , debug = __webpack_require__(81)('engine');

	/**
	 * Module exports.
	 */

	module.exports = Server;

	/**
	 * Server constructor.
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Server(opts){
	  if (!(this instanceof Server)) {
	    return new Server(opts);
	  }

	  this.clients = {};
	  this.clientsCount = 0;

	  opts = opts || {};
	  this.pingTimeout = opts.pingTimeout || 60000;
	  this.pingInterval = opts.pingInterval || 25000;
	  this.upgradeTimeout = opts.upgradeTimeout || 10000;
	  this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;
	  this.transports = opts.transports || Object.keys(transports);
	  this.allowUpgrades = false !== opts.allowUpgrades;
	  this.allowRequest = opts.allowRequest;
	  this.cookie = false !== opts.cookie ? (opts.cookie || 'io') : false;

	  // initialize websocket server
	  if (~this.transports.indexOf('websocket')) {
	    this.ws = new WebSocketServer({ noServer: true, clientTracking: false });
	  }
	}

	/**
	 * Protocol errors mappings.
	 */

	Server.errors = {
	  UNKNOWN_TRANSPORT: 0,
	  UNKNOWN_SID: 1,
	  BAD_HANDSHAKE_METHOD: 2,
	  BAD_REQUEST: 3
	};

	Server.errorMessages = {
	  0: 'Transport unknown',
	  1: 'Session ID unknown',
	  2: 'Bad handshake method',
	  3: 'Bad request'
	};

	/**
	 * Inherits from EventEmitter.
	 */

	Server.prototype.__proto__ = EventEmitter.prototype;

	/**
	 * Hash of open clients.
	 *
	 * @api public
	 */

	Server.prototype.clients;

	/**
	 * Returns a list of available transports for upgrade given a certain transport.
	 *
	 * @return {Array}
	 * @api public
	 */

	Server.prototype.upgrades = function(transport){
	  if (!this.allowUpgrades) return [];
	  return transports[transport].upgradesTo || [];
	};

	/**
	 * Verifies a request.
	 *
	 * @param {http.ServerRequest}
	 * @return {Boolean} whether the request is valid
	 * @api private
	 */

	Server.prototype.verify = function(req, upgrade, fn){
	  // transport check
	  var transport = req._query.transport;
	  if (!~this.transports.indexOf(transport)) {
	    debug('unknown transport "%s"', transport);
	    return fn(Server.errors.UNKNOWN_TRANSPORT, false);
	  }

	  // sid check
	  var sid = req._query.sid;
	  if (sid) {
	    if (!this.clients.hasOwnProperty(sid))
	      return fn(Server.errors.UNKNOWN_SID, false);
	    if (!upgrade && this.clients[sid].transport.name !== transport) {
	      debug('bad request: unexpected transport without upgrade');
	      return fn(Server.errors.BAD_REQUEST, false);
	    }
	  } else {
	    // handshake is GET only
	    if ('GET' != req.method) return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);
	    if (!this.allowRequest) return fn(null, true);
	    return this.allowRequest(req, fn);
	  }

	  fn(null, true);
	};

	/**
	 * Prepares a request by processing the query string.
	 *
	 * @api private
	 */

	Server.prototype.prepare = function(req){
	  // try to leverage pre-existing `req._query` (e.g: from connect)
	  if (!req._query) {
	    req._query = ~req.url.indexOf('?') ? qs.parse(parse(req.url).query) : {};
	  }
	};

	/**
	 * Closes all clients.
	 *
	 * @api public
	 */

	Server.prototype.close = function(){
	  debug('closing all open clients');
	  for (var i in this.clients) {
	    this.clients[i].close();
	  }
	  return this;
	};

	/**
	 * Handles an Engine.IO HTTP request.
	 *
	 * @param {http.ServerRequest} request
	 * @param {http.ServerResponse|http.OutgoingMessage} response
	 * @api public
	 */

	Server.prototype.handleRequest = function(req, res){
	  debug('handling "%s" http request "%s"', req.method, req.url);
	  this.prepare(req);
	  req.res = res;

	  var self = this;
	  this.verify(req, false, function(err, success) {
	    if (!success) {
	      sendErrorMessage(req, res, err);
	      return;
	    }

	    if (req._query.sid) {
	      debug('setting new request for existing client');
	      self.clients[req._query.sid].transport.onRequest(req);
	    } else {
	      self.handshake(req._query.transport, req);
	    }
	  });
	};

	/**
	 * Sends an Engine.IO Error Message
	 *
	 * @param {http.ServerResponse} response
	 * @param {code} error code
	 * @api private
	 */

	 function sendErrorMessage(req, res, code) {
	    var headers = { 'Content-Type': 'application/json' };

	    if (req.headers.origin) {
	      headers['Access-Control-Allow-Credentials'] = 'true';
	      headers['Access-Control-Allow-Origin'] = req.headers.origin;
	    } else {
	      headers['Access-Control-Allow-Origin'] = '*';
	    }
	    res.writeHead(400, headers);
	    res.end(JSON.stringify({
	      code: code,
	      message: Server.errorMessages[code]
	    }));
	 }

	/**
	 * Handshakes a new client.
	 *
	 * @param {String} transport name
	 * @param {Object} request object
	 * @api private
	 */

	Server.prototype.handshake = function(transport, req){
	  var id = base64id.generateId();

	  debug('handshaking client "%s"', id);

	  var transportName = transport;
	  try {
	    var transport = new transports[transport](req);
	    if ('polling' == transportName) {
	      transport.maxHttpBufferSize = this.maxHttpBufferSize;
	    }

	    if (req._query && req._query.b64) {
	      transport.supportsBinary = false;
	    } else {
	      transport.supportsBinary = true;
	    }
	  }
	  catch (e) {
	    sendErrorMessage(req, req.res, Server.errors.BAD_REQUEST);
	    return;
	  }
	  var socket = new Socket(id, this, transport, req);
	  var self = this;

	  if (false !== this.cookie) {
	    transport.on('headers', function(headers){
	      headers['Set-Cookie'] = self.cookie + '=' + id;
	    });
	  }

	  transport.onRequest(req);

	  this.clients[id] = socket;
	  this.clientsCount++;

	  socket.once('close', function(){
	    delete self.clients[id];
	    self.clientsCount--;
	  });

	  this.emit('connection', socket);
	};

	/**
	 * Handles an Engine.IO HTTP Upgrade.
	 *
	 * @api public
	 */

	Server.prototype.handleUpgrade = function(req, socket, upgradeHead){
	  this.prepare(req);

	  var self = this;
	  this.verify(req, true, function(err, success) {
	    if (!success) {
	      socket.end();
	      return;
	    }

	    var head = new Buffer(upgradeHead.length);
	    upgradeHead.copy(head);
	    upgradeHead = null;

	    // delegate to ws
	    self.ws.handleUpgrade(req, socket, head, function(conn){
	      self.onWebSocket(req, conn);
	    });
	  });
	};

	/**
	 * Called upon a ws.io connection.
	 *
	 * @param {ws.Socket} websocket
	 * @api private
	 */

	Server.prototype.onWebSocket = function(req, socket){
	  if (!transports[req._query.transport].prototype.handlesUpgrades) {
	    debug('transport doesnt handle upgraded requests');
	    socket.close();
	    return;
	  }

	  // get client id
	  var id = req._query.sid;

	  // keep a reference to the ws.Socket
	  req.websocket = socket;

	  if (id) {
	    if (!this.clients[id]) {
	      debug('upgrade attempt for closed client');
	      socket.close();
	    } else if (this.clients[id].upgraded) {
	      debug('transport had already been upgraded');
	      socket.close();
	    } else {
	      debug('upgrading existing transport');
	      var transport = new transports[req._query.transport](req);
	      if (req._query && req._query.b64) {
	        transport.supportsBinary = false;
	      } else {
	        transport.supportsBinary = true;
	      }
	      this.clients[id].maybeUpgrade(transport);
	    }
	  } else {
	    this.handshake(req._query.transport, req);
	  }
	};

	/**
	 * Captures upgrade requests for a http.Server.
	 *
	 * @param {http.Server} server
	 * @param {Object} options
	 * @api public
	 */

	Server.prototype.attach = function(server, options){
	  var self = this;
	  var options = options || {};
	  var path = (options.path || '/engine.io').replace(/\/$/, '');

	  var destroyUpgrade = (options.destroyUpgrade !== undefined) ? options.destroyUpgrade : true;
	  var destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;

	  // normalize path
	  path += '/';

	  function check (req) {
	    return path == req.url.substr(0, path.length);
	  }

	  // cache and clean up listeners
	  var listeners = server.listeners('request').slice(0);
	  server.removeAllListeners('request');
	  server.on('close', self.close.bind(self));

	  // add request handler
	  server.on('request', function(req, res){
	    if (check(req)) {
	      debug('intercepting request for path "%s"', path);
	      self.handleRequest(req, res);
	    } else {
	      for (var i = 0, l = listeners.length; i < l; i++) {
	        listeners[i].call(server, req, res);
	      }
	    }
	  });

	  if(~self.transports.indexOf('websocket')) {
	    server.on('upgrade', function (req, socket, head) {
	      if (check(req)) {
	        self.handleUpgrade(req, socket, head);
	      } else if (false !== options.destroyUpgrade) {
	        // default node behavior is to disconnect when no handlers
	        // but by adding a handler, we prevent that
	        // and if no eio thing handles the upgrade
	        // then the socket needs to die!
	        setTimeout(function() {
	           if (socket.writable && socket.bytesWritten <= 0) {
	             return socket.end();
	           }
	        }, options.destroyUpgradeTimeout);
	      }
	    });
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(50);
	exports.encode = exports.stringify = __webpack_require__(51);


/***/ },
/* 50 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 51 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};

	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(53)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(55)

	exports.createHmac = __webpack_require__(64)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(65)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(54)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5).Buffer))

/***/ },
/* 54 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(56)

	var md5 = toConstructor(__webpack_require__(61))
	var rmd160 = toConstructor(__webpack_require__(63))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(5).Buffer
	var Hash   = __webpack_require__(57)(Buffer)

	exports.sha1 = __webpack_require__(58)(Buffer, Hash)
	exports.sha256 = __webpack_require__(59)(Buffer, Hash)
	exports.sha512 = __webpack_require__(60)(Buffer, Hash)


/***/ },
/* 57 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(10).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(10).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(10).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(62);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(55)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(66)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * base64id v0.1.0
	 */

	/**
	 * Module dependencies
	 */

	var crypto = __webpack_require__(52);

	/**
	 * Constructor
	 */

	var Base64Id = function() { };

	/**
	 * Get random bytes
	 *
	 * Uses a buffer if available, falls back to crypto.randomBytes
	 */

	Base64Id.prototype.getRandomBytes = function(bytes) {

	  var BUFFER_SIZE = 4096
	  var self = this;  
	  
	  bytes = bytes || 12;

	  if (bytes > BUFFER_SIZE) {
	    return crypto.randomBytes(bytes);
	  }
	  
	  var bytesInBuffer = parseInt(BUFFER_SIZE/bytes);
	  var threshold = parseInt(bytesInBuffer*0.85);

	  if (!threshold) {
	    return crypto.randomBytes(bytes);
	  }

	  if (this.bytesBufferIndex == null) {
	     this.bytesBufferIndex = -1;
	  }

	  if (this.bytesBufferIndex == bytesInBuffer) {
	    this.bytesBuffer = null;
	    this.bytesBufferIndex = -1;
	  }

	  // No buffered bytes available or index above threshold
	  if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {
	     
	    if (!this.isGeneratingBytes) {
	      this.isGeneratingBytes = true;
	      crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {
	        self.bytesBuffer = bytes;
	        self.bytesBufferIndex = 0;
	        self.isGeneratingBytes = false;
	      }); 
	    }
	    
	    // Fall back to sync call when no buffered bytes are available
	    if (this.bytesBufferIndex == -1) {
	      return crypto.randomBytes(bytes);
	    }
	  }
	  
	  var result = this.bytesBuffer.slice(bytes*this.bytesBufferIndex, bytes*(this.bytesBufferIndex+1)); 
	  this.bytesBufferIndex++; 
	  
	  return result;
	}

	/**
	 * Generates a base64 id
	 *
	 * (Original version from socket.io <http://socket.io>)
	 */

	Base64Id.prototype.generateId = function () {
	  var rand = new Buffer(15); // multiple of 3 for base64
	  if (!rand.writeInt32BE) {
	    return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString()
	      + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();
	  }
	  this.sequenceNumber = (this.sequenceNumber + 1) | 0;
	  rand.writeInt32BE(this.sequenceNumber, 11);
	  if (crypto.randomBytes) {
	    this.getRandomBytes(12).copy(rand);
	  } else {
	    // not secure for node 0.4
	    [0, 4, 8].forEach(function(i) {
	      rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);
	    });
	  }
	  return rand.toString('base64').replace(/\//g, '_').replace(/\+/g, '-');
	};

	/**
	 * Export
	 */

	exports = module.exports = new Base64Id();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var XHR = __webpack_require__(69);
	var JSONP = __webpack_require__(84);

	/**
	 * Export transports.
	 */

	module.exports = exports = {
	  polling: polling,
	  websocket: __webpack_require__(85)
	};

	/**
	 * Export upgrades map.
	 */

	exports.polling.upgradesTo = ['websocket'];

	/**
	 * Polling polimorphic constructor.
	 *
	 * @api private
	 */

	function polling (req) {
	  if ('string' == typeof req._query.j) {
	    return new JSONP(req);
	  } else {
	    return new XHR(req);
	  }
	}


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	/**
	 * Module dependencies.
	 */

	var Polling = __webpack_require__(70);
	var Transport = __webpack_require__(71);
	var debug = __webpack_require__(81)('engine:polling-xhr');

	/**
	 * Module exports.
	 */

	module.exports = XHR;

	/**
	 * Ajax polling transport.
	 *
	 * @api public
	 */

	function XHR(req){
	  Polling.call(this, req);
	}

	/**
	 * Inherits from Polling.
	 */

	XHR.prototype.__proto__ = Polling.prototype;

	/**
	 * Overrides `onRequest` to handle `OPTIONS`..
	 *
	 * @param {http.ServerRequest}
	 * @api private
	 */

	XHR.prototype.onRequest = function (req) {
	  if ('OPTIONS' == req.method) {
	    var res = req.res;
	    var headers = this.headers(req);
	    headers['Access-Control-Allow-Headers'] = 'Content-Type';
	    res.writeHead(200, headers);
	    res.end();
	  } else {
	    Polling.prototype.onRequest.call(this, req);
	  }
	};

	/**
	 * Frames data prior to write.
	 *
	 * @api private
	 */

	XHR.prototype.doWrite = function(data){
	  // explicit UTF-8 is required for pages not served under utf
	  var isString = typeof data == 'string';
	  var contentType = isString
	    ? 'text/plain; charset=UTF-8'
	    : 'application/octet-stream';
	  var contentLength = '' + (isString ? Buffer.byteLength(data) : data.length);

	  var headers = {
	    'Content-Type': contentType,
	    'Content-Length': contentLength
	  };

	  // prevent XSS warnings on IE
	  // https://github.com/LearnBoost/socket.io/pull/1333
	  var ua = this.req.headers['user-agent'];
	  if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {
	    headers['X-XSS-Protection'] = '0';
	  }

	  this.res.writeHead(200, this.headers(this.req, headers));
	  this.res.end(data);
	};

	/**
	 * Returns headers for a response.
	 *
	 * @param {http.ServerRequest} request
	 * @param {Object} extra headers
	 * @api private
	 */

	XHR.prototype.headers = function(req, headers){
	  headers = headers || {};

	  if (req.headers.origin) {
	    headers['Access-Control-Allow-Credentials'] = 'true';
	    headers['Access-Control-Allow-Origin'] = req.headers.origin;
	  } else {
	    headers['Access-Control-Allow-Origin'] = '*';
	  }

	  this.emit('headers', headers);
	  return headers;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	/**
	 * Module requirements.
	 */

	var Transport = __webpack_require__(71)
	  , parser = __webpack_require__(72)
	  , debug = __webpack_require__(81)('engine:polling');

	/**
	 * Exports the constructor.
	 */

	module.exports = Polling;

	/**
	 * HTTP polling constructor.
	 *
	 * @api public.
	 */

	function Polling (req) {
	  Transport.call(this, req);
	}

	/**
	 * Inherits from Transport.
	 *
	 * @api public.
	 */

	Polling.prototype.__proto__ = Transport.prototype;

	/**
	 * Transport name
	 *
	 * @api public
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Overrides onRequest.
	 *
	 * @param {http.ServerRequest}
	 * @api private
	 */

	Polling.prototype.onRequest = function (req) {
	  var res = req.res;

	  if ('GET' == req.method) {
	    this.onPollRequest(req, res);
	  } else if ('POST' == req.method) {
	    this.onDataRequest(req, res);
	  } else {
	    res.writeHead(500);
	    res.end();
	  }
	};

	/**
	 * The client sends a request awaiting for us to send data.
	 *
	 * @api private
	 */

	Polling.prototype.onPollRequest = function (req, res) {
	  if (this.req) {
	    debug('request overlap');
	    // assert: this.res, '.req and .res should be (un)set together'
	    this.onError('overlap from client');
	    res.writeHead(500);
	    return;
	  }

	  debug('setting request');

	  this.req = req;
	  this.res = res;

	  var self = this;

	  function onClose () {
	    self.onError('poll connection closed prematurely');
	  }

	  function cleanup () {
	    req.removeListener('close', onClose);
	    self.req = self.res = null;
	  }

	  req.cleanup = cleanup;
	  req.on('close', onClose);

	  this.writable = true;
	  this.emit('drain');

	  // if we're still writable but had a pending close, trigger an empty send
	  if (this.writable && this.shouldClose) {
	    debug('triggering empty send to append close packet');
	    this.send([{ type: 'noop' }]);
	  }
	};

	/**
	 * The client sends a request with data.
	 *
	 * @api private
	 */

	Polling.prototype.onDataRequest = function (req, res) {
	  if (this.dataReq) {
	    // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'
	    this.onError('data request overlap from client');
	    res.writeHead(500);
	    return;
	  }

	  var isBinary = 'application/octet-stream' == req.headers['content-type'];

	  this.dataReq = req;
	  this.dataRes = res;

	  var chunks = isBinary ? new Buffer(0) : '';
	  var self = this;

	  function cleanup () {
	    chunks = isBinary ? new Buffer(0) : '';
	    req.removeListener('data', onData);
	    req.removeListener('end', onEnd);
	    req.removeListener('close', onClose);
	    self.dataReq = self.dataRes = null;
	  }

	  function onClose () {
	    cleanup();
	    self.onError('data request connection closed prematurely');
	  }

	  function onData (data) {
	    var contentLength;
	    if (typeof data == 'string') {
	      chunks += data;
	      contentLength = Buffer.byteLength(chunks);
	    } else {
	      chunks = Buffer.concat([chunks, data]);
	      contentLength = chunks.length;
	    }

	    if (contentLength > self.maxHttpBufferSize) {
	      chunks = '';
	      req.connection.destroy();
	    }
	  }

	  function onEnd () {
	    self.onData(chunks);

	    var headers = {
	      // text/html is required instead of text/plain to avoid an
	      // unwanted download dialog on certain user-agents (GH-43)
	      'Content-Type': 'text/html',
	      'Content-Length': 2
	    };

	    // prevent XSS warnings on IE
	    // https://github.com/LearnBoost/socket.io/pull/1333
	    var ua = req.headers['user-agent'];
	    if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {
	      headers['X-XSS-Protection'] = '0';
	    }

	    res.writeHead(200, self.headers(req, headers));
	    res.end('ok');
	    cleanup();
	  }

	  req.on('close', onClose);
	  req.on('data', onData);
	  req.on('end', onEnd);
	  if (!isBinary) req.setEncoding('utf8');
	};

	/**
	 * Processes the incoming data payload.
	 *
	 * @param {String} encoded payload
	 * @api private
	 */

	Polling.prototype.onData = function (data) {
	  debug('received "%s"', data);
	  var self = this;
	  var callback = function(packet) {
	    if ('close' == packet.type) {
	      debug('got xhr close packet');
	      self.onClose();
	      return false;
	    }

	    self.onPacket(packet);
	  };

	  parser.decodePayload(data, callback);
	};

	/**
	 * Overrides onClose.
	 *
	 * @api private
	 */

	Polling.prototype.onClose = function () {
	  if (this.writable) {
	    // close pending poll request
	    this.send([{ type: 'noop' }]);
	  }
	  Transport.prototype.onClose.call(this);
	};

	/**
	 * Writes a packet payload.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Polling.prototype.send = function (packets) {
	  if (this.shouldClose) {
	    debug('appending close packet to payload');
	    packets.push({ type: 'close' });
	    this.shouldClose();
	    this.shouldClose = null;
	  }

	  var self = this;
	  parser.encodePayload(packets, this.supportsBinary, function(data) {
	    self.write(data);
	  });
	};

	/**
	 * Writes data as response to poll request.
	 *
	 * @param {String} data
	 * @api private
	 */

	Polling.prototype.write = function (data) {
	  debug('writing "%s"', data);
	  this.doWrite(data);
	  this.req.cleanup();
	  this.writable = false;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function (fn) {
	  debug('closing');

	  if (this.dataReq) {
	    debug('aborting ongoing data request');
	    this.dataReq.destroy();
	  }

	  if (this.writable) {
	    debug('transport writable - closing right away');
	    this.send([{ type: 'close' }]);
	    fn();
	  } else {
	    debug('transport not writable - buffering orderly close');
	    this.shouldClose = fn;
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var EventEmitter = __webpack_require__(19).EventEmitter
	  , parser = __webpack_require__(72)
	  , debug = __webpack_require__(81)('engine:transport');

	/**
	 * Expose the constructor.
	 */

	module.exports = Transport;

	/**
	 * Noop function.
	 *
	 * @api private
	 */

	function noop () {};

	/**
	 * Transport constructor.
	 *
	 * @param {http.ServerRequest} request
	 * @api public
	 */

	function Transport (req) {
	  this.readyState = 'opening';
	};

	/**
	 * Inherits from EventEmitter.
	 */

	Transport.prototype.__proto__ = EventEmitter.prototype;

	/**
	 * Called with an incoming HTTP request.
	 *
	 * @param {http.ServerRequest} request
	 * @api private
	 */

	Transport.prototype.onRequest = function (req) {
	  debug('setting request');
	  this.req = req;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function (fn) {
	  this.readyState = 'closing';
	  this.doClose(fn || noop);
	};

	/**
	 * Called with a transport error.
	 *
	 * @param {String} message error
	 * @param {Object} error description
	 * @api private
	 */

	Transport.prototype.onError = function (msg, desc) {
	  if (this.listeners('error').length) {
	    var err = new Error(msg);
	    err.type = 'TransportError';
	    err.description = desc;
	    this.emit('error', err);
	  } else {
	    debug('ignored transport error %s (%s)', msg, desc);
	  }
	};

	/**
	 * Called with parsed out a packets from the data stream.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called with the encoded packet data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function (data) {
	  this.onPacket(parser.decodePacket(data));
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */

	var keys = __webpack_require__(73);
	var hasBinary = __webpack_require__(74);
	var sliceBuffer = __webpack_require__(76);
	var base64encoder = __webpack_require__(77);
	var after = __webpack_require__(78);
	var utf8 = __webpack_require__(79);

	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */

	var isAndroid = navigator.userAgent.match(/Android/i);

	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;

	/**
	 * Current protocol version.
	 */

	exports.protocol = 3;

	/**
	 * Packet types.
	 */

	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};

	var packetslist = keys(packets);

	/**
	 * Premade error packet.
	 */

	var err = { type: 'error', data: 'parser error' };

	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */

	var Blob = __webpack_require__(80);

	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */

	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if ('function' == typeof supportsBinary) {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }

	  if ('function' == typeof utf8encode) {
	    callback = utf8encode;
	    utf8encode = null;
	  }

	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;

	  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (Blob && data instanceof global.Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }

	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }

	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];

	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
	  }

	  return callback('' + encoded);

	};

	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}

	/**
	 * Encode packet helpers for binary types
	 */

	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);

	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }

	  return callback(resultBuffer.buffer);
	}

	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var fr = new FileReader();
	  fr.onload = function() {
	    packet.data = fr.result;
	    exports.encodePacket(packet, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}

	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }

	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);

	  return callback(blob);
	}

	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */

	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (Blob && packet.data instanceof Blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }

	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += global.btoa(b64data);
	  return callback(message);
	};

	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */

	exports.decodePacket = function (data, binaryType, utf8decode) {
	  // String data
	  if (typeof data == 'string' || data === undefined) {
	    if (data.charAt(0) == 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }

	    if (utf8decode) {
	      try {
	        data = utf8.decode(data);
	      } catch (e) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);

	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }

	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }

	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};

	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */

	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!global.ArrayBuffer) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }

	  var data = base64encoder.decode(msg.substr(1));

	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }

	  return { type: type, data: data };
	};

	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */

	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary == 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }

	  var isBinary = hasBinary(packets);

	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }

	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }

	  if (!packets.length) {
	    return callback('0:');
	  }

	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};

	/**
	 * Async array map using after
	 */

	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);

	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };

	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}

	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */

	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data != 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }

	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var packet;
	  if (data == '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	  var length = ''
	    , n, msg;

	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);

	    if (':' != chr) {
	      length += chr;
	    } else {
	      if ('' == length || (length != (n = Number(length)))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      msg = data.substr(i + 1, n);

	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, true);

	        if (err.type == packet.type && err.data == packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }

	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }

	      // advance cursor
	      i += n;
	      length = '';
	    }
	  }

	  if (length != '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	};

	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */

	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }

	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);

	    var resultArray = new Uint8Array(totalLength);

	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }

	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }

	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;

	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });

	    return callback(resultArray.buffer);
	  });
	};

	/**
	 * Encode as Blob
	 */

	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }

	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;

	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;

	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(new Blob(results));
	  });
	};

	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */

	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var bufferTail = data;
	  var buffers = [];

	  var numberTooLong = false;
	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';

	    for (var i = 1; ; i++) {
	      if (tailArray[i] == 255) break;

	      if (msgLength.length > 310) {
	        numberTooLong = true;
	        break;
	      }

	      msgLength += tailArray[i];
	    }

	    if(numberTooLong) return callback(err, 0, 1);

	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);

	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }

	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }

	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 73 */
/***/ function(module, exports) {

	
	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	module.exports = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/*
	 * Module requirements.
	 */

	var isArray = __webpack_require__(75);

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(data) {

	  function _hasBinary(obj) {
	    if (!obj) return false;

	    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }

	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      if (obj.toJSON) {
	        obj = obj.toJSON();
	      }

	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  return _hasBinary(data);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 75 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	module.exports = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};


/***/ },
/* 77 */
/***/ function(module, exports) {

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(chars){
	  "use strict";

	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";

	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }

	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }

	    return base64;
	  };

	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;

	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }

	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);

	    for (i = 0; i < len; i+=4) {
	      encoded1 = chars.indexOf(base64[i]);
	      encoded2 = chars.indexOf(base64[i+1]);
	      encoded3 = chars.indexOf(base64[i+2]);
	      encoded4 = chars.indexOf(base64[i+3]);

	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }

	    return arraybuffer;
	  };
	})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");


/***/ },
/* 78 */
/***/ function(module, exports) {

	module.exports = after

	function after(count, callback, err_cb) {
	    var bail = false
	    err_cb = err_cb || noop
	    proxy.count = count

	    return (count === 0) ? callback() : proxy

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true
	            callback(err)
	            // future error callbacks will go to error handler
	            callback = err_cb
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result)
	        }
	    }
	}

	function noop() {}


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/utf8js v2.0.0 by @mathias */
	;(function(root) {

		// Detect free variables `exports`
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var stringFromCharCode = String.fromCharCode;

		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}

		function checkScalarValue(codePoint) {
			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
		}
		/*--------------------------------------------------------------------------*/

		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}

		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				checkScalarValue(codePoint);
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}

		function utf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}

		/*--------------------------------------------------------------------------*/

		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}

			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}

			// If we end up here, it’s not a continuation byte
			throw Error('Invalid continuation byte');
		}

		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;

			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}

			if (byteIndex == byteCount) {
				return false;
			}

			// Read first byte
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}

			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				var byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					checkScalarValue(codePoint);
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}

			throw Error('Invalid UTF-8 detected');
		}

		var byteArray;
		var byteCount;
		var byteIndex;
		function utf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}

		/*--------------------------------------------------------------------------*/

		var utf8 = {
			'version': '2.0.0',
			'encode': utf8encode,
			'decode': utf8decode
		};

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return utf8;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = utf8;
			} else { // in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in utf8) {
					hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.utf8 = utf8;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43)(module), (function() { return this; }())))

/***/ },
/* 80 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = global.BlobBuilder
	  || global.WebKitBlobBuilder
	  || global.MSBlobBuilder
	  || global.MozBlobBuilder;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      ary[i] = buf;
	    }
	  }
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);

	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }

	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	};

	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	};

	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(82);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors and the Firebug
	 * extension (*not* the built-in Firefox web inpector) are
	 * known to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table)));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? '%c ' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, ''].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // This hackery is required for IE8,
	  // where the `console.log` function doesn't have 'apply'
	  return 'object' == typeof console
	    && 'function' == typeof console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      localStorage.removeItem('debug');
	    } else {
	      localStorage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = localStorage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(83);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = exports.log || enabled.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 's':
	      return n * s;
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	/**
	 * Module dependencies.
	 */

	var Polling = __webpack_require__(70);
	var qs = __webpack_require__(49);
	var rDoubleSlashes = /\\\\n/g;
	var rSlashes = /(\\)?\\n/g;

	/**
	 * Module exports.
	 */

	module.exports = JSONP;

	/**
	 * JSON-P polling transport.
	 *
	 * @api public
	 */

	function JSONP (req) {
	  Polling.call(this, req);

	  this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';
	  this.foot = ');';
	};

	/**
	 * Inherits from Polling.
	 */

	JSONP.prototype.__proto__ = Polling.prototype;

	/**
	 * Handles incoming data.
	 * Due to a bug in \n handling by browsers, we expect a escaped string.
	 *
	 * @api private
	 */

	JSONP.prototype.onData = function (data) {
	  // we leverage the qs module so that we get built-in DoS protection
	  // and the fast alternative to decodeURIComponent
	  data = qs.parse(data).d;
	  if ('string' == typeof data) {
	    //client will send already escaped newlines as \\\\n and newlines as \\n
	    // \\n must be replaced with \n and \\\\n with \\n
	    data = data.replace(rSlashes, function(match, slashes) {
	      return slashes ? match : '\n';
	    });
	    Polling.prototype.onData.call(this, data.replace(rDoubleSlashes, '\\n'));
	  }
	};

	/**
	 * Performs the write.
	 *
	 * @api private
	 */

	JSONP.prototype.doWrite = function (data) {
	  // we must output valid javascript, not valid json
	  // see: http://timelessrepo.com/json-isnt-a-javascript-subset
	  var js = JSON.stringify(data)
	    .replace(/\u2028/g, '\\u2028')
	    .replace(/\u2029/g, '\\u2029');

	  // prepare response
	  data = this.head + js + this.foot;

	  // explicit UTF-8 is required for pages not served under utf
	  var headers = {
	    'Content-Type': 'text/javascript; charset=UTF-8',
	    'Content-Length': Buffer.byteLength(data)
	  };

	  // prevent XSS warnings on IE
	  // https://github.com/LearnBoost/socket.io/pull/1333
	  var ua = this.req.headers['user-agent'];
	  if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {
	    headers['X-XSS-Protection'] = '0';
	  }

	  this.res.writeHead(200, this.headers(this.req, headers));
	  this.res.end(data);
	};

	/**
	 * Returns headers for a response.
	 *
	 * @param {http.ServerRequest} request
	 * @param {Object} extra headers
	 * @api private
	 */

	JSONP.prototype.headers = function (req, headers) {
	  headers = headers || {};

	  // disable XSS protection for IE
	  if (/MSIE 8\.0/.test(req.headers['user-agent'])) {
	    headers['X-XSS-Protection'] = '0';
	  }

	  this.emit('headers', headers);
	  return headers;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(71)
	  , parser = __webpack_require__(72)
	  , debug = __webpack_require__(81)('engine:ws')

	/**
	 * Export the constructor.
	 */

	module.exports = WebSocket;

	/**
	 * WebSocket transport 
	 *
	 * @param {http.ServerRequest}
	 * @api public
	 */

	function WebSocket (req) {
	  Transport.call(this, req);
	  var self = this;
	  this.socket = req.websocket;
	  this.socket.on('message', this.onData.bind(this));
	  this.socket.once('close', this.onClose.bind(this));
	  this.socket.on('error', this.onError.bind(this));
	  this.socket.on('headers', function (headers) {
	    self.emit('headers', headers);
	  });
	  this.writable = true;
	};

	/**
	 * Inherits from Transport.
	 */

	WebSocket.prototype.__proto__ = Transport.prototype;

	/**
	 * Transport name
	 *
	 * @api public
	 */

	WebSocket.prototype.name = 'websocket';

	/**
	 * Advertise upgrade support.
	 *
	 * @api public
	 */

	WebSocket.prototype.handlesUpgrades = true;

	/**
	 * Advertise framing support.
	 *
	 * @api public
	 */

	WebSocket.prototype.supportsFraming = true;

	/**
	 * Processes the incoming data.
	 *
	 * @param {String} encoded packet
	 * @api private
	 */

	WebSocket.prototype.onData = function (data) {
	  debug('received "%s"', data);
	  Transport.prototype.onData.call(this, data);
	};

	/**
	 * Writes a packet payload.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	WebSocket.prototype.send = function (packets) {
	  var self = this;
	  for (var i = 0, l = packets.length; i < l; i++) {
	    parser.encodePacket(packets[i], this.supportsBinary, function(data) {
	      debug('writing "%s"', data);
	      self.writable = false;
	      self.socket.send(data, function (err){
	        if (err) return self.onError('write error', err.stack);
	        self.writable = true;
	        self.emit('drain');
	      });
	    });
	  }
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	WebSocket.prototype.doClose = function (fn) {
	  debug('closing');
	  this.socket.close();
	  fn && fn();
	};


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Module dependencies.
	 */

	var EventEmitter = __webpack_require__(19).EventEmitter;
	var debug = __webpack_require__(81)('engine:socket');

	/**
	 * Module exports.
	 */

	module.exports = Socket;

	/**
	 * Client class (abstract).
	 *
	 * @api private
	 */

	function Socket (id, server, transport, req) {
	  this.id = id;
	  this.server = server;
	  this.upgraded = false;
	  this.readyState = 'opening';
	  this.writeBuffer = [];
	  this.packetsFn = [];
	  this.sentCallbackFn = [];
	  this.request = req;

	  // Cache IP since it might not be in the req later
	  this.remoteAddress = req.connection.remoteAddress;

	  this.checkIntervalTimer = null;
	  this.upgradeTimeoutTimer = null;
	  this.pingTimeoutTimer = null;

	  this.setTransport(transport);
	  this.onOpen();
	}

	/**
	 * Inherits from EventEmitter.
	 */

	Socket.prototype.__proto__ = EventEmitter.prototype;

	/**
	 * Called upon transport considered open.
	 *
	 * @api private
	 */

	Socket.prototype.onOpen = function () {
	  this.readyState = 'open';

	  // sends an `open` packet
	  this.transport.sid = this.id;
	  this.sendPacket('open', JSON.stringify({
	      sid: this.id
	    , upgrades: this.getAvailableUpgrades()
	    , pingInterval: this.server.pingInterval
	    , pingTimeout: this.server.pingTimeout
	  }));

	  this.emit('open');
	  this.setPingTimeout();
	};

	/**
	 * Called upon transport packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('open' == this.readyState) {
	    // export packet event
	    debug('packet');
	    this.emit('packet', packet);

	    // Reset ping timeout on any packet, incoming data is a good sign of
	    // other side's liveness
	    this.setPingTimeout();

	    switch (packet.type) {

	      case 'ping':
	        debug('got ping');
	        this.sendPacket('pong');
	        this.emit('heartbeat');
	        break;

	      case 'error':
	        this.onClose('parse error');
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with closed socket');
	  }
	};

	/**
	 * Called upon transport error.
	 *
	 * @param {Error} error object
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug('transport error');
	  this.onClose('transport error', err);
	};

	/**
	 * Sets and resets ping timeout timer based on client pings.
	 *
	 * @api private
	 */

	Socket.prototype.setPingTimeout = function () {
	  var self = this;
	  clearTimeout(self.pingTimeoutTimer);
	  self.pingTimeoutTimer = setTimeout(function () {
	    self.onClose('ping timeout');
	  }, self.server.pingInterval + self.server.pingTimeout);
	};

	/**
	 * Attaches handlers for the given transport.
	 *
	 * @param {Transport} transport
	 * @api private
	 */

	Socket.prototype.setTransport = function (transport) {
	  this.transport = transport;
	  this.transport.once('error', this.onError.bind(this));
	  this.transport.on('packet', this.onPacket.bind(this));
	  this.transport.on('drain', this.flush.bind(this));
	  this.transport.once('close', this.onClose.bind(this, 'transport close'));
	  //this function will manage packet events (also message callbacks)
	  this.setupSendCallback();
	};

	/**
	 * Upgrades socket to the given transport
	 *
	 * @param {Transport} transport
	 * @api private
	 */

	Socket.prototype.maybeUpgrade = function (transport) {
	  debug('might upgrade socket transport from "%s" to "%s"'
	    , this.transport.name, transport.name);

	  var self = this;

	  // set transport upgrade timer
	  self.upgradeTimeoutTimer = setTimeout(function () {
	    debug('client did not complete upgrade - closing transport');
	    clearInterval(self.checkIntervalTimer);
	    self.checkIntervalTimer = null;
	    if ('open' == transport.readyState) {
	      transport.close();
	    }
	  }, this.server.upgradeTimeout);

	  function onPacket(packet){
	    if ('ping' == packet.type && 'probe' == packet.data) {
	      transport.send([{ type: 'pong', data: 'probe' }]);
	      clearInterval(self.checkIntervalTimer);
	      self.checkIntervalTimer = setInterval(check, 100);
	    } else if ('upgrade' == packet.type && self.readyState != 'closed') {
	      debug('got upgrade packet - upgrading');
	      self.upgraded = true;
	      self.clearTransport();
	      self.setTransport(transport);
	      self.emit('upgrade', transport);
	      self.setPingTimeout();
	      self.flush();
	      clearInterval(self.checkIntervalTimer);
	      self.checkIntervalTimer = null;
	      clearTimeout(self.upgradeTimeoutTimer);
	      transport.removeListener('packet', onPacket);
	      if (self.readyState == 'closing') {
	        transport.close(function () {
	          self.onClose('forced close');
	        });
	      }
	    } else {
	      transport.close();
	    }
	  }

	  // we force a polling cycle to ensure a fast upgrade
	  function check(){
	    if ('polling' == self.transport.name && self.transport.writable) {
	      debug('writing a noop packet to polling for fast upgrade');
	      self.transport.send([{ type: 'noop' }]);
	    }
	  }

	  transport.on('packet', onPacket);
	};

	/**
	 * Clears listeners and timers associated with current transport.
	 *
	 * @api private
	 */

	Socket.prototype.clearTransport = function () {
	  // silence further transport errors and prevent uncaught exceptions
	  this.transport.on('error', function(){
	    debug('error triggered by discarded transport');
	  });
	  clearTimeout(this.pingTimeoutTimer);
	};

	/**
	 * Called upon transport considered closed.
	 * Possible reasons: `ping timeout`, `client error`, `parse error`,
	 * `transport error`, `server close`, `transport close`
	 */

	Socket.prototype.onClose = function (reason, description) {
	  if ('closed' != this.readyState) {
	    clearTimeout(this.pingTimeoutTimer);
	    clearInterval(this.checkIntervalTimer);
	    this.checkIntervalTimer = null;
	    clearTimeout(this.upgradeTimeoutTimer);
	    var self = this;
	    // clean writeBuffer in next tick, so developers can still
	    // grab the writeBuffer on 'close' event
	    process.nextTick(function() {
	      self.writeBuffer = [];
	    });
	    this.packetsFn = [];
	    this.sentCallbackFn = [];
	    this.clearTransport();
	    this.readyState = 'closed';
	    this.emit('close', reason, description);
	  }
	};

	/**
	 * Setup and manage send callback
	 *
	 * @api private
	 */

	Socket.prototype.setupSendCallback = function () {
	  var self = this;
	  //the message was sent successfully, execute the callback
	  this.transport.on('drain', function() {
	    if (self.sentCallbackFn.length > 0) {
	      var seqFn = self.sentCallbackFn.splice(0,1)[0];
	      if ('function' == typeof seqFn) {
	        debug('executing send callback');
	        seqFn(self.transport);
	      } else if (Array.isArray(seqFn)) {
	        debug('executing batch send callback');
	        for (var l = seqFn.length, i = 0; i < l; i++) {
	          if ('function' == typeof seqFn[i]) {
	            seqFn[i](self.transport);
	          }
	        }
	      }
	    }
	  });
	};

	/**
	 * Sends a message packet.
	 *
	 * @param {String} message
	 * @param {Function} callback
	 * @return {Socket} for chaining
	 * @api public
	 */

	Socket.prototype.send =
	Socket.prototype.write = function(data, callback){
	  this.sendPacket('message', data, callback);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type
	 * @param {String} optional, data
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, callback) {
	  if ('closing' != this.readyState) {
	    debug('sending packet "%s" (%s)', type, data);

	    var packet = { type: type };
	    if (data) packet.data = data;

	    // exports packetCreate event
	    this.emit('packetCreate', packet);

	    this.writeBuffer.push(packet);

	    //add send callback to object
	    this.packetsFn.push(callback);

	    this.flush();
	  }
	};

	/**
	 * Attempts to flush the packets buffer.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' != this.readyState && this.transport.writable
	    && this.writeBuffer.length) {
	    debug('flushing buffer to transport');
	    this.emit('flush', this.writeBuffer);
	    this.server.emit('flush', this, this.writeBuffer);
	    var wbuf = this.writeBuffer;
	    this.writeBuffer = [];
	    if (!this.transport.supportsFraming) {
	      this.sentCallbackFn.push(this.packetsFn);
	    } else {
	      this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);
	    }
	    this.packetsFn = [];
	    this.transport.send(wbuf);
	    this.emit('drain');
	    this.server.emit('drain', this);
	  }
	};

	/**
	 * Get available upgrades for this socket.
	 *
	 * @api private
	 */

	Socket.prototype.getAvailableUpgrades = function () {
	  var availableUpgrades = [];
	  var allUpgrades = this.server.upgrades(this.transport.name);
	  for (var i = 0, l = allUpgrades.length; i < l; ++i) {
	    var upg = allUpgrades[i];
	    if (this.server.transports.indexOf(upg) != -1) {
	      availableUpgrades.push(upg);
	    }
	  }
	  return availableUpgrades;
	};

	/**
	 * Closes the socket and underlying transport.
	 *
	 * @return {Socket} for chaining
	 * @api public
	 */

	Socket.prototype.close = function () {
	  if ('open' != this.readyState) return;

	  this.readyState = 'closing';

	  if (this.writeBuffer.length) {
	    this.once('drain', this.closeTransport.bind(this));
	    return;
	  }

	  this.closeTransport();
	};

	/**
	 * Closes the underlying transport.
	 *
	 * @api private
	 */

	Socket.prototype.closeTransport = function () {
	  this.transport.close(this.onClose.bind(this, 'forced close'));
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 87 */
/***/ function(module, exports) {

	
	/**
	 * Module dependencies.
	 */

	var global = (function() { return this; })();

	/**
	 * WebSocket constructor.
	 */

	var WebSocket = global.WebSocket || global.MozWebSocket;

	/**
	 * Module exports.
	 */

	module.exports = WebSocket ? ws : null;

	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */

	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}

	if (WebSocket) ws.prototype = WebSocket.prototype;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(89);


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var url = __webpack_require__(90);
	var parser = __webpack_require__(93);
	var Manager = __webpack_require__(100);
	var debug = __webpack_require__(92)('socket.io-client');

	/**
	 * Module exports.
	 */

	module.exports = exports = lookup;

	/**
	 * Managers cache.
	 */

	var cache = exports.managers = {};

	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */

	function lookup(uri, opts) {
	  if (typeof uri == 'object') {
	    opts = uri;
	    uri = undefined;
	  }

	  opts = opts || {};

	  var parsed = url(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var io;

	  if (opts.forceNew || opts['force new connection'] || false === opts.multiplex) {
	    debug('ignoring socket cache for %s', source);
	    io = Manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = Manager(source, opts);
	    }
	    io = cache[id];
	  }

	  return io.socket(parsed.path);
	}

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = parser.protocol;

	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */

	exports.connect = lookup;

	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */

	exports.Manager = __webpack_require__(100);
	exports.Socket = __webpack_require__(131);


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module dependencies.
	 */

	var parseuri = __webpack_require__(91);
	var debug = __webpack_require__(92)('socket.io-client:url');

	/**
	 * Module exports.
	 */

	module.exports = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url(uri, loc){
	  var obj = uri;

	  // default to window.location
	  var loc = loc || global.location;
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' == typeof uri) {
	    if ('/' == uri.charAt(0)) {
	      if ('/' == uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.hostname + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' != typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    }
	    else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  // define unique id
	  obj.id = obj.protocol + '://' + obj.host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + obj.host + (loc && loc.port == obj.port ? '' : (':' + obj.port));

	  return obj;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host'
	  , 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	module.exports = function parseuri(str) {
	  var m = re.exec(str || '')
	    , uri = {}
	    , i = 14;

	  while (i--) {
	    uri[parts[i]] = m[i] || '';
	  }

	  return uri;
	};


/***/ },
/* 92 */
/***/ function(module, exports) {

	
	/**
	 * Expose `debug()` as the module.
	 */

	module.exports = debug;

	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */

	function debug(name) {
	  if (!debug.enabled(name)) return function(){};

	  return function(fmt){
	    fmt = coerce(fmt);

	    var curr = new Date;
	    var ms = curr - (debug[name] || curr);
	    debug[name] = curr;

	    fmt = name
	      + ' '
	      + fmt
	      + ' +' + debug.humanize(ms);

	    // This hackery is required for IE8
	    // where `console.log` doesn't have 'apply'
	    window.console
	      && console.log
	      && Function.prototype.apply.call(console.log, console, arguments);
	  }
	}

	/**
	 * The currently active debug mode names.
	 */

	debug.names = [];
	debug.skips = [];

	/**
	 * Enables a debug mode by name. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} name
	 * @api public
	 */

	debug.enable = function(name) {
	  try {
	    localStorage.debug = name;
	  } catch(e){}

	  var split = (name || '').split(/[\s,]+/)
	    , len = split.length;

	  for (var i = 0; i < len; i++) {
	    name = split[i].replace('*', '.*?');
	    if (name[0] === '-') {
	      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
	    }
	    else {
	      debug.names.push(new RegExp('^' + name + '$'));
	    }
	  }
	};

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	debug.disable = function(){
	  debug.enable('');
	};

	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */

	debug.humanize = function(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;

	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	};

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	debug.enabled = function(name) {
	  for (var i = 0, len = debug.skips.length; i < len; i++) {
	    if (debug.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (var i = 0, len = debug.names.length; i < len; i++) {
	    if (debug.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Coerce `val`.
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	// persist

	try {
	  if (window.localStorage) debug.enable(localStorage.debug);
	} catch(e){}


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var debug = __webpack_require__(92)('socket.io-parser');
	var json = __webpack_require__(94);
	var isArray = __webpack_require__(96);
	var Emitter = __webpack_require__(97);
	var binary = __webpack_require__(98);
	var isBuf = __webpack_require__(99);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'BINARY_EVENT',
	  'ACK',
	  'BINARY_ACK',
	  'ERROR'
	];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  }
	  else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;

	  // first is type
	  str += obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	Emitter(Decoder.prototype);

	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function(obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  }
	  else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  }
	  else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var p = {};
	  var i = 0;

	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    var buf = '';
	    while (str.charAt(++i) != '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) != '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }

	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i == str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    try {
	      p.data = json.parse(str.substr(i));
	    } catch(e){
	      return error();
	    }
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(data){
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */
	;(function (window) {
	  // Convenience aliases.
	  var getClass = {}.toString, isProperty, forEach, undef;

	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(95);

	  // Detect native implementations.
	  var nativeJSON = typeof JSON == "object" && JSON;

	  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if
	  // available.
	  var JSON3 = typeof exports == "object" && exports && !exports.nodeType && exports;

	  if (JSON3 && nativeJSON) {
	    // Explicitly delegate to the native `stringify` and `parse`
	    // implementations in CommonJS environments.
	    JSON3.stringify = nativeJSON.stringify;
	    JSON3.parse = nativeJSON.parse;
	  } else {
	    // Export for web browsers, JavaScript engines, and asynchronous module
	    // loaders, using the global `JSON` object if available.
	    JSON3 = window.JSON = nativeJSON || {};
	  }

	  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	  var isExtended = new Date(-3509827334573292);
	  try {
	    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	    // results for certain dates in Opera >= 10.53.
	    isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	      // Safari < 2.0.2 stores the internal millisecond time value correctly,
	      // but clips the values returned by the date methods to the range of
	      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	  } catch (exception) {}

	  // Internal: Determines whether the native `JSON.stringify` and `parse`
	  // implementations are spec-compliant. Based on work by Ken Snyder.
	  function has(name) {
	    if (has[name] !== undef) {
	      // Return cached feature test result.
	      return has[name];
	    }

	    var isSupported;
	    if (name == "bug-string-char-index") {
	      // IE <= 7 doesn't support accessing string characters using square
	      // bracket notation. IE 8 only supports this for primitives.
	      isSupported = "a"[0] != "a";
	    } else if (name == "json") {
	      // Indicates whether both `JSON.stringify` and `JSON.parse` are
	      // supported.
	      isSupported = has("json-stringify") && has("json-parse");
	    } else {
	      var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	      // Test `JSON.stringify`.
	      if (name == "json-stringify") {
	        var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	        if (stringifySupported) {
	          // A test function object with a custom `toJSON` method.
	          (value = function () {
	            return 1;
	          }).toJSON = value;
	          try {
	            stringifySupported =
	              // Firefox 3.1b1 and b2 serialize string, number, and boolean
	              // primitives as object literals.
	              stringify(0) === "0" &&
	              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	              // literals.
	              stringify(new Number()) === "0" &&
	              stringify(new String()) == '""' &&
	              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	              // does not define a canonical JSON representation (this applies to
	              // objects with `toJSON` properties as well, *unless* they are nested
	              // within an object or array).
	              stringify(getClass) === undef &&
	              // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	              // FF 3.1b3 pass this test.
	              stringify(undef) === undef &&
	              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	              // respectively, if the value is omitted entirely.
	              stringify() === undef &&
	              // FF 3.1b1, 2 throw an error if the given value is not a number,
	              // string, array, object, Boolean, or `null` literal. This applies to
	              // objects with custom `toJSON` methods as well, unless they are nested
	              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	              // methods entirely.
	              stringify(value) === "1" &&
	              stringify([value]) == "[1]" &&
	              // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	              // `"[null]"`.
	              stringify([undef]) == "[null]" &&
	              // YUI 3.0.0b1 fails to serialize `null` literals.
	              stringify(null) == "null" &&
	              // FF 3.1b1, 2 halts serialization if an array contains a function:
	              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	              // elides non-JSON values from objects and arrays, unless they
	              // define custom `toJSON` methods.
	              stringify([undef, getClass, null]) == "[null,null,null]" &&
	              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	              // where character escape codes are expected (e.g., `\b` => `\u0008`).
	              stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	              stringify(null, value) === "1" &&
	              stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	              // serialize extended years.
	              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	              // The milliseconds are optional in ES 5, but required in 5.1.
	              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	              // four-digit years instead of six-digit years. Credits: @Yaffle.
	              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	              // values less than 1000. Credits: @Yaffle.
	              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	          } catch (exception) {
	            stringifySupported = false;
	          }
	        }
	        isSupported = stringifySupported;
	      }
	      // Test `JSON.parse`.
	      if (name == "json-parse") {
	        var parse = JSON3.parse;
	        if (typeof parse == "function") {
	          try {
	            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	            // Conforming implementations should also coerce the initial argument to
	            // a string prior to parsing.
	            if (parse("0") === 0 && !parse(false)) {
	              // Simple parsing test.
	              value = parse(serialized);
	              var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	              if (parseSupported) {
	                try {
	                  // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                  parseSupported = !parse('"\t"');
	                } catch (exception) {}
	                if (parseSupported) {
	                  try {
	                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                    // certain octal literals.
	                    parseSupported = parse("01") !== 1;
	                  } catch (exception) {}
	                }
	                if (parseSupported) {
	                  try {
	                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                    // points. These environments, along with FF 3.1b1 and 2,
	                    // also allow trailing commas in JSON objects and arrays.
	                    parseSupported = parse("1.") !== 1;
	                  } catch (exception) {}
	                }
	              }
	            }
	          } catch (exception) {
	            parseSupported = false;
	          }
	        }
	        isSupported = parseSupported;
	      }
	    }
	    return has[name] = !!isSupported;
	  }

	  if (!has("json")) {
	    // Common `[[Class]]` name aliases.
	    var functionClass = "[object Function]";
	    var dateClass = "[object Date]";
	    var numberClass = "[object Number]";
	    var stringClass = "[object String]";
	    var arrayClass = "[object Array]";
	    var booleanClass = "[object Boolean]";

	    // Detect incomplete support for accessing string characters by index.
	    var charIndexBuggy = has("bug-string-char-index");

	    // Define additional utility methods if the `Date` methods are buggy.
	    if (!isExtended) {
	      var floor = Math.floor;
	      // A mapping between the months of the year and the number of days between
	      // January 1st and the first of the respective month.
	      var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	      // Internal: Calculates the number of days between the Unix epoch and the
	      // first day of the given month.
	      var getDay = function (year, month) {
	        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	      };
	    }

	    // Internal: Determines if a property is a direct property of the given
	    // object. Delegates to the native `Object#hasOwnProperty` method.
	    if (!(isProperty = {}.hasOwnProperty)) {
	      isProperty = function (property) {
	        var members = {}, constructor;
	        if ((members.__proto__ = null, members.__proto__ = {
	          // The *proto* property cannot be set multiple times in recent
	          // versions of Firefox and SeaMonkey.
	          "toString": 1
	        }, members).toString != getClass) {
	          // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	          // supports the mutable *proto* property.
	          isProperty = function (property) {
	            // Capture and break the object's prototype chain (see section 8.6.2
	            // of the ES 5.1 spec). The parenthesized expression prevents an
	            // unsafe transformation by the Closure Compiler.
	            var original = this.__proto__, result = property in (this.__proto__ = null, this);
	            // Restore the original prototype chain.
	            this.__proto__ = original;
	            return result;
	          };
	        } else {
	          // Capture a reference to the top-level `Object` constructor.
	          constructor = members.constructor;
	          // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	          // other environments.
	          isProperty = function (property) {
	            var parent = (this.constructor || constructor).prototype;
	            return property in this && !(property in parent && this[property] === parent[property]);
	          };
	        }
	        members = null;
	        return isProperty.call(this, property);
	      };
	    }

	    // Internal: A set of primitive types used by `isHostType`.
	    var PrimitiveTypes = {
	      'boolean': 1,
	      'number': 1,
	      'string': 1,
	      'undefined': 1
	    };

	    // Internal: Determines if the given object `property` value is a
	    // non-primitive.
	    var isHostType = function (object, property) {
	      var type = typeof object[property];
	      return type == 'object' ? !!object[property] : !PrimitiveTypes[type];
	    };

	    // Internal: Normalizes the `for...in` iteration algorithm across
	    // environments. Each enumerated key is yielded to a `callback` function.
	    forEach = function (object, callback) {
	      var size = 0, Properties, members, property;

	      // Tests for bugs in the current environment's `for...in` algorithm. The
	      // `valueOf` property inherits the non-enumerable flag from
	      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	      (Properties = function () {
	        this.valueOf = 0;
	      }).prototype.valueOf = 0;

	      // Iterate over a new instance of the `Properties` class.
	      members = new Properties();
	      for (property in members) {
	        // Ignore all properties inherited from `Object.prototype`.
	        if (isProperty.call(members, property)) {
	          size++;
	        }
	      }
	      Properties = members = null;

	      // Normalize the iteration algorithm.
	      if (!size) {
	        // A list of non-enumerable properties inherited from `Object.prototype`.
	        members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	        // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	        // properties.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, length;
	          var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;
	          for (property in object) {
	            // Gecko <= 1.0 enumerates the `prototype` property of functions under
	            // certain conditions; IE does not.
	            if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for each non-enumerable property.
	          for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	        };
	      } else if (size == 2) {
	        // Safari <= 2.0.4 enumerates shadowed properties twice.
	        forEach = function (object, callback) {
	          // Create a set of iterated properties.
	          var members = {}, isFunction = getClass.call(object) == functionClass, property;
	          for (property in object) {
	            // Store each property name to prevent double enumeration. The
	            // `prototype` property of functions is not enumerated due to cross-
	            // environment inconsistencies.
	            if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	        };
	      } else {
	        // No bugs detected; use the standard `for...in` algorithm.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	          for (property in object) {
	            if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for the `constructor` property due to
	          // cross-environment inconsistencies.
	          if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	            callback(property);
	          }
	        };
	      }
	      return forEach(object, callback);
	    };

	    // Public: Serializes a JavaScript `value` as a JSON string. The optional
	    // `filter` argument may specify either a function that alters how object and
	    // array members are serialized, or an array of strings and numbers that
	    // indicates which properties should be serialized. The optional `width`
	    // argument may be either a string or number that specifies the indentation
	    // level of the output.
	    if (!has("json-stringify")) {
	      // Internal: A map of control characters and their escaped equivalents.
	      var Escapes = {
	        92: "\\\\",
	        34: '\\"',
	        8: "\\b",
	        12: "\\f",
	        10: "\\n",
	        13: "\\r",
	        9: "\\t"
	      };

	      // Internal: Converts `value` into a zero-padded string such that its
	      // length is at least equal to `width`. The `width` must be <= 6.
	      var leadingZeroes = "000000";
	      var toPaddedString = function (width, value) {
	        // The `|| 0` expression is necessary to work around a bug in
	        // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	        return (leadingZeroes + (value || 0)).slice(-width);
	      };

	      // Internal: Double-quotes a string `value`, replacing all ASCII control
	      // characters (characters with code unit values between 0 and 31) with
	      // their escaped equivalents. This is an implementation of the
	      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	      var unicodePrefix = "\\u00";
	      var quote = function (value) {
	        var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
	        if (isLarge) {
	          symbols = value.split("");
	        }
	        for (; index < length; index++) {
	          var charCode = value.charCodeAt(index);
	          // If the character is a control character, append its Unicode or
	          // shorthand escape sequence; otherwise, append the character as-is.
	          switch (charCode) {
	            case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	              result += Escapes[charCode];
	              break;
	            default:
	              if (charCode < 32) {
	                result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                break;
	              }
	              result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
	          }
	        }
	        return result + '"';
	      };

	      // Internal: Recursively serializes an object. Implements the
	      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	      var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	        try {
	          // Necessary for host object support.
	          value = object[property];
	        } catch (exception) {}
	        if (typeof value == "object" && value) {
	          className = getClass.call(value);
	          if (className == dateClass && !isProperty.call(value, "toJSON")) {
	            if (value > -1 / 0 && value < 1 / 0) {
	              // Dates are serialized according to the `Date#toJSON` method
	              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	              // for the ISO 8601 date time string format.
	              if (getDay) {
	                // Manually compute the year, month, date, hours, minutes,
	                // seconds, and milliseconds if the `getUTC*` methods are
	                // buggy. Adapted from @Yaffle's `date-shim` project.
	                date = floor(value / 864e5);
	                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                date = 1 + date - getDay(year, month);
	                // The `time` value specifies the time within the day (see ES
	                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                // to compute `A modulo B`, as the `%` operator does not
	                // correspond to the `modulo` operation for negative numbers.
	                time = (value % 864e5 + 864e5) % 864e5;
	                // The hours, minutes, seconds, and milliseconds are obtained by
	                // decomposing the time within the day. See section 15.9.1.10.
	                hours = floor(time / 36e5) % 24;
	                minutes = floor(time / 6e4) % 60;
	                seconds = floor(time / 1e3) % 60;
	                milliseconds = time % 1e3;
	              } else {
	                year = value.getUTCFullYear();
	                month = value.getUTCMonth();
	                date = value.getUTCDate();
	                hours = value.getUTCHours();
	                minutes = value.getUTCMinutes();
	                seconds = value.getUTCSeconds();
	                milliseconds = value.getUTCMilliseconds();
	              }
	              // Serialize extended years correctly.
	              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                // Months, dates, hours, minutes, and seconds should have two
	                // digits; milliseconds should have three.
	                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                // Milliseconds are optional in ES 5.0, but required in 5.1.
	                "." + toPaddedString(3, milliseconds) + "Z";
	            } else {
	              value = null;
	            }
	          } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	            // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	            // ignores all `toJSON` methods on these objects unless they are
	            // defined directly on an instance.
	            value = value.toJSON(property);
	          }
	        }
	        if (callback) {
	          // If a replacement function was provided, call it to obtain the value
	          // for serialization.
	          value = callback.call(object, property, value);
	        }
	        if (value === null) {
	          return "null";
	        }
	        className = getClass.call(value);
	        if (className == booleanClass) {
	          // Booleans are represented literally.
	          return "" + value;
	        } else if (className == numberClass) {
	          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	          // `"null"`.
	          return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	        } else if (className == stringClass) {
	          // Strings are double-quoted and escaped.
	          return quote("" + value);
	        }
	        // Recursively serialize objects and arrays.
	        if (typeof value == "object") {
	          // Check for cyclic structures. This is a linear search; performance
	          // is inversely proportional to the number of unique nested objects.
	          for (length = stack.length; length--;) {
	            if (stack[length] === value) {
	              // Cyclic structures cannot be serialized by `JSON.stringify`.
	              throw TypeError();
	            }
	          }
	          // Add the object to the stack of traversed objects.
	          stack.push(value);
	          results = [];
	          // Save the current indentation level and indent one additional level.
	          prefix = indentation;
	          indentation += whitespace;
	          if (className == arrayClass) {
	            // Recursively serialize array elements.
	            for (index = 0, length = value.length; index < length; index++) {
	              element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	              results.push(element === undef ? "null" : element);
	            }
	            result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	          } else {
	            // Recursively serialize object members. Members are selected from
	            // either a user-specified list of property names, or the object
	            // itself.
	            forEach(properties || value, function (property) {
	              var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	              if (element !== undef) {
	                // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                // is not the empty string, let `member` {quote(property) + ":"}
	                // be the concatenation of `member` and the `space` character."
	                // The "`space` character" refers to the literal space
	                // character, not the `space` {width} argument provided to
	                // `JSON.stringify`.
	                results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	              }
	            });
	            result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	          }
	          // Remove the object from the traversed object stack.
	          stack.pop();
	          return result;
	        }
	      };

	      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	      JSON3.stringify = function (source, filter, width) {
	        var whitespace, callback, properties, className;
	        if (typeof filter == "function" || typeof filter == "object" && filter) {
	          if ((className = getClass.call(filter)) == functionClass) {
	            callback = filter;
	          } else if (className == arrayClass) {
	            // Convert the property names array into a makeshift set.
	            properties = {};
	            for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	          }
	        }
	        if (width) {
	          if ((className = getClass.call(width)) == numberClass) {
	            // Convert the `width` to an integer and create a string containing
	            // `width` number of space characters.
	            if ((width -= width % 1) > 0) {
	              for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	            }
	          } else if (className == stringClass) {
	            whitespace = width.length <= 10 ? width : width.slice(0, 10);
	          }
	        }
	        // Opera <= 7.54u2 discards the values associated with empty string keys
	        // (`""`) only if they are used directly within an object member list
	        // (e.g., `!("" in { "": 1})`).
	        return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	      };
	    }

	    // Public: Parses a JSON source string.
	    if (!has("json-parse")) {
	      var fromCharCode = String.fromCharCode;

	      // Internal: A map of escaped control characters and their unescaped
	      // equivalents.
	      var Unescapes = {
	        92: "\\",
	        34: '"',
	        47: "/",
	        98: "\b",
	        116: "\t",
	        110: "\n",
	        102: "\f",
	        114: "\r"
	      };

	      // Internal: Stores the parser state.
	      var Index, Source;

	      // Internal: Resets the parser state and throws a `SyntaxError`.
	      var abort = function() {
	        Index = Source = null;
	        throw SyntaxError();
	      };

	      // Internal: Returns the next token, or `"$"` if the parser has reached
	      // the end of the source string. A token may be a string, number, `null`
	      // literal, or Boolean literal.
	      var lex = function () {
	        var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	        while (Index < length) {
	          charCode = source.charCodeAt(Index);
	          switch (charCode) {
	            case 9: case 10: case 13: case 32:
	              // Skip whitespace tokens, including tabs, carriage returns, line
	              // feeds, and space characters.
	              Index++;
	              break;
	            case 123: case 125: case 91: case 93: case 58: case 44:
	              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	              // the current position.
	              value = charIndexBuggy ? source.charAt(Index) : source[Index];
	              Index++;
	              return value;
	            case 34:
	              // `"` delimits a JSON string; advance to the next character and
	              // begin parsing the string. String tokens are prefixed with the
	              // sentinel `@` character to distinguish them from punctuators and
	              // end-of-string tokens.
	              for (value = "@", Index++; Index < length;) {
	                charCode = source.charCodeAt(Index);
	                if (charCode < 32) {
	                  // Unescaped ASCII control characters (those with a code unit
	                  // less than the space character) are not permitted.
	                  abort();
	                } else if (charCode == 92) {
	                  // A reverse solidus (`\`) marks the beginning of an escaped
	                  // control character (including `"`, `\`, and `/`) or Unicode
	                  // escape sequence.
	                  charCode = source.charCodeAt(++Index);
	                  switch (charCode) {
	                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                      // Revive escaped control characters.
	                      value += Unescapes[charCode];
	                      Index++;
	                      break;
	                    case 117:
	                      // `\u` marks the beginning of a Unicode escape sequence.
	                      // Advance to the first character and validate the
	                      // four-digit code point.
	                      begin = ++Index;
	                      for (position = Index + 4; Index < position; Index++) {
	                        charCode = source.charCodeAt(Index);
	                        // A valid sequence comprises four hexdigits (case-
	                        // insensitive) that form a single hexadecimal value.
	                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                          // Invalid Unicode escape sequence.
	                          abort();
	                        }
	                      }
	                      // Revive the escaped character.
	                      value += fromCharCode("0x" + source.slice(begin, Index));
	                      break;
	                    default:
	                      // Invalid escape sequence.
	                      abort();
	                  }
	                } else {
	                  if (charCode == 34) {
	                    // An unescaped double-quote character marks the end of the
	                    // string.
	                    break;
	                  }
	                  charCode = source.charCodeAt(Index);
	                  begin = Index;
	                  // Optimize for the common case where a string is valid.
	                  while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                    charCode = source.charCodeAt(++Index);
	                  }
	                  // Append the string as-is.
	                  value += source.slice(begin, Index);
	                }
	              }
	              if (source.charCodeAt(Index) == 34) {
	                // Advance to the next character and return the revived string.
	                Index++;
	                return value;
	              }
	              // Unterminated string.
	              abort();
	            default:
	              // Parse numbers and literals.
	              begin = Index;
	              // Advance past the negative sign, if one is specified.
	              if (charCode == 45) {
	                isSigned = true;
	                charCode = source.charCodeAt(++Index);
	              }
	              // Parse an integer or floating-point value.
	              if (charCode >= 48 && charCode <= 57) {
	                // Leading zeroes are interpreted as octal literals.
	                if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                  // Illegal octal literal.
	                  abort();
	                }
	                isSigned = false;
	                // Parse the integer component.
	                for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                // Floats cannot contain a leading decimal point; however, this
	                // case is already accounted for by the parser.
	                if (source.charCodeAt(Index) == 46) {
	                  position = ++Index;
	                  // Parse the decimal component.
	                  for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal trailing decimal.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Parse exponents. The `e` denoting the exponent is
	                // case-insensitive.
	                charCode = source.charCodeAt(Index);
	                if (charCode == 101 || charCode == 69) {
	                  charCode = source.charCodeAt(++Index);
	                  // Skip past the sign following the exponent, if one is
	                  // specified.
	                  if (charCode == 43 || charCode == 45) {
	                    Index++;
	                  }
	                  // Parse the exponential component.
	                  for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal empty exponent.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Coerce the parsed value to a JavaScript number.
	                return +source.slice(begin, Index);
	              }
	              // A negative sign may only precede numbers.
	              if (isSigned) {
	                abort();
	              }
	              // `true`, `false`, and `null` literals.
	              if (source.slice(Index, Index + 4) == "true") {
	                Index += 4;
	                return true;
	              } else if (source.slice(Index, Index + 5) == "false") {
	                Index += 5;
	                return false;
	              } else if (source.slice(Index, Index + 4) == "null") {
	                Index += 4;
	                return null;
	              }
	              // Unrecognized token.
	              abort();
	          }
	        }
	        // Return the sentinel `$` character if the parser has reached the end
	        // of the source string.
	        return "$";
	      };

	      // Internal: Parses a JSON `value` token.
	      var get = function (value) {
	        var results, hasMembers;
	        if (value == "$") {
	          // Unexpected end of input.
	          abort();
	        }
	        if (typeof value == "string") {
	          if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	            // Remove the sentinel `@` character.
	            return value.slice(1);
	          }
	          // Parse object and array literals.
	          if (value == "[") {
	            // Parses a JSON array, returning a new JavaScript array.
	            results = [];
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing square bracket marks the end of the array literal.
	              if (value == "]") {
	                break;
	              }
	              // If the array literal contains elements, the current token
	              // should be a comma separating the previous element from the
	              // next.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "]") {
	                    // Unexpected trailing `,` in array literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each array element.
	                  abort();
	                }
	              }
	              // Elisions and leading commas are not permitted.
	              if (value == ",") {
	                abort();
	              }
	              results.push(get(value));
	            }
	            return results;
	          } else if (value == "{") {
	            // Parses a JSON object, returning a new JavaScript object.
	            results = {};
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing curly brace marks the end of the object literal.
	              if (value == "}") {
	                break;
	              }
	              // If the object literal contains members, the current token
	              // should be a comma separator.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "}") {
	                    // Unexpected trailing `,` in object literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each object member.
	                  abort();
	                }
	              }
	              // Leading commas are not permitted, object property names must be
	              // double-quoted strings, and a `:` must separate each property
	              // name and value.
	              if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                abort();
	              }
	              results[value.slice(1)] = get(lex());
	            }
	            return results;
	          }
	          // Unexpected token encountered.
	          abort();
	        }
	        return value;
	      };

	      // Internal: Updates a traversed object member.
	      var update = function(source, property, callback) {
	        var element = walk(source, property, callback);
	        if (element === undef) {
	          delete source[property];
	        } else {
	          source[property] = element;
	        }
	      };

	      // Internal: Recursively traverses a parsed JSON object, invoking the
	      // `callback` function for each value. This is an implementation of the
	      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	      var walk = function (source, property, callback) {
	        var value = source[property], length;
	        if (typeof value == "object" && value) {
	          // `forEach` can't be used to traverse an array in Opera <= 8.54
	          // because its `Object#hasOwnProperty` implementation returns `false`
	          // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	          if (getClass.call(value) == arrayClass) {
	            for (length = value.length; length--;) {
	              update(value, length, callback);
	            }
	          } else {
	            forEach(value, function (property) {
	              update(value, property, callback);
	            });
	          }
	        }
	        return callback.call(source, property, value);
	      };

	      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	      JSON3.parse = function (source, callback) {
	        var result, value;
	        Index = 0;
	        Source = "" + source;
	        result = get(lex());
	        // If a JSON string contains multiple tokens, it is invalid.
	        if (lex() != "$") {
	          abort();
	        }
	        // Reset the parser state.
	        Index = Source = null;
	        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	      };
	    }
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}(this));


/***/ },
/* 95 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 96 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 97 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = __webpack_require__(96);
	var isBuf = __webpack_require__(99);

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	exports.deconstructPacket = function(packet){
	  var buffers = [];
	  var packetData = packet.data;

	  function _deconstructPacket(data) {
	    if (!data) return data;

	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == typeof data && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }

	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	exports.reconstructPacket = function(packet, buffers) {
	  var curPlaceHolder = 0;

	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == typeof data) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }

	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((global.Blob && obj instanceof Blob) ||
	        (global.File && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 99 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	module.exports = isBuf;

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var url = __webpack_require__(90);
	var eio = __webpack_require__(101);
	var Socket = __webpack_require__(131);
	var Emitter = __webpack_require__(97);
	var parser = __webpack_require__(93);
	var on = __webpack_require__(133);
	var bind = __webpack_require__(134);
	var object = __webpack_require__(135);
	var debug = __webpack_require__(92)('socket.io-client:manager');
	var indexOf = __webpack_require__(128);
	var Backoff = __webpack_require__(136);

	/**
	 * Module exports
	 */

	module.exports = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager(uri, opts){
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' == typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connected = [];
	  this.encoding = false;
	  this.packetBuffer = [];
	  this.encoder = new parser.Encoder();
	  this.decoder = new parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function() {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function(){
	  for (var nsp in this.nsps) {
	    this.nsps[nsp].id = this.engine.id;
	  }
	};

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function(v){
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function(v){
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function(v){
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function(v){
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function(v){
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function(v){
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function() {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};


	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open =
	Manager.prototype.connect = function(fn){
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on(socket, 'open', function() {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function(data){
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function(){
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function(){
	  debug('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function(data){
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function(packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function(err){
	  debug('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function(nsp){
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connect', function(){
	      socket.id = self.engine.id;
	      if (!~indexOf(self.connected, socket)) {
	        self.connected.push(socket);
	      }
	    });
	  }
	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function(socket){
	  var index = indexOf(this.connected, socket);
	  if (~index) this.connected.splice(index, 1);
	  if (this.connected.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function(packet){
	  debug('writing packet %j', packet);
	  var self = this;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function(encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i]);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function() {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function(){
	  var sub;
	  while (sub = this.subs.shift()) sub.destroy();

	  this.packetBuffer = [];
	  this.encoding = false;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close =
	Manager.prototype.disconnect = function(){
	  this.skipReconnect = true;
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.engine && this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function(reason){
	  debug('close');
	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);
	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function(){
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function(){
	      if (self.skipReconnect) return;

	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function(err){
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function(){
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports =  __webpack_require__(102);


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(103);

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	module.exports.parser = __webpack_require__(111);


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */

	var transports = __webpack_require__(104);
	var Emitter = __webpack_require__(97);
	var debug = __webpack_require__(122)('engine.io-client:socket');
	var index = __webpack_require__(128);
	var parser = __webpack_require__(111);
	var parseuri = __webpack_require__(129);
	var parsejson = __webpack_require__(130);
	var parseqs = __webpack_require__(120);

	/**
	 * Module exports.
	 */

	module.exports = Socket;

	/**
	 * Noop function.
	 *
	 * @api private
	 */

	function noop(){}

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket(uri, opts){
	  if (!(this instanceof Socket)) return new Socket(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' == typeof uri) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri(uri);
	    opts.host = uri.host;
	    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  }

	  this.secure = null != opts.secure ? opts.secure :
	    (global.location && 'https:' == location.protocol);

	  if (opts.host) {
	    var pieces = opts.host.split(':');
	    opts.hostname = pieces.shift();
	    if (pieces.length) {
	      opts.port = pieces.pop();
	    } else if (!opts.port) {
	      // if no port is specified manually, use the protocol default
	      opts.port = this.secure ? '443' : '80';
	    }
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (global.location ? location.hostname : 'localhost');
	  this.port = opts.port || (global.location && location.port ?
	       location.port :
	       (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.callbackBuffer = [];
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized || null;

	  this.open();
	}

	Socket.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket.protocol = parser.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket.Socket = Socket;
	Socket.Transport = __webpack_require__(110);
	Socket.transports = __webpack_require__(104);
	Socket.parser = __webpack_require__(111);

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket.prototype.createTransport = function (name) {
	  debug('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;

	  // transport name
	  query.transport = name;

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports[name]({
	    agent: this.agent,
	    hostname: this.hostname,
	    port: this.port,
	    secure: this.secure,
	    path: this.path,
	    query: query,
	    forceJSONP: this.forceJSONP,
	    jsonp: this.jsonp,
	    forceBase64: this.forceBase64,
	    enablesXDR: this.enablesXDR,
	    timestampRequests: this.timestampRequests,
	    timestampParam: this.timestampParam,
	    policyPort: this.policyPort,
	    socket: this,
	    pfx: this.pfx,
	    key: this.key,
	    passphrase: this.passphrase,
	    cert: this.cert,
	    ca: this.ca,
	    ciphers: this.ciphers,
	    rejectUnauthorized: this.rejectUnauthorized
	  });

	  return transport;
	};

	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
	    transport = 'websocket';
	  } else if (0 == this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function() {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  var transport;
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket.prototype.setTransport = function(transport){
	  debug('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport
	  .on('drain', function(){
	    self.onDrain();
	  })
	  .on('packet', function(packet){
	    self.onPacket(packet);
	  })
	  .on('error', function(e){
	    self.onError(e);
	  })
	  .on('close', function(){
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket.prototype.probe = function (name) {
	  debug('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 })
	    , failed = false
	    , self = this;

	  Socket.priorWebsocketSuccess = false;

	  function onTransportOpen(){
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' == msg.type && 'probe' == msg.data) {
	        debug('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' == transport.name;

	        debug('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' == self.readyState) return;
	          debug('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport() {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  //Handle any error that happens while probing
	  function onerror(err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose(){
	    onerror("transport closed");
	  }

	  //When the socket is closed while we're probing
	  function onclose(){
	    onerror("socket closed");
	  }

	  //When the socket is upgraded while we're probing
	  function onupgrade(to){
	    if (transport && to.name != transport.name) {
	      debug('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  //Remove all listeners on the transport and on self
	  function cleanup(){
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();

	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket.prototype.onOpen = function () {
	  debug('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' == this.readyState && this.upgrade && this.transport.pause) {
	    debug('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(parsejson(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.emit('error', err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if  ('closed' == this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' == self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api public
	*/

	Socket.prototype.ping = function () {
	  this.sendPacket('ping');
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket.prototype.onDrain = function() {
	  for (var i = 0; i < this.prevBufferLen; i++) {
	    if (this.callbackBuffer[i]) {
	      this.callbackBuffer[i]();
	    }
	  }

	  this.writeBuffer.splice(0, this.prevBufferLen);
	  this.callbackBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (this.writeBuffer.length == 0) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' != this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket.prototype.write =
	Socket.prototype.send = function (msg, fn) {
	  this.sendPacket('message', msg, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, fn) {
	  if ('closing' == this.readyState || 'closed' == this.readyState) {
	    return;
	  }

	  var packet = { type: type, data: data };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  this.callbackBuffer.push(fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    function close() {
	      self.onClose('forced close');
	      debug('socket closing - telling transport to close');
	      self.transport.close();
	    }

	    function cleanupAndClose() {
	      self.removeListener('upgrade', cleanupAndClose);
	      self.removeListener('upgradeError', cleanupAndClose);
	      close();
	    }

	    function waitForUpgrade() {
	      // wait for upgrade to finish since we can't send packets while pausing a transport
	      self.once('upgrade', cleanupAndClose);
	      self.once('upgradeError', cleanupAndClose);
	    }

	    if (this.writeBuffer.length) {
	      this.once('drain', function() {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
	    debug('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // clean buffers in next tick, so developers can still
	    // grab the buffers on `close` event
	    setTimeout(function() {
	      self.writeBuffer = [];
	      self.callbackBuffer = [];
	      self.prevBufferLen = 0;
	    }, 0);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i<j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies
	 */

	var XMLHttpRequest = __webpack_require__(105);
	var XHR = __webpack_require__(108);
	var JSONP = __webpack_require__(125);
	var websocket = __webpack_require__(126);

	/**
	 * Export transports.
	 */

	exports.polling = polling;
	exports.websocket = websocket;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling(opts){
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname != location.hostname || port != opts.port;
	    xs = opts.secure != isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// browser shim for xmlhttprequest module
	var hasCORS = __webpack_require__(106);

	module.exports = function(opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }

	  if (!xdomain) {
	    try {
	      return new ActiveXObject('Microsoft.XMLHTTP');
	    } catch(e) { }
	  }
	}


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var global = __webpack_require__(107);

	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  module.exports = 'XMLHttpRequest' in global &&
	    'withCredentials' in new global.XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}


/***/ },
/* 107 */
/***/ function(module, exports) {

	
	/**
	 * Returns `this`. Execute this without a "context" (i.e. without it being
	 * attached to an object of the left-hand side), and `this` points to the
	 * "global" scope of the current JS execution.
	 */

	module.exports = (function () { return this; })();


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module requirements.
	 */

	var XMLHttpRequest = __webpack_require__(105);
	var Polling = __webpack_require__(109);
	var Emitter = __webpack_require__(97);
	var inherit = __webpack_require__(121);
	var debug = __webpack_require__(122)('engine.io-client:polling-xhr');

	/**
	 * Module exports.
	 */

	module.exports = XHR;
	module.exports.Request = Request;

	/**
	 * Empty function
	 */

	function empty(){}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR(opts){
	  Polling.call(this, opts);

	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = opts.hostname != global.location.hostname ||
	      port != opts.port;
	    this.xs = opts.secure != isSSL;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(XHR, Polling);

	/**
	 * XHR supports binary
	 */

	XHR.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR.prototype.request = function(opts){
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR.prototype.doWrite = function(data, fn){
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function(err){
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR.prototype.doPoll = function(){
	  debug('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function(data){
	    self.onData(data);
	  });
	  req.on('error', function(err){
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request(opts){
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined != opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function(){
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new XMLHttpRequest(opts);
	  var self = this;

	  try {
	    debug('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    if (this.supportsBinary) {
	      // This has to be done after open because Firefox is stupid
	      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
	      xhr.responseType = 'arraybuffer';
	    }

	    if ('POST' == this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function(){
	        self.onLoad();
	      };
	      xhr.onerror = function(){
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function(){
	        if (4 != xhr.readyState) return;
	        if (200 == xhr.status || 1223 == xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function(){
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }

	    debug('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function() {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (global.document) {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function(){
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function(data){
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function(err){
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function(fromError){
	  if ('undefined' == typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch(e) {}
	  }

	  if (global.document) {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function(){
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response;
	    } else {
	      if (!this.supportsBinary) {
	        data = this.xhr.responseText;
	      } else {
	        data = 'ok';
	      }
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function(){
	  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function(){
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	if (global.document) {
	  Request.requestsCount = 0;
	  Request.requests = {};
	  if (global.attachEvent) {
	    global.attachEvent('onunload', unloadHandler);
	  } else if (global.addEventListener) {
	    global.addEventListener('beforeunload', unloadHandler, false);
	  }
	}

	function unloadHandler() {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(110);
	var parseqs = __webpack_require__(120);
	var parser = __webpack_require__(111);
	var inherit = __webpack_require__(121);
	var debug = __webpack_require__(122)('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	module.exports = Polling;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = (function() {
	  var XMLHttpRequest = __webpack_require__(105);
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(Polling, Transport);

	/**
	 * Transport name.
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling.prototype.doOpen = function(){
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling.prototype.pause = function(onPause){
	  var pending = 0;
	  var self = this;

	  this.readyState = 'pausing';

	  function pause(){
	    debug('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function(){
	        debug('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function(){
	        debug('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling.prototype.poll = function(){
	  debug('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling.prototype.onData = function(data){
	  var self = this;
	  debug('polling got data %s', data);
	  var callback = function(packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' == self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' == packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' != this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' == this.readyState) {
	      this.poll();
	    } else {
	      debug('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function(){
	  var self = this;

	  function close(){
	    debug('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' == this.readyState) {
	    debug('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;
	  var callbackfn = function() {
	    self.writable = true;
	    self.emit('drain');
	  };

	  var self = this;
	  parser.encodePayload(packets, this.supportsBinary, function(data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = +new Date + '-' + Transport.timestamps++;
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // avoid port if default for schema
	  if (this.port && (('https' == schema && this.port != 443) ||
	     ('http' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  return schema + '://' + this.hostname + port + this.path + query;
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(111);
	var Emitter = __webpack_require__(97);

	/**
	 * Module exports.
	 */

	module.exports = Transport;

	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */

	function Transport (opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Transport.prototype);

	/**
	 * A counter used to prevent collisions in the timestamps used
	 * for cache busting.
	 */

	Transport.timestamps = 0;

	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */

	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};

	/**
	 * Opens the transport.
	 *
	 * @api public
	 */

	Transport.prototype.open = function () {
	  if ('closed' == this.readyState || '' == this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }

	  return this;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.doClose();
	    this.onClose();
	  }

	  return this;
	};

	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	Transport.prototype.send = function(packets){
	  if ('open' == this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};

	/**
	 * Called upon open
	 *
	 * @api private
	 */

	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};

	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function(data){
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};

	/**
	 * Called with a decoded packet.
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */

	var keys = __webpack_require__(112);
	var hasBinary = __webpack_require__(113);
	var sliceBuffer = __webpack_require__(115);
	var base64encoder = __webpack_require__(116);
	var after = __webpack_require__(117);
	var utf8 = __webpack_require__(118);

	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */

	var isAndroid = navigator.userAgent.match(/Android/i);

	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;

	/**
	 * Current protocol version.
	 */

	exports.protocol = 3;

	/**
	 * Packet types.
	 */

	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};

	var packetslist = keys(packets);

	/**
	 * Premade error packet.
	 */

	var err = { type: 'error', data: 'parser error' };

	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */

	var Blob = __webpack_require__(119);

	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */

	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if ('function' == typeof supportsBinary) {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }

	  if ('function' == typeof utf8encode) {
	    callback = utf8encode;
	    utf8encode = null;
	  }

	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;

	  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (Blob && data instanceof global.Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }

	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }

	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];

	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
	  }

	  return callback('' + encoded);

	};

	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}

	/**
	 * Encode packet helpers for binary types
	 */

	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);

	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }

	  return callback(resultBuffer.buffer);
	}

	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var fr = new FileReader();
	  fr.onload = function() {
	    packet.data = fr.result;
	    exports.encodePacket(packet, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}

	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }

	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);

	  return callback(blob);
	}

	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */

	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (Blob && packet.data instanceof Blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }

	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += global.btoa(b64data);
	  return callback(message);
	};

	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */

	exports.decodePacket = function (data, binaryType, utf8decode) {
	  // String data
	  if (typeof data == 'string' || data === undefined) {
	    if (data.charAt(0) == 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }

	    if (utf8decode) {
	      try {
	        data = utf8.decode(data);
	      } catch (e) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);

	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }

	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }

	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};

	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */

	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!global.ArrayBuffer) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }

	  var data = base64encoder.decode(msg.substr(1));

	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }

	  return { type: type, data: data };
	};

	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */

	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary == 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }

	  var isBinary = hasBinary(packets);

	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }

	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }

	  if (!packets.length) {
	    return callback('0:');
	  }

	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};

	/**
	 * Async array map using after
	 */

	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);

	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };

	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}

	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */

	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data != 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }

	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var packet;
	  if (data == '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	  var length = ''
	    , n, msg;

	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);

	    if (':' != chr) {
	      length += chr;
	    } else {
	      if ('' == length || (length != (n = Number(length)))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      msg = data.substr(i + 1, n);

	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, true);

	        if (err.type == packet.type && err.data == packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }

	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }

	      // advance cursor
	      i += n;
	      length = '';
	    }
	  }

	  if (length != '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	};

	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */

	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }

	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);

	    var resultArray = new Uint8Array(totalLength);

	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }

	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }

	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;

	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });

	    return callback(resultArray.buffer);
	  });
	};

	/**
	 * Encode as Blob
	 */

	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }

	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;

	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;

	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(new Blob(results));
	  });
	};

	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */

	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var bufferTail = data;
	  var buffers = [];

	  var numberTooLong = false;
	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';

	    for (var i = 1; ; i++) {
	      if (tailArray[i] == 255) break;

	      if (msgLength.length > 310) {
	        numberTooLong = true;
	        break;
	      }

	      msgLength += tailArray[i];
	    }

	    if(numberTooLong) return callback(err, 0, 1);

	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);

	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }

	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }

	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 112 */
/***/ function(module, exports) {

	
	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	module.exports = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/*
	 * Module requirements.
	 */

	var isArray = __webpack_require__(114);

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(data) {

	  function _hasBinary(obj) {
	    if (!obj) return false;

	    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }

	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      if (obj.toJSON) {
	        obj = obj.toJSON();
	      }

	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  return _hasBinary(data);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 114 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	module.exports = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};


/***/ },
/* 116 */
/***/ function(module, exports) {

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(chars){
	  "use strict";

	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";

	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }

	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }

	    return base64;
	  };

	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;

	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }

	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);

	    for (i = 0; i < len; i+=4) {
	      encoded1 = chars.indexOf(base64[i]);
	      encoded2 = chars.indexOf(base64[i+1]);
	      encoded3 = chars.indexOf(base64[i+2]);
	      encoded4 = chars.indexOf(base64[i+3]);

	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }

	    return arraybuffer;
	  };
	})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");


/***/ },
/* 117 */
/***/ function(module, exports) {

	module.exports = after

	function after(count, callback, err_cb) {
	    var bail = false
	    err_cb = err_cb || noop
	    proxy.count = count

	    return (count === 0) ? callback() : proxy

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true
	            callback(err)
	            // future error callbacks will go to error handler
	            callback = err_cb
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result)
	        }
	    }
	}

	function noop() {}


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/utf8js v2.0.0 by @mathias */
	;(function(root) {

		// Detect free variables `exports`
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var stringFromCharCode = String.fromCharCode;

		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}

		function checkScalarValue(codePoint) {
			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
		}
		/*--------------------------------------------------------------------------*/

		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}

		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				checkScalarValue(codePoint);
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}

		function utf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}

		/*--------------------------------------------------------------------------*/

		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}

			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}

			// If we end up here, it’s not a continuation byte
			throw Error('Invalid continuation byte');
		}

		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;

			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}

			if (byteIndex == byteCount) {
				return false;
			}

			// Read first byte
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}

			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				var byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					checkScalarValue(codePoint);
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}

			throw Error('Invalid UTF-8 detected');
		}

		var byteArray;
		var byteCount;
		var byteIndex;
		function utf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}

		/*--------------------------------------------------------------------------*/

		var utf8 = {
			'version': '2.0.0',
			'encode': utf8encode,
			'decode': utf8decode
		};

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return utf8;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = utf8;
			} else { // in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in utf8) {
					hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.utf8 = utf8;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43)(module), (function() { return this; }())))

/***/ },
/* 119 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = global.BlobBuilder
	  || global.WebKitBlobBuilder
	  || global.MSBlobBuilder
	  || global.MozBlobBuilder;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      ary[i] = buf;
	    }
	  }
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);

	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }

	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	};

	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	};

	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	exports.encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	exports.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};


/***/ },
/* 121 */
/***/ function(module, exports) {

	
	module.exports = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(123);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // This hackery is required for IE8,
	  // where the `console.log` function doesn't have 'apply'
	  return 'object' == typeof console
	    && 'function' == typeof console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      localStorage.removeItem('debug');
	    } else {
	      localStorage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = localStorage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(124);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 's':
	      return n * s;
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module requirements.
	 */

	var Polling = __webpack_require__(109);
	var inherit = __webpack_require__(121);

	/**
	 * Module exports.
	 */

	module.exports = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Callbacks count.
	 */

	var index = 0;

	/**
	 * Noop.
	 */

	function empty () { }

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling (opts) {
	  Polling.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    if (!global.___eio) global.___eio = [];
	    callbacks = global.___eio;
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (global.document && global.addEventListener) {
	    global.addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(JSONPPolling, Polling);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  Polling.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function(e){
	    self.onError('jsonp poll error',e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  insertAt.parentNode.insertBefore(script, insertAt);
	  this.script = script;

	  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);
	  
	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete () {
	    initIframe();
	    fn();
	  }

	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch(e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function(){
	      if (self.iframe.readyState == 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(110);
	var parser = __webpack_require__(111);
	var parseqs = __webpack_require__(120);
	var inherit = __webpack_require__(121);
	var debug = __webpack_require__(122)('engine.io-client:websocket');

	/**
	 * `ws` exposes a WebSocket-compatible interface in
	 * Node, or the `WebSocket` or `MozWebSocket` globals
	 * in the browser.
	 */

	var WebSocket = __webpack_require__(127);

	/**
	 * Module exports.
	 */

	module.exports = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(WS, Transport);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function(){
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var self = this;
	  var uri = this.uri();
	  var protocols = void(0);
	  var opts = { agent: this.agent };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  this.ws = new WebSocket(uri, protocols, opts);

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  this.ws.binaryType = 'arraybuffer';
	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function(){
	  var self = this;

	  this.ws.onopen = function(){
	    self.onOpen();
	  };
	  this.ws.onclose = function(){
	    self.onClose();
	  };
	  this.ws.onmessage = function(ev){
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function(e){
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Override `onData` to use a timer on iOS.
	 * See: https://gist.github.com/mloughran/2052006
	 *
	 * @api private
	 */

	if ('undefined' != typeof navigator
	  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
	  WS.prototype.onData = function(data){
	    var self = this;
	    setTimeout(function(){
	      Transport.prototype.onData.call(self, data);
	    }, 0);
	  };
	}

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;
	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  for (var i = 0, l = packets.length; i < l; i++) {
	    parser.encodePacket(packets[i], this.supportsBinary, function(data) {
	      //Sometimes the websocket has already been closed but the browser didn't
	      //have a chance of informing us about it yet, in that case send will
	      //throw an error
	      try {
	        self.ws.send(data);
	      } catch (e){
	        debug('websocket closed before onclose event');
	      }
	    });
	  }

	  function ondrain() {
	    self.writable = true;
	    self.emit('drain');
	  }
	  // fake drain
	  // defer to next tick to allow Socket to clear writeBuffer
	  setTimeout(ondrain, 0);
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function(){
	  Transport.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function(){
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && (('wss' == schema && this.port != 443)
	    || ('ws' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = +new Date;
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  return schema + '://' + this.hostname + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function(){
	  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
	};


/***/ },
/* 127 */
/***/ function(module, exports) {

	
	/**
	 * Module dependencies.
	 */

	var global = (function() { return this; })();

	/**
	 * WebSocket constructor.
	 */

	var WebSocket = global.WebSocket || global.MozWebSocket;

	/**
	 * Module exports.
	 */

	module.exports = WebSocket ? ws : null;

	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */

	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}

	if (WebSocket) ws.prototype = WebSocket.prototype;


/***/ },
/* 128 */
/***/ function(module, exports) {

	
	var indexOf = [].indexOf;

	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	module.exports = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};


/***/ },
/* 130 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * JSON parse.
	 *
	 * @see Based on jQuery#parseJSON (MIT) and JSON2
	 * @api private
	 */

	var rvalidchars = /^[\],:{}\s]*$/;
	var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
	var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
	var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
	var rtrimLeft = /^\s+/;
	var rtrimRight = /\s+$/;

	module.exports = function parsejson(data) {
	  if ('string' != typeof data || !data) {
	    return null;
	  }

	  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

	  // Attempt to parse using the native JSON parser first
	  if (global.JSON && JSON.parse) {
	    return JSON.parse(data);
	  }

	  if (rvalidchars.test(data.replace(rvalidescape, '@')
	      .replace(rvalidtokens, ']')
	      .replace(rvalidbraces, ''))) {
	    return (new Function('return ' + data))();
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(93);
	var Emitter = __webpack_require__(97);
	var toArray = __webpack_require__(132);
	var on = __webpack_require__(133);
	var bind = __webpack_require__(134);
	var debug = __webpack_require__(92)('socket.io-client:socket');
	var hasBin = __webpack_require__(113);

	/**
	 * Module exports.
	 */

	module.exports = exports = Socket;

	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */

	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1
	};

	/**
	 * Shortcut to `Emitter#emit`.
	 */

	var emit = Emitter.prototype.emit;

	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */

	function Socket(io, nsp){
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  if (this.io.autoConnect) this.open();
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */

	Socket.prototype.subEvents = function() {
	  if (this.subs) return;

	  var io = this.io;
	  this.subs = [
	    on(io, 'open', bind(this, 'onopen')),
	    on(io, 'packet', bind(this, 'onpacket')),
	    on(io, 'close', bind(this, 'onclose'))
	  ];
	};

	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */

	Socket.prototype.open =
	Socket.prototype.connect = function(){
	  if (this.connected) return this;

	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' == this.io.readyState) this.onopen();
	  return this;
	};

	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.send = function(){
	  var args = toArray(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.emit = function(ev){
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }

	  var args = toArray(arguments);
	  var parserType = parser.EVENT; // default
	  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
	  var packet = { type: parserType, data: args };

	  // event ack callback
	  if ('function' == typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }

	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }

	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.packet = function(packet){
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};

	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */

	Socket.prototype.onopen = function(){
	  debug('transport is open - connecting');

	  // write connect packet if necessary
	  if ('/' != this.nsp) {
	    this.packet({ type: parser.CONNECT });
	  }
	};

	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */

	Socket.prototype.onclose = function(reason){
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};

	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onpacket = function(packet){
	  if (packet.nsp != this.nsp) return;

	  switch (packet.type) {
	    case parser.CONNECT:
	      this.onconnect();
	      break;

	    case parser.EVENT:
	      this.onevent(packet);
	      break;

	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;

	    case parser.ACK:
	      this.onack(packet);
	      break;

	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;

	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;

	    case parser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};

	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onevent = function(packet){
	  var args = packet.data || [];
	  debug('emitting event %j', args);

	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }

	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};

	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */

	Socket.prototype.ack = function(id){
	  var self = this;
	  var sent = false;
	  return function(){
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray(arguments);
	    debug('sending ack %j', args);

	    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
	    self.packet({
	      type: type,
	      id: id,
	      data: args
	    });
	  };
	};

	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onack = function(packet){
	  debug('calling ack %s with %j', packet.id, packet.data);
	  var fn = this.acks[packet.id];
	  fn.apply(this, packet.data);
	  delete this.acks[packet.id];
	};

	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */

	Socket.prototype.onconnect = function(){
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};

	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */

	Socket.prototype.emitBuffered = function(){
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];

	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};

	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */

	Socket.prototype.ondisconnect = function(){
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};

	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */

	Socket.prototype.destroy = function(){
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }

	  this.io.destroy(this);
	};

	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.close =
	Socket.prototype.disconnect = function(){
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: parser.DISCONNECT });
	  }

	  // remove socket from pool
	  this.destroy();

	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};


/***/ },
/* 132 */
/***/ function(module, exports) {

	module.exports = toArray

	function toArray(list, index) {
	    var array = []

	    index = index || 0

	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i]
	    }

	    return array
	}


/***/ },
/* 133 */
/***/ function(module, exports) {

	
	/**
	 * Module exports.
	 */

	module.exports = on;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on(obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function(){
	      obj.removeListener(ev, fn);
	    }
	  };
	}


/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Slice reference.
	 */

	var slice = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	module.exports = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  }
	};


/***/ },
/* 135 */
/***/ function(module, exports) {

	
	/**
	 * HOP ref.
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Return own keys in `obj`.
	 *
	 * @param {Object} obj
	 * @return {Array}
	 * @api public
	 */

	exports.keys = Object.keys || function(obj){
	  var keys = [];
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      keys.push(key);
	    }
	  }
	  return keys;
	};

	/**
	 * Return own values in `obj`.
	 *
	 * @param {Object} obj
	 * @return {Array}
	 * @api public
	 */

	exports.values = function(obj){
	  var vals = [];
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      vals.push(obj[key]);
	    }
	  }
	  return vals;
	};

	/**
	 * Merge `b` into `a`.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api public
	 */

	exports.merge = function(a, b){
	  for (var key in b) {
	    if (has.call(b, key)) {
	      a[key] = b[key];
	    }
	  }
	  return a;
	};

	/**
	 * Return length of `obj`.
	 *
	 * @param {Object} obj
	 * @return {Number}
	 * @api public
	 */

	exports.length = function(obj){
	  return exports.keys(obj).length;
	};

	/**
	 * Check if `obj` is empty.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api public
	 */

	exports.isEmpty = function(obj){
	  return 0 == exports.length(obj);
	};

/***/ },
/* 136 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Backoff`.
	 */

	module.exports = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};



/***/ },
/* 137 */,
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(139);
	var debug = __webpack_require__(146)('socket.io:client');

	/**
	 * Module exports.
	 */

	module.exports = Client;

	/**
	 * Client constructor.
	 *
	 * @param {Server} server instance
	 * @param {Socket} connection
	 * @api private
	 */

	function Client(server, conn){
	  this.server = server;
	  this.conn = conn;
	  this.encoder = new parser.Encoder();
	  this.decoder = new parser.Decoder();
	  this.id = conn.id;
	  this.request = conn.request;
	  this.setup();
	  this.sockets = [];
	  this.nsps = {};
	  this.connectBuffer = [];
	}

	/**
	 * Sets up event listeners.
	 *
	 * @api private
	 */

	Client.prototype.setup = function(){
	  this.onclose = this.onclose.bind(this);
	  this.ondata = this.ondata.bind(this);
	  this.onerror = this.onerror.bind(this);
	  this.ondecoded = this.ondecoded.bind(this);

	  this.decoder.on('decoded', this.ondecoded);
	  this.conn.on('data', this.ondata);
	  this.conn.on('error', this.onerror);
	  this.conn.on('close', this.onclose);
	};

	/**
	 * Connects a client to a namespace.
	 *
	 * @param {String} namespace name
	 * @api private
	 */

	Client.prototype.connect = function(name){
	  debug('connecting to namespace %s', name);
	  if (!this.server.nsps[name]) {
	    this.packet({ type: parser.ERROR, nsp: name, data : 'Invalid namespace'});
	    return;
	  }
	  var nsp = this.server.of(name);
	  if ('/' != name && !this.nsps['/']) {
	    this.connectBuffer.push(name);
	    return;
	  }

	  var self = this;
	  var socket = nsp.add(this, function(){
	    self.sockets.push(socket);
	    self.nsps[nsp.name] = socket;

	    if ('/' == nsp.name && self.connectBuffer.length > 0) {
	      self.connectBuffer.forEach(self.connect, self);
	      self.connectBuffer = [];
	    }
	  });
	};

	/**
	 * Disconnects from all namespaces and closes transport.
	 *
	 * @api private
	 */

	Client.prototype.disconnect = function(){
	  var socket;
	  // we don't use a for loop because the length of
	  // `sockets` changes upon each iteration
	  while (socket = this.sockets.shift()) {
	    socket.disconnect();
	  }
	  this.close();
	};

	/**
	 * Removes a socket. Called by each `Socket`.
	 *
	 * @api private
	 */

	Client.prototype.remove = function(socket){
	  var i = this.sockets.indexOf(socket);
	  if (~i) {
	    var nsp = this.sockets[i].nsp.name;
	    this.sockets.splice(i, 1);
	    delete this.nsps[nsp];
	  } else {
	    debug('ignoring remove for %s', socket.id);
	  }
	};

	/**
	 * Closes the underlying connection.
	 *
	 * @api private
	 */

	Client.prototype.close = function(){
	  if ('open' == this.conn.readyState) {
	    debug('forcing transport close');
	    this.conn.close();
	    this.onclose('forced server close');
	  }
	};

	/**
	 * Writes a packet to the transport.
	 *
	 * @param {Object} packet object
	 * @param {Boolean} whether packet is already encoded
	 * @param {Boolean} whether packet is volatile
	 * @api private
	 */

	Client.prototype.packet = function(packet, preEncoded, volatile){
	  var self = this;

	  // this writes to the actual connection
	  function writeToEngine(encodedPackets) {
	    if (volatile && !self.conn.transport.writable) return;
	    for (var i = 0; i < encodedPackets.length; i++) {
	      self.conn.write(encodedPackets[i]);
	    }
	  }

	  if ('open' == this.conn.readyState) {
	    debug('writing packet %j', packet);
	    if(!preEncoded) { // not broadcasting, need to encode
	      this.encoder.encode(packet, function (encodedPackets) { // encode, then write results to engine
	        writeToEngine(encodedPackets);
	      });
	    } else { // a broadcast pre-encodes a packet
	      writeToEngine(packet);
	    }
	  } else {
	    debug('ignoring packet write %j', packet);
	  }
	};

	/**
	 * Called with incoming transport data.
	 *
	 * @api private
	 */

	Client.prototype.ondata = function(data){
	  // try/catch is needed for protocol violations (GH-1880)
	  try {
	    this.decoder.add(data);
	  } catch(e) {
	    this.onerror(e);
	  }
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Client.prototype.ondecoded = function(packet) {
	  if (parser.CONNECT == packet.type) {
	    this.connect(packet.nsp);
	  } else {
	    var socket = this.nsps[packet.nsp];
	    if (socket) {
	      socket.onpacket(packet);
	    } else {
	      debug('no socket for namespace %s', packet.nsp);
	    }
	  }
	};

	/**
	 * Handles an error.
	 *
	 * @param {Objcet} error object
	 * @api private
	 */

	Client.prototype.onerror = function(err){
	  this.sockets.forEach(function(socket){
	    socket.onerror(err);
	  });
	  this.onclose('client error');
	};

	/**
	 * Called upon transport close.
	 *
	 * @param {String} reason
	 * @api private
	 */

	Client.prototype.onclose = function(reason){
	  debug('client close with reason %s', reason);

	  // ignore a potential subsequent `close` event
	  this.destroy();

	  // `nsps` and `sockets` are cleaned up seamlessly
	  var socket;
	  while (socket = this.sockets.shift()) {
	    socket.onclose(reason);
	  }

	  this.decoder.destroy(); // clean up decoder
	};

	/**
	 * Cleans up event listeners.
	 *
	 * @api private
	 */

	Client.prototype.destroy = function(){
	  this.conn.removeListener('data', this.ondata);
	  this.conn.removeListener('error', this.onerror);
	  this.conn.removeListener('close', this.onclose);
	  this.decoder.removeListener('decoded', this.ondecoded);
	};


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var debug = __webpack_require__(140)('socket.io-parser');
	var json = __webpack_require__(141);
	var isArray = __webpack_require__(142);
	var Emitter = __webpack_require__(143);
	var binary = __webpack_require__(144);
	var isBuf = __webpack_require__(145);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'BINARY_EVENT',
	  'ACK',
	  'BINARY_ACK',
	  'ERROR'
	];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  }
	  else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;

	  // first is type
	  str += obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	Emitter(Decoder.prototype);

	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function(obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  }
	  else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  }
	  else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var p = {};
	  var i = 0;

	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    var buf = '';
	    while (str.charAt(++i) != '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) != '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }

	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i == str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    try {
	      p.data = json.parse(str.substr(i));
	    } catch(e){
	      return error();
	    }
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(data){
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}


/***/ },
/* 140 */
/***/ function(module, exports) {

	
	/**
	 * Expose `debug()` as the module.
	 */

	module.exports = debug;

	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */

	function debug(name) {
	  if (!debug.enabled(name)) return function(){};

	  return function(fmt){
	    fmt = coerce(fmt);

	    var curr = new Date;
	    var ms = curr - (debug[name] || curr);
	    debug[name] = curr;

	    fmt = name
	      + ' '
	      + fmt
	      + ' +' + debug.humanize(ms);

	    // This hackery is required for IE8
	    // where `console.log` doesn't have 'apply'
	    window.console
	      && console.log
	      && Function.prototype.apply.call(console.log, console, arguments);
	  }
	}

	/**
	 * The currently active debug mode names.
	 */

	debug.names = [];
	debug.skips = [];

	/**
	 * Enables a debug mode by name. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} name
	 * @api public
	 */

	debug.enable = function(name) {
	  try {
	    localStorage.debug = name;
	  } catch(e){}

	  var split = (name || '').split(/[\s,]+/)
	    , len = split.length;

	  for (var i = 0; i < len; i++) {
	    name = split[i].replace('*', '.*?');
	    if (name[0] === '-') {
	      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
	    }
	    else {
	      debug.names.push(new RegExp('^' + name + '$'));
	    }
	  }
	};

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	debug.disable = function(){
	  debug.enable('');
	};

	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */

	debug.humanize = function(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;

	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	};

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	debug.enabled = function(name) {
	  for (var i = 0, len = debug.skips.length; i < len; i++) {
	    if (debug.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (var i = 0, len = debug.names.length; i < len; i++) {
	    if (debug.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Coerce `val`.
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	// persist

	try {
	  if (window.localStorage) debug.enable(localStorage.debug);
	} catch(e){}


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */
	;(function (window) {
	  // Convenience aliases.
	  var getClass = {}.toString, isProperty, forEach, undef;

	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(95);

	  // Detect native implementations.
	  var nativeJSON = typeof JSON == "object" && JSON;

	  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if
	  // available.
	  var JSON3 = typeof exports == "object" && exports && !exports.nodeType && exports;

	  if (JSON3 && nativeJSON) {
	    // Explicitly delegate to the native `stringify` and `parse`
	    // implementations in CommonJS environments.
	    JSON3.stringify = nativeJSON.stringify;
	    JSON3.parse = nativeJSON.parse;
	  } else {
	    // Export for web browsers, JavaScript engines, and asynchronous module
	    // loaders, using the global `JSON` object if available.
	    JSON3 = window.JSON = nativeJSON || {};
	  }

	  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	  var isExtended = new Date(-3509827334573292);
	  try {
	    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	    // results for certain dates in Opera >= 10.53.
	    isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	      // Safari < 2.0.2 stores the internal millisecond time value correctly,
	      // but clips the values returned by the date methods to the range of
	      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	  } catch (exception) {}

	  // Internal: Determines whether the native `JSON.stringify` and `parse`
	  // implementations are spec-compliant. Based on work by Ken Snyder.
	  function has(name) {
	    if (has[name] !== undef) {
	      // Return cached feature test result.
	      return has[name];
	    }

	    var isSupported;
	    if (name == "bug-string-char-index") {
	      // IE <= 7 doesn't support accessing string characters using square
	      // bracket notation. IE 8 only supports this for primitives.
	      isSupported = "a"[0] != "a";
	    } else if (name == "json") {
	      // Indicates whether both `JSON.stringify` and `JSON.parse` are
	      // supported.
	      isSupported = has("json-stringify") && has("json-parse");
	    } else {
	      var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	      // Test `JSON.stringify`.
	      if (name == "json-stringify") {
	        var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	        if (stringifySupported) {
	          // A test function object with a custom `toJSON` method.
	          (value = function () {
	            return 1;
	          }).toJSON = value;
	          try {
	            stringifySupported =
	              // Firefox 3.1b1 and b2 serialize string, number, and boolean
	              // primitives as object literals.
	              stringify(0) === "0" &&
	              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	              // literals.
	              stringify(new Number()) === "0" &&
	              stringify(new String()) == '""' &&
	              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	              // does not define a canonical JSON representation (this applies to
	              // objects with `toJSON` properties as well, *unless* they are nested
	              // within an object or array).
	              stringify(getClass) === undef &&
	              // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	              // FF 3.1b3 pass this test.
	              stringify(undef) === undef &&
	              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	              // respectively, if the value is omitted entirely.
	              stringify() === undef &&
	              // FF 3.1b1, 2 throw an error if the given value is not a number,
	              // string, array, object, Boolean, or `null` literal. This applies to
	              // objects with custom `toJSON` methods as well, unless they are nested
	              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	              // methods entirely.
	              stringify(value) === "1" &&
	              stringify([value]) == "[1]" &&
	              // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	              // `"[null]"`.
	              stringify([undef]) == "[null]" &&
	              // YUI 3.0.0b1 fails to serialize `null` literals.
	              stringify(null) == "null" &&
	              // FF 3.1b1, 2 halts serialization if an array contains a function:
	              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	              // elides non-JSON values from objects and arrays, unless they
	              // define custom `toJSON` methods.
	              stringify([undef, getClass, null]) == "[null,null,null]" &&
	              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	              // where character escape codes are expected (e.g., `\b` => `\u0008`).
	              stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	              stringify(null, value) === "1" &&
	              stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	              // serialize extended years.
	              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	              // The milliseconds are optional in ES 5, but required in 5.1.
	              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	              // four-digit years instead of six-digit years. Credits: @Yaffle.
	              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	              // values less than 1000. Credits: @Yaffle.
	              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	          } catch (exception) {
	            stringifySupported = false;
	          }
	        }
	        isSupported = stringifySupported;
	      }
	      // Test `JSON.parse`.
	      if (name == "json-parse") {
	        var parse = JSON3.parse;
	        if (typeof parse == "function") {
	          try {
	            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	            // Conforming implementations should also coerce the initial argument to
	            // a string prior to parsing.
	            if (parse("0") === 0 && !parse(false)) {
	              // Simple parsing test.
	              value = parse(serialized);
	              var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	              if (parseSupported) {
	                try {
	                  // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                  parseSupported = !parse('"\t"');
	                } catch (exception) {}
	                if (parseSupported) {
	                  try {
	                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                    // certain octal literals.
	                    parseSupported = parse("01") !== 1;
	                  } catch (exception) {}
	                }
	                if (parseSupported) {
	                  try {
	                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                    // points. These environments, along with FF 3.1b1 and 2,
	                    // also allow trailing commas in JSON objects and arrays.
	                    parseSupported = parse("1.") !== 1;
	                  } catch (exception) {}
	                }
	              }
	            }
	          } catch (exception) {
	            parseSupported = false;
	          }
	        }
	        isSupported = parseSupported;
	      }
	    }
	    return has[name] = !!isSupported;
	  }

	  if (!has("json")) {
	    // Common `[[Class]]` name aliases.
	    var functionClass = "[object Function]";
	    var dateClass = "[object Date]";
	    var numberClass = "[object Number]";
	    var stringClass = "[object String]";
	    var arrayClass = "[object Array]";
	    var booleanClass = "[object Boolean]";

	    // Detect incomplete support for accessing string characters by index.
	    var charIndexBuggy = has("bug-string-char-index");

	    // Define additional utility methods if the `Date` methods are buggy.
	    if (!isExtended) {
	      var floor = Math.floor;
	      // A mapping between the months of the year and the number of days between
	      // January 1st and the first of the respective month.
	      var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	      // Internal: Calculates the number of days between the Unix epoch and the
	      // first day of the given month.
	      var getDay = function (year, month) {
	        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	      };
	    }

	    // Internal: Determines if a property is a direct property of the given
	    // object. Delegates to the native `Object#hasOwnProperty` method.
	    if (!(isProperty = {}.hasOwnProperty)) {
	      isProperty = function (property) {
	        var members = {}, constructor;
	        if ((members.__proto__ = null, members.__proto__ = {
	          // The *proto* property cannot be set multiple times in recent
	          // versions of Firefox and SeaMonkey.
	          "toString": 1
	        }, members).toString != getClass) {
	          // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	          // supports the mutable *proto* property.
	          isProperty = function (property) {
	            // Capture and break the object's prototype chain (see section 8.6.2
	            // of the ES 5.1 spec). The parenthesized expression prevents an
	            // unsafe transformation by the Closure Compiler.
	            var original = this.__proto__, result = property in (this.__proto__ = null, this);
	            // Restore the original prototype chain.
	            this.__proto__ = original;
	            return result;
	          };
	        } else {
	          // Capture a reference to the top-level `Object` constructor.
	          constructor = members.constructor;
	          // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	          // other environments.
	          isProperty = function (property) {
	            var parent = (this.constructor || constructor).prototype;
	            return property in this && !(property in parent && this[property] === parent[property]);
	          };
	        }
	        members = null;
	        return isProperty.call(this, property);
	      };
	    }

	    // Internal: A set of primitive types used by `isHostType`.
	    var PrimitiveTypes = {
	      'boolean': 1,
	      'number': 1,
	      'string': 1,
	      'undefined': 1
	    };

	    // Internal: Determines if the given object `property` value is a
	    // non-primitive.
	    var isHostType = function (object, property) {
	      var type = typeof object[property];
	      return type == 'object' ? !!object[property] : !PrimitiveTypes[type];
	    };

	    // Internal: Normalizes the `for...in` iteration algorithm across
	    // environments. Each enumerated key is yielded to a `callback` function.
	    forEach = function (object, callback) {
	      var size = 0, Properties, members, property;

	      // Tests for bugs in the current environment's `for...in` algorithm. The
	      // `valueOf` property inherits the non-enumerable flag from
	      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	      (Properties = function () {
	        this.valueOf = 0;
	      }).prototype.valueOf = 0;

	      // Iterate over a new instance of the `Properties` class.
	      members = new Properties();
	      for (property in members) {
	        // Ignore all properties inherited from `Object.prototype`.
	        if (isProperty.call(members, property)) {
	          size++;
	        }
	      }
	      Properties = members = null;

	      // Normalize the iteration algorithm.
	      if (!size) {
	        // A list of non-enumerable properties inherited from `Object.prototype`.
	        members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	        // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	        // properties.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, length;
	          var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;
	          for (property in object) {
	            // Gecko <= 1.0 enumerates the `prototype` property of functions under
	            // certain conditions; IE does not.
	            if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for each non-enumerable property.
	          for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	        };
	      } else if (size == 2) {
	        // Safari <= 2.0.4 enumerates shadowed properties twice.
	        forEach = function (object, callback) {
	          // Create a set of iterated properties.
	          var members = {}, isFunction = getClass.call(object) == functionClass, property;
	          for (property in object) {
	            // Store each property name to prevent double enumeration. The
	            // `prototype` property of functions is not enumerated due to cross-
	            // environment inconsistencies.
	            if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	        };
	      } else {
	        // No bugs detected; use the standard `for...in` algorithm.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	          for (property in object) {
	            if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for the `constructor` property due to
	          // cross-environment inconsistencies.
	          if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	            callback(property);
	          }
	        };
	      }
	      return forEach(object, callback);
	    };

	    // Public: Serializes a JavaScript `value` as a JSON string. The optional
	    // `filter` argument may specify either a function that alters how object and
	    // array members are serialized, or an array of strings and numbers that
	    // indicates which properties should be serialized. The optional `width`
	    // argument may be either a string or number that specifies the indentation
	    // level of the output.
	    if (!has("json-stringify")) {
	      // Internal: A map of control characters and their escaped equivalents.
	      var Escapes = {
	        92: "\\\\",
	        34: '\\"',
	        8: "\\b",
	        12: "\\f",
	        10: "\\n",
	        13: "\\r",
	        9: "\\t"
	      };

	      // Internal: Converts `value` into a zero-padded string such that its
	      // length is at least equal to `width`. The `width` must be <= 6.
	      var leadingZeroes = "000000";
	      var toPaddedString = function (width, value) {
	        // The `|| 0` expression is necessary to work around a bug in
	        // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	        return (leadingZeroes + (value || 0)).slice(-width);
	      };

	      // Internal: Double-quotes a string `value`, replacing all ASCII control
	      // characters (characters with code unit values between 0 and 31) with
	      // their escaped equivalents. This is an implementation of the
	      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	      var unicodePrefix = "\\u00";
	      var quote = function (value) {
	        var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
	        if (isLarge) {
	          symbols = value.split("");
	        }
	        for (; index < length; index++) {
	          var charCode = value.charCodeAt(index);
	          // If the character is a control character, append its Unicode or
	          // shorthand escape sequence; otherwise, append the character as-is.
	          switch (charCode) {
	            case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	              result += Escapes[charCode];
	              break;
	            default:
	              if (charCode < 32) {
	                result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                break;
	              }
	              result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
	          }
	        }
	        return result + '"';
	      };

	      // Internal: Recursively serializes an object. Implements the
	      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	      var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	        try {
	          // Necessary for host object support.
	          value = object[property];
	        } catch (exception) {}
	        if (typeof value == "object" && value) {
	          className = getClass.call(value);
	          if (className == dateClass && !isProperty.call(value, "toJSON")) {
	            if (value > -1 / 0 && value < 1 / 0) {
	              // Dates are serialized according to the `Date#toJSON` method
	              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	              // for the ISO 8601 date time string format.
	              if (getDay) {
	                // Manually compute the year, month, date, hours, minutes,
	                // seconds, and milliseconds if the `getUTC*` methods are
	                // buggy. Adapted from @Yaffle's `date-shim` project.
	                date = floor(value / 864e5);
	                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                date = 1 + date - getDay(year, month);
	                // The `time` value specifies the time within the day (see ES
	                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                // to compute `A modulo B`, as the `%` operator does not
	                // correspond to the `modulo` operation for negative numbers.
	                time = (value % 864e5 + 864e5) % 864e5;
	                // The hours, minutes, seconds, and milliseconds are obtained by
	                // decomposing the time within the day. See section 15.9.1.10.
	                hours = floor(time / 36e5) % 24;
	                minutes = floor(time / 6e4) % 60;
	                seconds = floor(time / 1e3) % 60;
	                milliseconds = time % 1e3;
	              } else {
	                year = value.getUTCFullYear();
	                month = value.getUTCMonth();
	                date = value.getUTCDate();
	                hours = value.getUTCHours();
	                minutes = value.getUTCMinutes();
	                seconds = value.getUTCSeconds();
	                milliseconds = value.getUTCMilliseconds();
	              }
	              // Serialize extended years correctly.
	              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                // Months, dates, hours, minutes, and seconds should have two
	                // digits; milliseconds should have three.
	                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                // Milliseconds are optional in ES 5.0, but required in 5.1.
	                "." + toPaddedString(3, milliseconds) + "Z";
	            } else {
	              value = null;
	            }
	          } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	            // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	            // ignores all `toJSON` methods on these objects unless they are
	            // defined directly on an instance.
	            value = value.toJSON(property);
	          }
	        }
	        if (callback) {
	          // If a replacement function was provided, call it to obtain the value
	          // for serialization.
	          value = callback.call(object, property, value);
	        }
	        if (value === null) {
	          return "null";
	        }
	        className = getClass.call(value);
	        if (className == booleanClass) {
	          // Booleans are represented literally.
	          return "" + value;
	        } else if (className == numberClass) {
	          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	          // `"null"`.
	          return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	        } else if (className == stringClass) {
	          // Strings are double-quoted and escaped.
	          return quote("" + value);
	        }
	        // Recursively serialize objects and arrays.
	        if (typeof value == "object") {
	          // Check for cyclic structures. This is a linear search; performance
	          // is inversely proportional to the number of unique nested objects.
	          for (length = stack.length; length--;) {
	            if (stack[length] === value) {
	              // Cyclic structures cannot be serialized by `JSON.stringify`.
	              throw TypeError();
	            }
	          }
	          // Add the object to the stack of traversed objects.
	          stack.push(value);
	          results = [];
	          // Save the current indentation level and indent one additional level.
	          prefix = indentation;
	          indentation += whitespace;
	          if (className == arrayClass) {
	            // Recursively serialize array elements.
	            for (index = 0, length = value.length; index < length; index++) {
	              element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	              results.push(element === undef ? "null" : element);
	            }
	            result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	          } else {
	            // Recursively serialize object members. Members are selected from
	            // either a user-specified list of property names, or the object
	            // itself.
	            forEach(properties || value, function (property) {
	              var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	              if (element !== undef) {
	                // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                // is not the empty string, let `member` {quote(property) + ":"}
	                // be the concatenation of `member` and the `space` character."
	                // The "`space` character" refers to the literal space
	                // character, not the `space` {width} argument provided to
	                // `JSON.stringify`.
	                results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	              }
	            });
	            result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	          }
	          // Remove the object from the traversed object stack.
	          stack.pop();
	          return result;
	        }
	      };

	      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	      JSON3.stringify = function (source, filter, width) {
	        var whitespace, callback, properties, className;
	        if (typeof filter == "function" || typeof filter == "object" && filter) {
	          if ((className = getClass.call(filter)) == functionClass) {
	            callback = filter;
	          } else if (className == arrayClass) {
	            // Convert the property names array into a makeshift set.
	            properties = {};
	            for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	          }
	        }
	        if (width) {
	          if ((className = getClass.call(width)) == numberClass) {
	            // Convert the `width` to an integer and create a string containing
	            // `width` number of space characters.
	            if ((width -= width % 1) > 0) {
	              for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	            }
	          } else if (className == stringClass) {
	            whitespace = width.length <= 10 ? width : width.slice(0, 10);
	          }
	        }
	        // Opera <= 7.54u2 discards the values associated with empty string keys
	        // (`""`) only if they are used directly within an object member list
	        // (e.g., `!("" in { "": 1})`).
	        return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	      };
	    }

	    // Public: Parses a JSON source string.
	    if (!has("json-parse")) {
	      var fromCharCode = String.fromCharCode;

	      // Internal: A map of escaped control characters and their unescaped
	      // equivalents.
	      var Unescapes = {
	        92: "\\",
	        34: '"',
	        47: "/",
	        98: "\b",
	        116: "\t",
	        110: "\n",
	        102: "\f",
	        114: "\r"
	      };

	      // Internal: Stores the parser state.
	      var Index, Source;

	      // Internal: Resets the parser state and throws a `SyntaxError`.
	      var abort = function() {
	        Index = Source = null;
	        throw SyntaxError();
	      };

	      // Internal: Returns the next token, or `"$"` if the parser has reached
	      // the end of the source string. A token may be a string, number, `null`
	      // literal, or Boolean literal.
	      var lex = function () {
	        var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	        while (Index < length) {
	          charCode = source.charCodeAt(Index);
	          switch (charCode) {
	            case 9: case 10: case 13: case 32:
	              // Skip whitespace tokens, including tabs, carriage returns, line
	              // feeds, and space characters.
	              Index++;
	              break;
	            case 123: case 125: case 91: case 93: case 58: case 44:
	              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	              // the current position.
	              value = charIndexBuggy ? source.charAt(Index) : source[Index];
	              Index++;
	              return value;
	            case 34:
	              // `"` delimits a JSON string; advance to the next character and
	              // begin parsing the string. String tokens are prefixed with the
	              // sentinel `@` character to distinguish them from punctuators and
	              // end-of-string tokens.
	              for (value = "@", Index++; Index < length;) {
	                charCode = source.charCodeAt(Index);
	                if (charCode < 32) {
	                  // Unescaped ASCII control characters (those with a code unit
	                  // less than the space character) are not permitted.
	                  abort();
	                } else if (charCode == 92) {
	                  // A reverse solidus (`\`) marks the beginning of an escaped
	                  // control character (including `"`, `\`, and `/`) or Unicode
	                  // escape sequence.
	                  charCode = source.charCodeAt(++Index);
	                  switch (charCode) {
	                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                      // Revive escaped control characters.
	                      value += Unescapes[charCode];
	                      Index++;
	                      break;
	                    case 117:
	                      // `\u` marks the beginning of a Unicode escape sequence.
	                      // Advance to the first character and validate the
	                      // four-digit code point.
	                      begin = ++Index;
	                      for (position = Index + 4; Index < position; Index++) {
	                        charCode = source.charCodeAt(Index);
	                        // A valid sequence comprises four hexdigits (case-
	                        // insensitive) that form a single hexadecimal value.
	                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                          // Invalid Unicode escape sequence.
	                          abort();
	                        }
	                      }
	                      // Revive the escaped character.
	                      value += fromCharCode("0x" + source.slice(begin, Index));
	                      break;
	                    default:
	                      // Invalid escape sequence.
	                      abort();
	                  }
	                } else {
	                  if (charCode == 34) {
	                    // An unescaped double-quote character marks the end of the
	                    // string.
	                    break;
	                  }
	                  charCode = source.charCodeAt(Index);
	                  begin = Index;
	                  // Optimize for the common case where a string is valid.
	                  while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                    charCode = source.charCodeAt(++Index);
	                  }
	                  // Append the string as-is.
	                  value += source.slice(begin, Index);
	                }
	              }
	              if (source.charCodeAt(Index) == 34) {
	                // Advance to the next character and return the revived string.
	                Index++;
	                return value;
	              }
	              // Unterminated string.
	              abort();
	            default:
	              // Parse numbers and literals.
	              begin = Index;
	              // Advance past the negative sign, if one is specified.
	              if (charCode == 45) {
	                isSigned = true;
	                charCode = source.charCodeAt(++Index);
	              }
	              // Parse an integer or floating-point value.
	              if (charCode >= 48 && charCode <= 57) {
	                // Leading zeroes are interpreted as octal literals.
	                if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                  // Illegal octal literal.
	                  abort();
	                }
	                isSigned = false;
	                // Parse the integer component.
	                for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                // Floats cannot contain a leading decimal point; however, this
	                // case is already accounted for by the parser.
	                if (source.charCodeAt(Index) == 46) {
	                  position = ++Index;
	                  // Parse the decimal component.
	                  for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal trailing decimal.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Parse exponents. The `e` denoting the exponent is
	                // case-insensitive.
	                charCode = source.charCodeAt(Index);
	                if (charCode == 101 || charCode == 69) {
	                  charCode = source.charCodeAt(++Index);
	                  // Skip past the sign following the exponent, if one is
	                  // specified.
	                  if (charCode == 43 || charCode == 45) {
	                    Index++;
	                  }
	                  // Parse the exponential component.
	                  for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal empty exponent.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Coerce the parsed value to a JavaScript number.
	                return +source.slice(begin, Index);
	              }
	              // A negative sign may only precede numbers.
	              if (isSigned) {
	                abort();
	              }
	              // `true`, `false`, and `null` literals.
	              if (source.slice(Index, Index + 4) == "true") {
	                Index += 4;
	                return true;
	              } else if (source.slice(Index, Index + 5) == "false") {
	                Index += 5;
	                return false;
	              } else if (source.slice(Index, Index + 4) == "null") {
	                Index += 4;
	                return null;
	              }
	              // Unrecognized token.
	              abort();
	          }
	        }
	        // Return the sentinel `$` character if the parser has reached the end
	        // of the source string.
	        return "$";
	      };

	      // Internal: Parses a JSON `value` token.
	      var get = function (value) {
	        var results, hasMembers;
	        if (value == "$") {
	          // Unexpected end of input.
	          abort();
	        }
	        if (typeof value == "string") {
	          if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	            // Remove the sentinel `@` character.
	            return value.slice(1);
	          }
	          // Parse object and array literals.
	          if (value == "[") {
	            // Parses a JSON array, returning a new JavaScript array.
	            results = [];
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing square bracket marks the end of the array literal.
	              if (value == "]") {
	                break;
	              }
	              // If the array literal contains elements, the current token
	              // should be a comma separating the previous element from the
	              // next.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "]") {
	                    // Unexpected trailing `,` in array literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each array element.
	                  abort();
	                }
	              }
	              // Elisions and leading commas are not permitted.
	              if (value == ",") {
	                abort();
	              }
	              results.push(get(value));
	            }
	            return results;
	          } else if (value == "{") {
	            // Parses a JSON object, returning a new JavaScript object.
	            results = {};
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing curly brace marks the end of the object literal.
	              if (value == "}") {
	                break;
	              }
	              // If the object literal contains members, the current token
	              // should be a comma separator.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "}") {
	                    // Unexpected trailing `,` in object literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each object member.
	                  abort();
	                }
	              }
	              // Leading commas are not permitted, object property names must be
	              // double-quoted strings, and a `:` must separate each property
	              // name and value.
	              if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                abort();
	              }
	              results[value.slice(1)] = get(lex());
	            }
	            return results;
	          }
	          // Unexpected token encountered.
	          abort();
	        }
	        return value;
	      };

	      // Internal: Updates a traversed object member.
	      var update = function(source, property, callback) {
	        var element = walk(source, property, callback);
	        if (element === undef) {
	          delete source[property];
	        } else {
	          source[property] = element;
	        }
	      };

	      // Internal: Recursively traverses a parsed JSON object, invoking the
	      // `callback` function for each value. This is an implementation of the
	      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	      var walk = function (source, property, callback) {
	        var value = source[property], length;
	        if (typeof value == "object" && value) {
	          // `forEach` can't be used to traverse an array in Opera <= 8.54
	          // because its `Object#hasOwnProperty` implementation returns `false`
	          // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	          if (getClass.call(value) == arrayClass) {
	            for (length = value.length; length--;) {
	              update(value, length, callback);
	            }
	          } else {
	            forEach(value, function (property) {
	              update(value, property, callback);
	            });
	          }
	        }
	        return callback.call(source, property, value);
	      };

	      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	      JSON3.parse = function (source, callback) {
	        var result, value;
	        Index = 0;
	        Source = "" + source;
	        result = get(lex());
	        // If a JSON string contains multiple tokens, it is invalid.
	        if (lex() != "$") {
	          abort();
	        }
	        // Reset the parser state.
	        Index = Source = null;
	        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	      };
	    }
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}(this));


/***/ },
/* 142 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 143 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = __webpack_require__(142);
	var isBuf = __webpack_require__(145);

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	exports.deconstructPacket = function(packet){
	  var buffers = [];
	  var packetData = packet.data;

	  function _deconstructPacket(data) {
	    if (!data) return data;

	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == typeof data && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }

	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	exports.reconstructPacket = function(packet, buffers) {
	  var curPlaceHolder = 0;

	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == typeof data) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }

	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((global.Blob && obj instanceof Blob) ||
	        (global.File && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 145 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	module.exports = isBuf;

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(147);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // This hackery is required for IE8,
	  // where the `console.log` function doesn't have 'apply'
	  return 'object' == typeof console
	    && 'function' == typeof console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      localStorage.removeItem('debug');
	    } else {
	      localStorage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = localStorage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(148);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 's':
	      return n * s;
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	/**
	 * Module dependencies.
	 */

	var Socket = __webpack_require__(150);
	var Emitter = __webpack_require__(19).EventEmitter;
	var parser = __webpack_require__(139);
	var debug = __webpack_require__(146)('socket.io:namespace');
	var hasBin = __webpack_require__(151);

	/**
	 * Module exports.
	 */

	module.exports = exports = Namespace;

	/**
	 * Blacklisted events.
	 */

	exports.events = [
	  'connect',    // for symmetry with client
	  'connection',
	  'newListener'
	];

	/**
	 * Flags.
	 */

	exports.flags = ['json'];

	/**
	 * `EventEmitter#emit` reference.
	 */

	var emit = Emitter.prototype.emit;

	/**
	 * Namespace constructor.
	 *
	 * @param {Server} server instance
	 * @param {Socket} name
	 * @api private
	 */

	function Namespace(server, name){
	  this.name = name;
	  this.server = server;
	  this.sockets = [];
	  this.connected = {};
	  this.fns = [];
	  this.ids = 0;
	  this.acks = {};
	  this.initAdapter();
	}

	/**
	 * Inherits from `EventEmitter`.
	 */

	Namespace.prototype.__proto__ = Emitter.prototype;

	/**
	 * Apply flags from `Socket`.
	 */

	exports.flags.forEach(function(flag){
	  Namespace.prototype.__defineGetter__(flag, function(){
	    this.flags = this.flags || {};
	    this.flags[flag] = true;
	    return this;
	  });
	});

	/**
	 * Initializes the `Adapter` for this nsp.
	 * Run upon changing adapter by `Server#adapter`
	 * in addition to the constructor.
	 *
	 * @api private
	 */

	Namespace.prototype.initAdapter = function(){
	  this.adapter = new (this.server.adapter())(this);
	};

	/**
	 * Sets up namespace middleware.
	 *
	 * @return {Namespace} self
	 * @api public
	 */

	Namespace.prototype.use = function(fn){
	  this.fns.push(fn);
	  return this;
	};

	/**
	 * Executes the middleware for an incoming client.
	 *
	 * @param {Socket} socket that will get added
	 * @param {Function} last fn call in the middleware
	 * @api private
	 */

	Namespace.prototype.run = function(socket, fn){
	  var fns = this.fns.slice(0);
	  if (!fns.length) return fn(null);

	  function run(i){
	    fns[i](socket, function(err){
	      // upon error, short-circuit
	      if (err) return fn(err);

	      // if no middleware left, summon callback
	      if (!fns[i + 1]) return fn(null);

	      // go on to next
	      run(i + 1);
	    });
	  }

	  run(0);
	};

	/**
	 * Targets a room when emitting.
	 *
	 * @param {String} name
	 * @return {Namespace} self
	 * @api public
	 */

	Namespace.prototype.to =
	Namespace.prototype['in'] = function(name){
	  this.rooms = this.rooms || [];
	  if (!~this.rooms.indexOf(name)) this.rooms.push(name);
	  return this;
	};

	/**
	 * Adds a new client.
	 *
	 * @return {Socket}
	 * @api private
	 */

	Namespace.prototype.add = function(client, fn){
	  debug('adding socket to nsp %s', this.name);
	  var socket = new Socket(this, client);
	  var self = this;
	  this.run(socket, function(err){
	    process.nextTick(function(){
	      if ('open' == client.conn.readyState) {
	        if (err) return socket.error(err.data || err.message);

	        // track socket
	        self.sockets.push(socket);

	        // it's paramount that the internal `onconnect` logic
	        // fires before user-set events to prevent state order
	        // violations (such as a disconnection before the connection
	        // logic is complete)
	        socket.onconnect();
	        if (fn) fn();

	        // fire user-set events
	        self.emit('connect', socket);
	        self.emit('connection', socket);
	      } else {
	        debug('next called after client was closed - ignoring socket');
	      }
	    });
	  });
	  return socket;
	};

	/**
	 * Removes a client. Called by each `Socket`.
	 *
	 * @api private
	 */

	Namespace.prototype.remove = function(socket){
	  var i = this.sockets.indexOf(socket);
	  if (~i) {
	    this.sockets.splice(i, 1);
	  } else {
	    debug('ignoring remove for %s', socket.id);
	  }
	};

	/**
	 * Emits to all clients.
	 *
	 * @return {Namespace} self
	 * @api public
	 */

	Namespace.prototype.emit = function(ev){
	  if (~exports.events.indexOf(ev)) {
	    emit.apply(this, arguments);
	  } else {
	    // set up packet object
	    var args = Array.prototype.slice.call(arguments);
	    var parserType = parser.EVENT; // default
	    if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary

	    var packet = { type: parserType, data: args };

	    if ('function' == typeof args[args.length - 1]) {
	      throw new Error('Callbacks are not supported when broadcasting');
	    }

	    this.adapter.broadcast(packet, {
	      rooms: this.rooms,
	      flags: this.flags
	    });

	    delete this.rooms;
	    delete this.flags;
	  }
	  return this;
	};

	/**
	 * Sends a `message` event to all clients.
	 *
	 * @return {Namespace} self
	 * @api public
	 */

	Namespace.prototype.send =
	Namespace.prototype.write = function(){
	  var args = Array.prototype.slice.call(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(19).EventEmitter;
	var parser = __webpack_require__(139);
	var url = __webpack_require__(41);
	var debug = __webpack_require__(146)('socket.io:socket');
	var hasBin = __webpack_require__(151);

	/**
	 * Module exports.
	 */

	module.exports = exports = Socket;

	/**
	 * Blacklisted events.
	 *
	 * @api public
	 */

	exports.events = [
	  'error',
	  'connect',
	  'disconnect',
	  'newListener',
	  'removeListener'
	];

	/**
	 * Flags.
	 *
	 * @api private
	 */

	var flags = [
	  'json',
	  'volatile',
	  'broadcast'
	];

	/**
	 * `EventEmitter#emit` reference.
	 */

	var emit = Emitter.prototype.emit;

	/**
	 * Interface to a `Client` for a given `Namespace`.
	 *
	 * @param {Namespace} nsp
	 * @param {Client} client
	 * @api public
	 */

	function Socket(nsp, client){
	  this.nsp = nsp;
	  this.server = nsp.server;
	  this.adapter = this.nsp.adapter;
	  this.id = client.id;
	  this.request = client.request;
	  this.client = client;
	  this.conn = client.conn;
	  this.rooms = [];
	  this.acks = {};
	  this.connected = true;
	  this.disconnected = false;
	  this.handshake = this.buildHandshake();
	}

	/**
	 * Inherits from `EventEmitter`.
	 */

	Socket.prototype.__proto__ = Emitter.prototype;

	/**
	 * Apply flags from `Socket`.
	 */

	flags.forEach(function(flag){
	  Socket.prototype.__defineGetter__(flag, function(){
	    this.flags = this.flags || {};
	    this.flags[flag] = true;
	    return this;
	  });
	});

	/**
	 * `request` engine.io shorcut.
	 *
	 * @api public
	 */

	Socket.prototype.__defineGetter__('request', function(){
	  return this.conn.request;
	});

	/**
	 * Builds the `handshake` BC object
	 *
	 * @api private
	 */

	Socket.prototype.buildHandshake = function(){
	  return {
	    headers: this.request.headers,
	    time: (new Date) + '',
	    address: this.conn.remoteAddress,
	    xdomain: !!this.request.headers.origin,
	    secure: !!this.request.connection.encrypted,
	    issued: +(new Date),
	    url: this.request.url,
	    query: url.parse(this.request.url, true).query || {}
	  };
	};

	/**
	 * Emits to this client.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.emit = function(ev){
	  if (~exports.events.indexOf(ev)) {
	    emit.apply(this, arguments);
	  } else {
	    var args = Array.prototype.slice.call(arguments);
	    var packet = {};
	    packet.type = hasBin(args) ? parser.BINARY_EVENT : parser.EVENT;
	    packet.data = args;

	    // access last argument to see if it's an ACK callback
	    if ('function' == typeof args[args.length - 1]) {
	      if (this._rooms || (this.flags && this.flags.broadcast)) {
	        throw new Error('Callbacks are not supported when broadcasting');
	      }

	      debug('emitting packet with ack id %d', this.nsp.ids);
	      this.acks[this.nsp.ids] = args.pop();
	      packet.id = this.nsp.ids++;
	    }

	    if (this._rooms || (this.flags && this.flags.broadcast)) {
	      this.adapter.broadcast(packet, {
	        except: [this.id],
	        rooms: this._rooms,
	        flags: this.flags
	      });
	    } else {
	      // dispatch packet
	      this.packet(packet);
	    }

	    // reset flags
	    delete this._rooms;
	    delete this.flags;
	  }
	  return this;
	};

	/**
	 * Targets a room when broadcasting.
	 *
	 * @param {String} name
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.to =
	Socket.prototype.in = function(name){
	  this._rooms = this._rooms || [];
	  if (!~this._rooms.indexOf(name)) this._rooms.push(name);
	  return this;
	};

	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.send =
	Socket.prototype.write = function(){
	  var args = Array.prototype.slice.call(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet object
	 * @api private
	 */

	Socket.prototype.packet = function(packet, preEncoded){
	  packet.nsp = this.nsp.name;
	  var volatile = this.flags && this.flags.volatile;
	  this.client.packet(packet, preEncoded, volatile);
	};

	/**
	 * Joins a room.
	 *
	 * @param {String} room
	 * @param {Function} optional, callback
	 * @return {Socket} self
	 * @api private
	 */

	Socket.prototype.join = function(room, fn){
	  debug('joining room %s', room);
	  var self = this;
	  if (~this.rooms.indexOf(room)) return this;
	  this.adapter.add(this.id, room, function(err){
	    if (err) return fn && fn(err);
	    debug('joined room %s', room);
	    self.rooms.push(room);
	    fn && fn(null);
	  });
	  return this;
	};

	/**
	 * Leaves a room.
	 *
	 * @param {String} room
	 * @param {Function} optional, callback
	 * @return {Socket} self
	 * @api private
	 */

	Socket.prototype.leave = function(room, fn){
	  debug('leave room %s', room);
	  var self = this;
	  this.adapter.del(this.id, room, function(err){
	    if (err) return fn && fn(err);
	    debug('left room %s', room);
	    var idx = self.rooms.indexOf(room);
	    if (idx >= 0) {
	      self.rooms.splice(idx, 1);
	    }
	    fn && fn(null);
	  });
	  return this;
	};

	/**
	 * Leave all rooms.
	 *
	 * @api private
	 */

	Socket.prototype.leaveAll = function(){
	  this.adapter.delAll(this.id);
	  this.rooms = [];
	};

	/**
	 * Called by `Namespace` upon succesful
	 * middleware execution (ie: authorization).
	 *
	 * @api private
	 */

	Socket.prototype.onconnect = function(){
	  debug('socket connected - writing packet');
	  this.join(this.id);
	  this.packet({ type: parser.CONNECT });
	  this.nsp.connected[this.id] = this;
	};

	/**
	 * Called with each packet. Called by `Client`.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onpacket = function(packet){
	  debug('got packet %j', packet);
	  switch (packet.type) {
	    case parser.EVENT:
	      this.onevent(packet);
	      break;

	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;

	    case parser.ACK:
	      this.onack(packet);
	      break;

	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;

	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;

	    case parser.ERROR:
	      this.emit('error', packet.data);
	  }
	};

	/**
	 * Called upon event packet.
	 *
	 * @param {Object} packet object
	 * @api private
	 */

	Socket.prototype.onevent = function(packet){
	  var args = packet.data || [];
	  debug('emitting event %j', args);

	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }

	  emit.apply(this, args);
	};

	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @param {Number} packet id
	 * @api private
	 */

	Socket.prototype.ack = function(id){
	  var self = this;
	  var sent = false;
	  return function(){
	    // prevent double callbacks
	    if (sent) return;
	    var args = Array.prototype.slice.call(arguments);
	    debug('sending ack %j', args);

	    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
	    self.packet({
	      id: id,
	      type: type,
	      data: args
	    });
	  };
	};

	/**
	 * Called upon ack packet.
	 *
	 * @api private
	 */

	Socket.prototype.onack = function(packet){
	  var ack = this.acks[packet.id];
	  if ('function' == typeof ack) {
	    debug('calling ack %s with %j', packet.id, packet.data);
	    ack.apply(this, packet.data);
	    delete this.acks[packet.id];
	  } else {
	    debug('bad ack %s', packet.id);
	  }
	};

	/**
	 * Called upon client disconnect packet.
	 *
	 * @api private
	 */

	Socket.prototype.ondisconnect = function(){
	  debug('got disconnect packet');
	  this.onclose('client namespace disconnect');
	};

	/**
	 * Handles a client error.
	 *
	 * @api private
	 */

	Socket.prototype.onerror = function(err){
	  if (this.listeners('error').length) {
	    this.emit('error', err);
	  } else {
	    console.error('Missing error handler on `socket`.');
	    console.error(err.stack);
	  }
	};

	/**
	 * Called upon closing. Called by `Client`.
	 *
	 * @param {String} reason
	 * @param {Error} optional error object
	 * @api private
	 */

	Socket.prototype.onclose = function(reason){
	  if (!this.connected) return this;
	  debug('closing socket - reason %s', reason);
	  this.leaveAll();
	  this.nsp.remove(this);
	  this.client.remove(this);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.nsp.connected[this.id];
	  this.emit('disconnect', reason);
	};

	/**
	 * Produces an `error` packet.
	 *
	 * @param {Object} error object
	 * @api private
	 */

	Socket.prototype.error = function(err){
	  this.packet({ type: parser.ERROR, data: err });
	};

	/**
	 * Disconnects this client.
	 *
	 * @param {Boolean} if `true`, closes the underlying connection
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.disconnect = function(close){
	  if (!this.connected) return this;
	  if (close) {
	    this.client.disconnect();
	  } else {
	    this.packet({ type: parser.DISCONNECT });
	    this.onclose('server namespace disconnect');
	  }
	  return this;
	};


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {/*
	 * Module requirements.
	 */

	var isArray = __webpack_require__(152);

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(data) {

	  function _hasBinary(obj) {
	    if (!obj) return false;

	    if ( (global.Buffer && Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }

	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      if (obj.toJSON) {
	        obj = obj.toJSON();
	      }

	      for (var key in obj) {
	        if (obj.hasOwnProperty(key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  return _hasBinary(data);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5).Buffer))

/***/ },
/* 152 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	/**
	 * Module dependencies.
	 */

	var keys = __webpack_require__(154);
	var Emitter = __webpack_require__(19).EventEmitter;
	var parser = __webpack_require__(156);

	/**
	 * Module exports.
	 */

	module.exports = Adapter;

	/**
	 * Memory adapter constructor.
	 *
	 * @param {Namespace} nsp
	 * @api public
	 */

	function Adapter(nsp){
	  this.nsp = nsp;
	  this.rooms = {};
	  this.sids = {};
	  this.encoder = new parser.Encoder();
	}

	/**
	 * Inherits from `EventEmitter`.
	 */

	Adapter.prototype.__proto__ = Emitter.prototype;

	/**
	 * Adds a socket from a room.
	 *
	 * @param {String} socket id
	 * @param {String} room name
	 * @param {Function} callback
	 * @api public
	 */

	Adapter.prototype.add = function(id, room, fn){
	  this.sids[id] = this.sids[id] || {};
	  this.sids[id][room] = true;
	  this.rooms[room] = this.rooms[room] || {};
	  this.rooms[room][id] = true;
	  if (fn) process.nextTick(fn.bind(null, null));
	};

	/**
	 * Removes a socket from a room.
	 *
	 * @param {String} socket id
	 * @param {String} room name
	 * @param {Function} callback
	 * @api public
	 */

	Adapter.prototype.del = function(id, room, fn){
	  this.sids[id] = this.sids[id] || {};
	  this.rooms[room] = this.rooms[room] || {};
	  delete this.sids[id][room];
	  delete this.rooms[room][id];
	  if (this.rooms.hasOwnProperty(room) && !keys(this.rooms[room]).length) {
	    delete this.rooms[room];
	  }

	  if (fn) process.nextTick(fn.bind(null, null));
	};

	/**
	 * Removes a socket from all rooms it's joined.
	 *
	 * @param {String} socket id
	 * @api public
	 */

	Adapter.prototype.delAll = function(id, fn){
	  var rooms = this.sids[id];
	  if (rooms) {
	    for (var room in rooms) {
	      if (rooms.hasOwnProperty(room)) {
	        delete this.rooms[room][id];
	      }

	      if (this.rooms.hasOwnProperty(room) && !keys(this.rooms[room]).length) {
	        delete this.rooms[room];
	      }
	    }
	  }
	  delete this.sids[id];
	};

	/**
	 * Broadcasts a packet.
	 *
	 * Options:
	 *  - `flags` {Object} flags for this packet
	 *  - `except` {Array} sids that should be excluded
	 *  - `rooms` {Array} list of rooms to broadcast to
	 *
	 * @param {Object} packet object
	 * @api public
	 */

	Adapter.prototype.broadcast = function(packet, opts){
	  var rooms = opts.rooms || [];
	  var except = opts.except || [];
	  var flags = opts.flags || {};
	  var ids = {};
	  var self = this;
	  var socket;

	  packet.nsp = this.nsp.name;
	  this.encoder.encode(packet, function(encodedPackets) {
	    if (rooms.length) {
	      for (var i = 0; i < rooms.length; i++) {
	        var room = self.rooms[rooms[i]];
	        if (!room) continue;
	        for (var id in room) {
	          if (room.hasOwnProperty(id)) {
	            if (ids[id] || ~except.indexOf(id)) continue;
	            socket = self.nsp.connected[id];
	            if (socket) {
	              socket.packet(encodedPackets, true, flags.volatile);
	              ids[id] = true;
	            }
	          }
	        }
	      }
	    } else {
	      for (var id in self.sids) {
	        if (self.sids.hasOwnProperty(id)) {
	          if (~except.indexOf(id)) continue;
	          socket = self.nsp.connected[id];
	          if (socket) socket.packet(encodedPackets, true, flags.volatile);
	        }
	      }
	    }
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;
	var isArgs = __webpack_require__(155);
	var hasDontEnumBug = !({'toString': null}).propertyIsEnumerable('toString');
	var hasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype');
	var dontEnums = [
		"toString",
		"toLocaleString",
		"valueOf",
		"hasOwnProperty",
		"isPrototypeOf",
		"propertyIsEnumerable",
		"constructor"
	];

	var keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toString.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toString.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError("Object.keys called on a non-object");
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var ctor = object.constructor;
			var skipConstructor = ctor && ctor.prototype === object;

			for (var j = 0; j < dontEnums.length; ++j) {
				if (!(skipConstructor && dontEnums[j] === 'constructor') && has.call(object, dontEnums[j])) {
					theKeys.push(dontEnums[j]);
				}
			}
		}
		return theKeys;
	};

	keysShim.shim = function shimObjectKeys() {
		if (!Object.keys) {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	module.exports = keysShim;



/***/ },
/* 155 */
/***/ function(module, exports) {

	"use strict";

	var toString = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toString.call(value);
		var isArguments = str === '[object Arguments]';
		if (!isArguments) {
			isArguments = str !== '[object Array]'
				&& value !== null
				&& typeof value === 'object'
				&& typeof value.length === 'number'
				&& value.length >= 0
				&& toString.call(value.callee) === '[object Function]';
		}
		return isArguments;
	};



/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var debug = __webpack_require__(157)('socket.io-parser');
	var json = __webpack_require__(158);
	var isArray = __webpack_require__(159);
	var Emitter = __webpack_require__(160);
	var binary = __webpack_require__(161);
	var isBuf = __webpack_require__(162);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'BINARY_EVENT',
	  'ACK',
	  'BINARY_ACK',
	  'ERROR'
	];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  }
	  else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;

	  // first is type
	  str += obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	Emitter(Decoder.prototype);

	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function(obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments == 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  }
	  else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  }
	  else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var p = {};
	  var i = 0;

	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    p.attachments = '';
	    while (str.charAt(++i) != '-') {
	      p.attachments += str.charAt(i);
	    }
	    p.attachments = Number(p.attachments);
	  }

	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i + 1 == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' != next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i + 1 == str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    try {
	      p.data = json.parse(str.substr(i));
	    } catch(e){
	      return error();
	    }
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(data){
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}


/***/ },
/* 157 */
/***/ function(module, exports) {

	
	/**
	 * Expose `debug()` as the module.
	 */

	module.exports = debug;

	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */

	function debug(name) {
	  if (!debug.enabled(name)) return function(){};

	  return function(fmt){
	    fmt = coerce(fmt);

	    var curr = new Date;
	    var ms = curr - (debug[name] || curr);
	    debug[name] = curr;

	    fmt = name
	      + ' '
	      + fmt
	      + ' +' + debug.humanize(ms);

	    // This hackery is required for IE8
	    // where `console.log` doesn't have 'apply'
	    window.console
	      && console.log
	      && Function.prototype.apply.call(console.log, console, arguments);
	  }
	}

	/**
	 * The currently active debug mode names.
	 */

	debug.names = [];
	debug.skips = [];

	/**
	 * Enables a debug mode by name. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} name
	 * @api public
	 */

	debug.enable = function(name) {
	  try {
	    localStorage.debug = name;
	  } catch(e){}

	  var split = (name || '').split(/[\s,]+/)
	    , len = split.length;

	  for (var i = 0; i < len; i++) {
	    name = split[i].replace('*', '.*?');
	    if (name[0] === '-') {
	      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
	    }
	    else {
	      debug.names.push(new RegExp('^' + name + '$'));
	    }
	  }
	};

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	debug.disable = function(){
	  debug.enable('');
	};

	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */

	debug.humanize = function(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;

	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	};

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	debug.enabled = function(name) {
	  for (var i = 0, len = debug.skips.length; i < len; i++) {
	    if (debug.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (var i = 0, len = debug.names.length; i < len; i++) {
	    if (debug.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Coerce `val`.
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	// persist

	try {
	  if (window.localStorage) debug.enable(localStorage.debug);
	} catch(e){}


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */
	;(function (window) {
	  // Convenience aliases.
	  var getClass = {}.toString, isProperty, forEach, undef;

	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(95);

	  // Detect native implementations.
	  var nativeJSON = typeof JSON == "object" && JSON;

	  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if
	  // available.
	  var JSON3 = typeof exports == "object" && exports && !exports.nodeType && exports;

	  if (JSON3 && nativeJSON) {
	    // Explicitly delegate to the native `stringify` and `parse`
	    // implementations in CommonJS environments.
	    JSON3.stringify = nativeJSON.stringify;
	    JSON3.parse = nativeJSON.parse;
	  } else {
	    // Export for web browsers, JavaScript engines, and asynchronous module
	    // loaders, using the global `JSON` object if available.
	    JSON3 = window.JSON = nativeJSON || {};
	  }

	  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	  var isExtended = new Date(-3509827334573292);
	  try {
	    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	    // results for certain dates in Opera >= 10.53.
	    isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	      // Safari < 2.0.2 stores the internal millisecond time value correctly,
	      // but clips the values returned by the date methods to the range of
	      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	  } catch (exception) {}

	  // Internal: Determines whether the native `JSON.stringify` and `parse`
	  // implementations are spec-compliant. Based on work by Ken Snyder.
	  function has(name) {
	    if (has[name] !== undef) {
	      // Return cached feature test result.
	      return has[name];
	    }

	    var isSupported;
	    if (name == "bug-string-char-index") {
	      // IE <= 7 doesn't support accessing string characters using square
	      // bracket notation. IE 8 only supports this for primitives.
	      isSupported = "a"[0] != "a";
	    } else if (name == "json") {
	      // Indicates whether both `JSON.stringify` and `JSON.parse` are
	      // supported.
	      isSupported = has("json-stringify") && has("json-parse");
	    } else {
	      var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	      // Test `JSON.stringify`.
	      if (name == "json-stringify") {
	        var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	        if (stringifySupported) {
	          // A test function object with a custom `toJSON` method.
	          (value = function () {
	            return 1;
	          }).toJSON = value;
	          try {
	            stringifySupported =
	              // Firefox 3.1b1 and b2 serialize string, number, and boolean
	              // primitives as object literals.
	              stringify(0) === "0" &&
	              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	              // literals.
	              stringify(new Number()) === "0" &&
	              stringify(new String()) == '""' &&
	              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	              // does not define a canonical JSON representation (this applies to
	              // objects with `toJSON` properties as well, *unless* they are nested
	              // within an object or array).
	              stringify(getClass) === undef &&
	              // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	              // FF 3.1b3 pass this test.
	              stringify(undef) === undef &&
	              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	              // respectively, if the value is omitted entirely.
	              stringify() === undef &&
	              // FF 3.1b1, 2 throw an error if the given value is not a number,
	              // string, array, object, Boolean, or `null` literal. This applies to
	              // objects with custom `toJSON` methods as well, unless they are nested
	              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	              // methods entirely.
	              stringify(value) === "1" &&
	              stringify([value]) == "[1]" &&
	              // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	              // `"[null]"`.
	              stringify([undef]) == "[null]" &&
	              // YUI 3.0.0b1 fails to serialize `null` literals.
	              stringify(null) == "null" &&
	              // FF 3.1b1, 2 halts serialization if an array contains a function:
	              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	              // elides non-JSON values from objects and arrays, unless they
	              // define custom `toJSON` methods.
	              stringify([undef, getClass, null]) == "[null,null,null]" &&
	              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	              // where character escape codes are expected (e.g., `\b` => `\u0008`).
	              stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	              stringify(null, value) === "1" &&
	              stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	              // serialize extended years.
	              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	              // The milliseconds are optional in ES 5, but required in 5.1.
	              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	              // four-digit years instead of six-digit years. Credits: @Yaffle.
	              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	              // values less than 1000. Credits: @Yaffle.
	              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	          } catch (exception) {
	            stringifySupported = false;
	          }
	        }
	        isSupported = stringifySupported;
	      }
	      // Test `JSON.parse`.
	      if (name == "json-parse") {
	        var parse = JSON3.parse;
	        if (typeof parse == "function") {
	          try {
	            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	            // Conforming implementations should also coerce the initial argument to
	            // a string prior to parsing.
	            if (parse("0") === 0 && !parse(false)) {
	              // Simple parsing test.
	              value = parse(serialized);
	              var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	              if (parseSupported) {
	                try {
	                  // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                  parseSupported = !parse('"\t"');
	                } catch (exception) {}
	                if (parseSupported) {
	                  try {
	                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                    // certain octal literals.
	                    parseSupported = parse("01") !== 1;
	                  } catch (exception) {}
	                }
	                if (parseSupported) {
	                  try {
	                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                    // points. These environments, along with FF 3.1b1 and 2,
	                    // also allow trailing commas in JSON objects and arrays.
	                    parseSupported = parse("1.") !== 1;
	                  } catch (exception) {}
	                }
	              }
	            }
	          } catch (exception) {
	            parseSupported = false;
	          }
	        }
	        isSupported = parseSupported;
	      }
	    }
	    return has[name] = !!isSupported;
	  }

	  if (!has("json")) {
	    // Common `[[Class]]` name aliases.
	    var functionClass = "[object Function]";
	    var dateClass = "[object Date]";
	    var numberClass = "[object Number]";
	    var stringClass = "[object String]";
	    var arrayClass = "[object Array]";
	    var booleanClass = "[object Boolean]";

	    // Detect incomplete support for accessing string characters by index.
	    var charIndexBuggy = has("bug-string-char-index");

	    // Define additional utility methods if the `Date` methods are buggy.
	    if (!isExtended) {
	      var floor = Math.floor;
	      // A mapping between the months of the year and the number of days between
	      // January 1st and the first of the respective month.
	      var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	      // Internal: Calculates the number of days between the Unix epoch and the
	      // first day of the given month.
	      var getDay = function (year, month) {
	        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	      };
	    }

	    // Internal: Determines if a property is a direct property of the given
	    // object. Delegates to the native `Object#hasOwnProperty` method.
	    if (!(isProperty = {}.hasOwnProperty)) {
	      isProperty = function (property) {
	        var members = {}, constructor;
	        if ((members.__proto__ = null, members.__proto__ = {
	          // The *proto* property cannot be set multiple times in recent
	          // versions of Firefox and SeaMonkey.
	          "toString": 1
	        }, members).toString != getClass) {
	          // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	          // supports the mutable *proto* property.
	          isProperty = function (property) {
	            // Capture and break the object's prototype chain (see section 8.6.2
	            // of the ES 5.1 spec). The parenthesized expression prevents an
	            // unsafe transformation by the Closure Compiler.
	            var original = this.__proto__, result = property in (this.__proto__ = null, this);
	            // Restore the original prototype chain.
	            this.__proto__ = original;
	            return result;
	          };
	        } else {
	          // Capture a reference to the top-level `Object` constructor.
	          constructor = members.constructor;
	          // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	          // other environments.
	          isProperty = function (property) {
	            var parent = (this.constructor || constructor).prototype;
	            return property in this && !(property in parent && this[property] === parent[property]);
	          };
	        }
	        members = null;
	        return isProperty.call(this, property);
	      };
	    }

	    // Internal: A set of primitive types used by `isHostType`.
	    var PrimitiveTypes = {
	      'boolean': 1,
	      'number': 1,
	      'string': 1,
	      'undefined': 1
	    };

	    // Internal: Determines if the given object `property` value is a
	    // non-primitive.
	    var isHostType = function (object, property) {
	      var type = typeof object[property];
	      return type == 'object' ? !!object[property] : !PrimitiveTypes[type];
	    };

	    // Internal: Normalizes the `for...in` iteration algorithm across
	    // environments. Each enumerated key is yielded to a `callback` function.
	    forEach = function (object, callback) {
	      var size = 0, Properties, members, property;

	      // Tests for bugs in the current environment's `for...in` algorithm. The
	      // `valueOf` property inherits the non-enumerable flag from
	      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	      (Properties = function () {
	        this.valueOf = 0;
	      }).prototype.valueOf = 0;

	      // Iterate over a new instance of the `Properties` class.
	      members = new Properties();
	      for (property in members) {
	        // Ignore all properties inherited from `Object.prototype`.
	        if (isProperty.call(members, property)) {
	          size++;
	        }
	      }
	      Properties = members = null;

	      // Normalize the iteration algorithm.
	      if (!size) {
	        // A list of non-enumerable properties inherited from `Object.prototype`.
	        members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	        // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	        // properties.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, length;
	          var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;
	          for (property in object) {
	            // Gecko <= 1.0 enumerates the `prototype` property of functions under
	            // certain conditions; IE does not.
	            if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for each non-enumerable property.
	          for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	        };
	      } else if (size == 2) {
	        // Safari <= 2.0.4 enumerates shadowed properties twice.
	        forEach = function (object, callback) {
	          // Create a set of iterated properties.
	          var members = {}, isFunction = getClass.call(object) == functionClass, property;
	          for (property in object) {
	            // Store each property name to prevent double enumeration. The
	            // `prototype` property of functions is not enumerated due to cross-
	            // environment inconsistencies.
	            if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	        };
	      } else {
	        // No bugs detected; use the standard `for...in` algorithm.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	          for (property in object) {
	            if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for the `constructor` property due to
	          // cross-environment inconsistencies.
	          if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	            callback(property);
	          }
	        };
	      }
	      return forEach(object, callback);
	    };

	    // Public: Serializes a JavaScript `value` as a JSON string. The optional
	    // `filter` argument may specify either a function that alters how object and
	    // array members are serialized, or an array of strings and numbers that
	    // indicates which properties should be serialized. The optional `width`
	    // argument may be either a string or number that specifies the indentation
	    // level of the output.
	    if (!has("json-stringify")) {
	      // Internal: A map of control characters and their escaped equivalents.
	      var Escapes = {
	        92: "\\\\",
	        34: '\\"',
	        8: "\\b",
	        12: "\\f",
	        10: "\\n",
	        13: "\\r",
	        9: "\\t"
	      };

	      // Internal: Converts `value` into a zero-padded string such that its
	      // length is at least equal to `width`. The `width` must be <= 6.
	      var leadingZeroes = "000000";
	      var toPaddedString = function (width, value) {
	        // The `|| 0` expression is necessary to work around a bug in
	        // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	        return (leadingZeroes + (value || 0)).slice(-width);
	      };

	      // Internal: Double-quotes a string `value`, replacing all ASCII control
	      // characters (characters with code unit values between 0 and 31) with
	      // their escaped equivalents. This is an implementation of the
	      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	      var unicodePrefix = "\\u00";
	      var quote = function (value) {
	        var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
	        if (isLarge) {
	          symbols = value.split("");
	        }
	        for (; index < length; index++) {
	          var charCode = value.charCodeAt(index);
	          // If the character is a control character, append its Unicode or
	          // shorthand escape sequence; otherwise, append the character as-is.
	          switch (charCode) {
	            case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	              result += Escapes[charCode];
	              break;
	            default:
	              if (charCode < 32) {
	                result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                break;
	              }
	              result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
	          }
	        }
	        return result + '"';
	      };

	      // Internal: Recursively serializes an object. Implements the
	      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	      var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	        try {
	          // Necessary for host object support.
	          value = object[property];
	        } catch (exception) {}
	        if (typeof value == "object" && value) {
	          className = getClass.call(value);
	          if (className == dateClass && !isProperty.call(value, "toJSON")) {
	            if (value > -1 / 0 && value < 1 / 0) {
	              // Dates are serialized according to the `Date#toJSON` method
	              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	              // for the ISO 8601 date time string format.
	              if (getDay) {
	                // Manually compute the year, month, date, hours, minutes,
	                // seconds, and milliseconds if the `getUTC*` methods are
	                // buggy. Adapted from @Yaffle's `date-shim` project.
	                date = floor(value / 864e5);
	                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                date = 1 + date - getDay(year, month);
	                // The `time` value specifies the time within the day (see ES
	                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                // to compute `A modulo B`, as the `%` operator does not
	                // correspond to the `modulo` operation for negative numbers.
	                time = (value % 864e5 + 864e5) % 864e5;
	                // The hours, minutes, seconds, and milliseconds are obtained by
	                // decomposing the time within the day. See section 15.9.1.10.
	                hours = floor(time / 36e5) % 24;
	                minutes = floor(time / 6e4) % 60;
	                seconds = floor(time / 1e3) % 60;
	                milliseconds = time % 1e3;
	              } else {
	                year = value.getUTCFullYear();
	                month = value.getUTCMonth();
	                date = value.getUTCDate();
	                hours = value.getUTCHours();
	                minutes = value.getUTCMinutes();
	                seconds = value.getUTCSeconds();
	                milliseconds = value.getUTCMilliseconds();
	              }
	              // Serialize extended years correctly.
	              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                // Months, dates, hours, minutes, and seconds should have two
	                // digits; milliseconds should have three.
	                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                // Milliseconds are optional in ES 5.0, but required in 5.1.
	                "." + toPaddedString(3, milliseconds) + "Z";
	            } else {
	              value = null;
	            }
	          } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	            // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	            // ignores all `toJSON` methods on these objects unless they are
	            // defined directly on an instance.
	            value = value.toJSON(property);
	          }
	        }
	        if (callback) {
	          // If a replacement function was provided, call it to obtain the value
	          // for serialization.
	          value = callback.call(object, property, value);
	        }
	        if (value === null) {
	          return "null";
	        }
	        className = getClass.call(value);
	        if (className == booleanClass) {
	          // Booleans are represented literally.
	          return "" + value;
	        } else if (className == numberClass) {
	          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	          // `"null"`.
	          return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	        } else if (className == stringClass) {
	          // Strings are double-quoted and escaped.
	          return quote("" + value);
	        }
	        // Recursively serialize objects and arrays.
	        if (typeof value == "object") {
	          // Check for cyclic structures. This is a linear search; performance
	          // is inversely proportional to the number of unique nested objects.
	          for (length = stack.length; length--;) {
	            if (stack[length] === value) {
	              // Cyclic structures cannot be serialized by `JSON.stringify`.
	              throw TypeError();
	            }
	          }
	          // Add the object to the stack of traversed objects.
	          stack.push(value);
	          results = [];
	          // Save the current indentation level and indent one additional level.
	          prefix = indentation;
	          indentation += whitespace;
	          if (className == arrayClass) {
	            // Recursively serialize array elements.
	            for (index = 0, length = value.length; index < length; index++) {
	              element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	              results.push(element === undef ? "null" : element);
	            }
	            result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	          } else {
	            // Recursively serialize object members. Members are selected from
	            // either a user-specified list of property names, or the object
	            // itself.
	            forEach(properties || value, function (property) {
	              var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	              if (element !== undef) {
	                // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                // is not the empty string, let `member` {quote(property) + ":"}
	                // be the concatenation of `member` and the `space` character."
	                // The "`space` character" refers to the literal space
	                // character, not the `space` {width} argument provided to
	                // `JSON.stringify`.
	                results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	              }
	            });
	            result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	          }
	          // Remove the object from the traversed object stack.
	          stack.pop();
	          return result;
	        }
	      };

	      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	      JSON3.stringify = function (source, filter, width) {
	        var whitespace, callback, properties, className;
	        if (typeof filter == "function" || typeof filter == "object" && filter) {
	          if ((className = getClass.call(filter)) == functionClass) {
	            callback = filter;
	          } else if (className == arrayClass) {
	            // Convert the property names array into a makeshift set.
	            properties = {};
	            for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	          }
	        }
	        if (width) {
	          if ((className = getClass.call(width)) == numberClass) {
	            // Convert the `width` to an integer and create a string containing
	            // `width` number of space characters.
	            if ((width -= width % 1) > 0) {
	              for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	            }
	          } else if (className == stringClass) {
	            whitespace = width.length <= 10 ? width : width.slice(0, 10);
	          }
	        }
	        // Opera <= 7.54u2 discards the values associated with empty string keys
	        // (`""`) only if they are used directly within an object member list
	        // (e.g., `!("" in { "": 1})`).
	        return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	      };
	    }

	    // Public: Parses a JSON source string.
	    if (!has("json-parse")) {
	      var fromCharCode = String.fromCharCode;

	      // Internal: A map of escaped control characters and their unescaped
	      // equivalents.
	      var Unescapes = {
	        92: "\\",
	        34: '"',
	        47: "/",
	        98: "\b",
	        116: "\t",
	        110: "\n",
	        102: "\f",
	        114: "\r"
	      };

	      // Internal: Stores the parser state.
	      var Index, Source;

	      // Internal: Resets the parser state and throws a `SyntaxError`.
	      var abort = function() {
	        Index = Source = null;
	        throw SyntaxError();
	      };

	      // Internal: Returns the next token, or `"$"` if the parser has reached
	      // the end of the source string. A token may be a string, number, `null`
	      // literal, or Boolean literal.
	      var lex = function () {
	        var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	        while (Index < length) {
	          charCode = source.charCodeAt(Index);
	          switch (charCode) {
	            case 9: case 10: case 13: case 32:
	              // Skip whitespace tokens, including tabs, carriage returns, line
	              // feeds, and space characters.
	              Index++;
	              break;
	            case 123: case 125: case 91: case 93: case 58: case 44:
	              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	              // the current position.
	              value = charIndexBuggy ? source.charAt(Index) : source[Index];
	              Index++;
	              return value;
	            case 34:
	              // `"` delimits a JSON string; advance to the next character and
	              // begin parsing the string. String tokens are prefixed with the
	              // sentinel `@` character to distinguish them from punctuators and
	              // end-of-string tokens.
	              for (value = "@", Index++; Index < length;) {
	                charCode = source.charCodeAt(Index);
	                if (charCode < 32) {
	                  // Unescaped ASCII control characters (those with a code unit
	                  // less than the space character) are not permitted.
	                  abort();
	                } else if (charCode == 92) {
	                  // A reverse solidus (`\`) marks the beginning of an escaped
	                  // control character (including `"`, `\`, and `/`) or Unicode
	                  // escape sequence.
	                  charCode = source.charCodeAt(++Index);
	                  switch (charCode) {
	                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                      // Revive escaped control characters.
	                      value += Unescapes[charCode];
	                      Index++;
	                      break;
	                    case 117:
	                      // `\u` marks the beginning of a Unicode escape sequence.
	                      // Advance to the first character and validate the
	                      // four-digit code point.
	                      begin = ++Index;
	                      for (position = Index + 4; Index < position; Index++) {
	                        charCode = source.charCodeAt(Index);
	                        // A valid sequence comprises four hexdigits (case-
	                        // insensitive) that form a single hexadecimal value.
	                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                          // Invalid Unicode escape sequence.
	                          abort();
	                        }
	                      }
	                      // Revive the escaped character.
	                      value += fromCharCode("0x" + source.slice(begin, Index));
	                      break;
	                    default:
	                      // Invalid escape sequence.
	                      abort();
	                  }
	                } else {
	                  if (charCode == 34) {
	                    // An unescaped double-quote character marks the end of the
	                    // string.
	                    break;
	                  }
	                  charCode = source.charCodeAt(Index);
	                  begin = Index;
	                  // Optimize for the common case where a string is valid.
	                  while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                    charCode = source.charCodeAt(++Index);
	                  }
	                  // Append the string as-is.
	                  value += source.slice(begin, Index);
	                }
	              }
	              if (source.charCodeAt(Index) == 34) {
	                // Advance to the next character and return the revived string.
	                Index++;
	                return value;
	              }
	              // Unterminated string.
	              abort();
	            default:
	              // Parse numbers and literals.
	              begin = Index;
	              // Advance past the negative sign, if one is specified.
	              if (charCode == 45) {
	                isSigned = true;
	                charCode = source.charCodeAt(++Index);
	              }
	              // Parse an integer or floating-point value.
	              if (charCode >= 48 && charCode <= 57) {
	                // Leading zeroes are interpreted as octal literals.
	                if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                  // Illegal octal literal.
	                  abort();
	                }
	                isSigned = false;
	                // Parse the integer component.
	                for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                // Floats cannot contain a leading decimal point; however, this
	                // case is already accounted for by the parser.
	                if (source.charCodeAt(Index) == 46) {
	                  position = ++Index;
	                  // Parse the decimal component.
	                  for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal trailing decimal.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Parse exponents. The `e` denoting the exponent is
	                // case-insensitive.
	                charCode = source.charCodeAt(Index);
	                if (charCode == 101 || charCode == 69) {
	                  charCode = source.charCodeAt(++Index);
	                  // Skip past the sign following the exponent, if one is
	                  // specified.
	                  if (charCode == 43 || charCode == 45) {
	                    Index++;
	                  }
	                  // Parse the exponential component.
	                  for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal empty exponent.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Coerce the parsed value to a JavaScript number.
	                return +source.slice(begin, Index);
	              }
	              // A negative sign may only precede numbers.
	              if (isSigned) {
	                abort();
	              }
	              // `true`, `false`, and `null` literals.
	              if (source.slice(Index, Index + 4) == "true") {
	                Index += 4;
	                return true;
	              } else if (source.slice(Index, Index + 5) == "false") {
	                Index += 5;
	                return false;
	              } else if (source.slice(Index, Index + 4) == "null") {
	                Index += 4;
	                return null;
	              }
	              // Unrecognized token.
	              abort();
	          }
	        }
	        // Return the sentinel `$` character if the parser has reached the end
	        // of the source string.
	        return "$";
	      };

	      // Internal: Parses a JSON `value` token.
	      var get = function (value) {
	        var results, hasMembers;
	        if (value == "$") {
	          // Unexpected end of input.
	          abort();
	        }
	        if (typeof value == "string") {
	          if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	            // Remove the sentinel `@` character.
	            return value.slice(1);
	          }
	          // Parse object and array literals.
	          if (value == "[") {
	            // Parses a JSON array, returning a new JavaScript array.
	            results = [];
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing square bracket marks the end of the array literal.
	              if (value == "]") {
	                break;
	              }
	              // If the array literal contains elements, the current token
	              // should be a comma separating the previous element from the
	              // next.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "]") {
	                    // Unexpected trailing `,` in array literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each array element.
	                  abort();
	                }
	              }
	              // Elisions and leading commas are not permitted.
	              if (value == ",") {
	                abort();
	              }
	              results.push(get(value));
	            }
	            return results;
	          } else if (value == "{") {
	            // Parses a JSON object, returning a new JavaScript object.
	            results = {};
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing curly brace marks the end of the object literal.
	              if (value == "}") {
	                break;
	              }
	              // If the object literal contains members, the current token
	              // should be a comma separator.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "}") {
	                    // Unexpected trailing `,` in object literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each object member.
	                  abort();
	                }
	              }
	              // Leading commas are not permitted, object property names must be
	              // double-quoted strings, and a `:` must separate each property
	              // name and value.
	              if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                abort();
	              }
	              results[value.slice(1)] = get(lex());
	            }
	            return results;
	          }
	          // Unexpected token encountered.
	          abort();
	        }
	        return value;
	      };

	      // Internal: Updates a traversed object member.
	      var update = function(source, property, callback) {
	        var element = walk(source, property, callback);
	        if (element === undef) {
	          delete source[property];
	        } else {
	          source[property] = element;
	        }
	      };

	      // Internal: Recursively traverses a parsed JSON object, invoking the
	      // `callback` function for each value. This is an implementation of the
	      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	      var walk = function (source, property, callback) {
	        var value = source[property], length;
	        if (typeof value == "object" && value) {
	          // `forEach` can't be used to traverse an array in Opera <= 8.54
	          // because its `Object#hasOwnProperty` implementation returns `false`
	          // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	          if (getClass.call(value) == arrayClass) {
	            for (length = value.length; length--;) {
	              update(value, length, callback);
	            }
	          } else {
	            forEach(value, function (property) {
	              update(value, property, callback);
	            });
	          }
	        }
	        return callback.call(source, property, value);
	      };

	      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	      JSON3.parse = function (source, callback) {
	        var result, value;
	        Index = 0;
	        Source = "" + source;
	        result = get(lex());
	        // If a JSON string contains multiple tokens, it is invalid.
	        if (lex() != "$") {
	          abort();
	        }
	        // Reset the parser state.
	        Index = Source = null;
	        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	      };
	    }
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}(this));


/***/ },
/* 159 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 160 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = __webpack_require__(159);
	var isBuf = __webpack_require__(162);

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	exports.deconstructPacket = function(packet){
	  var buffers = [];
	  var packetData = packet.data;

	  function _deconstructPacket(data) {
	    if (!data) return data;

	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == typeof data && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }

	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	exports.reconstructPacket = function(packet, buffers) {
	  var curPlaceHolder = 0;

	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == typeof data) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }

	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((global.Blob && obj instanceof Blob) ||
	        (global.File && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 162 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	module.exports = isBuf;

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;!function(e){if(true)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.io=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){

	module.exports = _dereq_('./lib/');

	},{"./lib/":2}],2:[function(_dereq_,module,exports){

	/**
	 * Module dependencies.
	 */

	var url = _dereq_('./url');
	var parser = _dereq_('socket.io-parser');
	var Manager = _dereq_('./manager');
	var debug = _dereq_('debug')('socket.io-client');

	/**
	 * Module exports.
	 */

	module.exports = exports = lookup;

	/**
	 * Managers cache.
	 */

	var cache = exports.managers = {};

	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */

	function lookup(uri, opts) {
	  if (typeof uri == 'object') {
	    opts = uri;
	    uri = undefined;
	  }

	  opts = opts || {};

	  var parsed = url(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var io;

	  if (opts.forceNew || opts['force new connection'] || false === opts.multiplex) {
	    debug('ignoring socket cache for %s', source);
	    io = Manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = Manager(source, opts);
	    }
	    io = cache[id];
	  }

	  return io.socket(parsed.path);
	}

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = parser.protocol;

	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */

	exports.connect = lookup;

	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */

	exports.Manager = _dereq_('./manager');
	exports.Socket = _dereq_('./socket');

	},{"./manager":3,"./socket":5,"./url":6,"debug":10,"socket.io-parser":44}],3:[function(_dereq_,module,exports){

	/**
	 * Module dependencies.
	 */

	var url = _dereq_('./url');
	var eio = _dereq_('engine.io-client');
	var Socket = _dereq_('./socket');
	var Emitter = _dereq_('component-emitter');
	var parser = _dereq_('socket.io-parser');
	var on = _dereq_('./on');
	var bind = _dereq_('component-bind');
	var object = _dereq_('object-component');
	var debug = _dereq_('debug')('socket.io-client:manager');
	var indexOf = _dereq_('indexof');
	var Backoff = _dereq_('backo2');

	/**
	 * Module exports
	 */

	module.exports = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager(uri, opts){
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' == typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connected = [];
	  this.encoding = false;
	  this.packetBuffer = [];
	  this.encoder = new parser.Encoder();
	  this.decoder = new parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function() {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function(){
	  for (var nsp in this.nsps) {
	    this.nsps[nsp].id = this.engine.id;
	  }
	};

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function(v){
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function(v){
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function(v){
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function(v){
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function(v){
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function(v){
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function() {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};


	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open =
	Manager.prototype.connect = function(fn){
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on(socket, 'open', function() {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function(data){
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function(){
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function(){
	  debug('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function(data){
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function(packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function(err){
	  debug('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function(nsp){
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connect', function(){
	      socket.id = self.engine.id;
	      if (!~indexOf(self.connected, socket)) {
	        self.connected.push(socket);
	      }
	    });
	  }
	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function(socket){
	  var index = indexOf(this.connected, socket);
	  if (~index) this.connected.splice(index, 1);
	  if (this.connected.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function(packet){
	  debug('writing packet %j', packet);
	  var self = this;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function(encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i]);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function() {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function(){
	  var sub;
	  while (sub = this.subs.shift()) sub.destroy();

	  this.packetBuffer = [];
	  this.encoding = false;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close =
	Manager.prototype.disconnect = function(){
	  this.skipReconnect = true;
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.engine && this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function(reason){
	  debug('close');
	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);
	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function(){
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function(){
	      if (self.skipReconnect) return;

	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function(err){
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function(){
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};

	},{"./on":4,"./socket":5,"./url":6,"backo2":7,"component-bind":8,"component-emitter":9,"debug":10,"engine.io-client":11,"indexof":40,"object-component":41,"socket.io-parser":44}],4:[function(_dereq_,module,exports){

	/**
	 * Module exports.
	 */

	module.exports = on;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on(obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function(){
	      obj.removeListener(ev, fn);
	    }
	  };
	}

	},{}],5:[function(_dereq_,module,exports){

	/**
	 * Module dependencies.
	 */

	var parser = _dereq_('socket.io-parser');
	var Emitter = _dereq_('component-emitter');
	var toArray = _dereq_('to-array');
	var on = _dereq_('./on');
	var bind = _dereq_('component-bind');
	var debug = _dereq_('debug')('socket.io-client:socket');
	var hasBin = _dereq_('has-binary');

	/**
	 * Module exports.
	 */

	module.exports = exports = Socket;

	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */

	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1
	};

	/**
	 * Shortcut to `Emitter#emit`.
	 */

	var emit = Emitter.prototype.emit;

	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */

	function Socket(io, nsp){
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  if (this.io.autoConnect) this.open();
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */

	Socket.prototype.subEvents = function() {
	  if (this.subs) return;

	  var io = this.io;
	  this.subs = [
	    on(io, 'open', bind(this, 'onopen')),
	    on(io, 'packet', bind(this, 'onpacket')),
	    on(io, 'close', bind(this, 'onclose'))
	  ];
	};

	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */

	Socket.prototype.open =
	Socket.prototype.connect = function(){
	  if (this.connected) return this;

	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' == this.io.readyState) this.onopen();
	  return this;
	};

	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.send = function(){
	  var args = toArray(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.emit = function(ev){
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }

	  var args = toArray(arguments);
	  var parserType = parser.EVENT; // default
	  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
	  var packet = { type: parserType, data: args };

	  // event ack callback
	  if ('function' == typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }

	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }

	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.packet = function(packet){
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};

	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */

	Socket.prototype.onopen = function(){
	  debug('transport is open - connecting');

	  // write connect packet if necessary
	  if ('/' != this.nsp) {
	    this.packet({ type: parser.CONNECT });
	  }
	};

	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */

	Socket.prototype.onclose = function(reason){
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};

	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onpacket = function(packet){
	  if (packet.nsp != this.nsp) return;

	  switch (packet.type) {
	    case parser.CONNECT:
	      this.onconnect();
	      break;

	    case parser.EVENT:
	      this.onevent(packet);
	      break;

	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;

	    case parser.ACK:
	      this.onack(packet);
	      break;

	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;

	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;

	    case parser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};

	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onevent = function(packet){
	  var args = packet.data || [];
	  debug('emitting event %j', args);

	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }

	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};

	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */

	Socket.prototype.ack = function(id){
	  var self = this;
	  var sent = false;
	  return function(){
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray(arguments);
	    debug('sending ack %j', args);

	    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
	    self.packet({
	      type: type,
	      id: id,
	      data: args
	    });
	  };
	};

	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onack = function(packet){
	  debug('calling ack %s with %j', packet.id, packet.data);
	  var fn = this.acks[packet.id];
	  fn.apply(this, packet.data);
	  delete this.acks[packet.id];
	};

	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */

	Socket.prototype.onconnect = function(){
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};

	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */

	Socket.prototype.emitBuffered = function(){
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];

	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};

	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */

	Socket.prototype.ondisconnect = function(){
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};

	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */

	Socket.prototype.destroy = function(){
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }

	  this.io.destroy(this);
	};

	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.close =
	Socket.prototype.disconnect = function(){
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: parser.DISCONNECT });
	  }

	  // remove socket from pool
	  this.destroy();

	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};

	},{"./on":4,"component-bind":8,"component-emitter":9,"debug":10,"has-binary":36,"socket.io-parser":44,"to-array":48}],6:[function(_dereq_,module,exports){
	(function (global){

	/**
	 * Module dependencies.
	 */

	var parseuri = _dereq_('parseuri');
	var debug = _dereq_('debug')('socket.io-client:url');

	/**
	 * Module exports.
	 */

	module.exports = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url(uri, loc){
	  var obj = uri;

	  // default to window.location
	  var loc = loc || global.location;
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' == typeof uri) {
	    if ('/' == uri.charAt(0)) {
	      if ('/' == uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.hostname + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' != typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    }
	    else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  // define unique id
	  obj.id = obj.protocol + '://' + obj.host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + obj.host + (loc && loc.port == obj.port ? '' : (':' + obj.port));

	  return obj;
	}

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"debug":10,"parseuri":42}],7:[function(_dereq_,module,exports){

	/**
	 * Expose `Backoff`.
	 */

	module.exports = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};


	},{}],8:[function(_dereq_,module,exports){
	/**
	 * Slice reference.
	 */

	var slice = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	module.exports = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  }
	};

	},{}],9:[function(_dereq_,module,exports){

	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};

	},{}],10:[function(_dereq_,module,exports){

	/**
	 * Expose `debug()` as the module.
	 */

	module.exports = debug;

	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */

	function debug(name) {
	  if (!debug.enabled(name)) return function(){};

	  return function(fmt){
	    fmt = coerce(fmt);

	    var curr = new Date;
	    var ms = curr - (debug[name] || curr);
	    debug[name] = curr;

	    fmt = name
	      + ' '
	      + fmt
	      + ' +' + debug.humanize(ms);

	    // This hackery is required for IE8
	    // where `console.log` doesn't have 'apply'
	    window.console
	      && console.log
	      && Function.prototype.apply.call(console.log, console, arguments);
	  }
	}

	/**
	 * The currently active debug mode names.
	 */

	debug.names = [];
	debug.skips = [];

	/**
	 * Enables a debug mode by name. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} name
	 * @api public
	 */

	debug.enable = function(name) {
	  try {
	    localStorage.debug = name;
	  } catch(e){}

	  var split = (name || '').split(/[\s,]+/)
	    , len = split.length;

	  for (var i = 0; i < len; i++) {
	    name = split[i].replace('*', '.*?');
	    if (name[0] === '-') {
	      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
	    }
	    else {
	      debug.names.push(new RegExp('^' + name + '$'));
	    }
	  }
	};

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	debug.disable = function(){
	  debug.enable('');
	};

	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */

	debug.humanize = function(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;

	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	};

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	debug.enabled = function(name) {
	  for (var i = 0, len = debug.skips.length; i < len; i++) {
	    if (debug.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (var i = 0, len = debug.names.length; i < len; i++) {
	    if (debug.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Coerce `val`.
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	// persist

	try {
	  if (window.localStorage) debug.enable(localStorage.debug);
	} catch(e){}

	},{}],11:[function(_dereq_,module,exports){

	module.exports =  _dereq_('./lib/');

	},{"./lib/":12}],12:[function(_dereq_,module,exports){

	module.exports = _dereq_('./socket');

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	module.exports.parser = _dereq_('engine.io-parser');

	},{"./socket":13,"engine.io-parser":25}],13:[function(_dereq_,module,exports){
	(function (global){
	/**
	 * Module dependencies.
	 */

	var transports = _dereq_('./transports');
	var Emitter = _dereq_('component-emitter');
	var debug = _dereq_('debug')('engine.io-client:socket');
	var index = _dereq_('indexof');
	var parser = _dereq_('engine.io-parser');
	var parseuri = _dereq_('parseuri');
	var parsejson = _dereq_('parsejson');
	var parseqs = _dereq_('parseqs');

	/**
	 * Module exports.
	 */

	module.exports = Socket;

	/**
	 * Noop function.
	 *
	 * @api private
	 */

	function noop(){}

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket(uri, opts){
	  if (!(this instanceof Socket)) return new Socket(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' == typeof uri) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri(uri);
	    opts.host = uri.host;
	    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  }

	  this.secure = null != opts.secure ? opts.secure :
	    (global.location && 'https:' == location.protocol);

	  if (opts.host) {
	    var pieces = opts.host.split(':');
	    opts.hostname = pieces.shift();
	    if (pieces.length) {
	      opts.port = pieces.pop();
	    } else if (!opts.port) {
	      // if no port is specified manually, use the protocol default
	      opts.port = this.secure ? '443' : '80';
	    }
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (global.location ? location.hostname : 'localhost');
	  this.port = opts.port || (global.location && location.port ?
	       location.port :
	       (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.callbackBuffer = [];
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized || null;

	  this.open();
	}

	Socket.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket.protocol = parser.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket.Socket = Socket;
	Socket.Transport = _dereq_('./transport');
	Socket.transports = _dereq_('./transports');
	Socket.parser = _dereq_('engine.io-parser');

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket.prototype.createTransport = function (name) {
	  debug('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;

	  // transport name
	  query.transport = name;

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports[name]({
	    agent: this.agent,
	    hostname: this.hostname,
	    port: this.port,
	    secure: this.secure,
	    path: this.path,
	    query: query,
	    forceJSONP: this.forceJSONP,
	    jsonp: this.jsonp,
	    forceBase64: this.forceBase64,
	    enablesXDR: this.enablesXDR,
	    timestampRequests: this.timestampRequests,
	    timestampParam: this.timestampParam,
	    policyPort: this.policyPort,
	    socket: this,
	    pfx: this.pfx,
	    key: this.key,
	    passphrase: this.passphrase,
	    cert: this.cert,
	    ca: this.ca,
	    ciphers: this.ciphers,
	    rejectUnauthorized: this.rejectUnauthorized
	  });

	  return transport;
	};

	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
	    transport = 'websocket';
	  } else if (0 == this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function() {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  var transport;
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket.prototype.setTransport = function(transport){
	  debug('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport
	  .on('drain', function(){
	    self.onDrain();
	  })
	  .on('packet', function(packet){
	    self.onPacket(packet);
	  })
	  .on('error', function(e){
	    self.onError(e);
	  })
	  .on('close', function(){
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket.prototype.probe = function (name) {
	  debug('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 })
	    , failed = false
	    , self = this;

	  Socket.priorWebsocketSuccess = false;

	  function onTransportOpen(){
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' == msg.type && 'probe' == msg.data) {
	        debug('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' == transport.name;

	        debug('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' == self.readyState) return;
	          debug('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport() {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  //Handle any error that happens while probing
	  function onerror(err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose(){
	    onerror("transport closed");
	  }

	  //When the socket is closed while we're probing
	  function onclose(){
	    onerror("socket closed");
	  }

	  //When the socket is upgraded while we're probing
	  function onupgrade(to){
	    if (transport && to.name != transport.name) {
	      debug('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  //Remove all listeners on the transport and on self
	  function cleanup(){
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();

	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket.prototype.onOpen = function () {
	  debug('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' == this.readyState && this.upgrade && this.transport.pause) {
	    debug('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(parsejson(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.emit('error', err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if  ('closed' == this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' == self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api public
	*/

	Socket.prototype.ping = function () {
	  this.sendPacket('ping');
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket.prototype.onDrain = function() {
	  for (var i = 0; i < this.prevBufferLen; i++) {
	    if (this.callbackBuffer[i]) {
	      this.callbackBuffer[i]();
	    }
	  }

	  this.writeBuffer.splice(0, this.prevBufferLen);
	  this.callbackBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (this.writeBuffer.length == 0) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' != this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket.prototype.write =
	Socket.prototype.send = function (msg, fn) {
	  this.sendPacket('message', msg, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, fn) {
	  if ('closing' == this.readyState || 'closed' == this.readyState) {
	    return;
	  }

	  var packet = { type: type, data: data };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  this.callbackBuffer.push(fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    function close() {
	      self.onClose('forced close');
	      debug('socket closing - telling transport to close');
	      self.transport.close();
	    }

	    function cleanupAndClose() {
	      self.removeListener('upgrade', cleanupAndClose);
	      self.removeListener('upgradeError', cleanupAndClose);
	      close();
	    }

	    function waitForUpgrade() {
	      // wait for upgrade to finish since we can't send packets while pausing a transport
	      self.once('upgrade', cleanupAndClose);
	      self.once('upgradeError', cleanupAndClose);
	    }

	    if (this.writeBuffer.length) {
	      this.once('drain', function() {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
	    debug('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // clean buffers in next tick, so developers can still
	    // grab the buffers on `close` event
	    setTimeout(function() {
	      self.writeBuffer = [];
	      self.callbackBuffer = [];
	      self.prevBufferLen = 0;
	    }, 0);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i<j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./transport":14,"./transports":15,"component-emitter":9,"debug":22,"engine.io-parser":25,"indexof":40,"parsejson":32,"parseqs":33,"parseuri":34}],14:[function(_dereq_,module,exports){
	/**
	 * Module dependencies.
	 */

	var parser = _dereq_('engine.io-parser');
	var Emitter = _dereq_('component-emitter');

	/**
	 * Module exports.
	 */

	module.exports = Transport;

	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */

	function Transport (opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Transport.prototype);

	/**
	 * A counter used to prevent collisions in the timestamps used
	 * for cache busting.
	 */

	Transport.timestamps = 0;

	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */

	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};

	/**
	 * Opens the transport.
	 *
	 * @api public
	 */

	Transport.prototype.open = function () {
	  if ('closed' == this.readyState || '' == this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }

	  return this;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.doClose();
	    this.onClose();
	  }

	  return this;
	};

	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	Transport.prototype.send = function(packets){
	  if ('open' == this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};

	/**
	 * Called upon open
	 *
	 * @api private
	 */

	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};

	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function(data){
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};

	/**
	 * Called with a decoded packet.
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};

	},{"component-emitter":9,"engine.io-parser":25}],15:[function(_dereq_,module,exports){
	(function (global){
	/**
	 * Module dependencies
	 */

	var XMLHttpRequest = _dereq_('xmlhttprequest');
	var XHR = _dereq_('./polling-xhr');
	var JSONP = _dereq_('./polling-jsonp');
	var websocket = _dereq_('./websocket');

	/**
	 * Export transports.
	 */

	exports.polling = polling;
	exports.websocket = websocket;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling(opts){
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname != location.hostname || port != opts.port;
	    xs = opts.secure != isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./polling-jsonp":16,"./polling-xhr":17,"./websocket":19,"xmlhttprequest":20}],16:[function(_dereq_,module,exports){
	(function (global){

	/**
	 * Module requirements.
	 */

	var Polling = _dereq_('./polling');
	var inherit = _dereq_('component-inherit');

	/**
	 * Module exports.
	 */

	module.exports = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Callbacks count.
	 */

	var index = 0;

	/**
	 * Noop.
	 */

	function empty () { }

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling (opts) {
	  Polling.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    if (!global.___eio) global.___eio = [];
	    callbacks = global.___eio;
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (global.document && global.addEventListener) {
	    global.addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(JSONPPolling, Polling);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  Polling.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function(e){
	    self.onError('jsonp poll error',e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  insertAt.parentNode.insertBefore(script, insertAt);
	  this.script = script;

	  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);
	  
	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete () {
	    initIframe();
	    fn();
	  }

	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch(e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function(){
	      if (self.iframe.readyState == 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./polling":18,"component-inherit":21}],17:[function(_dereq_,module,exports){
	(function (global){
	/**
	 * Module requirements.
	 */

	var XMLHttpRequest = _dereq_('xmlhttprequest');
	var Polling = _dereq_('./polling');
	var Emitter = _dereq_('component-emitter');
	var inherit = _dereq_('component-inherit');
	var debug = _dereq_('debug')('engine.io-client:polling-xhr');

	/**
	 * Module exports.
	 */

	module.exports = XHR;
	module.exports.Request = Request;

	/**
	 * Empty function
	 */

	function empty(){}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR(opts){
	  Polling.call(this, opts);

	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = opts.hostname != global.location.hostname ||
	      port != opts.port;
	    this.xs = opts.secure != isSSL;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(XHR, Polling);

	/**
	 * XHR supports binary
	 */

	XHR.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR.prototype.request = function(opts){
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR.prototype.doWrite = function(data, fn){
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function(err){
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR.prototype.doPoll = function(){
	  debug('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function(data){
	    self.onData(data);
	  });
	  req.on('error', function(err){
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request(opts){
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined != opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function(){
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new XMLHttpRequest(opts);
	  var self = this;

	  try {
	    debug('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    if (this.supportsBinary) {
	      // This has to be done after open because Firefox is stupid
	      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
	      xhr.responseType = 'arraybuffer';
	    }

	    if ('POST' == this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function(){
	        self.onLoad();
	      };
	      xhr.onerror = function(){
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function(){
	        if (4 != xhr.readyState) return;
	        if (200 == xhr.status || 1223 == xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function(){
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }

	    debug('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function() {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (global.document) {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function(){
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function(data){
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function(err){
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function(fromError){
	  if ('undefined' == typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch(e) {}
	  }

	  if (global.document) {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function(){
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response;
	    } else {
	      if (!this.supportsBinary) {
	        data = this.xhr.responseText;
	      } else {
	        data = 'ok';
	      }
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function(){
	  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function(){
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	if (global.document) {
	  Request.requestsCount = 0;
	  Request.requests = {};
	  if (global.attachEvent) {
	    global.attachEvent('onunload', unloadHandler);
	  } else if (global.addEventListener) {
	    global.addEventListener('beforeunload', unloadHandler, false);
	  }
	}

	function unloadHandler() {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./polling":18,"component-emitter":9,"component-inherit":21,"debug":22,"xmlhttprequest":20}],18:[function(_dereq_,module,exports){
	/**
	 * Module dependencies.
	 */

	var Transport = _dereq_('../transport');
	var parseqs = _dereq_('parseqs');
	var parser = _dereq_('engine.io-parser');
	var inherit = _dereq_('component-inherit');
	var debug = _dereq_('debug')('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	module.exports = Polling;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = (function() {
	  var XMLHttpRequest = _dereq_('xmlhttprequest');
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(Polling, Transport);

	/**
	 * Transport name.
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling.prototype.doOpen = function(){
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling.prototype.pause = function(onPause){
	  var pending = 0;
	  var self = this;

	  this.readyState = 'pausing';

	  function pause(){
	    debug('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function(){
	        debug('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function(){
	        debug('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling.prototype.poll = function(){
	  debug('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling.prototype.onData = function(data){
	  var self = this;
	  debug('polling got data %s', data);
	  var callback = function(packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' == self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' == packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' != this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' == this.readyState) {
	      this.poll();
	    } else {
	      debug('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function(){
	  var self = this;

	  function close(){
	    debug('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' == this.readyState) {
	    debug('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;
	  var callbackfn = function() {
	    self.writable = true;
	    self.emit('drain');
	  };

	  var self = this;
	  parser.encodePayload(packets, this.supportsBinary, function(data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = +new Date + '-' + Transport.timestamps++;
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // avoid port if default for schema
	  if (this.port && (('https' == schema && this.port != 443) ||
	     ('http' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  return schema + '://' + this.hostname + port + this.path + query;
	};

	},{"../transport":14,"component-inherit":21,"debug":22,"engine.io-parser":25,"parseqs":33,"xmlhttprequest":20}],19:[function(_dereq_,module,exports){
	/**
	 * Module dependencies.
	 */

	var Transport = _dereq_('../transport');
	var parser = _dereq_('engine.io-parser');
	var parseqs = _dereq_('parseqs');
	var inherit = _dereq_('component-inherit');
	var debug = _dereq_('debug')('engine.io-client:websocket');

	/**
	 * `ws` exposes a WebSocket-compatible interface in
	 * Node, or the `WebSocket` or `MozWebSocket` globals
	 * in the browser.
	 */

	var WebSocket = _dereq_('ws');

	/**
	 * Module exports.
	 */

	module.exports = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(WS, Transport);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function(){
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var self = this;
	  var uri = this.uri();
	  var protocols = void(0);
	  var opts = { agent: this.agent };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  this.ws = new WebSocket(uri, protocols, opts);

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  this.ws.binaryType = 'arraybuffer';
	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function(){
	  var self = this;

	  this.ws.onopen = function(){
	    self.onOpen();
	  };
	  this.ws.onclose = function(){
	    self.onClose();
	  };
	  this.ws.onmessage = function(ev){
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function(e){
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Override `onData` to use a timer on iOS.
	 * See: https://gist.github.com/mloughran/2052006
	 *
	 * @api private
	 */

	if ('undefined' != typeof navigator
	  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
	  WS.prototype.onData = function(data){
	    var self = this;
	    setTimeout(function(){
	      Transport.prototype.onData.call(self, data);
	    }, 0);
	  };
	}

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;
	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  for (var i = 0, l = packets.length; i < l; i++) {
	    parser.encodePacket(packets[i], this.supportsBinary, function(data) {
	      //Sometimes the websocket has already been closed but the browser didn't
	      //have a chance of informing us about it yet, in that case send will
	      //throw an error
	      try {
	        self.ws.send(data);
	      } catch (e){
	        debug('websocket closed before onclose event');
	      }
	    });
	  }

	  function ondrain() {
	    self.writable = true;
	    self.emit('drain');
	  }
	  // fake drain
	  // defer to next tick to allow Socket to clear writeBuffer
	  setTimeout(ondrain, 0);
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function(){
	  Transport.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function(){
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && (('wss' == schema && this.port != 443)
	    || ('ws' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = +new Date;
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  return schema + '://' + this.hostname + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function(){
	  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
	};

	},{"../transport":14,"component-inherit":21,"debug":22,"engine.io-parser":25,"parseqs":33,"ws":35}],20:[function(_dereq_,module,exports){
	// browser shim for xmlhttprequest module
	var hasCORS = _dereq_('has-cors');

	module.exports = function(opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }

	  if (!xdomain) {
	    try {
	      return new ActiveXObject('Microsoft.XMLHTTP');
	    } catch(e) { }
	  }
	}

	},{"has-cors":38}],21:[function(_dereq_,module,exports){

	module.exports = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};
	},{}],22:[function(_dereq_,module,exports){

	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = _dereq_('./debug');
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // This hackery is required for IE8,
	  // where the `console.log` function doesn't have 'apply'
	  return 'object' == typeof console
	    && 'function' == typeof console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      localStorage.removeItem('debug');
	    } else {
	      localStorage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = localStorage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	},{"./debug":23}],23:[function(_dereq_,module,exports){

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = _dereq_('ms');

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	},{"ms":24}],24:[function(_dereq_,module,exports){
	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 's':
	      return n * s;
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	},{}],25:[function(_dereq_,module,exports){
	(function (global){
	/**
	 * Module dependencies.
	 */

	var keys = _dereq_('./keys');
	var hasBinary = _dereq_('has-binary');
	var sliceBuffer = _dereq_('arraybuffer.slice');
	var base64encoder = _dereq_('base64-arraybuffer');
	var after = _dereq_('after');
	var utf8 = _dereq_('utf8');

	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */

	var isAndroid = navigator.userAgent.match(/Android/i);

	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;

	/**
	 * Current protocol version.
	 */

	exports.protocol = 3;

	/**
	 * Packet types.
	 */

	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};

	var packetslist = keys(packets);

	/**
	 * Premade error packet.
	 */

	var err = { type: 'error', data: 'parser error' };

	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */

	var Blob = _dereq_('blob');

	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */

	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if ('function' == typeof supportsBinary) {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }

	  if ('function' == typeof utf8encode) {
	    callback = utf8encode;
	    utf8encode = null;
	  }

	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;

	  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (Blob && data instanceof global.Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }

	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }

	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];

	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
	  }

	  return callback('' + encoded);

	};

	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}

	/**
	 * Encode packet helpers for binary types
	 */

	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);

	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }

	  return callback(resultBuffer.buffer);
	}

	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var fr = new FileReader();
	  fr.onload = function() {
	    packet.data = fr.result;
	    exports.encodePacket(packet, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}

	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }

	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);

	  return callback(blob);
	}

	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */

	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (Blob && packet.data instanceof Blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }

	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += global.btoa(b64data);
	  return callback(message);
	};

	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */

	exports.decodePacket = function (data, binaryType, utf8decode) {
	  // String data
	  if (typeof data == 'string' || data === undefined) {
	    if (data.charAt(0) == 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }

	    if (utf8decode) {
	      try {
	        data = utf8.decode(data);
	      } catch (e) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);

	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }

	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }

	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};

	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */

	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!global.ArrayBuffer) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }

	  var data = base64encoder.decode(msg.substr(1));

	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }

	  return { type: type, data: data };
	};

	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */

	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary == 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }

	  var isBinary = hasBinary(packets);

	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }

	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }

	  if (!packets.length) {
	    return callback('0:');
	  }

	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};

	/**
	 * Async array map using after
	 */

	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);

	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };

	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}

	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */

	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data != 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }

	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var packet;
	  if (data == '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	  var length = ''
	    , n, msg;

	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);

	    if (':' != chr) {
	      length += chr;
	    } else {
	      if ('' == length || (length != (n = Number(length)))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      msg = data.substr(i + 1, n);

	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, true);

	        if (err.type == packet.type && err.data == packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }

	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }

	      // advance cursor
	      i += n;
	      length = '';
	    }
	  }

	  if (length != '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	};

	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */

	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }

	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);

	    var resultArray = new Uint8Array(totalLength);

	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }

	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }

	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;

	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });

	    return callback(resultArray.buffer);
	  });
	};

	/**
	 * Encode as Blob
	 */

	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }

	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;

	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;

	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(new Blob(results));
	  });
	};

	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */

	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var bufferTail = data;
	  var buffers = [];

	  var numberTooLong = false;
	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';

	    for (var i = 1; ; i++) {
	      if (tailArray[i] == 255) break;

	      if (msgLength.length > 310) {
	        numberTooLong = true;
	        break;
	      }

	      msgLength += tailArray[i];
	    }

	    if(numberTooLong) return callback(err, 0, 1);

	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);

	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }

	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }

	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./keys":26,"after":27,"arraybuffer.slice":28,"base64-arraybuffer":29,"blob":30,"has-binary":36,"utf8":31}],26:[function(_dereq_,module,exports){

	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	module.exports = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};

	},{}],27:[function(_dereq_,module,exports){
	module.exports = after

	function after(count, callback, err_cb) {
	    var bail = false
	    err_cb = err_cb || noop
	    proxy.count = count

	    return (count === 0) ? callback() : proxy

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true
	            callback(err)
	            // future error callbacks will go to error handler
	            callback = err_cb
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result)
	        }
	    }
	}

	function noop() {}

	},{}],28:[function(_dereq_,module,exports){
	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	module.exports = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};

	},{}],29:[function(_dereq_,module,exports){
	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(chars){
	  "use strict";

	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";

	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }

	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }

	    return base64;
	  };

	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;

	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }

	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);

	    for (i = 0; i < len; i+=4) {
	      encoded1 = chars.indexOf(base64[i]);
	      encoded2 = chars.indexOf(base64[i+1]);
	      encoded3 = chars.indexOf(base64[i+2]);
	      encoded4 = chars.indexOf(base64[i+3]);

	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }

	    return arraybuffer;
	  };
	})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

	},{}],30:[function(_dereq_,module,exports){
	(function (global){
	/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = global.BlobBuilder
	  || global.WebKitBlobBuilder
	  || global.MSBlobBuilder
	  || global.MozBlobBuilder;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      ary[i] = buf;
	    }
	  }
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);

	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }

	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	};

	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	};

	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],31:[function(_dereq_,module,exports){
	(function (global){
	/*! https://mths.be/utf8js v2.0.0 by @mathias */
	;(function(root) {

		// Detect free variables `exports`
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var stringFromCharCode = String.fromCharCode;

		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}

		function checkScalarValue(codePoint) {
			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
		}
		/*--------------------------------------------------------------------------*/

		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}

		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				checkScalarValue(codePoint);
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}

		function utf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}

		/*--------------------------------------------------------------------------*/

		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}

			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}

			// If we end up here, it’s not a continuation byte
			throw Error('Invalid continuation byte');
		}

		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;

			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}

			if (byteIndex == byteCount) {
				return false;
			}

			// Read first byte
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}

			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				var byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					checkScalarValue(codePoint);
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}

			throw Error('Invalid UTF-8 detected');
		}

		var byteArray;
		var byteCount;
		var byteIndex;
		function utf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}

		/*--------------------------------------------------------------------------*/

		var utf8 = {
			'version': '2.0.0',
			'encode': utf8encode,
			'decode': utf8decode
		};

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			typeof define == 'function' &&
			typeof define.amd == 'object' &&
			define.amd
		) {
			define(function() {
				return utf8;
			});
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = utf8;
			} else { // in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in utf8) {
					hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.utf8 = utf8;
		}

	}(this));

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],32:[function(_dereq_,module,exports){
	(function (global){
	/**
	 * JSON parse.
	 *
	 * @see Based on jQuery#parseJSON (MIT) and JSON2
	 * @api private
	 */

	var rvalidchars = /^[\],:{}\s]*$/;
	var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
	var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
	var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
	var rtrimLeft = /^\s+/;
	var rtrimRight = /\s+$/;

	module.exports = function parsejson(data) {
	  if ('string' != typeof data || !data) {
	    return null;
	  }

	  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

	  // Attempt to parse using the native JSON parser first
	  if (global.JSON && JSON.parse) {
	    return JSON.parse(data);
	  }

	  if (rvalidchars.test(data.replace(rvalidescape, '@')
	      .replace(rvalidtokens, ']')
	      .replace(rvalidbraces, ''))) {
	    return (new Function('return ' + data))();
	  }
	};
	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],33:[function(_dereq_,module,exports){
	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	exports.encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	exports.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};

	},{}],34:[function(_dereq_,module,exports){
	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	module.exports = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};

	},{}],35:[function(_dereq_,module,exports){

	/**
	 * Module dependencies.
	 */

	var global = (function() { return this; })();

	/**
	 * WebSocket constructor.
	 */

	var WebSocket = global.WebSocket || global.MozWebSocket;

	/**
	 * Module exports.
	 */

	module.exports = WebSocket ? ws : null;

	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */

	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}

	if (WebSocket) ws.prototype = WebSocket.prototype;

	},{}],36:[function(_dereq_,module,exports){
	(function (global){

	/*
	 * Module requirements.
	 */

	var isArray = _dereq_('isarray');

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(data) {

	  function _hasBinary(obj) {
	    if (!obj) return false;

	    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }

	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      if (obj.toJSON) {
	        obj = obj.toJSON();
	      }

	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  return _hasBinary(data);
	}

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"isarray":37}],37:[function(_dereq_,module,exports){
	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	},{}],38:[function(_dereq_,module,exports){

	/**
	 * Module dependencies.
	 */

	var global = _dereq_('global');

	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  module.exports = 'XMLHttpRequest' in global &&
	    'withCredentials' in new global.XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}

	},{"global":39}],39:[function(_dereq_,module,exports){

	/**
	 * Returns `this`. Execute this without a "context" (i.e. without it being
	 * attached to an object of the left-hand side), and `this` points to the
	 * "global" scope of the current JS execution.
	 */

	module.exports = (function () { return this; })();

	},{}],40:[function(_dereq_,module,exports){

	var indexOf = [].indexOf;

	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};
	},{}],41:[function(_dereq_,module,exports){

	/**
	 * HOP ref.
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Return own keys in `obj`.
	 *
	 * @param {Object} obj
	 * @return {Array}
	 * @api public
	 */

	exports.keys = Object.keys || function(obj){
	  var keys = [];
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      keys.push(key);
	    }
	  }
	  return keys;
	};

	/**
	 * Return own values in `obj`.
	 *
	 * @param {Object} obj
	 * @return {Array}
	 * @api public
	 */

	exports.values = function(obj){
	  var vals = [];
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      vals.push(obj[key]);
	    }
	  }
	  return vals;
	};

	/**
	 * Merge `b` into `a`.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api public
	 */

	exports.merge = function(a, b){
	  for (var key in b) {
	    if (has.call(b, key)) {
	      a[key] = b[key];
	    }
	  }
	  return a;
	};

	/**
	 * Return length of `obj`.
	 *
	 * @param {Object} obj
	 * @return {Number}
	 * @api public
	 */

	exports.length = function(obj){
	  return exports.keys(obj).length;
	};

	/**
	 * Check if `obj` is empty.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api public
	 */

	exports.isEmpty = function(obj){
	  return 0 == exports.length(obj);
	};
	},{}],42:[function(_dereq_,module,exports){
	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host'
	  , 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	module.exports = function parseuri(str) {
	  var m = re.exec(str || '')
	    , uri = {}
	    , i = 14;

	  while (i--) {
	    uri[parts[i]] = m[i] || '';
	  }

	  return uri;
	};

	},{}],43:[function(_dereq_,module,exports){
	(function (global){
	/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = _dereq_('isarray');
	var isBuf = _dereq_('./is-buffer');

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	exports.deconstructPacket = function(packet){
	  var buffers = [];
	  var packetData = packet.data;

	  function _deconstructPacket(data) {
	    if (!data) return data;

	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == typeof data && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }

	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	exports.reconstructPacket = function(packet, buffers) {
	  var curPlaceHolder = 0;

	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == typeof data) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }

	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((global.Blob && obj instanceof Blob) ||
	        (global.File && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./is-buffer":45,"isarray":46}],44:[function(_dereq_,module,exports){

	/**
	 * Module dependencies.
	 */

	var debug = _dereq_('debug')('socket.io-parser');
	var json = _dereq_('json3');
	var isArray = _dereq_('isarray');
	var Emitter = _dereq_('component-emitter');
	var binary = _dereq_('./binary');
	var isBuf = _dereq_('./is-buffer');

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'BINARY_EVENT',
	  'ACK',
	  'BINARY_ACK',
	  'ERROR'
	];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  }
	  else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;

	  // first is type
	  str += obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	Emitter(Decoder.prototype);

	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function(obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  }
	  else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  }
	  else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var p = {};
	  var i = 0;

	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    var buf = '';
	    while (str.charAt(++i) != '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) != '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }

	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i == str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    try {
	      p.data = json.parse(str.substr(i));
	    } catch(e){
	      return error();
	    }
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(data){
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}

	},{"./binary":43,"./is-buffer":45,"component-emitter":9,"debug":10,"isarray":46,"json3":47}],45:[function(_dereq_,module,exports){
	(function (global){

	module.exports = isBuf;

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer);
	}

	}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],46:[function(_dereq_,module,exports){
	module.exports=_dereq_(37)
	},{}],47:[function(_dereq_,module,exports){
	/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */
	;(function (window) {
	  // Convenience aliases.
	  var getClass = {}.toString, isProperty, forEach, undef;

	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = typeof define === "function" && define.amd;

	  // Detect native implementations.
	  var nativeJSON = typeof JSON == "object" && JSON;

	  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if
	  // available.
	  var JSON3 = typeof exports == "object" && exports && !exports.nodeType && exports;

	  if (JSON3 && nativeJSON) {
	    // Explicitly delegate to the native `stringify` and `parse`
	    // implementations in CommonJS environments.
	    JSON3.stringify = nativeJSON.stringify;
	    JSON3.parse = nativeJSON.parse;
	  } else {
	    // Export for web browsers, JavaScript engines, and asynchronous module
	    // loaders, using the global `JSON` object if available.
	    JSON3 = window.JSON = nativeJSON || {};
	  }

	  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	  var isExtended = new Date(-3509827334573292);
	  try {
	    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	    // results for certain dates in Opera >= 10.53.
	    isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	      // Safari < 2.0.2 stores the internal millisecond time value correctly,
	      // but clips the values returned by the date methods to the range of
	      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	  } catch (exception) {}

	  // Internal: Determines whether the native `JSON.stringify` and `parse`
	  // implementations are spec-compliant. Based on work by Ken Snyder.
	  function has(name) {
	    if (has[name] !== undef) {
	      // Return cached feature test result.
	      return has[name];
	    }

	    var isSupported;
	    if (name == "bug-string-char-index") {
	      // IE <= 7 doesn't support accessing string characters using square
	      // bracket notation. IE 8 only supports this for primitives.
	      isSupported = "a"[0] != "a";
	    } else if (name == "json") {
	      // Indicates whether both `JSON.stringify` and `JSON.parse` are
	      // supported.
	      isSupported = has("json-stringify") && has("json-parse");
	    } else {
	      var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	      // Test `JSON.stringify`.
	      if (name == "json-stringify") {
	        var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	        if (stringifySupported) {
	          // A test function object with a custom `toJSON` method.
	          (value = function () {
	            return 1;
	          }).toJSON = value;
	          try {
	            stringifySupported =
	              // Firefox 3.1b1 and b2 serialize string, number, and boolean
	              // primitives as object literals.
	              stringify(0) === "0" &&
	              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	              // literals.
	              stringify(new Number()) === "0" &&
	              stringify(new String()) == '""' &&
	              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	              // does not define a canonical JSON representation (this applies to
	              // objects with `toJSON` properties as well, *unless* they are nested
	              // within an object or array).
	              stringify(getClass) === undef &&
	              // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	              // FF 3.1b3 pass this test.
	              stringify(undef) === undef &&
	              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	              // respectively, if the value is omitted entirely.
	              stringify() === undef &&
	              // FF 3.1b1, 2 throw an error if the given value is not a number,
	              // string, array, object, Boolean, or `null` literal. This applies to
	              // objects with custom `toJSON` methods as well, unless they are nested
	              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	              // methods entirely.
	              stringify(value) === "1" &&
	              stringify([value]) == "[1]" &&
	              // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	              // `"[null]"`.
	              stringify([undef]) == "[null]" &&
	              // YUI 3.0.0b1 fails to serialize `null` literals.
	              stringify(null) == "null" &&
	              // FF 3.1b1, 2 halts serialization if an array contains a function:
	              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	              // elides non-JSON values from objects and arrays, unless they
	              // define custom `toJSON` methods.
	              stringify([undef, getClass, null]) == "[null,null,null]" &&
	              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	              // where character escape codes are expected (e.g., `\b` => `\u0008`).
	              stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	              stringify(null, value) === "1" &&
	              stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	              // serialize extended years.
	              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	              // The milliseconds are optional in ES 5, but required in 5.1.
	              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	              // four-digit years instead of six-digit years. Credits: @Yaffle.
	              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	              // values less than 1000. Credits: @Yaffle.
	              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	          } catch (exception) {
	            stringifySupported = false;
	          }
	        }
	        isSupported = stringifySupported;
	      }
	      // Test `JSON.parse`.
	      if (name == "json-parse") {
	        var parse = JSON3.parse;
	        if (typeof parse == "function") {
	          try {
	            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	            // Conforming implementations should also coerce the initial argument to
	            // a string prior to parsing.
	            if (parse("0") === 0 && !parse(false)) {
	              // Simple parsing test.
	              value = parse(serialized);
	              var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	              if (parseSupported) {
	                try {
	                  // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                  parseSupported = !parse('"\t"');
	                } catch (exception) {}
	                if (parseSupported) {
	                  try {
	                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                    // certain octal literals.
	                    parseSupported = parse("01") !== 1;
	                  } catch (exception) {}
	                }
	                if (parseSupported) {
	                  try {
	                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                    // points. These environments, along with FF 3.1b1 and 2,
	                    // also allow trailing commas in JSON objects and arrays.
	                    parseSupported = parse("1.") !== 1;
	                  } catch (exception) {}
	                }
	              }
	            }
	          } catch (exception) {
	            parseSupported = false;
	          }
	        }
	        isSupported = parseSupported;
	      }
	    }
	    return has[name] = !!isSupported;
	  }

	  if (!has("json")) {
	    // Common `[[Class]]` name aliases.
	    var functionClass = "[object Function]";
	    var dateClass = "[object Date]";
	    var numberClass = "[object Number]";
	    var stringClass = "[object String]";
	    var arrayClass = "[object Array]";
	    var booleanClass = "[object Boolean]";

	    // Detect incomplete support for accessing string characters by index.
	    var charIndexBuggy = has("bug-string-char-index");

	    // Define additional utility methods if the `Date` methods are buggy.
	    if (!isExtended) {
	      var floor = Math.floor;
	      // A mapping between the months of the year and the number of days between
	      // January 1st and the first of the respective month.
	      var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	      // Internal: Calculates the number of days between the Unix epoch and the
	      // first day of the given month.
	      var getDay = function (year, month) {
	        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	      };
	    }

	    // Internal: Determines if a property is a direct property of the given
	    // object. Delegates to the native `Object#hasOwnProperty` method.
	    if (!(isProperty = {}.hasOwnProperty)) {
	      isProperty = function (property) {
	        var members = {}, constructor;
	        if ((members.__proto__ = null, members.__proto__ = {
	          // The *proto* property cannot be set multiple times in recent
	          // versions of Firefox and SeaMonkey.
	          "toString": 1
	        }, members).toString != getClass) {
	          // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	          // supports the mutable *proto* property.
	          isProperty = function (property) {
	            // Capture and break the object's prototype chain (see section 8.6.2
	            // of the ES 5.1 spec). The parenthesized expression prevents an
	            // unsafe transformation by the Closure Compiler.
	            var original = this.__proto__, result = property in (this.__proto__ = null, this);
	            // Restore the original prototype chain.
	            this.__proto__ = original;
	            return result;
	          };
	        } else {
	          // Capture a reference to the top-level `Object` constructor.
	          constructor = members.constructor;
	          // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	          // other environments.
	          isProperty = function (property) {
	            var parent = (this.constructor || constructor).prototype;
	            return property in this && !(property in parent && this[property] === parent[property]);
	          };
	        }
	        members = null;
	        return isProperty.call(this, property);
	      };
	    }

	    // Internal: A set of primitive types used by `isHostType`.
	    var PrimitiveTypes = {
	      'boolean': 1,
	      'number': 1,
	      'string': 1,
	      'undefined': 1
	    };

	    // Internal: Determines if the given object `property` value is a
	    // non-primitive.
	    var isHostType = function (object, property) {
	      var type = typeof object[property];
	      return type == 'object' ? !!object[property] : !PrimitiveTypes[type];
	    };

	    // Internal: Normalizes the `for...in` iteration algorithm across
	    // environments. Each enumerated key is yielded to a `callback` function.
	    forEach = function (object, callback) {
	      var size = 0, Properties, members, property;

	      // Tests for bugs in the current environment's `for...in` algorithm. The
	      // `valueOf` property inherits the non-enumerable flag from
	      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	      (Properties = function () {
	        this.valueOf = 0;
	      }).prototype.valueOf = 0;

	      // Iterate over a new instance of the `Properties` class.
	      members = new Properties();
	      for (property in members) {
	        // Ignore all properties inherited from `Object.prototype`.
	        if (isProperty.call(members, property)) {
	          size++;
	        }
	      }
	      Properties = members = null;

	      // Normalize the iteration algorithm.
	      if (!size) {
	        // A list of non-enumerable properties inherited from `Object.prototype`.
	        members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	        // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	        // properties.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, length;
	          var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;
	          for (property in object) {
	            // Gecko <= 1.0 enumerates the `prototype` property of functions under
	            // certain conditions; IE does not.
	            if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for each non-enumerable property.
	          for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	        };
	      } else if (size == 2) {
	        // Safari <= 2.0.4 enumerates shadowed properties twice.
	        forEach = function (object, callback) {
	          // Create a set of iterated properties.
	          var members = {}, isFunction = getClass.call(object) == functionClass, property;
	          for (property in object) {
	            // Store each property name to prevent double enumeration. The
	            // `prototype` property of functions is not enumerated due to cross-
	            // environment inconsistencies.
	            if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	              callback(property);
	            }
	          }
	        };
	      } else {
	        // No bugs detected; use the standard `for...in` algorithm.
	        forEach = function (object, callback) {
	          var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	          for (property in object) {
	            if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	              callback(property);
	            }
	          }
	          // Manually invoke the callback for the `constructor` property due to
	          // cross-environment inconsistencies.
	          if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	            callback(property);
	          }
	        };
	      }
	      return forEach(object, callback);
	    };

	    // Public: Serializes a JavaScript `value` as a JSON string. The optional
	    // `filter` argument may specify either a function that alters how object and
	    // array members are serialized, or an array of strings and numbers that
	    // indicates which properties should be serialized. The optional `width`
	    // argument may be either a string or number that specifies the indentation
	    // level of the output.
	    if (!has("json-stringify")) {
	      // Internal: A map of control characters and their escaped equivalents.
	      var Escapes = {
	        92: "\\\\",
	        34: '\\"',
	        8: "\\b",
	        12: "\\f",
	        10: "\\n",
	        13: "\\r",
	        9: "\\t"
	      };

	      // Internal: Converts `value` into a zero-padded string such that its
	      // length is at least equal to `width`. The `width` must be <= 6.
	      var leadingZeroes = "000000";
	      var toPaddedString = function (width, value) {
	        // The `|| 0` expression is necessary to work around a bug in
	        // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	        return (leadingZeroes + (value || 0)).slice(-width);
	      };

	      // Internal: Double-quotes a string `value`, replacing all ASCII control
	      // characters (characters with code unit values between 0 and 31) with
	      // their escaped equivalents. This is an implementation of the
	      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	      var unicodePrefix = "\\u00";
	      var quote = function (value) {
	        var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
	        if (isLarge) {
	          symbols = value.split("");
	        }
	        for (; index < length; index++) {
	          var charCode = value.charCodeAt(index);
	          // If the character is a control character, append its Unicode or
	          // shorthand escape sequence; otherwise, append the character as-is.
	          switch (charCode) {
	            case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	              result += Escapes[charCode];
	              break;
	            default:
	              if (charCode < 32) {
	                result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                break;
	              }
	              result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
	          }
	        }
	        return result + '"';
	      };

	      // Internal: Recursively serializes an object. Implements the
	      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	      var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	        try {
	          // Necessary for host object support.
	          value = object[property];
	        } catch (exception) {}
	        if (typeof value == "object" && value) {
	          className = getClass.call(value);
	          if (className == dateClass && !isProperty.call(value, "toJSON")) {
	            if (value > -1 / 0 && value < 1 / 0) {
	              // Dates are serialized according to the `Date#toJSON` method
	              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	              // for the ISO 8601 date time string format.
	              if (getDay) {
	                // Manually compute the year, month, date, hours, minutes,
	                // seconds, and milliseconds if the `getUTC*` methods are
	                // buggy. Adapted from @Yaffle's `date-shim` project.
	                date = floor(value / 864e5);
	                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                date = 1 + date - getDay(year, month);
	                // The `time` value specifies the time within the day (see ES
	                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                // to compute `A modulo B`, as the `%` operator does not
	                // correspond to the `modulo` operation for negative numbers.
	                time = (value % 864e5 + 864e5) % 864e5;
	                // The hours, minutes, seconds, and milliseconds are obtained by
	                // decomposing the time within the day. See section 15.9.1.10.
	                hours = floor(time / 36e5) % 24;
	                minutes = floor(time / 6e4) % 60;
	                seconds = floor(time / 1e3) % 60;
	                milliseconds = time % 1e3;
	              } else {
	                year = value.getUTCFullYear();
	                month = value.getUTCMonth();
	                date = value.getUTCDate();
	                hours = value.getUTCHours();
	                minutes = value.getUTCMinutes();
	                seconds = value.getUTCSeconds();
	                milliseconds = value.getUTCMilliseconds();
	              }
	              // Serialize extended years correctly.
	              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                // Months, dates, hours, minutes, and seconds should have two
	                // digits; milliseconds should have three.
	                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                // Milliseconds are optional in ES 5.0, but required in 5.1.
	                "." + toPaddedString(3, milliseconds) + "Z";
	            } else {
	              value = null;
	            }
	          } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	            // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	            // ignores all `toJSON` methods on these objects unless they are
	            // defined directly on an instance.
	            value = value.toJSON(property);
	          }
	        }
	        if (callback) {
	          // If a replacement function was provided, call it to obtain the value
	          // for serialization.
	          value = callback.call(object, property, value);
	        }
	        if (value === null) {
	          return "null";
	        }
	        className = getClass.call(value);
	        if (className == booleanClass) {
	          // Booleans are represented literally.
	          return "" + value;
	        } else if (className == numberClass) {
	          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	          // `"null"`.
	          return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	        } else if (className == stringClass) {
	          // Strings are double-quoted and escaped.
	          return quote("" + value);
	        }
	        // Recursively serialize objects and arrays.
	        if (typeof value == "object") {
	          // Check for cyclic structures. This is a linear search; performance
	          // is inversely proportional to the number of unique nested objects.
	          for (length = stack.length; length--;) {
	            if (stack[length] === value) {
	              // Cyclic structures cannot be serialized by `JSON.stringify`.
	              throw TypeError();
	            }
	          }
	          // Add the object to the stack of traversed objects.
	          stack.push(value);
	          results = [];
	          // Save the current indentation level and indent one additional level.
	          prefix = indentation;
	          indentation += whitespace;
	          if (className == arrayClass) {
	            // Recursively serialize array elements.
	            for (index = 0, length = value.length; index < length; index++) {
	              element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	              results.push(element === undef ? "null" : element);
	            }
	            result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	          } else {
	            // Recursively serialize object members. Members are selected from
	            // either a user-specified list of property names, or the object
	            // itself.
	            forEach(properties || value, function (property) {
	              var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	              if (element !== undef) {
	                // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                // is not the empty string, let `member` {quote(property) + ":"}
	                // be the concatenation of `member` and the `space` character."
	                // The "`space` character" refers to the literal space
	                // character, not the `space` {width} argument provided to
	                // `JSON.stringify`.
	                results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	              }
	            });
	            result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	          }
	          // Remove the object from the traversed object stack.
	          stack.pop();
	          return result;
	        }
	      };

	      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	      JSON3.stringify = function (source, filter, width) {
	        var whitespace, callback, properties, className;
	        if (typeof filter == "function" || typeof filter == "object" && filter) {
	          if ((className = getClass.call(filter)) == functionClass) {
	            callback = filter;
	          } else if (className == arrayClass) {
	            // Convert the property names array into a makeshift set.
	            properties = {};
	            for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	          }
	        }
	        if (width) {
	          if ((className = getClass.call(width)) == numberClass) {
	            // Convert the `width` to an integer and create a string containing
	            // `width` number of space characters.
	            if ((width -= width % 1) > 0) {
	              for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	            }
	          } else if (className == stringClass) {
	            whitespace = width.length <= 10 ? width : width.slice(0, 10);
	          }
	        }
	        // Opera <= 7.54u2 discards the values associated with empty string keys
	        // (`""`) only if they are used directly within an object member list
	        // (e.g., `!("" in { "": 1})`).
	        return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	      };
	    }

	    // Public: Parses a JSON source string.
	    if (!has("json-parse")) {
	      var fromCharCode = String.fromCharCode;

	      // Internal: A map of escaped control characters and their unescaped
	      // equivalents.
	      var Unescapes = {
	        92: "\\",
	        34: '"',
	        47: "/",
	        98: "\b",
	        116: "\t",
	        110: "\n",
	        102: "\f",
	        114: "\r"
	      };

	      // Internal: Stores the parser state.
	      var Index, Source;

	      // Internal: Resets the parser state and throws a `SyntaxError`.
	      var abort = function() {
	        Index = Source = null;
	        throw SyntaxError();
	      };

	      // Internal: Returns the next token, or `"$"` if the parser has reached
	      // the end of the source string. A token may be a string, number, `null`
	      // literal, or Boolean literal.
	      var lex = function () {
	        var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	        while (Index < length) {
	          charCode = source.charCodeAt(Index);
	          switch (charCode) {
	            case 9: case 10: case 13: case 32:
	              // Skip whitespace tokens, including tabs, carriage returns, line
	              // feeds, and space characters.
	              Index++;
	              break;
	            case 123: case 125: case 91: case 93: case 58: case 44:
	              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	              // the current position.
	              value = charIndexBuggy ? source.charAt(Index) : source[Index];
	              Index++;
	              return value;
	            case 34:
	              // `"` delimits a JSON string; advance to the next character and
	              // begin parsing the string. String tokens are prefixed with the
	              // sentinel `@` character to distinguish them from punctuators and
	              // end-of-string tokens.
	              for (value = "@", Index++; Index < length;) {
	                charCode = source.charCodeAt(Index);
	                if (charCode < 32) {
	                  // Unescaped ASCII control characters (those with a code unit
	                  // less than the space character) are not permitted.
	                  abort();
	                } else if (charCode == 92) {
	                  // A reverse solidus (`\`) marks the beginning of an escaped
	                  // control character (including `"`, `\`, and `/`) or Unicode
	                  // escape sequence.
	                  charCode = source.charCodeAt(++Index);
	                  switch (charCode) {
	                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                      // Revive escaped control characters.
	                      value += Unescapes[charCode];
	                      Index++;
	                      break;
	                    case 117:
	                      // `\u` marks the beginning of a Unicode escape sequence.
	                      // Advance to the first character and validate the
	                      // four-digit code point.
	                      begin = ++Index;
	                      for (position = Index + 4; Index < position; Index++) {
	                        charCode = source.charCodeAt(Index);
	                        // A valid sequence comprises four hexdigits (case-
	                        // insensitive) that form a single hexadecimal value.
	                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                          // Invalid Unicode escape sequence.
	                          abort();
	                        }
	                      }
	                      // Revive the escaped character.
	                      value += fromCharCode("0x" + source.slice(begin, Index));
	                      break;
	                    default:
	                      // Invalid escape sequence.
	                      abort();
	                  }
	                } else {
	                  if (charCode == 34) {
	                    // An unescaped double-quote character marks the end of the
	                    // string.
	                    break;
	                  }
	                  charCode = source.charCodeAt(Index);
	                  begin = Index;
	                  // Optimize for the common case where a string is valid.
	                  while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                    charCode = source.charCodeAt(++Index);
	                  }
	                  // Append the string as-is.
	                  value += source.slice(begin, Index);
	                }
	              }
	              if (source.charCodeAt(Index) == 34) {
	                // Advance to the next character and return the revived string.
	                Index++;
	                return value;
	              }
	              // Unterminated string.
	              abort();
	            default:
	              // Parse numbers and literals.
	              begin = Index;
	              // Advance past the negative sign, if one is specified.
	              if (charCode == 45) {
	                isSigned = true;
	                charCode = source.charCodeAt(++Index);
	              }
	              // Parse an integer or floating-point value.
	              if (charCode >= 48 && charCode <= 57) {
	                // Leading zeroes are interpreted as octal literals.
	                if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                  // Illegal octal literal.
	                  abort();
	                }
	                isSigned = false;
	                // Parse the integer component.
	                for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                // Floats cannot contain a leading decimal point; however, this
	                // case is already accounted for by the parser.
	                if (source.charCodeAt(Index) == 46) {
	                  position = ++Index;
	                  // Parse the decimal component.
	                  for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal trailing decimal.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Parse exponents. The `e` denoting the exponent is
	                // case-insensitive.
	                charCode = source.charCodeAt(Index);
	                if (charCode == 101 || charCode == 69) {
	                  charCode = source.charCodeAt(++Index);
	                  // Skip past the sign following the exponent, if one is
	                  // specified.
	                  if (charCode == 43 || charCode == 45) {
	                    Index++;
	                  }
	                  // Parse the exponential component.
	                  for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                  if (position == Index) {
	                    // Illegal empty exponent.
	                    abort();
	                  }
	                  Index = position;
	                }
	                // Coerce the parsed value to a JavaScript number.
	                return +source.slice(begin, Index);
	              }
	              // A negative sign may only precede numbers.
	              if (isSigned) {
	                abort();
	              }
	              // `true`, `false`, and `null` literals.
	              if (source.slice(Index, Index + 4) == "true") {
	                Index += 4;
	                return true;
	              } else if (source.slice(Index, Index + 5) == "false") {
	                Index += 5;
	                return false;
	              } else if (source.slice(Index, Index + 4) == "null") {
	                Index += 4;
	                return null;
	              }
	              // Unrecognized token.
	              abort();
	          }
	        }
	        // Return the sentinel `$` character if the parser has reached the end
	        // of the source string.
	        return "$";
	      };

	      // Internal: Parses a JSON `value` token.
	      var get = function (value) {
	        var results, hasMembers;
	        if (value == "$") {
	          // Unexpected end of input.
	          abort();
	        }
	        if (typeof value == "string") {
	          if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	            // Remove the sentinel `@` character.
	            return value.slice(1);
	          }
	          // Parse object and array literals.
	          if (value == "[") {
	            // Parses a JSON array, returning a new JavaScript array.
	            results = [];
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing square bracket marks the end of the array literal.
	              if (value == "]") {
	                break;
	              }
	              // If the array literal contains elements, the current token
	              // should be a comma separating the previous element from the
	              // next.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "]") {
	                    // Unexpected trailing `,` in array literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each array element.
	                  abort();
	                }
	              }
	              // Elisions and leading commas are not permitted.
	              if (value == ",") {
	                abort();
	              }
	              results.push(get(value));
	            }
	            return results;
	          } else if (value == "{") {
	            // Parses a JSON object, returning a new JavaScript object.
	            results = {};
	            for (;; hasMembers || (hasMembers = true)) {
	              value = lex();
	              // A closing curly brace marks the end of the object literal.
	              if (value == "}") {
	                break;
	              }
	              // If the object literal contains members, the current token
	              // should be a comma separator.
	              if (hasMembers) {
	                if (value == ",") {
	                  value = lex();
	                  if (value == "}") {
	                    // Unexpected trailing `,` in object literal.
	                    abort();
	                  }
	                } else {
	                  // A `,` must separate each object member.
	                  abort();
	                }
	              }
	              // Leading commas are not permitted, object property names must be
	              // double-quoted strings, and a `:` must separate each property
	              // name and value.
	              if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                abort();
	              }
	              results[value.slice(1)] = get(lex());
	            }
	            return results;
	          }
	          // Unexpected token encountered.
	          abort();
	        }
	        return value;
	      };

	      // Internal: Updates a traversed object member.
	      var update = function(source, property, callback) {
	        var element = walk(source, property, callback);
	        if (element === undef) {
	          delete source[property];
	        } else {
	          source[property] = element;
	        }
	      };

	      // Internal: Recursively traverses a parsed JSON object, invoking the
	      // `callback` function for each value. This is an implementation of the
	      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	      var walk = function (source, property, callback) {
	        var value = source[property], length;
	        if (typeof value == "object" && value) {
	          // `forEach` can't be used to traverse an array in Opera <= 8.54
	          // because its `Object#hasOwnProperty` implementation returns `false`
	          // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	          if (getClass.call(value) == arrayClass) {
	            for (length = value.length; length--;) {
	              update(value, length, callback);
	            }
	          } else {
	            forEach(value, function (property) {
	              update(value, property, callback);
	            });
	          }
	        }
	        return callback.call(source, property, value);
	      };

	      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	      JSON3.parse = function (source, callback) {
	        var result, value;
	        Index = 0;
	        Source = "" + source;
	        result = get(lex());
	        // If a JSON string contains multiple tokens, it is invalid.
	        if (lex() != "$") {
	          abort();
	        }
	        // Reset the parser state.
	        Index = Source = null;
	        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	      };
	    }
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    define(function () {
	      return JSON3;
	    });
	  }
	}(this));

	},{}],48:[function(_dereq_,module,exports){
	module.exports = toArray

	function toArray(list, index) {
	    var array = []

	    index = index || 0

	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i]
	    }

	    return array
	}

	},{}]},{},[1])
	(1)
	});


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var mongo = __webpack_require__(165);
	var backend = __webpack_require__(252);
	//var socketServer = require('../io/io.js');

	var MESSAGE_HANDLERS = {
	    authenticate: 'onAuthenticateMessage',
	    error: 'onErrorMessage',
	    send_message: 'onSendMessage'
	};

	var model = {
	    handlers: {
	        onAuthenticateMessage: function (_, message) {
	            var userId = message.data.userId;
	            return backend
	                .checkUser(userId)
	                .then(function (user) {
	                    return mongo
	                        .checkAndAddUser(user)
	                        .then(function (isNew) {
	                            user.isNew = !!isNew;
	                            return user;
	                        });
	                })
	                .then(function (user) {
	                    return {
	                        user: user,
	                        message: {
	                            type: 'authenticated',
	                            data: {
	                                user: user
	                            }
	                        }
	                    }
	                })
	        },
	        onSendMessage: function (user, message) {
	            return {
	                channel: message.data.channel,
	                message: {
	                    type: 'new_message',
	                    data: {
	                        channel: message.data.channel,
	                        message: message.data.message,
	                        user: user,
	                        datetime: +new Date()
	                    }
	                }
	            }
	        },
	        onErrorMessage: function () {
	            return Promise.reject({
	                type: 'status',
	                data: {
	                    status: 'error',
	                    message: 'unknown command'
	                }
	            });
	        }
	    },
	    /**
	     * Процессим сообщение от пользователя, делаем все необходимые действия
	     * @param {User} user - информация об отправителе
	     * @param {Message} message - сообщение отправителя
	     */
	    processMessage: function (user, message) {
	        var messageHandler = model.handlers[MESSAGE_HANDLERS[message.type]];
	        if (!messageHandler) {
	            return Promise.resolve(model.handlers[MESSAGE_HANDLERS['error']]());
	        }

	        return Promise.resolve(messageHandler(user, message))
	            .catch(function (error) {
	                return Promise.reject({
	                    type: 'status',
	                    data: {
	                        status: 'error',
	                        message: error
	                    }
	                });
	            }); // чтоб всегда гарантировать Promise на выходе
	    },
	    /**
	     * Сообщение, когда пользователь отключился
	     * @param {User} user
	     * @returns {Message}
	     */
	    disconnected: function (user) {
	        return {
	            type: 'user_disconnected',
	            data: {
	                userId: user.id
	            }
	        }
	    },
	    /**
	     * Сообщение, когда пользователь подключился
	     * @param {User} user
	     * @returns {Message}
	     */
	    connected: function (user) {
	        return {
	            type: 'user_connected',
	            data: {
	                userId: user.id
	            }
	        }
	    },
	    /**
	     * Отправляем информацию о каналах
	     * @param channels
	     */
	    channelsList: function (channels) {
	        return {
	            type: 'channels_info',
	            data: {
	                channels: channels
	            }
	        }
	    },
	    /**
	     * Отправляем информацию о пользователях
	     * @param users
	     */
	    usersList: function (users) {
	        return {
	            type: 'users_info',
	            data: {
	                users: users
	            }
	        }
	    },
	    /**
	     * оповещает всех о новом пользователе
	     * @param users
	     */
	    newUser: function (user) {
	        return {
	            type: 'new_user',
	            data: {
	                user: user
	            }
	        }
	    }
	};

	module.exports = model;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var MongoClient = __webpack_require__(166).MongoClient;
	var config = __webpack_require__(3);

	// Connection URL
	var url = config.get('dbConnectionUrl');
	var db = null;
	// Use connect method to connect to the Server
	MongoClient.connect(url, function (err, dbLink) {
	    console.log("Connected correctly to mongo server");

	    db = dbLink;
	    db.collection('messages').remove();
	});

	model = {
	    close: function () {
	        console.log('close connection');
	        db.close();
	    },

	    checkAndAddUser: function (user) {
	        return model.getUser(user)
	            .then(function () {
	                return false;
	            })
	            .catch(function (err) {
	                if (err === 'not found') {
	                    return model.addUser(user);
	                } else {
	                    return Promise.reject(err);
	                }
	            })
	            .then(function () {
	                return true;
	            });
	    },

	    addUser: function (user) {
	        return new Promise(function (resolve, reject) {
	            var collection = db.collection('users');
	            collection.insert(user, function (err) {
	                if (err) {
	                    reject(err);
	                } else {
	                    resolve('added')
	                }
	            });
	        });
	    },

	    getUser: function (user) {
	        return new Promise(function (resolve, reject) {
	            var collection = db.collection('users');
	            collection.findOne({id: user.id}, function (err, doc) {
	                if (err) {
	                    reject(err);
	                }

	                if (doc) {
	                    resolve(doc);
	                } else {
	                    reject('not found');
	                }
	            });
	        })
	    },

	    save: function (data) {
	        return new Promise(function (resolve, reject) {
	            // Get the documents collection
	            var collection = db.collection('messages');
	            // Insert some documents
	            collection.insert([
	                data
	            ], function (err, result) {
	                console.log('inserted in history', result);
	                if (err) {
	                    return reject(err);
	                }

	                resolve(result);
	            });
	        });
	    },

	    getAll: function () {
	        return new Promise(function (resolve, reject) {
	            // Get the documents collection
	            var collection = db.collection('messages');
	            // Find some documents
	            collection.find({}).toArray(function (err, result) {
	                console.log('request history', result);
	                if (err) {
	                    return reject(err);
	                }

	                resolve(result);
	            });
	        });
	    },

	    getHistory: function (user) {
	        return new Promise(function (resolve, reject) {
	            resolve([{channel: 'test', message: 'test'}]);
	        });
	    },

	    getChannels: function (user) {
	        return new Promise(function (resolve, reject) {
	            // Get the documents collection
	            var collection = db.collection('channels');
	            // Find some documents
	            collection.find().toArray(function (err, result) {
	                if (err) {
	                    return reject(err);
	                }

	                resolve(result);
	            });
	        });
	    },

	    getUsers: function (user) {
	        return new Promise(function (resolve, reject) {
	            // Get the documents collection
	            var collection = db.collection('users');
	            // Find some documents
	            collection.find().toArray(function (err, result) {
	                if (err) {
	                    return reject(err);
	                }

	                resolve(result);
	            });
	        });
	    }
	};

	module.exports = model;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	// Core module
	var core = __webpack_require__(167),
	  Instrumentation = __webpack_require__(218);

	// Set up the connect function
	var connect = __webpack_require__(250).connect;

	// Expose error class
	connect.MongoError = core.MongoError;

	// Actual driver classes exported
	connect.MongoClient = __webpack_require__(250);
	connect.Db = __webpack_require__(248);
	connect.Collection = __webpack_require__(243);
	connect.Server = __webpack_require__(244);
	connect.ReplSet = __webpack_require__(246);
	connect.Mongos = __webpack_require__(247);
	connect.ReadPreference = __webpack_require__(221);
	connect.GridStore = __webpack_require__(241);
	connect.Chunk = __webpack_require__(242);
	connect.Logger = core.Logger;
	connect.Cursor = __webpack_require__(233);

	// BSON types exported
	connect.Binary = core.BSON.Binary;
	connect.Code = core.BSON.Code;
	connect.DBRef = core.BSON.DBRef;
	connect.Double = core.BSON.Double;
	connect.Long = core.BSON.Long;
	connect.MinKey = core.BSON.MinKey;
	connect.MaxKey = core.BSON.MaxKey;
	connect.ObjectID = core.BSON.ObjectID;
	connect.ObjectId = core.BSON.ObjectID;
	connect.Symbol = core.BSON.Symbol;
	connect.Timestamp = core.BSON.Timestamp;

	// Add connect method
	connect.connect = connect;

	// Set up the instrumentation method
	connect.instrument = function(options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  return new Instrumentation(core, options, callback);
	}

	// Set our exports to be the connect function
	module.exports = connect;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	    MongoError: __webpack_require__(168)
	  , Server: __webpack_require__(169)
	  , ReplSet: __webpack_require__(214)
	  , Mongos: __webpack_require__(217)
	  , Logger: __webpack_require__(192)
	  , Cursor: __webpack_require__(194)
	  , ReadPreference: __webpack_require__(193)
	  , BSON: __webpack_require__(175)
	  // Raw operations
	  , Query: __webpack_require__(174).Query
	  // Auth mechanisms
	  , MongoCR: __webpack_require__(201)
	  , X509: __webpack_require__(202)
	  , Plain: __webpack_require__(203)
	  , GSSAPI: __webpack_require__(204)
	  , ScramSHA1: __webpack_require__(213)
	}


/***/ },
/* 168 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Creates a new MongoError
	 * @class
	 * @augments Error
	 * @param {string} message The error message
	 * @return {MongoError} A MongoError instance
	 */
	function MongoError(message) {
	  this.name = 'MongoError';
	  this.message = message;
	  Error.captureStackTrace(this, MongoError);
	}

	/**
	 * Creates a new MongoError object
	 * @method
	 * @param {object} options The error options
	 * @return {MongoError} A MongoError instance
	 */
	MongoError.create = function(options) {
	  var err = null;

	  if(options instanceof Error) {
	    err = new MongoError(options.message);
	    err.stack = options.stack;
	  } else if(typeof options == 'string') {
	    err = new MongoError(options);
	  } else {
	    err = new MongoError(options.message || options.errmsg || options.$err || "n/a");
	    // Other options
	    for(var name in options) {
	      err[name] = options[name];
	    }
	  }

	  return err;
	}

	// Extend JavaScript error
	MongoError.prototype = new Error; 

	module.exports = MongoError;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) { "use strict";

	var inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , bindToCurrentDomain = __webpack_require__(170).bindToCurrentDomain
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , Pool = __webpack_require__(171)
	  , b = __webpack_require__(175)
	  , Query = __webpack_require__(174).Query
	  , MongoError = __webpack_require__(168)
	  , ReadPreference = __webpack_require__(193)
	  , BasicCursor = __webpack_require__(194)
	  , CommandResult = __webpack_require__(195)
	  , getSingleProperty = __webpack_require__(170).getSingleProperty
	  , getProperty = __webpack_require__(170).getProperty
	  , debugOptions = __webpack_require__(170).debugOptions
	  , BSON = __webpack_require__(175).native().BSON
	  , PreTwoSixWireProtocolSupport = __webpack_require__(196)
	  , TwoSixWireProtocolSupport = __webpack_require__(198)
	  , ThreeTwoWireProtocolSupport = __webpack_require__(199)
	  , Session = __webpack_require__(200)
	  , Logger = __webpack_require__(192)
	  , MongoCR = __webpack_require__(201)
	  , X509 = __webpack_require__(202)
	  , Plain = __webpack_require__(203)
	  , GSSAPI = __webpack_require__(204)
	  , SSPI = __webpack_require__(212)
	  , ScramSHA1 = __webpack_require__(213);

	/**
	 * @fileOverview The **Server** class is a class that represents a single server topology and is
	 * used to construct connections.
	 *
	 * @example
	 * var Server = require('mongodb-core').Server
	 *   , ReadPreference = require('mongodb-core').ReadPreference
	 *   , assert = require('assert');
	 *
	 * var server = new Server({host: 'localhost', port: 27017});
	 * // Wait for the connection event
	 * server.on('connect', function(server) {
	 *   server.destroy();
	 * });
	 *
	 * // Start connecting
	 * server.connect();
	 */

	// All bson types
	var bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];
	// BSON parser
	var bsonInstance = null;
	// Server instance id
	var serverId = 0;
	// Callbacks instance id
	var callbackId = 0;

	// Single store for all callbacks
	var Callbacks = function() {
	  // EventEmitter.call(this);
	  var self = this;
	  // Callbacks
	  this.callbacks = {};
	  // Set the callbacks id
	  this.id = callbackId++;
	  // Set the type to server
	  this.type = 'server';
	}

	//
	// Clone the options
	var cloneOptions = function(options) {
	  var opts = {};
	  for(var name in options) {
	    opts[name] = options[name];
	  }
	  return opts;
	}

	//
	// Flush all callbacks
	Callbacks.prototype.flush = function(err) {
	  for(var id in this.callbacks) {
	    if(!isNaN(parseInt(id, 10))) {
	      var callback = this.callbacks[id];
	      delete this.callbacks[id];
	      callback(err, null);
	    }
	  }
	}

	Callbacks.prototype.emit = function(id, err, value) {
	  var callback = this.callbacks[id];
	  delete this.callbacks[id];
	  callback(err, value);
	}

	Callbacks.prototype.raw = function(id) {
	  if(this.callbacks[id] == null) return false;
	  return this.callbacks[id].raw == true ? true : false
	}

	Callbacks.prototype.documentsReturnedIn = function(id) {
	  if(this.callbacks[id] == null) return false;
	  return typeof this.callbacks[id].documentsReturnedIn == 'string' ? this.callbacks[id].documentsReturnedIn : null;
	}

	Callbacks.prototype.unregister = function(id) {
	  delete this.callbacks[id];
	}

	Callbacks.prototype.register = function(id, callback) {
	  this.callbacks[id] = bindToCurrentDomain(callback);
	}

	/**
	 * @ignore
	 */
	var bindToCurrentDomain = function(callback) {
	  var domain = process.domain;
	  if(domain == null || callback == null) return callback;
	  return domain.bind(callback);
	}

	var DISCONNECTED = 'disconnected';
	var CONNECTING = 'connecting';
	var CONNECTED = 'connected';
	var DESTROYED = 'destroyed';

	// Supports server
	var supportsServer = function(_s) {
	  return _s.ismaster && typeof _s.ismaster.minWireVersion == 'number';
	}

	//
	// createWireProtocolHandler
	var createWireProtocolHandler = function(result) {
	  // 3.2 wire protocol handler
	  if(result && result.maxWireVersion >= 4) {
	    return new ThreeTwoWireProtocolSupport(new TwoSixWireProtocolSupport());
	  }

	  // 2.6 wire protocol handler
	  if(result && result.maxWireVersion >= 2) {
	    return new TwoSixWireProtocolSupport();
	  }

	  // 2.4 or earlier wire protocol handler
	  return new PreTwoSixWireProtocolSupport();
	}

	//
	// Reconnect server
	var reconnectServer = function(self, state) {
	  // If the current reconnect retries is 0 stop attempting to reconnect
	  if(state.currentReconnectRetry == 0) {
	    return self.destroy(true, true);
	  }

	  // Adjust the number of retries
	  state.currentReconnectRetry = state.currentReconnectRetry - 1;

	  // Set status to connecting
	  state.state = CONNECTING;
	  // Create a new Pool
	  state.pool = new Pool(state.options);
	  // error handler
	  var reconnectErrorHandler = function(err) {
	    state.state = DISCONNECTED;
	    // Destroy the pool
	    state.pool.destroy();
	    // Adjust the number of retries
	    state.currentReconnectRetry = state.currentReconnectRetry - 1;
	    // No more retries
	    if(state.currentReconnectRetry <= 0) {
	      self.state = DESTROYED;
	      self.emit('error', f('failed to connect to %s:%s after %s retries', state.options.host, state.options.port, state.reconnectTries));
	    } else {
	      setTimeout(function() {
	        reconnectServer(self, state);
	      }, state.reconnectInterval);
	    }
	  }

	  //
	  // Attempt to connect
	  state.pool.once('connect', function() {
	    // Reset retries
	    state.currentReconnectRetry = state.reconnectTries;

	    // Remove any non used handlers
	    var events = ['error', 'close', 'timeout', 'parseError'];
	    events.forEach(function(e) {
	      state.pool.removeAllListeners(e);
	    });

	    // Set connected state
	    state.state = CONNECTED;

	    // Add proper handlers
	    state.pool.once('error', reconnectErrorHandler);
	    state.pool.once('close', closeHandler(self, state));
	    state.pool.once('timeout', timeoutHandler(self, state));
	    state.pool.once('parseError', fatalErrorHandler(self, state));

	    // We need to ensure we have re-authenticated
	    var keys = Object.keys(state.authProviders);
	    if(keys.length == 0) return self.emit('reconnect', self);

	    // Execute all providers
	    var count = keys.length;
	    // Iterate over keys
	    for(var i = 0; i < keys.length; i++) {
	      state.authProviders[keys[i]].reauthenticate(self, state.pool, function(err, r) {
	        count = count - 1;
	        // We are done, emit reconnect event
	        if(count == 0) {
	          return self.emit('reconnect', self);
	        }
	      });
	    }
	  });

	  //
	  // Handle connection failure
	  state.pool.once('error', errorHandler(self, state));
	  state.pool.once('close', errorHandler(self, state));
	  state.pool.once('timeout', errorHandler(self, state));
	  state.pool.once('parseError', errorHandler(self, state));

	  // Connect pool
	  state.pool.connect();
	}

	//
	// Handlers
	var messageHandler = function(self, state) {
	  return function(response, connection) {
	    try {
	      // Parse the message
	      response.parse({raw: state.callbacks.raw(response.responseTo), documentsReturnedIn: state.callbacks.documentsReturnedIn(response.responseTo)});
	      if(state.logger.isDebug()) state.logger.debug(f('message [%s] received from %s', response.raw.toString('hex'), self.name));
	      state.callbacks.emit(response.responseTo, null, response);
	    } catch (err) {
	      state.callbacks.flush(new MongoError(err));
	      self.destroy();
	    }
	  }
	}

	var errorHandler = function(self, state) {
	  return function(err, connection) {
	    if(state.state == DISCONNECTED || state.state == DESTROYED) return;
	    // Set disconnected state
	    state.state = DISCONNECTED;
	    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'error', [self]);
	    if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', self.name, JSON.stringify(err)));
	    // Flush out all the callbacks
	    if(state.callbacks) state.callbacks.flush(new MongoError(f("server %s received an error %s", self.name, JSON.stringify(err))));
	    // Destroy all connections
	    self.destroy();
	    // Emit error event
	    if(state.emitError && self.listeners('error').length > 0) self.emit('error', err, self);
	    // If we specified the driver to reconnect perform it
	    if(state.reconnect) setTimeout(function() {
	      // state.currentReconnectRetry = state.reconnectTries,
	      reconnectServer(self, state)
	    }, state.reconnectInterval);
	  }
	}

	var fatalErrorHandler = function(self, state) {
	  return function(err, connection) {
	    if(state.state == DISCONNECTED || state.state == DESTROYED) return;
	    // Set disconnected state
	    state.state = DISCONNECTED;

	    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'error', [self]);
	    if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', self.name, JSON.stringify(err)));
	    // Flush out all the callbacks
	    if(state.callbacks) state.callbacks.flush(new MongoError(f("server %s received an error %s", self.name, JSON.stringify(err))));
	    // Emit error event
	    if(self.listeners('error').length > 0) self.emit('error', err, self);
	    // If we specified the driver to reconnect perform it
	    if(state.reconnect) setTimeout(function() {
	      // state.currentReconnectRetry = state.reconnectTries,
	      reconnectServer(self, state)
	    }, state.reconnectInterval);
	    // Destroy all connections
	    self.destroy();
	  }
	}

	var timeoutHandler = function(self, state) {
	  return function(err, connection) {
	    if(state.state == DISCONNECTED || state.state == DESTROYED) return;
	    // Set disconnected state
	    state.state = DISCONNECTED;

	    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'timeout', [self]);
	    if(state.logger.isInfo()) state.logger.info(f('server %s timed out', self.name));
	    // Flush out all the callbacks
	    if(state.callbacks) state.callbacks.flush(new MongoError(f("server %s timed out", self.name)));
	    // Emit error event
	    self.emit('timeout', err, self);
	    // If we specified the driver to reconnect perform it
	    if(state.reconnect) setTimeout(function() {
	      // state.currentReconnectRetry = state.reconnectTries,
	      reconnectServer(self, state)
	    }, state.reconnectInterval);
	    // Destroy all connections
	    self.destroy();
	  }
	}

	var closeHandler = function(self, state) {
	  return function(err, connection) {
	    if(state.state == DISCONNECTED || state.state == DESTROYED) return;
	    // Set disconnected state
	    state.state = DISCONNECTED;

	    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'close', [self]);
	    if(state.logger.isInfo()) state.logger.info(f('server %s closed', self.name));
	    // Flush out all the callbacks
	    if(state.callbacks) state.callbacks.flush(new MongoError(f("server %s sockets closed", self.name)));
	    // Emit error event
	    self.emit('close', err, self);
	    // If we specified the driver to reconnect perform it
	    if(state.reconnect) setTimeout(function() {
	      // state.currentReconnectRetry = state.reconnectTries,
	      reconnectServer(self, state)
	    }, state.reconnectInterval);
	    // Destroy all connections
	    self.destroy();
	  }
	}

	var connectHandler = function(self, state) {
	  // Apply all stored authentications
	  var applyAuthentications = function(callback) {
	    // We need to ensure we have re-authenticated
	    var keys = Object.keys(state.authProviders);
	    if(keys.length == 0) return callback(null, null);

	    // Execute all providers
	    var count = keys.length;
	    // Iterate over keys
	    for(var i = 0; i < keys.length; i++) {
	      state.authProviders[keys[i]].reauthenticate(self, state.pool, function(err, r) {
	        count = count - 1;
	        // We are done, emit reconnect event
	        if(count == 0) {
	          return callback(null, null);
	        }
	      });
	    }
	  }

	  return function(connection) {
	    // Apply any applyAuthentications
	    applyAuthentications(function() {

	      // Execute an ismaster
	      self.command('system.$cmd', {ismaster:true}, function(err, r) {
	        if(err) {
	          state.state = DISCONNECTED;
	          return self.emit('close', err, self);
	        }

	        // Set the current ismaster
	        if(!err) {
	          state.ismaster = r.result;
	        }

	        // Emit the ismaster
	        self.emit('ismaster', r.result, self);

	        // Determine the wire protocol handler
	        state.wireProtocolHandler = createWireProtocolHandler(state.ismaster);

	        // Set the wireProtocolHandler
	        state.options.wireProtocolHandler = state.wireProtocolHandler;

	        // Log the ismaster if available
	        if(state.logger.isInfo()) state.logger.info(f('server %s connected with ismaster [%s]', self.name, JSON.stringify(r.result)));

	        // Validate if we it's a server we can connect to
	        if(!supportsServer(state) && state.wireProtocolHandler == null) {
	          state.state = DISCONNECTED
	          return self.emit('error', new MongoError("non supported server version"), self);
	        }

	        // Set the details
	        if(state.ismaster && state.ismaster.me) state.serverDetails.name = state.ismaster.me;

	        // No read preference strategies just emit connect
	        if(state.readPreferenceStrategies == null) {
	          state.state = CONNECTED;
	          return self.emit('connect', self);
	        }

	        // Signal connect to all readPreferences
	        notifyStrategies(self, self.s, 'connect', [self], function(err, result) {
	          state.state = CONNECTED;
	          return self.emit('connect', self);
	        });
	      });
	    });
	  }
	}

	var slaveOk = function(r) {
	  if(r) return r.slaveOk()
	  return false;
	}

	//
	// Execute readPreference Strategies
	var notifyStrategies = function(self, state, op, params, callback) {
	  if(typeof callback != 'function') {
	    // Notify query start to any read Preference strategies
	    for(var name in state.readPreferenceStrategies) {
	      if(state.readPreferenceStrategies[name][op]) {
	        var strat = state.readPreferenceStrategies[name];
	        strat[op].apply(strat, params);
	      }
	    }
	    // Finish up
	    return;
	  }

	  // Execute the async callbacks
	  var nPreferences = Object.keys(state.readPreferenceStrategies).length;
	  if(nPreferences == 0) return callback(null, null);
	  for(var name in state.readPreferenceStrategies) {
	    if(state.readPreferenceStrategies[name][op]) {
	      var strat = state.readPreferenceStrategies[name];
	      // Add a callback to params
	      var cParams = params.slice(0);
	      cParams.push(function(err, r) {
	        nPreferences = nPreferences - 1;
	        if(nPreferences == 0) {
	          callback(null, null);
	        }
	      })
	      // Execute the readPreference
	      strat[op].apply(strat, cParams);
	    }
	  }
	}

	var debugFields = ['reconnect', 'reconnectTries', 'reconnectInterval', 'emitError', 'cursorFactory', 'host'
	  , 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectionTimeout'
	  , 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'cert', 'key', 'rejectUnauthorized', 'promoteLongs'];

	/**
	 * Creates a new Server instance
	 * @class
	 * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection
	 * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times
	 * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries
	 * @param {boolean} [options.emitError=false] Server will emit errors events
	 * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
	 * @param {string} options.host The server host
	 * @param {number} options.port The server port
	 * @param {number} [options.size=5] Server connection pool size
	 * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
	 * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled
	 * @param {boolean} [options.noDelay=true] TCP Connection no delay
	 * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting
	 * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
	 * @param {boolean} [options.ssl=false] Use SSL for connection
	 * @param {Buffer} [options.ca] SSL Certificate store binary buffer
	 * @param {Buffer} [options.cert] SSL Certificate binary buffer
	 * @param {Buffer} [options.key] SSL Key file binary buffer
	 * @param {string} [options.passphrase] SSL Certificate pass phrase
	 * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates
	 * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
	 * @return {Server} A cursor instance
	 * @fires Server#connect
	 * @fires Server#close
	 * @fires Server#error
	 * @fires Server#timeout
	 * @fires Server#parseError
	 * @fires Server#reconnect
	 */
	var Server = function(options) {
	  var self = this;

	  // Add event listener
	  EventEmitter.call(this);

	  // BSON Parser, ensure we have a single instance
	  if(bsonInstance == null) {
	    bsonInstance = new BSON(bsonTypes);
	  }

	  // Reconnect retries
	  var reconnectTries = options.reconnectTries || 30;

	  // Keeps all the internal state of the server
	  this.s = {
	    // Options
	      options: options
	    // Contains all the callbacks
	    , callbacks: new Callbacks()
	    // Logger
	    , logger: Logger('Server', options)
	    // Server state
	    , state: DISCONNECTED
	    // Reconnect option
	    , reconnect: typeof options.reconnect == 'boolean' ? options.reconnect :  true
	    , reconnectTries: reconnectTries
	    , reconnectInterval: options.reconnectInterval || 1000
	    // Swallow or emit errors
	    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false
	    // Current state
	    , currentReconnectRetry: reconnectTries
	    // Contains the ismaster
	    , ismaster: null
	    // Contains any alternate strategies for picking
	    , readPreferenceStrategies: options.readPreferenceStrategies
	    // Auth providers
	    , authProviders: options.authProviders || {}
	    // Server instance id
	    , id: serverId++
	    // Grouping tag used for debugging purposes
	    , tag: options.tag
	    // Do we have a not connected handler
	    , disconnectHandler: options.disconnectHandler
	    // wireProtocolHandler methods
	    , wireProtocolHandler: options.wireProtocolHandler || new PreTwoSixWireProtocolSupport()
	    // Factory overrides
	    , Cursor: options.cursorFactory || BasicCursor
	    // BSON Parser, ensure we have a single instance
	    , bsonInstance: bsonInstance
	    // Pick the right bson parser
	    , bson: options.bson ? options.bson : bsonInstance
	    // Internal connection pool
	    , pool: null
	    // Server details
	    , serverDetails: {
	        host: options.host
	      , port: options.port
	      , name: options.port ? f("%s:%s", options.host, options.port) : options.host
	    }
	  }

	  // Reference state
	  var s = this.s;

	  // Add bson parser to options
	  options.bson = s.bson;

	  // Set error properties
	  getProperty(this, 'name', 'name', s.serverDetails, {});
	  getProperty(this, 'bson', 'bson', s.options, {});
	  getProperty(this, 'wireProtocolHandler', 'wireProtocolHandler', s.options, {});
	  getSingleProperty(this, 'id', s.id);

	  // Add auth providers
	  this.addAuthProvider('mongocr', new MongoCR());
	  this.addAuthProvider('x509', new X509());
	  this.addAuthProvider('plain', new Plain());
	  this.addAuthProvider('gssapi', new GSSAPI());
	  this.addAuthProvider('sspi', new SSPI());
	  this.addAuthProvider('scram-sha-1', new ScramSHA1());
	}

	inherits(Server, EventEmitter);

	/**
	 * Execute a command
	 * @method
	 * @param {string} type Type of BSON parser to use (c++ or js)
	 */
	Server.prototype.setBSONParserType = function(type) {
	  var nBSON = null;

	  if(type == 'c++') {
	    nBSON = __webpack_require__(175).native().BSON;
	  } else if(type == 'js') {
	    nBSON = __webpack_require__(175).pure().BSON;
	  } else {
	    throw new MongoError(f("% parser not supported", type));
	  }

	  this.s.options.bson = new nBSON(bsonTypes);
	}

	/**
	 * Returns the last known ismaster document for this server
	 * @method
	 * @return {object}
	 */
	Server.prototype.lastIsMaster = function() {
	  return this.s.ismaster;
	}

	/**
	 * Initiate server connect
	 * @method
	 */
	Server.prototype.connect = function(_options) {
	  var self = this;
	  // Set server specific settings
	  _options = _options || {}
	  // Set the promotion
	  if(typeof _options.promoteLongs == 'boolean')  {
	    self.s.options.promoteLongs = _options.promoteLongs;
	  }

	  // Destroy existing pool
	  if(self.s.pool) {
	    self.s.pool.destroy();
	    self.s.pool = null;
	  }

	  // Set the state to connection
	  self.s.state = CONNECTING;
	  // Create a new connection pool
	  if(!self.s.pool) {
	    self.s.options.messageHandler = messageHandler(self, self.s);
	    self.s.pool = new Pool(self.s.options);
	  }

	  // Add all the event handlers
	  self.s.pool.once('timeout', timeoutHandler(self, self.s));
	  self.s.pool.once('close', closeHandler(self, self.s));
	  self.s.pool.once('error', errorHandler(self, self.s));
	  self.s.pool.once('connect', connectHandler(self, self.s));
	  self.s.pool.once('parseError', fatalErrorHandler(self, self.s));

	  // Connect the pool
	  self.s.pool.connect();
	}

	/**
	 * Destroy the server connection
	 * @method
	 */
	Server.prototype.destroy = function(emitClose, emitDestroy) {
	  var self = this;
	  if(self.s.logger.isDebug()) self.s.logger.debug(f('destroy called on server %s', self.name));
	  // Emit close
	  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);

	  // Emit destroy event
	  if(emitDestroy) self.emit('destroy', self);
	  // Set state as destroyed
	  self.s.state = DESTROYED;
	  // Close the pool
	  self.s.pool.destroy();
	  // Flush out all the callbacks
	  if(self.s.callbacks) self.s.callbacks.flush(new MongoError(f("server %s sockets closed", self.name)));
	}

	/**
	 * Figure out if the server is connected
	 * @method
	 * @return {boolean}
	 */
	Server.prototype.isConnected = function() {
	  var self = this;
	  if(self.s.pool) return self.s.pool.isConnected();
	  return false;
	}

	/**
	 * Figure out if the server instance was destroyed by calling destroy
	 * @method
	 * @return {boolean}
	 */
	Server.prototype.isDestroyed = function() {
	  return this.s.state == DESTROYED;
	}

	var executeSingleOperation = function(self, ns, cmd, queryOptions, options, onAll, callback) {
	  // Create a query instance
	  var query = new Query(self.s.bson, ns, cmd, queryOptions);

	  // Set slave OK
	  query.slaveOk = slaveOk(options.readPreference);

	  // Notify query start to any read Preference strategies
	  if(self.s.readPreferenceStrategies != null)
	    notifyStrategies(self, self.s, 'startOperation', [self, query, new Date()]);

	  // Get a connection (either passed or from the pool)
	  var connection = options.connection || self.s.pool.get();

	  // Double check if we have a valid connection
	  if(!connection.isConnected()) {
	    return callback(new MongoError(f("no connection available to server %s", self.name)));
	  }

	  // Print cmd and execution connection if in debug mode for logging
	  if(self.s.logger.isDebug()) {
	    var json = connection.toJSON();
	    self.s.logger.debug(f('cmd [%s] about to be executed on connection with id %s at %s:%s', JSON.stringify(cmd), json.id, json.host, json.port));
	  }

	  // Execute multiple queries
	  if(onAll) {
	    var connections = self.s.pool.getAll();
	    var total = connections.length;
	    // We have an error
	    var error = null;
	    // Execute on all connections
	    for(var i = 0; i < connections.length; i++) {
	      try {
	        query.incRequestId();
	        connections[i].write(query.toBin());
	      } catch(err) {
	        total = total - 1;
	        if(total == 0) return callback(MongoError.create(err));
	      }

	      // Register the callback
	      self.s.callbacks.register(query.requestId, function(err, result) {
	        if(err) error = err;
	        total = total - 1;

	        // Done
	        if(total == 0) {
	          // Notify end of command
	          notifyStrategies(self, self.s, 'endOperation', [self, error, result, new Date()]);
	          if(error) return callback(MongoError.create(error));
	          // Execute callback, catch and rethrow if needed
	          try { callback(null, new CommandResult(result.documents[0], connections)); }
	          catch(err) { process.nextTick(function() { throw err}); }
	        }
	      });
	    }

	    return;
	  }

	  // Execute a single command query
	  try {
	    connection.write(query.toBin());
	  } catch(err) {
	    return callback(MongoError.create(err));
	  }

	  // Register the callback
	  self.s.callbacks.register(query.requestId, function(err, result) {
	    // Notify end of command
	    notifyStrategies(self, self.s, 'endOperation', [self, err, result, new Date()]);
	    if(err) return callback(err);
	    if(result.documents[0]['$err']
	      || result.documents[0]['errmsg']
	      || result.documents[0]['err']
	      || result.documents[0]['code']) return callback(MongoError.create(result.documents[0]));
	      // Execute callback, catch and rethrow if needed
	      try { callback(null, new CommandResult(result.documents[0], connection)); }
	      catch(err) { process.nextTick(function() { throw err}); }
	  });
	}

	/**
	 * Execute a command
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {object} cmd The command hash
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @param {Connection} [options.connection] Specify connection object to execute command against
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Server.prototype.command = function(ns, cmd, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  var self = this;
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Ensure we have no options
	  options = options || {};
	  // Do we have a read Preference it need to be of type ReadPreference
	  if(options.readPreference && !(options.readPreference instanceof ReadPreference)) {
	    throw new Error("readPreference must be an instance of ReadPreference");
	  }

	  // Debug log
	  if(self.s.logger.isDebug()) self.s.logger.debug(f('executing command [%s] against %s', JSON.stringify({
	    ns: ns, cmd: cmd, options: debugOptions(debugFields, options)
	  }), self.name));

	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!self.isConnected() && self.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return self.s.disconnectHandler.add('command', ns, cmd, options, callback);
	  }

	  // If we have no connection error
	  if(!self.s.pool.isConnected()) return callback(new MongoError(f("no connection available to server %s", self.name)));

	  // Execute on all connections
	  var onAll = typeof options.onAll == 'boolean' ? options.onAll : false;

	  // Check keys
	  var checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys: false;

	  // Serialize function
	  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;

	  // Ignore undefined values
	  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;

	  // Query options
	  var queryOptions = {
	    numberToSkip: 0, numberToReturn: -1, checkKeys: checkKeys
	  };

	  // Set up the serialize functions and ignore undefined
	  if(serializeFunctions) queryOptions.serializeFunctions = serializeFunctions;
	  if(ignoreUndefined) queryOptions.ignoreUndefined = ignoreUndefined;

	  // Single operation execution
	  if(!Array.isArray(cmd)) {
	    return executeSingleOperation(self, ns, cmd, queryOptions, options, onAll, callback);
	  }

	  // Build commands for each of the instances
	  var queries = new Array(cmd.length);
	  for(var i = 0; i < cmd.length; i++) {
	    queries[i] = new Query(self.s.bson, ns, cmd[i], queryOptions);
	    queries[i].slaveOk = slaveOk(options.readPreference);
	  }

	  // Notify query start to any read Preference strategies
	  if(self.s.readPreferenceStrategies != null)
	    notifyStrategies(self, self.s, 'startOperation', [self, queries, new Date()]);

	  // Get a connection (either passed or from the pool)
	  var connection = options.connection || self.s.pool.get();

	  // Double check if we have a valid connection
	  if(!connection.isConnected()) {
	    return callback(new MongoError(f("no connection available to server %s", self.name)));
	  }

	  // Print cmd and execution connection if in debug mode for logging
	  if(self.s.logger.isDebug()) {
	    var json = connection.toJSON();
	    self.s.logger.debug(f('cmd [%s] about to be executed on connection with id %s at %s:%s', JSON.stringify(queries), json.id, json.host, json.port));
	  }

	  // Canceled operations
	  var canceled = false;
	  // Number of operations left
	  var operationsLeft = queries.length;
	  // Results
	  var results = [];

	  // We need to nest the callbacks
	  for(var i = 0; i < queries.length; i++) {
	    // Get the query object
	    var query = queries[i];

	    // Execute a single command query
	    try {
	      connection.write(query.toBin());
	    } catch(err) {
	      return callback(MongoError.create(err));
	    }

	    // Register the callback
	    self.s.callbacks.register(query.requestId, function(err, result) {
	      // If it's canceled ignore the operation
	      if(canceled) return;
	      // Update the current index
	      operationsLeft = operationsLeft - 1;

	      // If we have an error cancel the operation
	      if(err) {
	        canceled = true;
	        return callback(err);
	      }

	      // Return the result
	      if(result.documents[0]['$err']
	        || result.documents[0]['errmsg']
	        || result.documents[0]['err']
	        || result.documents[0]['code']) {

	        // Set to canceled
	        canceled = true;
	        // Return the error
	        return callback(MongoError.create(result.documents[0]));
	      }

	      // Push results
	      results.push(result.documents[0]);

	      // We are done, return the result
	      if(operationsLeft == 0) {
	        // Notify end of command
	        notifyStrategies(self, self.s, 'endOperation', [self, err, result, new Date()]);

	        // Turn into command results
	        var commandResults = new Array(results.length);
	        for(var i = 0; i < results.length; i++) {
	          commandResults[i] = new CommandResult(results[i], connection);
	        }

	        // Execute callback, catch and rethrow if needed
	        try { callback(null, commandResults); }
	        catch(err) { process.nextTick(function() { throw err}); }
	      }
	    });
	  }
	}

	/**
	 * Insert one or more documents
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of documents to insert
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Server.prototype.insert = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  var self = this;
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!self.isConnected() && self.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return self.s.disconnectHandler.add('insert', ns, ops, options, callback);
	  }

	  // Setup the docs as an array
	  ops = Array.isArray(ops) ? ops : [ops];
	  // Execute write
	  return self.s.wireProtocolHandler.insert(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);
	}

	/**
	 * Perform one or more update operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of updates
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Server.prototype.update = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  var self = this;
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!self.isConnected() && self.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return self.s.disconnectHandler.add('update', ns, ops, options, callback);
	  }

	  // Setup the docs as an array
	  ops = Array.isArray(ops) ? ops : [ops];
	  // Execute write
	  return self.s.wireProtocolHandler.update(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);
	}

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of removes
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Server.prototype.remove = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  var self = this;
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!self.isConnected() && self.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return self.s.disconnectHandler.add('remove', ns, ops, options, callback);
	  }

	  // Setup the docs as an array
	  ops = Array.isArray(ops) ? ops : [ops];
	  // Execute write
	  return self.s.wireProtocolHandler.remove(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);
	}

	/**
	 * Authenticate using a specified mechanism
	 * @method
	 * @param {string} mechanism The Auth mechanism we are invoking
	 * @param {string} db The db we are invoking the mechanism against
	 * @param {...object} param Parameters for the specific mechanism
	 * @param {authResultCallback} callback A callback function
	 */
	Server.prototype.auth = function(mechanism, db) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  var callback = args.pop();

	  // If we don't have the mechanism fail
	  if(self.s.authProviders[mechanism] == null && mechanism != 'default')
	    throw new MongoError(f("auth provider %s does not exist", mechanism));

	  // If we have the default mechanism we pick mechanism based on the wire
	  // protocol max version. If it's >= 3 then scram-sha1 otherwise mongodb-cr
	  if(mechanism == 'default' && self.s.ismaster && self.s.ismaster.maxWireVersion >= 3) {
	    mechanism = 'scram-sha-1';
	  } else if(mechanism == 'default') {
	    mechanism = 'mongocr';
	  }

	  // Actual arguments
	  var finalArguments = [self, self.s.pool, db].concat(args.slice(0)).concat([function(err, r) {
	    if(err) return callback(err);
	    if(!r) return callback(new MongoError('could not authenticate'));
	    callback(null, new Session({}, self));
	  }]);

	  // Let's invoke the auth mechanism
	  self.s.authProviders[mechanism].auth.apply(self.s.authProviders[mechanism], finalArguments);
	}

	//
	// Plugin methods
	//

	/**
	 * Add custom read preference strategy
	 * @method
	 * @param {string} name Name of the read preference strategy
	 * @param {object} strategy Strategy object instance
	 */
	Server.prototype.addReadPreferenceStrategy = function(name, strategy) {
	  var self = this;
	  if(self.s.readPreferenceStrategies == null) self.s.readPreferenceStrategies = {};
	  self.s.readPreferenceStrategies[name] = strategy;
	}

	/**
	 * Add custom authentication mechanism
	 * @method
	 * @param {string} name Name of the authentication mechanism
	 * @param {object} provider Authentication object instance
	 */
	Server.prototype.addAuthProvider = function(name, provider) {
	  var self = this;
	  self.s.authProviders[name] = provider;
	}

	/**
	 * Compare two server instances
	 * @method
	 * @param {Server} server Server to compare equality against
	 * @return {boolean}
	 */
	Server.prototype.equals = function(server) {
	  if(typeof server == 'string') return server == this.name;
	  return server.name == this.name;
	}

	/**
	 * All raw connections
	 * @method
	 * @return {Connection[]}
	 */
	Server.prototype.connections = function() {
	  return this.s.pool.getAll();
	}

	/**
	 * Get server
	 * @method
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @return {Server}
	 */
	Server.prototype.getServer = function(options) {
	  return this;
	}

	/**
	 * Get connection
	 * @method
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @return {Connection}
	 */
	Server.prototype.getConnection = function(options) {
	  return this.s.pool.get();
	}

	/**
	 * Get callbacks object
	 * @method
	 * @return {Callbacks}
	 */
	Server.prototype.getCallbacks = function() {
	  return this.s.callbacks;
	}

	/**
	 * Name of BSON parser currently used
	 * @method
	 * @return {string}
	 */
	Server.prototype.parserType = function() {
	  var s = this.s;
	  if(s.options.bson.serialize.toString().indexOf('[native code]') != -1)
	    return 'c++';
	  return 'js';
	}

	// // Command
	// {
	//     find: ns
	//   , query: <object>
	//   , limit: <n>
	//   , fields: <object>
	//   , skip: <n>
	//   , hint: <string>
	//   , explain: <boolean>
	//   , snapshot: <boolean>
	//   , batchSize: <n>
	//   , returnKey: <boolean>
	//   , maxScan: <n>
	//   , min: <n>
	//   , max: <n>
	//   , showDiskLoc: <boolean>
	//   , comment: <string>
	//   , maxTimeMS: <n>
	//   , raw: <boolean>
	//   , readPreference: <ReadPreference>
	//   , tailable: <boolean>
	//   , oplogReplay: <boolean>
	//   , noCursorTimeout: <boolean>
	//   , awaitdata: <boolean>
	//   , exhaust: <boolean>
	//   , partial: <boolean>
	// }

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId
	 * @param {object} [options.batchSize=0] Batchsize for the operation
	 * @param {array} [options.documents=[]] Initial documents list for cursor
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Server.prototype.cursor = function(ns, cmd, cursorOptions) {
	  var s = this.s;
	  cursorOptions = cursorOptions || {};
	  // Set up final cursor type
	  var FinalCursor = cursorOptions.cursorFactory || s.Cursor;
	  // Return the cursor
	  return new FinalCursor(s.bson, ns, cmd, cursorOptions, this, s.options);
	}

	/**
	 * A server connect event, used to verify that the connection is up and running
	 *
	 * @event Server#connect
	 * @type {Server}
	 */

	/**
	 * The server connection closed, all pool connections closed
	 *
	 * @event Server#close
	 * @type {Server}
	 */

	/**
	 * The server connection caused an error, all pool connections closed
	 *
	 * @event Server#error
	 * @type {Server}
	 */

	/**
	 * The server connection timed out, all pool connections closed
	 *
	 * @event Server#timeout
	 * @type {Server}
	 */

	/**
	 * The driver experienced an invalid message, all pool connections closed
	 *
	 * @event Server#parseError
	 * @type {Server}
	 */

	/**
	 * The server reestablished the connection
	 *
	 * @event Server#reconnect
	 * @type {Server}
	 */

	/**
	 * This is an insert result callback
	 *
	 * @callback opResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {CommandResult} command result
	 */

	/**
	 * This is an authentication result callback
	 *
	 * @callback authResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {Session} an authenticated session
	 */

	module.exports = Server;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	// Set property function
	var setProperty = function(obj, prop, flag, values) {
	  Object.defineProperty(obj, prop.name, {
	      enumerable:true,
	      set: function(value) {
	        if(typeof value != 'boolean') throw new Error(f("%s required a boolean", prop.name));
	        // Flip the bit to 1
	        if(value == true) values.flags |= flag;        
	        // Flip the bit to 0 if it's set, otherwise ignore
	        if(value == false && (values.flags & flag) == flag) values.flags ^= flag;
	        prop.value = value;
	      }
	    , get: function() { return prop.value; }
	  });
	}

	// Set property function
	var getProperty = function(obj, propName, fieldName, values, func) {
	  Object.defineProperty(obj, propName, {
	    enumerable:true,
	    get: function() { 
	      // Not parsed yet, parse it
	      if(values[fieldName] == null && obj.isParsed && !obj.isParsed()) {
	        obj.parse();
	      }

	      // Do we have a post processing function
	      if(typeof func == 'function') return func(values[fieldName]);
	      // Return raw value
	      return values[fieldName];
	    }
	  });
	}

	// Set simple property
	var getSingleProperty = function(obj, name, value) {
	  Object.defineProperty(obj, name, {
	    enumerable:true,
	    get: function() {
	      return value 
	    }
	  });  
	}

	// Shallow copy
	var copy = function(fObj, tObj) {
	  tObj = tObj || {};
	  for(var name in fObj) tObj[name] = fObj[name];
	  return tObj;
	}

	var debugOptions = function(debugFields, options) {
	  var finaloptions = {};
	  debugFields.forEach(function(n) {
	    finaloptions[n] = options[n];
	  });

	  return finaloptions;
	}

	/**
	 * @ignore
	 */
	var bindToCurrentDomain = function(callback) {
	  var domain = process.domain;
	  if(domain == null || callback == null) return callback;
	  return domain.bind(callback);
	}

	exports.setProperty = setProperty;
	exports.getProperty = getProperty;
	exports.getSingleProperty = getSingleProperty;
	exports.copy = copy;
	exports.bindToCurrentDomain = bindToCurrentDomain;
	exports.debugOptions = debugOptions;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process) {"use strict";

	var inherits = __webpack_require__(10).inherits
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , Connection = __webpack_require__(173)
	  , Query = __webpack_require__(174).Query
	  , Logger = __webpack_require__(192)
	  , f = __webpack_require__(10).format;

	var DISCONNECTED = 'disconnected';
	var CONNECTING = 'connecting';
	var CONNECTED = 'connected';
	var DESTROYED = 'destroyed';

	var _id = 0;

	/**
	 * Creates a new Pool instance
	 * @class
	 * @param {string} options.host The server host
	 * @param {number} options.port The server port
	 * @param {number} [options.size=5] Server connection pool size
	 * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
	 * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled
	 * @param {boolean} [options.noDelay=true] TCP Connection no delay
	 * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting
	 * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
	 * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed
	 * @param {boolean} [options.ssl=false] Use SSL for connection
	 * @param {Buffer} [options.ca] SSL Certificate store binary buffer
	 * @param {Buffer} [options.cert] SSL Certificate binary buffer
	 * @param {Buffer} [options.key] SSL Key file binary buffer
	 * @param {string} [options.passPhrase] SSL Certificate pass phrase
	 * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates
	 * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
	 * @fires Pool#connect
	 * @fires Pool#close
	 * @fires Pool#error
	 * @fires Pool#timeout
	 * @fires Pool#parseError
	 * @return {Pool} A cursor instance
	 */
	var Pool = function(options) {
	  var self = this;
	  // Add event listener
	  EventEmitter.call(this);
	  // Set empty if no options passed
	  this.options = options || {};
	  this.size = typeof options.size == 'number' ? options.size : 5;
	  // Message handler
	  this.messageHandler = options.messageHandler;
	  // No bson parser passed in
	  if(!options.bson) throw new Error("must pass in valid bson parser");
	  // Contains all connections
	  this.connections = [];
	  this.state = DISCONNECTED;
	  // Round robin index
	  this.index = 0;
	  this.dead = false;
	  // Logger instance
	  this.logger = Logger('Pool', options);
	  // Pool id
	  this.id = _id++;
	  // Grouping tag used for debugging purposes
	  this.tag = options.tag;
	}

	inherits(Pool, EventEmitter);

	var errorHandler = function(self) {
	  return function(err, connection) {
	    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] errored out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));
	    if(!self.dead) {
	      self.state = DISCONNECTED;
	      self.dead = true;
	      self.destroy();
	      self.emit('error', err, self);
	    }
	  }
	}

	var timeoutHandler = function(self) {
	  return function(err, connection) {
	    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] timed out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));
	    if(!self.dead) {
	      self.state = DISCONNECTED;
	      self.dead = true;
	      self.destroy();
	      self.emit('timeout', err, self);
	    }
	  }
	}

	var closeHandler = function(self) {
	  return function(err, connection) {
	    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] closed [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));
	    if(!self.dead) {
	      self.state = DISCONNECTED;
	      self.dead = true;
	      self.destroy();
	      self.emit('close', err, self);
	    }
	  }
	}

	var parseErrorHandler = function(self) {
	  return function(err, connection) {
	    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] errored out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));
	    if(!self.dead) {
	      self.state = DISCONNECTED;
	      self.dead = true;
	      self.destroy();
	      self.emit('parseError', err, self);
	    }
	  }
	}

	var connectHandler = function(self) {
	  return function(connection) {
	    self.connections.push(connection);
	    // We have connected to all servers
	    if(self.connections.length == self.size) {
	      self.state = CONNECTED;
	      // Done connecting
	      self.emit("connect", self);
	    }
	  }
	}

	/**
	 * Destroy pool
	 * @method
	 */
	Pool.prototype.destroy = function() {
	  this.state = DESTROYED;
	  // Set dead
	  this.dead = true;
	  // Destroy all the connections
	  this.connections.forEach(function(c) {
	    // Destroy all event emitters
	    ["close", "message", "error", "timeout", "parseError", "connect"].forEach(function(e) {
	      c.removeAllListeners(e);
	    });

	    // Destroy the connection
	    c.destroy();
	  });
	}

	var execute = null;

	try {
	  execute = setImmediate;
	} catch(err) {
	  execute = process.nextTick;
	}

	/**
	 * Connect pool
	 * @method
	 */
	Pool.prototype.connect = function(_options) {
	  var self = this;
	  // Set to connecting
	  this.state = CONNECTING
	  // No dead
	  this.dead = false;

	  // Ensure we allow for a little time to setup connections
	  var wait = 1;

	  // Connect all sockets
	  for(var i = 0; i < this.size; i++) {
	    setTimeout(function() {
	      execute(function() {
	        self.options.messageHandler = self.messageHandler;
	        var connection = new Connection(self.options);

	        // Add all handlers
	        connection.once('close', closeHandler(self));
	        connection.once('error', errorHandler(self));
	        connection.once('timeout', timeoutHandler(self));
	        connection.once('parseError', parseErrorHandler(self));
	        connection.on('connect', connectHandler(self));

	        // Start connection
	        connection.connect(_options);
	      });
	    }, wait);

	    // wait for 1 miliseconds before attempting to connect, spacing out connections
	    wait = wait + 1;
	  }
	}

	/**
	 * Get a pool connection (round-robin)
	 * @method
	 * @return {Connection}
	 */
	Pool.prototype.get = function() {
	  // if(this.dead) return null;
	  var connection = this.connections[this.index++];
	  this.index = this.index % this.connections.length;
	  return connection;
	}

	/**
	 * Get all pool connections
	 * @method
	 * @return {array}
	 */
	Pool.prototype.getAll = function() {
	  return this.connections.slice(0);
	}

	/**
	 * Is the pool connected
	 * @method
	 * @return {boolean}
	 */
	Pool.prototype.isConnected = function() {
	  for(var i = 0; i < this.connections.length; i++) {
	    if(!this.connections[i].isConnected()) return false;
	  }

	  return this.state == CONNECTED;
	}

	/**
	 * Was the pool destroyed
	 * @method
	 * @return {boolean}
	 */
	Pool.prototype.isDestroyed = function() {
	  return this.state == DESTROYED;
	}


	/**
	 * A server connect event, used to verify that the connection is up and running
	 *
	 * @event Pool#connect
	 * @type {Pool}
	 */

	/**
	 * The server connection closed, all pool connections closed
	 *
	 * @event Pool#close
	 * @type {Pool}
	 */

	/**
	 * The server connection caused an error, all pool connections closed
	 *
	 * @event Pool#error
	 * @type {Pool}
	 */

	/**
	 * The server connection timed out, all pool connections closed
	 *
	 * @event Pool#timeout
	 * @type {Pool}
	 */

	/**
	 * The driver experienced an invalid message, all pool connections closed
	 *
	 * @event Pool#parseError
	 * @type {Pool}
	 */

	module.exports = Pool;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(172).setImmediate, __webpack_require__(4)))

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(4).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(172).setImmediate, __webpack_require__(172).clearImmediate))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	var inherits = __webpack_require__(10).inherits
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , f = __webpack_require__(10).format
	  , getSingleProperty = __webpack_require__(170).getSingleProperty
	  , debugOptions = __webpack_require__(170).debugOptions
	  , Response = __webpack_require__(174).Response
	  , MongoError = __webpack_require__(168)
	  , Logger = __webpack_require__(192);

	var _id = 0;
	var debugFields = ['host', 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay'
	  , 'connectionTimeout', 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'cert'
	  , 'rejectUnauthorized', 'promoteLongs'];

	/**
	 * Creates a new Connection instance
	 * @class
	 * @param {string} options.host The server host
	 * @param {number} options.port The server port
	 * @param {number} [options.size=5] Server connection pool size
	 * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
	 * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled
	 * @param {boolean} [options.noDelay=true] TCP Connection no delay
	 * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting
	 * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
	 * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed
	 * @param {boolean} [options.ssl=false] Use SSL for connection
	 * @param {Buffer} [options.ca] SSL Certificate store binary buffer
	 * @param {Buffer} [options.cert] SSL Certificate binary buffer
	 * @param {Buffer} [options.key] SSL Key file binary buffer
	 * @param {string} [options.passphrase] SSL Certificate pass phrase
	 * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates
	 * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
	 * @fires Connection#connect
	 * @fires Connection#close
	 * @fires Connection#error
	 * @fires Connection#timeout
	 * @fires Connection#parseError
	 * @return {Connection} A cursor instance
	 */
	var Connection = function(options) {
	  // Add event listener
	  EventEmitter.call(this);
	  // Set empty if no options passed
	  this.options = options || {};
	  // Identification information
	  this.id = _id++;
	  // Logger instance
	  this.logger = Logger('Connection', options);
	  // No bson parser passed in
	  if(!options.bson) throw new Error("must pass in valid bson parser");
	  // Get bson parser
	  this.bson = options.bson;
	  // Grouping tag used for debugging purposes
	  this.tag = options.tag;
	  // Message handler
	  this.messageHandler = options.messageHandler;

	  // Max BSON message size
	  this.maxBsonMessageSize = options.maxBsonMessageSize || (1024 * 1024 * 16 * 4);
	  // Debug information
	  if(this.logger.isDebug()) this.logger.debug(f('creating connection %s with options [%s]', this.id, JSON.stringify(debugOptions(debugFields, options))));

	  // Default options
	  this.port = options.port || 27017;
	  this.host = options.host || 'localhost';
	  this.keepAlive = typeof options.keepAlive == 'boolean' ? options.keepAlive : true;
	  this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;
	  this.noDelay = typeof options.noDelay == 'boolean' ? options.noDelay : true;
	  this.connectionTimeout = options.connectionTimeout || 0;
	  this.socketTimeout = options.socketTimeout || 0;

	  // If connection was destroyed
	  this.destroyed = false;

	  // Check if we have a domain socket
	  this.domainSocket = this.host.indexOf('\/') != -1;

	  // Serialize commands using function
	  this.singleBufferSerializtion = typeof options.singleBufferSerializtion == 'boolean' ? options.singleBufferSerializtion : true;
	  this.serializationFunction = this.singleBufferSerializtion ? 'toBinUnified' : 'toBin';

	  // SSL options
	  this.ca = options.ca || null;
	  this.cert = options.cert || null;
	  this.key = options.key || null;
	  this.passphrase = options.passphrase || null;
	  this.ssl = typeof options.ssl == 'boolean' ? options.ssl : false;
	  this.rejectUnauthorized = typeof options.rejectUnauthorized == 'boolean' ? options.rejectUnauthorized : true

	  // If ssl not enabled
	  if(!this.ssl) this.rejectUnauthorized = false;

	  // Response options
	  this.responseOptions = {
	    promoteLongs: typeof options.promoteLongs == 'boolean' ?  options.promoteLongs : true
	  }

	  // Flushing
	  this.flushing = false;
	  this.queue = [];

	  // Internal state
	  this.connection = null;
	  this.writeStream = null;
	}

	inherits(Connection, EventEmitter);

	//
	// Connection handlers
	var errorHandler = function(self) {
	  return function(err) {
	    // Debug information
	    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] errored out with [%s]', self.id, self.host, self.port, JSON.stringify(err)));
	    // Emit the error
	    if(self.listeners('error').length > 0) self.emit("error", MongoError.create(err), self);
	  }
	}

	var timeoutHandler = function(self) {
	  return function() {
	    // Debug information
	    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] timed out', self.id, self.host, self.port));
	    // Emit timeout error
	    self.emit("timeout"
	      , MongoError.create(f("connection %s to %s:%s timed out", self.id, self.host, self.port))
	      , self);
	  }
	}

	var closeHandler = function(self) {
	  return function(hadError) {
	    // Debug information
	    if(self.logger.isDebug()) self.logger.debug(f('connection %s with for [%s:%s] closed', self.id, self.host, self.port));
	    // Emit close event
	    if(!hadError) {
	      self.emit("close"
	        , MongoError.create(f("connection %s to %s:%s closed", self.id, self.host, self.port))
	        , self);
	    }
	  }
	}

	var dataHandler = function(self) {
	  return function(data) {
	    // Parse until we are done with the data
	    while(data.length > 0) {
	      // If we still have bytes to read on the current message
	      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {
	        // Calculate the amount of remaining bytes
	        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;
	        // Check if the current chunk contains the rest of the message
	        if(remainingBytesToRead > data.length) {
	          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)
	          data.copy(self.buffer, self.bytesRead);
	          // Adjust the number of bytes read so it point to the correct index in the buffer
	          self.bytesRead = self.bytesRead + data.length;

	          // Reset state of buffer
	          data = new Buffer(0);
	        } else {
	          // Copy the missing part of the data into our current buffer
	          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);
	          // Slice the overflow into a new buffer that we will then re-parse
	          data = data.slice(remainingBytesToRead);

	          // Emit current complete message
	          try {
	            var emitBuffer = self.buffer;
	            // Reset state of buffer
	            self.buffer = null;
	            self.sizeOfMessage = 0;
	            self.bytesRead = 0;
	            self.stubBuffer = null;
	            // Emit the buffer
	            self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);
	          } catch(err) {
	            var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	              sizeOfMessage:self.sizeOfMessage,
	              bytesRead:self.bytesRead,
	              stubBuffer:self.stubBuffer}};
	            // We got a parse Error fire it off then keep going
	            self.emit("parseError", errorObject, self);
	          }
	        }
	      } else {
	        // Stub buffer is kept in case we don't get enough bytes to determine the
	        // size of the message (< 4 bytes)
	        if(self.stubBuffer != null && self.stubBuffer.length > 0) {
	          // If we have enough bytes to determine the message size let's do it
	          if(self.stubBuffer.length + data.length > 4) {
	            // Prepad the data
	            var newData = new Buffer(self.stubBuffer.length + data.length);
	            self.stubBuffer.copy(newData, 0);
	            data.copy(newData, self.stubBuffer.length);
	            // Reassign for parsing
	            data = newData;

	            // Reset state of buffer
	            self.buffer = null;
	            self.sizeOfMessage = 0;
	            self.bytesRead = 0;
	            self.stubBuffer = null;

	          } else {

	            // Add the the bytes to the stub buffer
	            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);
	            // Copy existing stub buffer
	            self.stubBuffer.copy(newStubBuffer, 0);
	            // Copy missing part of the data
	            data.copy(newStubBuffer, self.stubBuffer.length);
	            // Exit parsing loop
	            data = new Buffer(0);
	          }
	        } else {
	          if(data.length > 4) {
	            // Retrieve the message size
	            // var sizeOfMessage = data.readUInt32LE(0);
	            var sizeOfMessage = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
	            // If we have a negative sizeOfMessage emit error and return
	            if(sizeOfMessage < 0 || sizeOfMessage > self.maxBsonMessageSize) {
	              var errorObject = {err:"socketHandler", trace:'', bin:self.buffer, parseState:{
	                sizeOfMessage: sizeOfMessage,
	                bytesRead: self.bytesRead,
	                stubBuffer: self.stubBuffer}};
	              // We got a parse Error fire it off then keep going
	              self.emit("parseError", errorObject, self);
	              return;
	            }

	            // Ensure that the size of message is larger than 0 and less than the max allowed
	            if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage > data.length) {
	              self.buffer = new Buffer(sizeOfMessage);
	              // Copy all the data into the buffer
	              data.copy(self.buffer, 0);
	              // Update bytes read
	              self.bytesRead = data.length;
	              // Update sizeOfMessage
	              self.sizeOfMessage = sizeOfMessage;
	              // Ensure stub buffer is null
	              self.stubBuffer = null;
	              // Exit parsing loop
	              data = new Buffer(0);

	            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage == data.length) {
	              try {
	                var emitBuffer = data;
	                // Reset state of buffer
	                self.buffer = null;
	                self.sizeOfMessage = 0;
	                self.bytesRead = 0;
	                self.stubBuffer = null;
	                // Exit parsing loop
	                data = new Buffer(0);
	                // Emit the message
	                self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);
	              } catch (err) {
	                var errorObject = {err:"socketHandler", trace:err, bin:self.buffer, parseState:{
	                  sizeOfMessage:self.sizeOfMessage,
	                  bytesRead:self.bytesRead,
	                  stubBuffer:self.stubBuffer}};
	                // We got a parse Error fire it off then keep going
	                self.emit("parseError", errorObject, self);
	              }
	            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonMessageSize) {
	              var errorObject = {err:"socketHandler", trace:null, bin:data, parseState:{
	                sizeOfMessage:sizeOfMessage,
	                bytesRead:0,
	                buffer:null,
	                stubBuffer:null}};
	              // We got a parse Error fire it off then keep going
	              self.emit("parseError", errorObject, self);

	              // Clear out the state of the parser
	              self.buffer = null;
	              self.sizeOfMessage = 0;
	              self.bytesRead = 0;
	              self.stubBuffer = null;
	              // Exit parsing loop
	              data = new Buffer(0);
	            } else {
	              var emitBuffer = data.slice(0, sizeOfMessage);
	              // Reset state of buffer
	              self.buffer = null;
	              self.sizeOfMessage = 0;
	              self.bytesRead = 0;
	              self.stubBuffer = null;
	              // Copy rest of message
	              data = data.slice(sizeOfMessage);
	              // Emit the message
	              self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);
	            }
	          } else {
	            // Create a buffer that contains the space for the non-complete message
	            self.stubBuffer = new Buffer(data.length)
	            // Copy the data to the stub buffer
	            data.copy(self.stubBuffer, 0);
	            // Exit parsing loop
	            data = new Buffer(0);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Connect
	 * @method
	 */
	Connection.prototype.connect = function(_options) {
	  var self = this;
	  _options = _options || {};
	  // Check if we are overriding the promoteLongs
	  if(typeof _options.promoteLongs == 'boolean') {
	    self.responseOptions.promoteLongs = _options.promoteLongs;
	  }

	  // Create new connection instance
	  self.connection = self.domainSocket
	    ? net.createConnection(self.host)
	    : net.createConnection(self.port, self.host);

	  // Set the options for the connection
	  self.connection.setKeepAlive(self.keepAlive, self.keepAliveInitialDelay);
	  self.connection.setTimeout(self.connectionTimeout);
	  self.connection.setNoDelay(self.noDelay);

	  // If we have ssl enabled
	  if(self.ssl) {
	    var sslOptions = {
	        socket: self.connection
	      , rejectUnauthorized: self.rejectUnauthorized
	    }

	    if(self.ca) sslOptions.ca = self.ca;
	    if(self.cert) sslOptions.cert = self.cert;
	    if(self.key) sslOptions.key = self.key;
	    if(self.passphrase) sslOptions.passphrase = self.passphrase;

	    // Attempt SSL connection
	    self.connection = tls.connect(self.port, self.host, sslOptions, function() {
	      // Error on auth or skip
	      if(self.connection.authorizationError && self.rejectUnauthorized) {
	        return self.emit("error", self.connection.authorizationError, self, {ssl:true});
	      }

	      // Set socket timeout instead of connection timeout
	      self.connection.setTimeout(self.socketTimeout);
	      // We are done emit connect
	      self.emit('connect', self);
	    });
	    self.connection.setTimeout(self.connectionTimeout);
	  } else {
	    self.connection.on('connect', function() {
	      // Set socket timeout instead of connection timeout
	      self.connection.setTimeout(self.socketTimeout);
	      // Emit connect event
	      self.emit('connect', self);
	    });
	  }

	  // Add handlers for events
	  self.connection.once('error', errorHandler(self));
	  self.connection.once('timeout', timeoutHandler(self));
	  self.connection.once('close', closeHandler(self));
	  self.connection.on('data', dataHandler(self));
	}

	/**
	 * Destroy connection
	 * @method
	 */
	Connection.prototype.destroy = function() {
	  if(this.connection) this.connection.destroy();
	  this.destroyed = true;
	}

	/**
	 * Write to connection
	 * @method
	 * @param {Command} command Command to write out need to implement toBin and toBinUnified
	 */
	Connection.prototype.write = function(buffer) {
	  // Debug log
	  if(this.logger.isDebug()) this.logger.debug(f('writing buffer [%s] to %s:%s', buffer.toString('hex'), this.host, this.port));
	  // Write out the command
	  if(!Array.isArray(buffer)) return this.connection.write(buffer, 'binary');
	  // Iterate over all buffers and write them in order to the socket
	  for(var i = 0; i < buffer.length; i++) this.connection.write(buffer[i], 'binary');
	}

	/**
	 * Return id of connection as a string
	 * @method
	 * @return {string}
	 */
	Connection.prototype.toString = function() {
	  return "" + this.id;
	}

	/**
	 * Return json object of connection
	 * @method
	 * @return {object}
	 */
	Connection.prototype.toJSON = function() {
	  return {id: this.id, host: this.host, port: this.port};
	}

	/**
	 * Is the connection connected
	 * @method
	 * @return {boolean}
	 */
	Connection.prototype.isConnected = function() {
	  if(this.destroyed) return false;
	  return !this.connection.destroyed && this.connection.writable;
	}

	/**
	 * A server connect event, used to verify that the connection is up and running
	 *
	 * @event Connection#connect
	 * @type {Connection}
	 */

	/**
	 * The server connection closed, all pool connections closed
	 *
	 * @event Connection#close
	 * @type {Connection}
	 */

	/**
	 * The server connection caused an error, all pool connections closed
	 *
	 * @event Connection#error
	 * @type {Connection}
	 */

	/**
	 * The server connection timed out, all pool connections closed
	 *
	 * @event Connection#timeout
	 * @type {Connection}
	 */

	/**
	 * The driver experienced an invalid message, all pool connections closed
	 *
	 * @event Connection#parseError
	 * @type {Connection}
	 */

	module.exports = Connection;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	var f = __webpack_require__(10).format
	  , Long = __webpack_require__(175).Long
	  , setProperty = __webpack_require__(170).setProperty
	  , getProperty = __webpack_require__(170).getProperty
	  , getSingleProperty = __webpack_require__(170).getSingleProperty;

	// Incrementing request id
	var _requestId = 0;

	// Wire command operation ids
	var OP_QUERY = 2004;
	var OP_GETMORE = 2005;
	var OP_KILL_CURSORS = 2007;

	// Query flags
	var OPTS_NONE = 0;
	var OPTS_TAILABLE_CURSOR = 2;
	var OPTS_SLAVE = 4;
	var OPTS_OPLOG_REPLAY = 8;
	var OPTS_NO_CURSOR_TIMEOUT = 16;
	var OPTS_AWAIT_DATA = 32;
	var OPTS_EXHAUST = 64;
	var OPTS_PARTIAL = 128;

	// Response flags
	var CURSOR_NOT_FOUND = 0;
	var QUERY_FAILURE = 2;
	var SHARD_CONFIG_STALE = 4;
	var AWAIT_CAPABLE = 8;

	/**************************************************************
	 * QUERY
	 **************************************************************/
	var Query = function(bson, ns, query, options) {
	  var self = this;
	  // Basic options needed to be passed in
	  if(ns == null) throw new Error("ns must be specified for query");
	  if(query == null) throw new Error("query must be specified for query");

	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~ns.indexOf("\x00")) {
	    throw new Error("namespace cannot contain a null character");
	  }

	  // Basic options
	  this.bson = bson;
	  this.ns = ns;
	  this.query = query;

	  // Ensure empty options
	  this.options = options || {};

	  // Additional options
	  this.numberToSkip = options.numberToSkip || 0;
	  this.numberToReturn = options.numberToReturn || 0;
	  this.returnFieldSelector = options.returnFieldSelector || null;
	  this.requestId = _requestId++;

	  // Serialization option
	  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;
	  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;
	  this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;
	  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : true;
	  this.batchSize = self.numberToReturn;

	  // Flags
	  this.tailable = false;
	  this.slaveOk = false;
	  this.oplogReply = false;
	  this.noCursorTimeout = false;
	  this.awaitData = false;
	  this.exhaust = false;
	  this.partial = false;
	}

	//
	// Assign a new request Id
	Query.prototype.incRequestId = function() {
	  this.requestId = _requestId++;
	}

	//
	// Assign a new request Id
	Query.nextRequestId = function() {
	  return _requestId + 1;
	}

	//
	// Uses a single allocated buffer for the process, avoiding multiple memory allocations
	Query.prototype.toBin = function() {
	  var self = this;
	  var buffers = [];
	  var projection = null;

	  // Set up the flags
	  var flags = 0;
	  if(this.tailable) flags |= OPTS_TAILABLE_CURSOR;
	  if(this.slaveOk) flags |= OPTS_SLAVE;
	  if(this.oplogReply) flags |= OPTS_OPLOG_REPLAY;
	  if(this.noCursorTimeout) flags |= OPTS_NO_CURSOR_TIMEOUT;
	  if(this.awaitData) flags |= OPTS_AWAIT_DATA;
	  if(this.exhaust) flags |= OPTS_EXHAUST;
	  if(this.partial) flags |= OPTS_PARTIAL;

	  // If batchSize is different to self.numberToReturn
	  if(self.batchSize != self.numberToReturn) self.numberToReturn = self.batchSize;

	  // Allocate write protocol header buffer
	  var header = new Buffer(
	    4 * 4 // Header
	    + 4   // Flags
	    + Buffer.byteLength(self.ns) + 1 // namespace
	    + 4 // numberToSkip
	    + 4 // numberToReturn
	  );

	  // Add header to buffers
	  buffers.push(header);

	  // Serialize the query
	  var query = self.bson.serialize(this.query
	    , this.checkKeys
	    , true
	    , this.serializeFunctions
	    , 0, this.ignoreUndefined);

	  // Add query document
	  buffers.push(query);

	  if(self.returnFieldSelector && Object.keys(self.returnFieldSelector).length > 0) {
	    // Serialize the projection document
	    projection = self.bson.serialize(this.returnFieldSelector, this.checkKeys, true, this.serializeFunctions, this.ignoreUndefined);
	    // Add projection document
	    buffers.push(projection);
	  }

	  // Total message size
	  var totalLength = header.length + query.length + (projection ? projection.length : 0);

	  // Set up the index
	  var index = 4;

	  // Write total document length
	  header[3] = (totalLength >> 24) & 0xff;
	  header[2] = (totalLength >> 16) & 0xff;
	  header[1] = (totalLength >> 8) & 0xff;
	  header[0] = (totalLength) & 0xff;

	  // Write header information requestId
	  header[index + 3] = (this.requestId >> 24) & 0xff;
	  header[index + 2] = (this.requestId >> 16) & 0xff;
	  header[index + 1] = (this.requestId >> 8) & 0xff;
	  header[index] = (this.requestId) & 0xff;
	  index = index + 4;

	  // Write header information responseTo
	  header[index + 3] = (0 >> 24) & 0xff;
	  header[index + 2] = (0 >> 16) & 0xff;
	  header[index + 1] = (0 >> 8) & 0xff;
	  header[index] = (0) & 0xff;
	  index = index + 4;

	  // Write header information OP_QUERY
	  header[index + 3] = (OP_QUERY >> 24) & 0xff;
	  header[index + 2] = (OP_QUERY >> 16) & 0xff;
	  header[index + 1] = (OP_QUERY >> 8) & 0xff;
	  header[index] = (OP_QUERY) & 0xff;
	  index = index + 4;

	  // Write header information flags
	  header[index + 3] = (flags >> 24) & 0xff;
	  header[index + 2] = (flags >> 16) & 0xff;
	  header[index + 1] = (flags >> 8) & 0xff;
	  header[index] = (flags) & 0xff;
	  index = index + 4;

	  // Write collection name
	  index = index + header.write(this.ns, index, 'utf8') + 1;
	  header[index - 1] = 0;

	  // Write header information flags numberToSkip
	  header[index + 3] = (this.numberToSkip >> 24) & 0xff;
	  header[index + 2] = (this.numberToSkip >> 16) & 0xff;
	  header[index + 1] = (this.numberToSkip >> 8) & 0xff;
	  header[index] = (this.numberToSkip) & 0xff;
	  index = index + 4;

	  // Write header information flags numberToReturn
	  header[index + 3] = (this.numberToReturn >> 24) & 0xff;
	  header[index + 2] = (this.numberToReturn >> 16) & 0xff;
	  header[index + 1] = (this.numberToReturn >> 8) & 0xff;
	  header[index] = (this.numberToReturn) & 0xff;
	  index = index + 4;

	  // Return the buffers
	  return buffers;
	}

	Query.getRequestId = function() {
	  return ++_requestId;
	}

	/**************************************************************
	 * GETMORE
	 **************************************************************/
	var GetMore = function(bson, ns, cursorId, opts) {
	  opts = opts || {};
	  this.numberToReturn = opts.numberToReturn || 0;
	  this.requestId = _requestId++;
	  this.bson = bson;
	  this.ns = ns;
	  this.cursorId = cursorId;
	}

	//
	// Uses a single allocated buffer for the process, avoiding multiple memory allocations
	GetMore.prototype.toBin = function() {
	  var length = 4 + Buffer.byteLength(this.ns) + 1 + 4 + 8 + (4 * 4);
	  // Create command buffer
	  var index = 0;
	  // Allocate buffer
	  var _buffer = new Buffer(length);

	  // Write header information
	  // index = write32bit(index, _buffer, length);
	  _buffer[index + 3] = (length >> 24) & 0xff;
	  _buffer[index + 2] = (length >> 16) & 0xff;
	  _buffer[index + 1] = (length >> 8) & 0xff;
	  _buffer[index] = (length) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, requestId);
	  _buffer[index + 3] = (this.requestId >> 24) & 0xff;
	  _buffer[index + 2] = (this.requestId >> 16) & 0xff;
	  _buffer[index + 1] = (this.requestId >> 8) & 0xff;
	  _buffer[index] = (this.requestId) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, 0);
	  _buffer[index + 3] = (0 >> 24) & 0xff;
	  _buffer[index + 2] = (0 >> 16) & 0xff;
	  _buffer[index + 1] = (0 >> 8) & 0xff;
	  _buffer[index] = (0) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, OP_GETMORE);
	  _buffer[index + 3] = (OP_GETMORE >> 24) & 0xff;
	  _buffer[index + 2] = (OP_GETMORE >> 16) & 0xff;
	  _buffer[index + 1] = (OP_GETMORE >> 8) & 0xff;
	  _buffer[index] = (OP_GETMORE) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, 0);
	  _buffer[index + 3] = (0 >> 24) & 0xff;
	  _buffer[index + 2] = (0 >> 16) & 0xff;
	  _buffer[index + 1] = (0 >> 8) & 0xff;
	  _buffer[index] = (0) & 0xff;
	  index = index + 4;

	  // Write collection name
	  index = index + _buffer.write(this.ns, index, 'utf8') + 1;
	  _buffer[index - 1] = 0;

	  // Write batch size
	  // index = write32bit(index, _buffer, numberToReturn);
	  _buffer[index + 3] = (this.numberToReturn >> 24) & 0xff;
	  _buffer[index + 2] = (this.numberToReturn >> 16) & 0xff;
	  _buffer[index + 1] = (this.numberToReturn >> 8) & 0xff;
	  _buffer[index] = (this.numberToReturn) & 0xff;
	  index = index + 4;

	  // Write cursor id
	  // index = write32bit(index, _buffer, cursorId.getLowBits());
	  _buffer[index + 3] = (this.cursorId.getLowBits() >> 24) & 0xff;
	  _buffer[index + 2] = (this.cursorId.getLowBits() >> 16) & 0xff;
	  _buffer[index + 1] = (this.cursorId.getLowBits() >> 8) & 0xff;
	  _buffer[index] = (this.cursorId.getLowBits()) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, cursorId.getHighBits());
	  _buffer[index + 3] = (this.cursorId.getHighBits() >> 24) & 0xff;
	  _buffer[index + 2] = (this.cursorId.getHighBits() >> 16) & 0xff;
	  _buffer[index + 1] = (this.cursorId.getHighBits() >> 8) & 0xff;
	  _buffer[index] = (this.cursorId.getHighBits()) & 0xff;
	  index = index + 4;

	  // Return buffer
	  return _buffer;
	}

	/**************************************************************
	 * KILLCURSOR
	 **************************************************************/
	var KillCursor = function(bson, cursorIds) {
	  this.requestId = _requestId++;
	  this.cursorIds = cursorIds;
	}

	//
	// Uses a single allocated buffer for the process, avoiding multiple memory allocations
	KillCursor.prototype.toBin = function() {
	  var length = 4 + 4 + (4 * 4) + (this.cursorIds.length * 8);

	  // Create command buffer
	  var index = 0;
	  var _buffer = new Buffer(length);

	  // Write header information
	  // index = write32bit(index, _buffer, length);
	  _buffer[index + 3] = (length >> 24) & 0xff;
	  _buffer[index + 2] = (length >> 16) & 0xff;
	  _buffer[index + 1] = (length >> 8) & 0xff;
	  _buffer[index] = (length) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, requestId);
	  _buffer[index + 3] = (this.requestId >> 24) & 0xff;
	  _buffer[index + 2] = (this.requestId >> 16) & 0xff;
	  _buffer[index + 1] = (this.requestId >> 8) & 0xff;
	  _buffer[index] = (this.requestId) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, 0);
	  _buffer[index + 3] = (0 >> 24) & 0xff;
	  _buffer[index + 2] = (0 >> 16) & 0xff;
	  _buffer[index + 1] = (0 >> 8) & 0xff;
	  _buffer[index] = (0) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, OP_KILL_CURSORS);
	  _buffer[index + 3] = (OP_KILL_CURSORS >> 24) & 0xff;
	  _buffer[index + 2] = (OP_KILL_CURSORS >> 16) & 0xff;
	  _buffer[index + 1] = (OP_KILL_CURSORS >> 8) & 0xff;
	  _buffer[index] = (OP_KILL_CURSORS) & 0xff;
	  index = index + 4;

	  // index = write32bit(index, _buffer, 0);
	  _buffer[index + 3] = (0 >> 24) & 0xff;
	  _buffer[index + 2] = (0 >> 16) & 0xff;
	  _buffer[index + 1] = (0 >> 8) & 0xff;
	  _buffer[index] = (0) & 0xff;
	  index = index + 4;

	  // Write batch size
	  // index = write32bit(index, _buffer, this.cursorIds.length);
	  _buffer[index + 3] = (this.cursorIds.length >> 24) & 0xff;
	  _buffer[index + 2] = (this.cursorIds.length >> 16) & 0xff;
	  _buffer[index + 1] = (this.cursorIds.length >> 8) & 0xff;
	  _buffer[index] = (this.cursorIds.length) & 0xff;
	  index = index + 4;

	  // Write all the cursor ids into the array
	  for(var i = 0; i < this.cursorIds.length; i++) {
	    // Write cursor id
	    // index = write32bit(index, _buffer, cursorIds[i].getLowBits());
	    _buffer[index + 3] = (this.cursorIds[i].getLowBits() >> 24) & 0xff;
	    _buffer[index + 2] = (this.cursorIds[i].getLowBits() >> 16) & 0xff;
	    _buffer[index + 1] = (this.cursorIds[i].getLowBits() >> 8) & 0xff;
	    _buffer[index] = (this.cursorIds[i].getLowBits()) & 0xff;
	    index = index + 4;

	    // index = write32bit(index, _buffer, cursorIds[i].getHighBits());
	    _buffer[index + 3] = (this.cursorIds[i].getHighBits() >> 24) & 0xff;
	    _buffer[index + 2] = (this.cursorIds[i].getHighBits() >> 16) & 0xff;
	    _buffer[index + 1] = (this.cursorIds[i].getHighBits() >> 8) & 0xff;
	    _buffer[index] = (this.cursorIds[i].getHighBits()) & 0xff;
	    index = index + 4;
	  }

	  // Return buffer
	  return _buffer;
	}

	var Response = function(bson, data, opts) {
	  opts = opts || {promoteLongs: true};
	  this.parsed = false;

	  //
	  // Parse Header
	  //
	  this.index = 0;
	  this.raw = data;
	  this.data = data;
	  this.bson = bson;
	  this.opts = opts;

	  // Read the message length
	  this.length = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;

	  // Fetch the request id for this reply
	  this.requestId = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;

	  // Fetch the id of the request that triggered the response
	  this.responseTo = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;

	  // Skip op-code field
	  this.index = this.index + 4;

	  // Unpack flags
	  this.responseFlags = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;

	  // Unpack the cursor
	  var lowBits = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;
	  var highBits = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;
	  // Create long object
	  this.cursorId = new Long(lowBits, highBits);

	  // Unpack the starting from
	  this.startingFrom = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;

	  // Unpack the number of objects returned
	  this.numberReturned = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;
	  this.index = this.index + 4;

	  // Preallocate document array
	  this.documents = new Array(this.numberReturned);

	  // Flag values
	  this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) != 0;
	  this.queryFailure = (this.responseFlags & QUERY_FAILURE) != 0;
	  this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) != 0;
	  this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) != 0;
	  this.promoteLongs = typeof opts.promoteLongs == 'boolean' ? opts.promoteLongs : true;
	}

	Response.prototype.isParsed = function() {
	  return this.parsed;
	}

	// Validation buffers
	var firstBatch = new Buffer('firstBatch', 'utf8');
	var nextBatch = new Buffer('nextBatch', 'utf8');
	var cursorId = new Buffer('id', 'utf8').toString('hex');

	var documentBuffers = {
	  firstBatch: firstBatch.toString('hex'),
	  nextBatch: nextBatch.toString('hex')
	};

	Response.prototype.parse = function(options) {
	  // Don't parse again if not needed
	  if(this.parsed) return;
	  options = options || {};

	  // Allow the return of raw documents instead of parsing
	  var raw = options.raw || false;
	  var documentsReturnedIn = options.documentsReturnedIn || null;

	  //
	  // Single document and documentsReturnedIn set
	  //
	  if(this.numberReturned == 1 && documentsReturnedIn != null && raw) {
	    // Calculate the bson size
	    var bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;
	    // Slice out the buffer containing the command result document
	    var document = this.data.slice(this.index, this.index + bsonSize);
	    // Set up field we wish to keep as raw
	    var fieldsAsRaw = {}
	    fieldsAsRaw[documentsReturnedIn] = true;
	    // Set up the options
	    var _options = {promoteLongs: this.opts.promoteLongs, fieldsAsRaw: fieldsAsRaw};

	    // Deserialize but keep the array of documents in non-parsed form
	    var doc = this.bson.deserialize(document, _options);

	    // Get the documents
	    this.documents = doc.cursor[documentsReturnedIn];
	    this.numberReturned = this.documents.length;
	    // Ensure we have a Long valie cursor id
	    this.cursorId = typeof doc.cursor.id == 'number'
	      ? Long.fromNumber(doc.cursor.id)
	      : doc.cursor.id;

	    // Adjust the index
	    this.index = this.index + bsonSize;

	    // Set as parsed
	    this.parsed = true
	    return;
	  }

	  //
	  // Parse Body
	  //
	  for(var i = 0; i < this.numberReturned; i++) {
	    var bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;
	    // Parse options
	    var _options = {promoteLongs: this.opts.promoteLongs};

	    // If we have raw results specified slice the return document
	    if(raw) {
	      this.documents[i] = this.data.slice(this.index, this.index + bsonSize);
	    } else {
	      this.documents[i] = this.bson.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);
	    }

	    // Adjust the index
	    this.index = this.index + bsonSize;
	  }

	  // Set parsed
	  this.parsed = true;
	}

	module.exports = {
	    Query: Query
	  , GetMore: GetMore
	  , Response: Response
	  , KillCursor: KillCursor
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// "use strict"

	var writeIEEE754 = __webpack_require__(176).writeIEEE754,
		readIEEE754 = __webpack_require__(176).readIEEE754,
		Long = __webpack_require__(177).Long,
	  Double = __webpack_require__(178).Double,
	  Timestamp = __webpack_require__(179).Timestamp,
	  ObjectID = __webpack_require__(180).ObjectID,
	  BSONRegExp = __webpack_require__(182).BSONRegExp,
	  Symbol = __webpack_require__(183).Symbol,
	  Code = __webpack_require__(184).Code,
	  MinKey = __webpack_require__(185).MinKey,
	  MaxKey = __webpack_require__(186).MaxKey,
	  DBRef = __webpack_require__(187).DBRef,
	  Binary = __webpack_require__(188).Binary;

	// Parts of the parser
	var deserialize = __webpack_require__(189),
		serializer = __webpack_require__(190),
		calculateObjectSize = __webpack_require__(191);

	/**
	 * @ignore
	 * @api private
	 */
	// Max Size
	var MAXSIZE = (1024*1024*17);
	// Max Document Buffer size
	var buffer = new Buffer(MAXSIZE);

	var BSON = function() {
	}

	/**
	 * Serialize a Javascript object.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Buffer} returns the Buffer object containing the serialized object.
	 * @api public
	 */
	BSON.prototype.serialize = function serialize(object, checkKeys, asBuffer, serializeFunctions, index, ignoreUndefined) {
		// Attempt to serialize
		var serializationIndex = serializer(buffer, object, checkKeys, index || 0, 0, serializeFunctions, ignoreUndefined);
		// Create the final buffer
		var finishedBuffer = new Buffer(serializationIndex);
		// Copy into the finished buffer
		buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);
		// Return the buffer
		return finishedBuffer;
	}

	/**
	 * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.
	 *
	 * @param {Object} object the Javascript object to serialize.
	 * @param {Boolean} checkKeys the serializer will check if keys are valid.
	 * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.
	 * @param {Number} index the index in the buffer where we wish to start serializing into.
	 * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.
	 * @return {Number} returns the new write index in the Buffer.
	 * @api public
	 */
	BSON.prototype.serializeWithBufferAndIndex = function(object, checkKeys, finalBuffer, startIndex, serializeFunctions, ignoreUndefined) {
		// Attempt to serialize
		var serializationIndex = serializer(buffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined);
		buffer.copy(finalBuffer, startIndex, 0, serializationIndex);
		// Return the index
		return startIndex + serializationIndex - 1;
	}

	/**
	 * Deserialize data as BSON.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 *
	 * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @param {Boolean} [isArray] ignore used for recursive parsing.
	 * @return {Object} returns the deserialized Javascript Object.
	 * @api public
	 */
	BSON.prototype.deserialize = function(data, options) {
	  return deserialize(data, options);
	}

	/**
	 * Calculate the bson size for a passed in Javascript object.
	 *
	 * @param {Object} object the Javascript object to calculate the BSON byte size for.
	 * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.
	 * @return {Number} returns the number of bytes the BSON object will take up.
	 * @api public
	 */
	BSON.prototype.calculateObjectSize = function(object, serializeFunctions, ignoreUndefined) {
	  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);
	}

	/**
	 * Deserialize stream data as BSON documents.
	 *
	 * Options
	 *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.
	 *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.
	 *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.
	 *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits
	 *
	 * @param {Buffer} data the buffer containing the serialized set of BSON documents.
	 * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.
	 * @param {Number} numberOfDocuments number of documents to deserialize.
	 * @param {Array} documents an array where to store the deserialized documents.
	 * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.
	 * @param {Object} [options] additional options used for the deserialization.
	 * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.
	 * @api public
	 */
	BSON.prototype.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
	  // if(numberOfDocuments !== documents.length) throw new Error("Number of expected results back is less than the number of documents");
	  options = options != null ? options : {};
	  var index = startIndex;
	  // Loop over all documents
	  for(var i = 0; i < numberOfDocuments; i++) {
	    // Find size of the document
	    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;
	    // Update options with index
	    options['index'] = index;
	    // Parse the document at this point
	    documents[docStartIndex + i] = this.deserialize(data, options);
	    // Adjust index by the document size
	    index = index + size;
	  }

	  // Return object containing end index of parsing and list of documents
	  return index;
	}

	/**
	 * @ignore
	 * @api private
	 */
	// BSON MAX VALUES
	BSON.BSON_INT32_MAX = 0x7FFFFFFF;
	BSON.BSON_INT32_MIN = -0x80000000;

	BSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;
	BSON.BSON_INT64_MIN = -Math.pow(2, 63);

	// JS MAX PRECISE VALUES
	BSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.
	BSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.

	// Internal long versions
	var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.
	var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.

	/**
	 * Number BSON Type
	 *
	 * @classconstant BSON_DATA_NUMBER
	 **/
	BSON.BSON_DATA_NUMBER = 1;
	/**
	 * String BSON Type
	 *
	 * @classconstant BSON_DATA_STRING
	 **/
	BSON.BSON_DATA_STRING = 2;
	/**
	 * Object BSON Type
	 *
	 * @classconstant BSON_DATA_OBJECT
	 **/
	BSON.BSON_DATA_OBJECT = 3;
	/**
	 * Array BSON Type
	 *
	 * @classconstant BSON_DATA_ARRAY
	 **/
	BSON.BSON_DATA_ARRAY = 4;
	/**
	 * Binary BSON Type
	 *
	 * @classconstant BSON_DATA_BINARY
	 **/
	BSON.BSON_DATA_BINARY = 5;
	/**
	 * ObjectID BSON Type
	 *
	 * @classconstant BSON_DATA_OID
	 **/
	BSON.BSON_DATA_OID = 7;
	/**
	 * Boolean BSON Type
	 *
	 * @classconstant BSON_DATA_BOOLEAN
	 **/
	BSON.BSON_DATA_BOOLEAN = 8;
	/**
	 * Date BSON Type
	 *
	 * @classconstant BSON_DATA_DATE
	 **/
	BSON.BSON_DATA_DATE = 9;
	/**
	 * null BSON Type
	 *
	 * @classconstant BSON_DATA_NULL
	 **/
	BSON.BSON_DATA_NULL = 10;
	/**
	 * RegExp BSON Type
	 *
	 * @classconstant BSON_DATA_REGEXP
	 **/
	BSON.BSON_DATA_REGEXP = 11;
	/**
	 * Code BSON Type
	 *
	 * @classconstant BSON_DATA_CODE
	 **/
	BSON.BSON_DATA_CODE = 13;
	/**
	 * Symbol BSON Type
	 *
	 * @classconstant BSON_DATA_SYMBOL
	 **/
	BSON.BSON_DATA_SYMBOL = 14;
	/**
	 * Code with Scope BSON Type
	 *
	 * @classconstant BSON_DATA_CODE_W_SCOPE
	 **/
	BSON.BSON_DATA_CODE_W_SCOPE = 15;
	/**
	 * 32 bit Integer BSON Type
	 *
	 * @classconstant BSON_DATA_INT
	 **/
	BSON.BSON_DATA_INT = 16;
	/**
	 * Timestamp BSON Type
	 *
	 * @classconstant BSON_DATA_TIMESTAMP
	 **/
	BSON.BSON_DATA_TIMESTAMP = 17;
	/**
	 * Long BSON Type
	 *
	 * @classconstant BSON_DATA_LONG
	 **/
	BSON.BSON_DATA_LONG = 18;
	/**
	 * MinKey BSON Type
	 *
	 * @classconstant BSON_DATA_MIN_KEY
	 **/
	BSON.BSON_DATA_MIN_KEY = 0xff;
	/**
	 * MaxKey BSON Type
	 *
	 * @classconstant BSON_DATA_MAX_KEY
	 **/
	BSON.BSON_DATA_MAX_KEY = 0x7f;

	/**
	 * Binary Default Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
	 **/
	BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;
	/**
	 * Binary Function Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
	 **/
	BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;
	/**
	 * Binary Byte Array Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
	 **/
	BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * Binary UUID Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_UUID
	 **/
	BSON.BSON_BINARY_SUBTYPE_UUID = 3;
	/**
	 * Binary MD5 Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_MD5
	 **/
	BSON.BSON_BINARY_SUBTYPE_MD5 = 4;
	/**
	 * Binary User Defined Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
	 **/
	BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

	// Return BSON
	module.exports = BSON;
	module.exports.Code = Code;
	module.exports.Symbol = Symbol;
	module.exports.BSON = BSON;
	module.exports.DBRef = DBRef;
	module.exports.Binary = Binary;
	module.exports.ObjectID = ObjectID;
	module.exports.Long = Long;
	module.exports.Timestamp = Timestamp;
	module.exports.Double = Double;
	module.exports.MinKey = MinKey;
	module.exports.MaxKey = MaxKey;
	module.exports.BSONRegExp = BSONRegExp;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 176 */
/***/ function(module, exports) {

	// Copyright (c) 2008, Fair Oaks Labs, Inc.
	// All rights reserved.
	// 
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions are met:
	// 
	//  * Redistributions of source code must retain the above copyright notice,
	//    this list of conditions and the following disclaimer.
	// 
	//  * Redistributions in binary form must reproduce the above copyright notice,
	//    this list of conditions and the following disclaimer in the documentation
	//    and/or other materials provided with the distribution.
	// 
	//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors
	//    may be used to endorse or promote products derived from this software
	//    without specific prior written permission.
	// 
	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
	// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	// POSSIBILITY OF SUCH DAMAGE.
	//
	//
	// Modifications to writeIEEE754 to support negative zeroes made by Brian White

	var readIEEE754 = function(buffer, offset, endian, mLen, nBytes) {
	  var e, m,
	      bBE = (endian === 'big'),
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = bBE ? 0 : (nBytes - 1),
	      d = bBE ? 1 : -1,
	      s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};

	var writeIEEE754 = function(buffer, value, offset, endian, mLen, nBytes) {
	  var e, m, c,
	      bBE = (endian === 'big'),
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = bBE ? (nBytes-1) : 0,
	      d = bBE ? -1 : 1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e+eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

	  buffer[offset + i - d] |= s * 128;
	};

	exports.readIEEE754 = readIEEE754;
	exports.writeIEEE754 = writeIEEE754;

/***/ },
/* 177 */
/***/ function(module, exports) {

	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//
	// Copyright 2009 Google Inc. All Rights Reserved

	/**
	 * Defines a Long class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "Long". This
	 * implementation is derived from LongLib in GWT.
	 *
	 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	 * values as *signed* integers.  See the from* functions below for more
	 * convenient ways of constructing Longs.
	 *
	 * The internal representation of a Long is the two given signed, 32-bit values.
	 * We use 32-bit pieces because these are the size of integers on which
	 * Javascript performs bit-operations.  For operations like addition and
	 * multiplication, we split each number into 16-bit pieces, which can easily be
	 * multiplied within Javascript's floating-point representation without overflow
	 * or change in sign.
	 *
	 * In the algorithms below, we frequently reduce the negative case to the
	 * positive case by negating the input(s) and then post-processing the result.
	 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	 * a positive number, it overflows back into a negative).  Not handling this
	 * case would often result in infinite recursion.
	 *
	 * @class
	 * @param {number} low  the low (signed) 32 bits of the Long.
	 * @param {number} high the high (signed) 32 bits of the Long.
	 * @return {Long}
	 */
	function Long(low, high) {
	  if(!(this instanceof Long)) return new Long(low, high);
	  
	  this._bsontype = 'Long';
	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.low_ = low | 0;  // force into 32 signed bits.

	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.high_ = high | 0;  // force into 32 signed bits.
	};

	/**
	 * Return the int value.
	 *
	 * @method
	 * @return {number} the value, assuming it is a 32-bit integer.
	 */
	Long.prototype.toInt = function() {
	  return this.low_;
	};

	/**
	 * Return the Number value.
	 *
	 * @method
	 * @return {number} the closest floating-point representation to this value.
	 */
	Long.prototype.toNumber = function() {
	  return this.high_ * Long.TWO_PWR_32_DBL_ +
	         this.getLowBitsUnsigned();
	};

	/**
	 * Return the JSON value.
	 *
	 * @method
	 * @return {string} the JSON representation.
	 */
	Long.prototype.toJSON = function() {
	  return this.toString();
	}

	/**
	 * Return the String value.
	 *
	 * @method
	 * @param {number} [opt_radix] the radix in which the text should be written.
	 * @return {string} the textual representation of this value.
	 */
	Long.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (this.isZero()) {
	    return '0';
	  }

	  if (this.isNegative()) {
	    if (this.equals(Long.MIN_VALUE)) {
	      // We need to change the Long value before it can be negated, so we remove
	      // the bottom-most digit in this base and then recurse to do the rest.
	      var radixLong = Long.fromNumber(radix);
	      var div = this.div(radixLong);
	      var rem = div.multiply(radixLong).subtract(this);
	      return div.toString(radix) + rem.toInt().toString(radix);
	    } else {
	      return '-' + this.negate().toString(radix);
	    }
	  }

	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Long.fromNumber(Math.pow(radix, 6));

	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.div(radixToPower);
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	    var digits = intval.toString(radix);

	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};

	/**
	 * Return the high 32-bits value.
	 *
	 * @method
	 * @return {number} the high 32-bits as a signed value.
	 */
	Long.prototype.getHighBits = function() {
	  return this.high_;
	};

	/**
	 * Return the low 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as a signed value.
	 */
	Long.prototype.getLowBits = function() {
	  return this.low_;
	};

	/**
	 * Return the low unsigned 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as an unsigned value.
	 */
	Long.prototype.getLowBitsUnsigned = function() {
	  return (this.low_ >= 0) ?
	      this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;
	};

	/**
	 * Returns the number of bits needed to represent the absolute value of this Long.
	 *
	 * @method
	 * @return {number} Returns the number of bits needed to represent the absolute value of this Long.
	 */
	Long.prototype.getNumBitsAbs = function() {
	  if (this.isNegative()) {
	    if (this.equals(Long.MIN_VALUE)) {
	      return 64;
	    } else {
	      return this.negate().getNumBitsAbs();
	    }
	  } else {
	    var val = this.high_ != 0 ? this.high_ : this.low_;
	    for (var bit = 31; bit > 0; bit--) {
	      if ((val & (1 << bit)) != 0) {
	        break;
	      }
	    }
	    return this.high_ != 0 ? bit + 33 : bit + 1;
	  }
	};

	/**
	 * Return whether this value is zero.
	 *
	 * @method
	 * @return {boolean} whether this value is zero.
	 */
	Long.prototype.isZero = function() {
	  return this.high_ == 0 && this.low_ == 0;
	};

	/**
	 * Return whether this value is negative.
	 *
	 * @method
	 * @return {boolean} whether this value is negative.
	 */
	Long.prototype.isNegative = function() {
	  return this.high_ < 0;
	};

	/**
	 * Return whether this value is odd.
	 *
	 * @method
	 * @return {boolean} whether this value is odd.
	 */
	Long.prototype.isOdd = function() {
	  return (this.low_ & 1) == 1;
	};

	/**
	 * Return whether this Long equals the other
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long equals the other
	 */
	Long.prototype.equals = function(other) {
	  return (this.high_ == other.high_) && (this.low_ == other.low_);
	};

	/**
	 * Return whether this Long does not equal the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long does not equal the other.
	 */
	Long.prototype.notEquals = function(other) {
	  return (this.high_ != other.high_) || (this.low_ != other.low_);
	};

	/**
	 * Return whether this Long is less than the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is less than the other.
	 */
	Long.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};

	/**
	 * Return whether this Long is less than or equal to the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is less than or equal to the other.
	 */
	Long.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};

	/**
	 * Return whether this Long is greater than the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is greater than the other.
	 */
	Long.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};

	/**
	 * Return whether this Long is greater than or equal to the other.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} whether this Long is greater than or equal to the other.
	 */
	Long.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};

	/**
	 * Compares this Long with the given one.
	 *
	 * @method
	 * @param {Long} other Long to compare against.
	 * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
	 */
	Long.prototype.compare = function(other) {
	  if (this.equals(other)) {
	    return 0;
	  }

	  var thisNeg = this.isNegative();
	  var otherNeg = other.isNegative();
	  if (thisNeg && !otherNeg) {
	    return -1;
	  }
	  if (!thisNeg && otherNeg) {
	    return 1;
	  }

	  // at this point, the signs are the same, so subtraction will not overflow
	  if (this.subtract(other).isNegative()) {
	    return -1;
	  } else {
	    return 1;
	  }
	};

	/**
	 * The negation of this value.
	 *
	 * @method
	 * @return {Long} the negation of this value.
	 */
	Long.prototype.negate = function() {
	  if (this.equals(Long.MIN_VALUE)) {
	    return Long.MIN_VALUE;
	  } else {
	    return this.not().add(Long.ONE);
	  }
	};

	/**
	 * Returns the sum of this and the given Long.
	 *
	 * @method
	 * @param {Long} other Long to add to this one.
	 * @return {Long} the sum of this and the given Long.
	 */
	Long.prototype.add = function(other) {
	  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 + b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 + b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 + b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 + b48;
	  c48 &= 0xFFFF;
	  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns the difference of this and the given Long.
	 *
	 * @method
	 * @param {Long} other Long to subtract from this.
	 * @return {Long} the difference of this and the given Long.
	 */
	Long.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};

	/**
	 * Returns the product of this and the given Long.
	 *
	 * @method
	 * @param {Long} other Long to multiply with this.
	 * @return {Long} the product of this and the other.
	 */
	Long.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return Long.ZERO;
	  } else if (other.isZero()) {
	    return Long.ZERO;
	  }

	  if (this.equals(Long.MIN_VALUE)) {
	    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;
	  } else if (other.equals(Long.MIN_VALUE)) {
	    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }

	  // If both Longs are small, use float multiplication
	  if (this.lessThan(Long.TWO_PWR_24_) &&
	      other.lessThan(Long.TWO_PWR_24_)) {
	    return Long.fromNumber(this.toNumber() * other.toNumber());
	  }

	  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.
	  // We can skip products that would overflow.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 * b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 * b00;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c16 += a00 * b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 * b00;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a16 * b16;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a00 * b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	  c48 &= 0xFFFF;
	  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns this Long divided by the given one.
	 *
	 * @method
	 * @param {Long} other Long by which to divide.
	 * @return {Long} this Long divided by the given one.
	 */
	Long.prototype.div = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return Long.ZERO;
	  }

	  if (this.equals(Long.MIN_VALUE)) {
	    if (other.equals(Long.ONE) ||
	        other.equals(Long.NEG_ONE)) {
	      return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	    } else if (other.equals(Long.MIN_VALUE)) {
	      return Long.ONE;
	    } else {
	      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	      var halfThis = this.shiftRight(1);
	      var approx = halfThis.div(other).shiftLeft(1);
	      if (approx.equals(Long.ZERO)) {
	        return other.isNegative() ? Long.ONE : Long.NEG_ONE;
	      } else {
	        var rem = this.subtract(other.multiply(approx));
	        var result = approx.add(rem.div(other));
	        return result;
	      }
	    }
	  } else if (other.equals(Long.MIN_VALUE)) {
	    return Long.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().div(other.negate());
	    } else {
	      return this.negate().div(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.div(other.negate()).negate();
	  }

	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = Long.ZERO;
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = Long.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = Long.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }

	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = Long.ONE;
	    }

	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};

	/**
	 * Returns this Long modulo the given one.
	 *
	 * @method
	 * @param {Long} other Long by which to mod.
	 * @return {Long} this Long modulo the given one.
	 */
	Long.prototype.modulo = function(other) {
	  return this.subtract(this.div(other).multiply(other));
	};

	/**
	 * The bitwise-NOT of this value.
	 *
	 * @method
	 * @return {Long} the bitwise-NOT of this value.
	 */
	Long.prototype.not = function() {
	  return Long.fromBits(~this.low_, ~this.high_);
	};

	/**
	 * Returns the bitwise-AND of this Long and the given one.
	 *
	 * @method
	 * @param {Long} other the Long with which to AND.
	 * @return {Long} the bitwise-AND of this and the other.
	 */
	Long.prototype.and = function(other) {
	  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
	};

	/**
	 * Returns the bitwise-OR of this Long and the given one.
	 *
	 * @method
	 * @param {Long} other the Long with which to OR.
	 * @return {Long} the bitwise-OR of this and the other.
	 */
	Long.prototype.or = function(other) {
	  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
	};

	/**
	 * Returns the bitwise-XOR of this Long and the given one.
	 *
	 * @method
	 * @param {Long} other the Long with which to XOR.
	 * @return {Long} the bitwise-XOR of this and the other.
	 */
	Long.prototype.xor = function(other) {
	  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
	};

	/**
	 * Returns this Long with bits shifted to the left by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the left by the given amount.
	 */
	Long.prototype.shiftLeft = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var low = this.low_;
	    if (numBits < 32) {
	      var high = this.high_;
	      return Long.fromBits(
	                 low << numBits,
	                 (high << numBits) | (low >>> (32 - numBits)));
	    } else {
	      return Long.fromBits(0, low << (numBits - 32));
	    }
	  }
	};

	/**
	 * Returns this Long with bits shifted to the right by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the right by the given amount.
	 */
	Long.prototype.shiftRight = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Long.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >> numBits);
	    } else {
	      return Long.fromBits(
	                 high >> (numBits - 32),
	                 high >= 0 ? 0 : -1);
	    }
	  }
	};

	/**
	 * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.
	 */
	Long.prototype.shiftRightUnsigned = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Long.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >>> numBits);
	    } else if (numBits == 32) {
	      return Long.fromBits(high, 0);
	    } else {
	      return Long.fromBits(high >>> (numBits - 32), 0);
	    }
	  }
	};

	/**
	 * Returns a Long representing the given (32-bit) integer value.
	 *
	 * @method
	 * @param {number} value the 32-bit integer in question.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    var cachedObj = Long.INT_CACHE_[value];
	    if (cachedObj) {
	      return cachedObj;
	    }
	  }

	  var obj = new Long(value | 0, value < 0 ? -1 : 0);
	  if (-128 <= value && value < 128) {
	    Long.INT_CACHE_[value] = obj;
	  }
	  return obj;
	};

	/**
	 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	 *
	 * @method
	 * @param {number} value the number in question.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromNumber = function(value) {
	  if (isNaN(value) || !isFinite(value)) {
	    return Long.ZERO;
	  } else if (value <= -Long.TWO_PWR_63_DBL_) {
	    return Long.MIN_VALUE;
	  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {
	    return Long.MAX_VALUE;
	  } else if (value < 0) {
	    return Long.fromNumber(-value).negate();
	  } else {
	    return new Long(
	               (value % Long.TWO_PWR_32_DBL_) | 0,
	               (value / Long.TWO_PWR_32_DBL_) | 0);
	  }
	};

	/**
	 * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
	 *
	 * @method
	 * @param {number} lowBits the low 32-bits.
	 * @param {number} highBits the high 32-bits.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromBits = function(lowBits, highBits) {
	  return new Long(lowBits, highBits);
	};

	/**
	 * Returns a Long representation of the given string, written using the given radix.
	 *
	 * @method
	 * @param {string} str the textual representation of the Long.
	 * @param {number} opt_radix the radix in which the text is written.
	 * @return {Long} the corresponding Long value.
	 */
	Long.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }

	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (str.charAt(0) == '-') {
	    return Long.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character: ' + str);
	  }

	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Long.fromNumber(Math.pow(radix, 8));

	  var result = Long.ZERO;
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = Long.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(Long.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(Long.fromNumber(value));
	    }
	  }
	  return result;
	};

	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.


	/**
	 * A cache of the Long representations of small integer values.
	 * @type {Object}
	 * @ignore
	 */
	Long.INT_CACHE_ = {};

	// NOTE: the compiler should inline these constant values below and then remove
	// these variables, so there should be no runtime penalty for these.

	/**
	 * Number used repeated below in calculations.  This must appear before the
	 * first call to any from* function below.
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_16_DBL_ = 1 << 16;

	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_24_DBL_ = 1 << 24;

	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;

	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;

	/**
	 * @type {number}
	 * @ignore
	 */
	Long.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;

	/** @type {Long} */
	Long.ZERO = Long.fromInt(0);

	/** @type {Long} */
	Long.ONE = Long.fromInt(1);

	/** @type {Long} */
	Long.NEG_ONE = Long.fromInt(-1);

	/** @type {Long} */
	Long.MAX_VALUE =
	    Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);

	/** @type {Long} */
	Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);

	/**
	 * @type {Long}
	 * @ignore
	 */
	Long.TWO_PWR_24_ = Long.fromInt(1 << 24);

	/**
	 * Expose.
	 */
	module.exports = Long;
	module.exports.Long = Long;

/***/ },
/* 178 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON Double type.
	 *
	 * @class
	 * @param {number} value the number we want to represent as a double.
	 * @return {Double}
	 */
	function Double(value) {
	  if(!(this instanceof Double)) return new Double(value);
	  
	  this._bsontype = 'Double';
	  this.value = value;
	}

	/**
	 * Access the number value.
	 *
	 * @method
	 * @return {number} returns the wrapped double number.
	 */
	Double.prototype.valueOf = function() {
	  return this.value;
	};

	/**
	 * @ignore
	 */
	Double.prototype.toJSON = function() {
	  return this.value;
	}

	module.exports = Double;
	module.exports.Double = Double;

/***/ },
/* 179 */
/***/ function(module, exports) {

	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//
	// Copyright 2009 Google Inc. All Rights Reserved

	/**
	 * This type is for INTERNAL use in MongoDB only and should not be used in applications.
	 * The appropriate corresponding type is the JavaScript Date type.
	 * 
	 * Defines a Timestamp class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "Timestamp". This
	 * implementation is derived from TimestampLib in GWT.
	 *
	 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	 * values as *signed* integers.  See the from* functions below for more
	 * convenient ways of constructing Timestamps.
	 *
	 * The internal representation of a Timestamp is the two given signed, 32-bit values.
	 * We use 32-bit pieces because these are the size of integers on which
	 * Javascript performs bit-operations.  For operations like addition and
	 * multiplication, we split each number into 16-bit pieces, which can easily be
	 * multiplied within Javascript's floating-point representation without overflow
	 * or change in sign.
	 *
	 * In the algorithms below, we frequently reduce the negative case to the
	 * positive case by negating the input(s) and then post-processing the result.
	 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	 * a positive number, it overflows back into a negative).  Not handling this
	 * case would often result in infinite recursion.
	 *
	 * @class
	 * @param {number} low  the low (signed) 32 bits of the Timestamp.
	 * @param {number} high the high (signed) 32 bits of the Timestamp.
	 */
	function Timestamp(low, high) {
	  if(!(this instanceof Timestamp)) return new Timestamp(low, high);
	  this._bsontype = 'Timestamp';
	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.low_ = low | 0;  // force into 32 signed bits.

	  /**
	   * @type {number}
	   * @ignore
	   */
	  this.high_ = high | 0;  // force into 32 signed bits.
	};

	/**
	 * Return the int value.
	 *
	 * @return {number} the value, assuming it is a 32-bit integer.
	 */
	Timestamp.prototype.toInt = function() {
	  return this.low_;
	};

	/**
	 * Return the Number value.
	 *
	 * @method
	 * @return {number} the closest floating-point representation to this value.
	 */
	Timestamp.prototype.toNumber = function() {
	  return this.high_ * Timestamp.TWO_PWR_32_DBL_ +
	         this.getLowBitsUnsigned();
	};

	/**
	 * Return the JSON value.
	 *
	 * @method
	 * @return {string} the JSON representation.
	 */
	Timestamp.prototype.toJSON = function() {
	  return this.toString();
	}

	/**
	 * Return the String value.
	 *
	 * @method
	 * @param {number} [opt_radix] the radix in which the text should be written.
	 * @return {string} the textual representation of this value.
	 */
	Timestamp.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (this.isZero()) {
	    return '0';
	  }

	  if (this.isNegative()) {
	    if (this.equals(Timestamp.MIN_VALUE)) {
	      // We need to change the Timestamp value before it can be negated, so we remove
	      // the bottom-most digit in this base and then recurse to do the rest.
	      var radixTimestamp = Timestamp.fromNumber(radix);
	      var div = this.div(radixTimestamp);
	      var rem = div.multiply(radixTimestamp).subtract(this);
	      return div.toString(radix) + rem.toInt().toString(radix);
	    } else {
	      return '-' + this.negate().toString(radix);
	    }
	  }

	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));

	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.div(radixToPower);
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	    var digits = intval.toString(radix);

	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};

	/**
	 * Return the high 32-bits value.
	 *
	 * @method
	 * @return {number} the high 32-bits as a signed value.
	 */
	Timestamp.prototype.getHighBits = function() {
	  return this.high_;
	};

	/**
	 * Return the low 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as a signed value.
	 */
	Timestamp.prototype.getLowBits = function() {
	  return this.low_;
	};

	/**
	 * Return the low unsigned 32-bits value.
	 *
	 * @method
	 * @return {number} the low 32-bits as an unsigned value.
	 */
	Timestamp.prototype.getLowBitsUnsigned = function() {
	  return (this.low_ >= 0) ?
	      this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;
	};

	/**
	 * Returns the number of bits needed to represent the absolute value of this Timestamp.
	 *
	 * @method
	 * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.
	 */
	Timestamp.prototype.getNumBitsAbs = function() {
	  if (this.isNegative()) {
	    if (this.equals(Timestamp.MIN_VALUE)) {
	      return 64;
	    } else {
	      return this.negate().getNumBitsAbs();
	    }
	  } else {
	    var val = this.high_ != 0 ? this.high_ : this.low_;
	    for (var bit = 31; bit > 0; bit--) {
	      if ((val & (1 << bit)) != 0) {
	        break;
	      }
	    }
	    return this.high_ != 0 ? bit + 33 : bit + 1;
	  }
	};

	/**
	 * Return whether this value is zero.
	 *
	 * @method
	 * @return {boolean} whether this value is zero.
	 */
	Timestamp.prototype.isZero = function() {
	  return this.high_ == 0 && this.low_ == 0;
	};

	/**
	 * Return whether this value is negative.
	 *
	 * @method
	 * @return {boolean} whether this value is negative.
	 */
	Timestamp.prototype.isNegative = function() {
	  return this.high_ < 0;
	};

	/**
	 * Return whether this value is odd.
	 *
	 * @method
	 * @return {boolean} whether this value is odd.
	 */
	Timestamp.prototype.isOdd = function() {
	  return (this.low_ & 1) == 1;
	};

	/**
	 * Return whether this Timestamp equals the other
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp equals the other
	 */
	Timestamp.prototype.equals = function(other) {
	  return (this.high_ == other.high_) && (this.low_ == other.low_);
	};

	/**
	 * Return whether this Timestamp does not equal the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp does not equal the other.
	 */
	Timestamp.prototype.notEquals = function(other) {
	  return (this.high_ != other.high_) || (this.low_ != other.low_);
	};

	/**
	 * Return whether this Timestamp is less than the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is less than the other.
	 */
	Timestamp.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};

	/**
	 * Return whether this Timestamp is less than or equal to the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is less than or equal to the other.
	 */
	Timestamp.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};

	/**
	 * Return whether this Timestamp is greater than the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is greater than the other.
	 */
	Timestamp.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};

	/**
	 * Return whether this Timestamp is greater than or equal to the other.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} whether this Timestamp is greater than or equal to the other.
	 */
	Timestamp.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};

	/**
	 * Compares this Timestamp with the given one.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to compare against.
	 * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
	 */
	Timestamp.prototype.compare = function(other) {
	  if (this.equals(other)) {
	    return 0;
	  }

	  var thisNeg = this.isNegative();
	  var otherNeg = other.isNegative();
	  if (thisNeg && !otherNeg) {
	    return -1;
	  }
	  if (!thisNeg && otherNeg) {
	    return 1;
	  }

	  // at this point, the signs are the same, so subtraction will not overflow
	  if (this.subtract(other).isNegative()) {
	    return -1;
	  } else {
	    return 1;
	  }
	};

	/**
	 * The negation of this value.
	 *
	 * @method
	 * @return {Timestamp} the negation of this value.
	 */
	Timestamp.prototype.negate = function() {
	  if (this.equals(Timestamp.MIN_VALUE)) {
	    return Timestamp.MIN_VALUE;
	  } else {
	    return this.not().add(Timestamp.ONE);
	  }
	};

	/**
	 * Returns the sum of this and the given Timestamp.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to add to this one.
	 * @return {Timestamp} the sum of this and the given Timestamp.
	 */
	Timestamp.prototype.add = function(other) {
	  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 + b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 + b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 + b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 + b48;
	  c48 &= 0xFFFF;
	  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns the difference of this and the given Timestamp.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to subtract from this.
	 * @return {Timestamp} the difference of this and the given Timestamp.
	 */
	Timestamp.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};

	/**
	 * Returns the product of this and the given Timestamp.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp to multiply with this.
	 * @return {Timestamp} the product of this and the other.
	 */
	Timestamp.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return Timestamp.ZERO;
	  } else if (other.isZero()) {
	    return Timestamp.ZERO;
	  }

	  if (this.equals(Timestamp.MIN_VALUE)) {
	    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;
	  } else if (other.equals(Timestamp.MIN_VALUE)) {
	    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }

	  // If both Timestamps are small, use float multiplication
	  if (this.lessThan(Timestamp.TWO_PWR_24_) &&
	      other.lessThan(Timestamp.TWO_PWR_24_)) {
	    return Timestamp.fromNumber(this.toNumber() * other.toNumber());
	  }

	  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.
	  // We can skip products that would overflow.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 * b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 * b00;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c16 += a00 * b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 * b00;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a16 * b16;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a00 * b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	  c48 &= 0xFFFF;
	  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};

	/**
	 * Returns this Timestamp divided by the given one.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp by which to divide.
	 * @return {Timestamp} this Timestamp divided by the given one.
	 */
	Timestamp.prototype.div = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return Timestamp.ZERO;
	  }

	  if (this.equals(Timestamp.MIN_VALUE)) {
	    if (other.equals(Timestamp.ONE) ||
	        other.equals(Timestamp.NEG_ONE)) {
	      return Timestamp.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	    } else if (other.equals(Timestamp.MIN_VALUE)) {
	      return Timestamp.ONE;
	    } else {
	      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	      var halfThis = this.shiftRight(1);
	      var approx = halfThis.div(other).shiftLeft(1);
	      if (approx.equals(Timestamp.ZERO)) {
	        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;
	      } else {
	        var rem = this.subtract(other.multiply(approx));
	        var result = approx.add(rem.div(other));
	        return result;
	      }
	    }
	  } else if (other.equals(Timestamp.MIN_VALUE)) {
	    return Timestamp.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().div(other.negate());
	    } else {
	      return this.negate().div(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.div(other.negate()).negate();
	  }

	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = Timestamp.ZERO;
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = Timestamp.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = Timestamp.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }

	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = Timestamp.ONE;
	    }

	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};

	/**
	 * Returns this Timestamp modulo the given one.
	 *
	 * @method
	 * @param {Timestamp} other Timestamp by which to mod.
	 * @return {Timestamp} this Timestamp modulo the given one.
	 */
	Timestamp.prototype.modulo = function(other) {
	  return this.subtract(this.div(other).multiply(other));
	};

	/**
	 * The bitwise-NOT of this value.
	 *
	 * @method
	 * @return {Timestamp} the bitwise-NOT of this value.
	 */
	Timestamp.prototype.not = function() {
	  return Timestamp.fromBits(~this.low_, ~this.high_);
	};

	/**
	 * Returns the bitwise-AND of this Timestamp and the given one.
	 *
	 * @method
	 * @param {Timestamp} other the Timestamp with which to AND.
	 * @return {Timestamp} the bitwise-AND of this and the other.
	 */
	Timestamp.prototype.and = function(other) {
	  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);
	};

	/**
	 * Returns the bitwise-OR of this Timestamp and the given one.
	 *
	 * @method
	 * @param {Timestamp} other the Timestamp with which to OR.
	 * @return {Timestamp} the bitwise-OR of this and the other.
	 */
	Timestamp.prototype.or = function(other) {
	  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);
	};

	/**
	 * Returns the bitwise-XOR of this Timestamp and the given one.
	 *
	 * @method
	 * @param {Timestamp} other the Timestamp with which to XOR.
	 * @return {Timestamp} the bitwise-XOR of this and the other.
	 */
	Timestamp.prototype.xor = function(other) {
	  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
	};

	/**
	 * Returns this Timestamp with bits shifted to the left by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the left by the given amount.
	 */
	Timestamp.prototype.shiftLeft = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var low = this.low_;
	    if (numBits < 32) {
	      var high = this.high_;
	      return Timestamp.fromBits(
	                 low << numBits,
	                 (high << numBits) | (low >>> (32 - numBits)));
	    } else {
	      return Timestamp.fromBits(0, low << (numBits - 32));
	    }
	  }
	};

	/**
	 * Returns this Timestamp with bits shifted to the right by the given amount.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the right by the given amount.
	 */
	Timestamp.prototype.shiftRight = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Timestamp.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >> numBits);
	    } else {
	      return Timestamp.fromBits(
	                 high >> (numBits - 32),
	                 high >= 0 ? 0 : -1);
	    }
	  }
	};

	/**
	 * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
	 *
	 * @method
	 * @param {number} numBits the number of bits by which to shift.
	 * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.
	 */
	Timestamp.prototype.shiftRightUnsigned = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return Timestamp.fromBits(
	                 (low >>> numBits) | (high << (32 - numBits)),
	                 high >>> numBits);
	    } else if (numBits == 32) {
	      return Timestamp.fromBits(high, 0);
	    } else {
	      return Timestamp.fromBits(high >>> (numBits - 32), 0);
	    }
	  }
	};

	/**
	 * Returns a Timestamp representing the given (32-bit) integer value.
	 *
	 * @method
	 * @param {number} value the 32-bit integer in question.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    var cachedObj = Timestamp.INT_CACHE_[value];
	    if (cachedObj) {
	      return cachedObj;
	    }
	  }

	  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);
	  if (-128 <= value && value < 128) {
	    Timestamp.INT_CACHE_[value] = obj;
	  }
	  return obj;
	};

	/**
	 * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	 *
	 * @method
	 * @param {number} value the number in question.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromNumber = function(value) {
	  if (isNaN(value) || !isFinite(value)) {
	    return Timestamp.ZERO;
	  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {
	    return Timestamp.MIN_VALUE;
	  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {
	    return Timestamp.MAX_VALUE;
	  } else if (value < 0) {
	    return Timestamp.fromNumber(-value).negate();
	  } else {
	    return new Timestamp(
	               (value % Timestamp.TWO_PWR_32_DBL_) | 0,
	               (value / Timestamp.TWO_PWR_32_DBL_) | 0);
	  }
	};

	/**
	 * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
	 *
	 * @method
	 * @param {number} lowBits the low 32-bits.
	 * @param {number} highBits the high 32-bits.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromBits = function(lowBits, highBits) {
	  return new Timestamp(lowBits, highBits);
	};

	/**
	 * Returns a Timestamp representation of the given string, written using the given radix.
	 *
	 * @method
	 * @param {string} str the textual representation of the Timestamp.
	 * @param {number} opt_radix the radix in which the text is written.
	 * @return {Timestamp} the corresponding Timestamp value.
	 */
	Timestamp.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }

	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (str.charAt(0) == '-') {
	    return Timestamp.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character: ' + str);
	  }

	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));

	  var result = Timestamp.ZERO;
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = Timestamp.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(Timestamp.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(Timestamp.fromNumber(value));
	    }
	  }
	  return result;
	};

	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.


	/**
	 * A cache of the Timestamp representations of small integer values.
	 * @type {Object}
	 * @ignore
	 */
	Timestamp.INT_CACHE_ = {};

	// NOTE: the compiler should inline these constant values below and then remove
	// these variables, so there should be no runtime penalty for these.

	/**
	 * Number used repeated below in calculations.  This must appear before the
	 * first call to any from* function below.
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_16_DBL_ = 1 << 16;

	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_24_DBL_ = 1 << 24;

	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;

	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;

	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;

	/**
	 * @type {number}
	 * @ignore
	 */
	Timestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;

	/** @type {Timestamp} */
	Timestamp.ZERO = Timestamp.fromInt(0);

	/** @type {Timestamp} */
	Timestamp.ONE = Timestamp.fromInt(1);

	/** @type {Timestamp} */
	Timestamp.NEG_ONE = Timestamp.fromInt(-1);

	/** @type {Timestamp} */
	Timestamp.MAX_VALUE =
	    Timestamp.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);

	/** @type {Timestamp} */
	Timestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);

	/**
	 * @type {Timestamp}
	 * @ignore
	 */
	Timestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);

	/**
	 * Expose.
	 */
	module.exports = Timestamp;
	module.exports.Timestamp = Timestamp;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Module dependencies.
	 * @ignore
	 */
	var BinaryParser = __webpack_require__(181).BinaryParser;

	/**
	 * Machine id.
	 *
	 * Create a random 3-byte value (i.e. unique for this
	 * process). Other drivers use a md5 of the machine id here, but
	 * that would mean an asyc call to gethostname, so we don't bother.
	 * @ignore
	 */
	var MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);

	// Regular expression that checks for hex value
	var checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");

	/**
	* Create a new ObjectID instance
	*
	* @class
	* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.
	* @property {number} generationTime The generation time of this ObjectId instance
	* @return {ObjectID} instance of ObjectID.
	*/
	var ObjectID = function ObjectID(id) {
	  if(!(this instanceof ObjectID)) return new ObjectID(id);
	  if((id instanceof ObjectID)) return id;

	  this._bsontype = 'ObjectID';
	  var __id = null;
	  var valid = ObjectID.isValid(id);

	  // Throw an error if it's not a valid setup
	  if(!valid && id != null){
	    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
	  } else if(valid && typeof id == 'string' && id.length == 24) {
	    return ObjectID.createFromHexString(id);
	  } else if(id == null || typeof id == 'number') {
	    // convert to 12 byte binary string
	    this.id = this.generate(id);
	  } else if(id != null && id.length === 12) {
	    // assume 12 byte string
	    this.id = id;
	  }

	  if(ObjectID.cacheHexString) this.__id = this.toHexString();
	};

	// Allow usage of ObjectId as well as ObjectID
	var ObjectId = ObjectID;

	// Precomputed hex table enables speedy hex string conversion
	var hexTable = [];
	for (var i = 0; i < 256; i++) {
	  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);
	}

	/**
	* Return the ObjectID id as a 24 byte hex string representation
	*
	* @method
	* @return {string} return the 24 byte hex string representation.
	*/
	ObjectID.prototype.toHexString = function() {
	  if(ObjectID.cacheHexString && this.__id) return this.__id;

	  var hexString = '';

	  for (var i = 0; i < this.id.length; i++) {
	    hexString += hexTable[this.id.charCodeAt(i)];
	  }

	  if(ObjectID.cacheHexString) this.__id = hexString;
	  return hexString;
	};

	/**
	* Update the ObjectID index used in generating new ObjectID's on the driver
	*
	* @method
	* @return {number} returns next index value.
	* @ignore
	*/
	ObjectID.prototype.get_inc = function() {
	  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;
	};

	/**
	* Update the ObjectID index used in generating new ObjectID's on the driver
	*
	* @method
	* @return {number} returns next index value.
	* @ignore
	*/
	ObjectID.prototype.getInc = function() {
	  return this.get_inc();
	};

	/**
	* Generate a 12 byte id string used in ObjectID's
	*
	* @method
	* @param {number} [time] optional parameter allowing to pass in a second based timestamp.
	* @return {string} return the 12 byte id binary string.
	*/
	ObjectID.prototype.generate = function(time) {
	  if ('number' != typeof time) {
	    time = parseInt(Date.now()/1000,10);
	  }

	  var time4Bytes = BinaryParser.encodeInt(time, 32, true, true);
	  /* for time-based ObjectID the bytes following the time will be zeroed */
	  var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);
	  var pid2Bytes = BinaryParser.fromShort(typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid % 0xFFFF);
	  var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);

	  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;
	};

	/**
	* Converts the id into a 24 byte hex string for printing
	*
	* @return {String} return the 24 byte hex string representation.
	* @ignore
	*/
	ObjectID.prototype.toString = function() {
	  return this.toHexString();
	};

	/**
	* Converts to a string representation of this Id.
	*
	* @return {String} return the 24 byte hex string representation.
	* @ignore
	*/
	ObjectID.prototype.inspect = ObjectID.prototype.toString;

	/**
	* Converts to its JSON representation.
	*
	* @return {String} return the 24 byte hex string representation.
	* @ignore
	*/
	ObjectID.prototype.toJSON = function() {
	  return this.toHexString();
	};

	/**
	* Compares the equality of this ObjectID with `otherID`.
	*
	* @method
	* @param {object} otherID ObjectID instance to compare against.
	* @return {boolean} the result of comparing two ObjectID's
	*/
	ObjectID.prototype.equals = function equals (otherID) {
	  if(otherID == null) return false;
	  var id = (otherID instanceof ObjectID || otherID.toHexString)
	    ? otherID.id
	    : ObjectID.createFromHexString(otherID).id;

	  return this.id === id;
	}

	/**
	* Returns the generation date (accurate up to the second) that this ID was generated.
	*
	* @method
	* @return {date} the generation date
	*/
	ObjectID.prototype.getTimestamp = function() {
	  var timestamp = new Date();
	  timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true)) * 1000);
	  return timestamp;
	}

	/**
	* @ignore
	*/
	ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);

	/**
	* @ignore
	*/
	ObjectID.createPk = function createPk () {
	  return new ObjectID();
	};

	/**
	* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
	*
	* @method
	* @param {number} time an integer number representing a number of seconds.
	* @return {ObjectID} return the created ObjectID
	*/
	ObjectID.createFromTime = function createFromTime (time) {
	  var id = BinaryParser.encodeInt(time, 32, true, true) +
	           BinaryParser.encodeInt(0, 64, true, true);
	  return new ObjectID(id);
	};

	/**
	* Creates an ObjectID from a hex string representation of an ObjectID.
	*
	* @method
	* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.
	* @return {ObjectID} return the created ObjectID
	*/
	ObjectID.createFromHexString = function createFromHexString (hexString) {
	  // Throw an error if it's not a valid setup
	  if(typeof hexString === 'undefined' || hexString != null && hexString.length != 24)
	    throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");

	  var len = hexString.length;

	  if(len > 12*2) {
	    throw new Error('Id cannot be longer than 12 bytes');
	  }

	  var result = ''
	    , string
	    , number;

	  for (var index = 0; index < len; index += 2) {
	    string = hexString.substr(index, 2);
	    number = parseInt(string, 16);
	    result += BinaryParser.fromByte(number);
	  }

	  return new ObjectID(result, hexString);
	};

	/**
	* Checks if a value is a valid bson ObjectId
	*
	* @method
	* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.
	*/
	ObjectID.isValid = function isValid(id) {
	  if(id == null) return false;

	  if(typeof id == 'number')
	    return true;
	  if(typeof id == 'string') {
	    return id.length == 12 || (id.length == 24 && checkForHexRegExp.test(id));
	  }
	  return false;
	};

	/**
	* @ignore
	*/
	Object.defineProperty(ObjectID.prototype, "generationTime", {
	   enumerable: true
	 , get: function () {
	     return Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true));
	   }
	 , set: function (value) {
	     var value = BinaryParser.encodeInt(value, 32, true, true);
	     this.id = value + this.id.substr(4);
	     // delete this.__id;
	     this.toHexString();
	   }
	});

	/**
	 * Expose.
	 */
	module.exports = ObjectID;
	module.exports.ObjectID = ObjectID;
	module.exports.ObjectId = ObjectID;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Binary Parser.
	 * Jonas Raoni Soares Silva
	 * http://jsfromhell.com/classes/binary-parser [v1.0]
	 */
	var chr = String.fromCharCode;

	var maxBits = [];
	for (var i = 0; i < 64; i++) {
		maxBits[i] = Math.pow(2, i);
	}

	function BinaryParser (bigEndian, allowExceptions) {
	  if(!(this instanceof BinaryParser)) return new BinaryParser(bigEndian, allowExceptions);
	  
		this.bigEndian = bigEndian;
		this.allowExceptions = allowExceptions;
	};

	BinaryParser.warn = function warn (msg) {
		if (this.allowExceptions) {
			throw new Error(msg);
	  }

		return 1;
	};

	BinaryParser.decodeFloat = function decodeFloat (data, precisionBits, exponentBits) {
		var b = new this.Buffer(this.bigEndian, data);

		b.checkBuffer(precisionBits + exponentBits + 1);

		var bias = maxBits[exponentBits - 1] - 1
	    , signal = b.readBits(precisionBits + exponentBits, 1)
	    , exponent = b.readBits(precisionBits, exponentBits)
	    , significand = 0
	    , divisor = 2
	    , curByte = b.buffer.length + (-precisionBits >> 3) - 1;

		do {
			for (var byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; ( byteValue & mask ) && ( significand += 1 / divisor ), divisor *= 2 );
		} while (precisionBits -= startBit);

		return exponent == ( bias << 1 ) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : ( 1 + signal * -2 ) * ( exponent || significand ? !exponent ? Math.pow( 2, -bias + 1 ) * significand : Math.pow( 2, exponent - bias ) * ( 1 + significand ) : 0 );
	};

	BinaryParser.decodeInt = function decodeInt (data, bits, signed, forceBigEndian) {
	  var b = new this.Buffer(this.bigEndian || forceBigEndian, data)
	      , x = b.readBits(0, bits)
	      , max = maxBits[bits]; //max = Math.pow( 2, bits );
	  
	  return signed && x >= max / 2
	      ? x - max
	      : x;
	};

	BinaryParser.encodeFloat = function encodeFloat (data, precisionBits, exponentBits) {
		var bias = maxBits[exponentBits - 1] - 1
	    , minExp = -bias + 1
	    , maxExp = bias
	    , minUnnormExp = minExp - precisionBits
	    , n = parseFloat(data)
	    , status = isNaN(n) || n == -Infinity || n == +Infinity ? n : 0
	    ,	exp = 0
	    , len = 2 * bias + 1 + precisionBits + 3
	    , bin = new Array(len)
	    , signal = (n = status !== 0 ? 0 : n) < 0
	    , intPart = Math.floor(n = Math.abs(n))
	    , floatPart = n - intPart
	    , lastBit
	    , rounded
	    , result
	    , i
	    , j;

		for (i = len; i; bin[--i] = 0);

		for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));

		for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0 ) && --floatPart);

		for (i = -1; ++i < len && !bin[i];);

		if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]) {
			if (!(rounded = bin[lastBit])) {
				for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);
			}

			for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));
		}

		for (i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);

		if ((exp = bias + 1 - i) >= minExp && exp <= maxExp) {
			++i;
	  } else if (exp < minExp) {
			exp != bias + 1 - len && exp < minUnnormExp && this.warn("encodeFloat::float underflow");
			i = bias + 1 - (exp = minExp - 1);
		}

		if (intPart || status !== 0) {
			this.warn(intPart ? "encodeFloat::float overflow" : "encodeFloat::" + status);
			exp = maxExp + 1;
			i = bias + 2;

			if (status == -Infinity) {
				signal = 1;
	    } else if (isNaN(status)) {
				bin[i] = 1;
	    }
		}

		for (n = Math.abs(exp + bias), j = exponentBits + 1, result = ""; --j; result = (n % 2) + result, n = n >>= 1);

		for (n = 0, j = 0, i = (result = (signal ? "1" : "0") + result + bin.slice(i, i + precisionBits).join("")).length, r = []; i; j = (j + 1) % 8) {
			n += (1 << j) * result.charAt(--i);
			if (j == 7) {
				r[r.length] = String.fromCharCode(n);
				n = 0;
			}
		}

		r[r.length] = n
	    ? String.fromCharCode(n)
	    : "";

		return (this.bigEndian ? r.reverse() : r).join("");
	};

	BinaryParser.encodeInt = function encodeInt (data, bits, signed, forceBigEndian) {
		var max = maxBits[bits];

	  if (data >= max || data < -(max / 2)) {
	    this.warn("encodeInt::overflow");
	    data = 0;
	  }

		if (data < 0) {
	    data += max;
	  }

		for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256));

		for (bits = -(-bits >> 3) - r.length; bits--; r[r.length] = "\0");

	  return ((this.bigEndian || forceBigEndian) ? r.reverse() : r).join("");
	};

	BinaryParser.toSmall    = function( data ){ return this.decodeInt( data,  8, true  ); };
	BinaryParser.fromSmall  = function( data ){ return this.encodeInt( data,  8, true  ); };
	BinaryParser.toByte     = function( data ){ return this.decodeInt( data,  8, false ); };
	BinaryParser.fromByte   = function( data ){ return this.encodeInt( data,  8, false ); };
	BinaryParser.toShort    = function( data ){ return this.decodeInt( data, 16, true  ); };
	BinaryParser.fromShort  = function( data ){ return this.encodeInt( data, 16, true  ); };
	BinaryParser.toWord     = function( data ){ return this.decodeInt( data, 16, false ); };
	BinaryParser.fromWord   = function( data ){ return this.encodeInt( data, 16, false ); };
	BinaryParser.toInt      = function( data ){ return this.decodeInt( data, 32, true  ); };
	BinaryParser.fromInt    = function( data ){ return this.encodeInt( data, 32, true  ); };
	BinaryParser.toLong     = function( data ){ return this.decodeInt( data, 64, true  ); };
	BinaryParser.fromLong   = function( data ){ return this.encodeInt( data, 64, true  ); };
	BinaryParser.toDWord    = function( data ){ return this.decodeInt( data, 32, false ); };
	BinaryParser.fromDWord  = function( data ){ return this.encodeInt( data, 32, false ); };
	BinaryParser.toQWord    = function( data ){ return this.decodeInt( data, 64, true ); };
	BinaryParser.fromQWord  = function( data ){ return this.encodeInt( data, 64, true ); };
	BinaryParser.toFloat    = function( data ){ return this.decodeFloat( data, 23, 8   ); };
	BinaryParser.fromFloat  = function( data ){ return this.encodeFloat( data, 23, 8   ); };
	BinaryParser.toDouble   = function( data ){ return this.decodeFloat( data, 52, 11  ); };
	BinaryParser.fromDouble = function( data ){ return this.encodeFloat( data, 52, 11  ); };

	// Factor out the encode so it can be shared by add_header and push_int32
	BinaryParser.encode_int32 = function encode_int32 (number, asArray) {
	  var a, b, c, d, unsigned;
	  unsigned = (number < 0) ? (number + 0x100000000) : number;
	  a = Math.floor(unsigned / 0xffffff);
	  unsigned &= 0xffffff;
	  b = Math.floor(unsigned / 0xffff);
	  unsigned &= 0xffff;
	  c = Math.floor(unsigned / 0xff);
	  unsigned &= 0xff;
	  d = Math.floor(unsigned);
	  return asArray ? [chr(a), chr(b), chr(c), chr(d)] : chr(a) + chr(b) + chr(c) + chr(d);
	};

	BinaryParser.encode_int64 = function encode_int64 (number) {
	  var a, b, c, d, e, f, g, h, unsigned;
	  unsigned = (number < 0) ? (number + 0x10000000000000000) : number;
	  a = Math.floor(unsigned / 0xffffffffffffff);
	  unsigned &= 0xffffffffffffff;
	  b = Math.floor(unsigned / 0xffffffffffff);
	  unsigned &= 0xffffffffffff;
	  c = Math.floor(unsigned / 0xffffffffff);
	  unsigned &= 0xffffffffff;
	  d = Math.floor(unsigned / 0xffffffff);
	  unsigned &= 0xffffffff;
	  e = Math.floor(unsigned / 0xffffff);
	  unsigned &= 0xffffff;
	  f = Math.floor(unsigned / 0xffff);
	  unsigned &= 0xffff;
	  g = Math.floor(unsigned / 0xff);
	  unsigned &= 0xff;
	  h = Math.floor(unsigned);
	  return chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);
	};

	/**
	 * UTF8 methods
	 */

	// Take a raw binary string and return a utf8 string
	BinaryParser.decode_utf8 = function decode_utf8 (binaryStr) {
	  var len = binaryStr.length
	    , decoded = ''
	    , i = 0
	    , c = 0
	    , c1 = 0
	    , c2 = 0
	    , c3;

	  while (i < len) {
	    c = binaryStr.charCodeAt(i);
	    if (c < 128) {
	      decoded += String.fromCharCode(c);
	      i++;
	    } else if ((c > 191) && (c < 224)) {
		    c2 = binaryStr.charCodeAt(i+1);
	      decoded += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
	      i += 2;
	    } else {
		    c2 = binaryStr.charCodeAt(i+1);
		    c3 = binaryStr.charCodeAt(i+2);
	      decoded += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	      i += 3;
	    }
	  }

	  return decoded;
	};

	// Encode a cstring
	BinaryParser.encode_cstring = function encode_cstring (s) {
	  return unescape(encodeURIComponent(s)) + BinaryParser.fromByte(0);
	};

	// Take a utf8 string and return a binary string
	BinaryParser.encode_utf8 = function encode_utf8 (s) {
	  var a = ""
	    , c;

	  for (var n = 0, len = s.length; n < len; n++) {
	    c = s.charCodeAt(n);

	    if (c < 128) {
		    a += String.fromCharCode(c);
	    } else if ((c > 127) && (c < 2048)) {
		    a += String.fromCharCode((c>>6) | 192) ;
		    a += String.fromCharCode((c&63) | 128);
	    } else {
	      a += String.fromCharCode((c>>12) | 224);
	      a += String.fromCharCode(((c>>6) & 63) | 128);
	      a += String.fromCharCode((c&63) | 128);
	    }
	  }

	  return a;
	};

	BinaryParser.hprint = function hprint (s) {
	  var number;

	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);        
	      process.stdout.write(number + " ")
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	        process.stdout.write(number + " ")
	    }
	  }
	  
	  process.stdout.write("\n\n");
	};

	BinaryParser.ilprint = function hprint (s) {
	  var number;

	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(10)
	        : s.charCodeAt(i).toString(10);

	      __webpack_require__(10).debug(number+' : ');
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(10)
	        : s.charCodeAt(i).toString(10);
	      __webpack_require__(10).debug(number+' : '+ s.charAt(i));
	    }
	  }
	};

	BinaryParser.hlprint = function hprint (s) {
	  var number;

	  for (var i = 0, len = s.length; i < len; i++) {
	    if (s.charCodeAt(i) < 32) {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	      __webpack_require__(10).debug(number+' : ');
	    } else {
	      number = s.charCodeAt(i) <= 15
	        ? "0" + s.charCodeAt(i).toString(16)
	        : s.charCodeAt(i).toString(16);
	      __webpack_require__(10).debug(number+' : '+ s.charAt(i));
	    }
	  }
	};

	/**
	 * BinaryParser buffer constructor.
	 */
	function BinaryParserBuffer (bigEndian, buffer) {
	  this.bigEndian = bigEndian || 0;
	  this.buffer = [];
	  this.setBuffer(buffer);
	};

	BinaryParserBuffer.prototype.setBuffer = function setBuffer (data) {
	  var l, i, b;

		if (data) {
	    i = l = data.length;
	    b = this.buffer = new Array(l);
			for (; i; b[l - i] = data.charCodeAt(--i));
			this.bigEndian && b.reverse();
		}
	};

	BinaryParserBuffer.prototype.hasNeededBits = function hasNeededBits (neededBits) {
		return this.buffer.length >= -(-neededBits >> 3);
	};

	BinaryParserBuffer.prototype.checkBuffer = function checkBuffer (neededBits) {
		if (!this.hasNeededBits(neededBits)) {
			throw new Error("checkBuffer::missing bytes");
	  }
	};

	BinaryParserBuffer.prototype.readBits = function readBits (start, length) {
		//shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)

		function shl (a, b) {
			for (; b--; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);
			return a;
		}

		if (start < 0 || length <= 0) {
			return 0;
	  }

		this.checkBuffer(start + length);

	  var offsetLeft
	    , offsetRight = start % 8
	    , curByte = this.buffer.length - ( start >> 3 ) - 1
	    , lastByte = this.buffer.length + ( -( start + length ) >> 3 )
	    , diff = curByte - lastByte
	    , sum = ((this.buffer[ curByte ] >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1)) + (diff && (offsetLeft = (start + length) % 8) ? (this.buffer[lastByte++] & ((1 << offsetLeft) - 1)) << (diff-- << 3) - offsetRight : 0);

		for(; diff; sum += shl(this.buffer[lastByte++], (diff-- << 3) - offsetRight));

		return sum;
	};

	/**
	 * Expose.
	 */
	BinaryParser.Buffer = BinaryParserBuffer;

	exports.BinaryParser = BinaryParser;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 182 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON RegExp type.
	 *
	 * @class
	 * @return {BSONRegExp} A MinKey instance
	 */
	function BSONRegExp(pattern, options) {
	  if(!(this instanceof BSONRegExp)) return new BSONRegExp();
	  
	  // Execute
	  this._bsontype = 'BSONRegExp';
	  this.pattern = pattern;
	  this.options = options;

	  // Validate options
	  for(var i = 0; i < options.length; i++) {
	    if(!(this.options[i] == 'i' 
	      || this.options[i] == 'm'
	      || this.options[i] == 'x'
	      || this.options[i] == 'l'
	      || this.options[i] == 's'
	      || this.options[i] == 'u'
	    )) {
	      throw new Error('the regular expression options [' + this.options[i] + "] is not supported");
	    }
	  }
	}

	module.exports = BSONRegExp;
	module.exports.BSONRegExp = BSONRegExp;

/***/ },
/* 183 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON Symbol type.
	 *
	 * @class
	 * @deprecated
	 * @param {string} value the string representing the symbol.
	 * @return {Symbol}
	 */
	function Symbol(value) {
	  if(!(this instanceof Symbol)) return new Symbol(value);
	  this._bsontype = 'Symbol';
	  this.value = value;
	}

	/**
	 * Access the wrapped string value.
	 *
	 * @method
	 * @return {String} returns the wrapped string.
	 */
	Symbol.prototype.valueOf = function() {
	  return this.value;
	};

	/**
	 * @ignore
	 */
	Symbol.prototype.toString = function() {
	  return this.value;
	}

	/**
	 * @ignore
	 */
	Symbol.prototype.inspect = function() {
	  return this.value;
	}

	/**
	 * @ignore
	 */
	Symbol.prototype.toJSON = function() {
	  return this.value;
	}

	module.exports = Symbol;
	module.exports.Symbol = Symbol;

/***/ },
/* 184 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON Code type.
	 *
	 * @class
	 * @param {(string|function)} code a string or function.
	 * @param {Object} [scope] an optional scope for the function.
	 * @return {Code}
	 */
	var Code = function Code(code, scope) {
	  if(!(this instanceof Code)) return new Code(code, scope);
	  this._bsontype = 'Code';
	  this.code = code;
	  this.scope = scope == null ? {} : scope;
	};

	/**
	 * @ignore
	 */
	Code.prototype.toJSON = function() {
	  return {scope:this.scope, code:this.code};
	}

	module.exports = Code;
	module.exports.Code = Code;

/***/ },
/* 185 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON MinKey type.
	 *
	 * @class
	 * @return {MinKey} A MinKey instance
	 */
	function MinKey() {
	  if(!(this instanceof MinKey)) return new MinKey();
	  
	  this._bsontype = 'MinKey';
	}

	module.exports = MinKey;
	module.exports.MinKey = MinKey;

/***/ },
/* 186 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON MaxKey type.
	 *
	 * @class
	 * @return {MaxKey} A MaxKey instance
	 */
	function MaxKey() {
	  if(!(this instanceof MaxKey)) return new MaxKey();
	  
	  this._bsontype = 'MaxKey';  
	}

	module.exports = MaxKey;
	module.exports.MaxKey = MaxKey;

/***/ },
/* 187 */
/***/ function(module, exports) {

	/**
	 * A class representation of the BSON DBRef type.
	 *
	 * @class
	 * @param {string} namespace the collection name.
	 * @param {ObjectID} oid the reference ObjectID.
	 * @param {string} [db] optional db name, if omitted the reference is local to the current db.
	 * @return {DBRef}
	 */
	function DBRef(namespace, oid, db) {
	  if(!(this instanceof DBRef)) return new DBRef(namespace, oid, db);
	  
	  this._bsontype = 'DBRef';
	  this.namespace = namespace;
	  this.oid = oid;
	  this.db = db;
	};

	/**
	 * @ignore
	 * @api private
	 */
	DBRef.prototype.toJSON = function() {
	  return {
	    '$ref':this.namespace,
	    '$id':this.oid,
	    '$db':this.db == null ? '' : this.db
	  };
	}

	module.exports = DBRef;
	module.exports.DBRef = DBRef;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 * @ignore
	 */
	if(typeof window === 'undefined') {
	  var Buffer = __webpack_require__(5).Buffer; // TODO just use global Buffer
	}

	/**
	 * A class representation of the BSON Binary type.
	 *
	 * Sub types
	 *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.
	 *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.
	 *
	 * @class
	 * @param {Buffer} buffer a buffer object containing the binary data.
	 * @param {Number} [subType] the option binary type.
	 * @return {Binary}
	 */
	function Binary(buffer, subType) {
	  if(!(this instanceof Binary)) return new Binary(buffer, subType);

	  this._bsontype = 'Binary';

	  if(buffer instanceof Number) {
	    this.sub_type = buffer;
	    this.position = 0;
	  } else {
	    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;
	    this.position = 0;
	  }

	  if(buffer != null && !(buffer instanceof Number)) {
	    // Only accept Buffer, Uint8Array or Arrays
	    if(typeof buffer == 'string') {
	      // Different ways of writing the length of the string for the different types
	      if(typeof Buffer != 'undefined') {
	        this.buffer = new Buffer(buffer);
	      } else if(typeof Uint8Array != 'undefined' || (Object.prototype.toString.call(buffer) == '[object Array]')) {
	        this.buffer = writeStringToArray(buffer);
	      } else {
	        throw new Error("only String, Buffer, Uint8Array or Array accepted");
	      }
	    } else {
	      this.buffer = buffer;
	    }
	    this.position = buffer.length;
	  } else {
	    if(typeof Buffer != 'undefined') {
	      this.buffer =  new Buffer(Binary.BUFFER_SIZE);
	    } else if(typeof Uint8Array != 'undefined'){
	      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));
	    } else {
	      this.buffer = new Array(Binary.BUFFER_SIZE);
	    }
	    // Set position to start of buffer
	    this.position = 0;
	  }
	};

	/**
	 * Updates this binary with byte_value.
	 *
	 * @method
	 * @param {string} byte_value a single byte we wish to write.
	 */
	Binary.prototype.put = function put(byte_value) {
	  // If it's a string and a has more than one character throw an error
	  if(byte_value['length'] != null && typeof byte_value != 'number' && byte_value.length != 1) throw new Error("only accepts single character String, Uint8Array or Array");
	  if(typeof byte_value != 'number' && byte_value < 0 || byte_value > 255) throw new Error("only accepts number in a valid unsigned byte range 0-255");

	  // Decode the byte value once
	  var decoded_byte = null;
	  if(typeof byte_value == 'string') {
	    decoded_byte = byte_value.charCodeAt(0);
	  } else if(byte_value['length'] != null) {
	    decoded_byte = byte_value[0];
	  } else {
	    decoded_byte = byte_value;
	  }

	  if(this.buffer.length > this.position) {
	    this.buffer[this.position++] = decoded_byte;
	  } else {
	    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {
	      // Create additional overflow buffer
	      var buffer = new Buffer(Binary.BUFFER_SIZE + this.buffer.length);
	      // Combine the two buffers together
	      this.buffer.copy(buffer, 0, 0, this.buffer.length);
	      this.buffer = buffer;
	      this.buffer[this.position++] = decoded_byte;
	    } else {
	      var buffer = null;
	      // Create a new buffer (typed or normal array)
	      if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {
	        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));
	      } else {
	        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);
	      }

	      // We need to copy all the content to the new array
	      for(var i = 0; i < this.buffer.length; i++) {
	        buffer[i] = this.buffer[i];
	      }

	      // Reassign the buffer
	      this.buffer = buffer;
	      // Write the byte
	      this.buffer[this.position++] = decoded_byte;
	    }
	  }
	};

	/**
	 * Writes a buffer or string to the binary.
	 *
	 * @method
	 * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.
	 * @param {number} offset specify the binary of where to write the content.
	 * @return {null}
	 */
	Binary.prototype.write = function write(string, offset) {
	  offset = typeof offset == 'number' ? offset : this.position;

	  // If the buffer is to small let's extend the buffer
	  if(this.buffer.length < offset + string.length) {
	    var buffer = null;
	    // If we are in node.js
	    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {
	      buffer = new Buffer(this.buffer.length + string.length);
	      this.buffer.copy(buffer, 0, 0, this.buffer.length);
	    } else if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {
	      // Create a new buffer
	      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length))
	      // Copy the content
	      for(var i = 0; i < this.position; i++) {
	        buffer[i] = this.buffer[i];
	      }
	    }

	    // Assign the new buffer
	    this.buffer = buffer;
	  }

	  if(typeof Buffer != 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {
	    string.copy(this.buffer, offset, 0, string.length);
	    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;
	    // offset = string.length
	  } else if(typeof Buffer != 'undefined' && typeof string == 'string' && Buffer.isBuffer(this.buffer)) {
	    this.buffer.write(string, offset, 'binary');
	    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;
	    // offset = string.length;
	  } else if(Object.prototype.toString.call(string) == '[object Uint8Array]'
	    || Object.prototype.toString.call(string) == '[object Array]' && typeof string != 'string') {
	    for(var i = 0; i < string.length; i++) {
	      this.buffer[offset++] = string[i];
	    }

	    this.position = offset > this.position ? offset : this.position;
	  } else if(typeof string == 'string') {
	    for(var i = 0; i < string.length; i++) {
	      this.buffer[offset++] = string.charCodeAt(i);
	    }

	    this.position = offset > this.position ? offset : this.position;
	  }
	};

	/**
	 * Reads **length** bytes starting at **position**.
	 *
	 * @method
	 * @param {number} position read from the given position in the Binary.
	 * @param {number} length the number of bytes to read.
	 * @return {Buffer}
	 */
	Binary.prototype.read = function read(position, length) {
	  length = length && length > 0
	    ? length
	    : this.position;

	  // Let's return the data based on the type we have
	  if(this.buffer['slice']) {
	    return this.buffer.slice(position, position + length);
	  } else {
	    // Create a buffer to keep the result
	    var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);
	    for(var i = 0; i < length; i++) {
	      buffer[i] = this.buffer[position++];
	    }
	  }
	  // Return the buffer
	  return buffer;
	};

	/**
	 * Returns the value of this binary as a string.
	 *
	 * @method
	 * @return {string}
	 */
	Binary.prototype.value = function value(asRaw) {
	  asRaw = asRaw == null ? false : asRaw;

	  // Optimize to serialize for the situation where the data == size of buffer
	  if(asRaw && typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer) && this.buffer.length == this.position)
	    return this.buffer;

	  // If it's a node.js buffer object
	  if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {
	    return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);
	  } else {
	    if(asRaw) {
	      // we support the slice command use it
	      if(this.buffer['slice'] != null) {
	        return this.buffer.slice(0, this.position);
	      } else {
	        // Create a new buffer to copy content to
	        var newBuffer = Object.prototype.toString.call(this.buffer) == '[object Uint8Array]' ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position);
	        // Copy content
	        for(var i = 0; i < this.position; i++) {
	          newBuffer[i] = this.buffer[i];
	        }
	        // Return the buffer
	        return newBuffer;
	      }
	    } else {
	      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);
	    }
	  }
	};

	/**
	 * Length.
	 *
	 * @method
	 * @return {number} the length of the binary.
	 */
	Binary.prototype.length = function length() {
	  return this.position;
	};

	/**
	 * @ignore
	 */
	Binary.prototype.toJSON = function() {
	  return this.buffer != null ? this.buffer.toString('base64') : '';
	}

	/**
	 * @ignore
	 */
	Binary.prototype.toString = function(format) {
	  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';
	}

	/**
	 * Binary default subtype
	 * @ignore
	 */
	var BSON_BINARY_SUBTYPE_DEFAULT = 0;

	/**
	 * @ignore
	 */
	var writeStringToArray = function(data) {
	  // Create a buffer
	  var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length);
	  // Write the content to the buffer
	  for(var i = 0; i < data.length; i++) {
	    buffer[i] = data.charCodeAt(i);
	  }
	  // Write the string to the buffer
	  return buffer;
	}

	/**
	 * Convert Array ot Uint8Array to Binary String
	 *
	 * @ignore
	 */
	var convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {
	  var result = "";
	  for(var i = startIndex; i < endIndex; i++) {
	   result = result + String.fromCharCode(byteArray[i]);
	  }
	  return result;
	};

	Binary.BUFFER_SIZE = 256;

	/**
	 * Default BSON type
	 *
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_DEFAULT = 0;
	/**
	 * Function BSON type
	 *
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_FUNCTION = 1;
	/**
	 * Byte Array BSON type
	 *
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * OLD UUID BSON type
	 *
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_UUID_OLD = 3;
	/**
	 * UUID BSON type
	 *
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_UUID = 4;
	/**
	 * MD5 BSON type
	 *
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_MD5 = 5;
	/**
	 * User BSON type
	 *
	 * @classconstant SUBTYPE_DEFAULT
	 **/
	Binary.SUBTYPE_USER_DEFINED = 128;

	/**
	 * Expose.
	 */
	module.exports = Binary;
	module.exports.Binary = Binary;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict"

	var writeIEEE754 = __webpack_require__(176).writeIEEE754,
		readIEEE754 = __webpack_require__(176).readIEEE754,
		f = __webpack_require__(10).format,
		Long = __webpack_require__(177).Long,
	  Double = __webpack_require__(178).Double,
	  Timestamp = __webpack_require__(179).Timestamp,
	  ObjectID = __webpack_require__(180).ObjectID,
	  Symbol = __webpack_require__(183).Symbol,
	  Code = __webpack_require__(184).Code,
	  MinKey = __webpack_require__(185).MinKey,
	  MaxKey = __webpack_require__(186).MaxKey,
	  DBRef = __webpack_require__(187).DBRef,
	  BSONRegExp = __webpack_require__(182).BSONRegExp,
	  Binary = __webpack_require__(188).Binary;

	var deserialize = function(buffer, options, isArray) {
		var index = 0;
		// Read the document size
	  var size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;

		// Ensure buffer is valid size
	  if(size < 5 || buffer.length < size) {
			throw new Error("corrupt bson message");
		}

		// Illegal end value
		if(buffer[size - 1] != 0) {
			throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
		}

		// Start deserializtion
		return deserializeObject(buffer, options, isArray);
	}

	// Reads in a C style string
	var readCStyleStringSpecial = function(buffer, index) {
		// Get the start search index
		var i = index;
		// Locate the end of the c string
		while(buffer[i] !== 0x00 && i < buffer.length) {
			i++
		}
		// If are at the end of the buffer there is a problem with the document
		if(i >= buffer.length) throw new Error("Bad BSON Document: illegal CString")
		// Grab utf8 encoded string
		var string = buffer.toString('utf8', index, i);
		// Update index position
		index = i + 1;
		// Return string
		return {s: string, i: index};
	}

	var deserializeObject = function(buffer, options, isArray) {
	  // Options
	  options = options == null ? {} : options;
	  var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];
	  var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];
	  var cacheFunctionsCrc32 = options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];
	  var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];
		var fieldsAsRaw = options['fieldsAsRaw'] == null ? {} : options['fieldsAsRaw'];
	  // Return BSONRegExp objects instead of native regular expressions
	  var bsonRegExp = typeof options['bsonRegExp'] == 'boolean' ? options['bsonRegExp'] : false;

	  // Validate that we have at least 4 bytes of buffer
	  if(buffer.length < 5) throw new Error("corrupt bson message < 5 bytes long");

	  // Set up index
	  var index = typeof options['index'] == 'number' ? options['index'] : 0;

		// Read the document size
	  var size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;

		// Ensure buffer is valid size
	  if(size < 5 || size > buffer.length) throw new Error("corrupt bson message");

	  // Create holding object
	  var object = isArray ? [] : {};

	  // While we have more left data left keep parsing
	  while(true) {
	    // Read the type
	    var elementType = buffer[index++];
	    // If we get a zero it's the last byte, exit
	    if(elementType == 0) break;
	    // Read the name of the field
	    var r = readCStyleStringSpecial(buffer, index);
			var name = r.s;
			index = r.i;

			// Switch on the type
			if(elementType == BSON.BSON_DATA_OID) {
	      var string = buffer.toString('binary', index, index + 12);
	      // Decode the oid
	      object[name] = new ObjectID(string);
	      // Update index
	      index = index + 12;
			} else if(elementType == BSON.BSON_DATA_STRING) {
	      // Read the content of the field
	      var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
				// Validate if string Size is larger than the actual provided buffer
				if(stringSize <= 0 || stringSize > (buffer.length - index) || buffer[index + stringSize - 1] != 0) throw new Error("bad string length in bson");
	      // Add string to object
	      object[name] = buffer.toString('utf8', index, index + stringSize - 1);
	      // Update parse index position
	      index = index + stringSize;
			} else if(elementType == BSON.BSON_DATA_INT) {
	      // Decode the 32bit value
	      object[name] = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
			} else if(elementType == BSON.BSON_DATA_NUMBER) {
	      // Decode the double value
	      object[name] = readIEEE754(buffer, index, 'little', 52, 8);
	      // Update the index
	      index = index + 8;
			} else if(elementType == BSON.BSON_DATA_DATE) {
	      // Unpack the low and high bits
	      var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      // Set date object
	      object[name] = new Date(new Long(lowBits, highBits).toNumber());
			} else if(elementType == BSON.BSON_DATA_BOOLEAN) {
	      // Parse the boolean value
	      object[name] = buffer[index++] == 1;
			} else if(elementType == BSON.BSON_DATA_UNDEFINED || elementType == BSON.BSON_DATA_NULL) {
	      // Parse the boolean value
	      object[name] = null;
			} else if(elementType == BSON.BSON_DATA_BINARY) {
	      // Decode the size of the binary blob
	      var binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      // Decode the subtype
	      var subType = buffer[index++];
	      // Decode as raw Buffer object if options specifies it
	      if(buffer['slice'] != null) {
	        // If we have subtype 2 skip the 4 bytes for the size
	        if(subType == Binary.SUBTYPE_BYTE_ARRAY) {
	          binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        }
	        // Slice the data
	        object[name] = new Binary(buffer.slice(index, index + binarySize), subType);
	      } else {
	        var _buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(binarySize)) : new Array(binarySize);
	        // If we have subtype 2 skip the 4 bytes for the size
	        if(subType == Binary.SUBTYPE_BYTE_ARRAY) {
	          binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	        }
	        // Copy the data
	        for(var i = 0; i < binarySize; i++) {
	          _buffer[i] = buffer[index + i];
	        }
	        // Create the binary object
	        object[name] = new Binary(_buffer, subType);
	      }
	      // Update the index
	      index = index + binarySize;
			} else if(elementType == BSON.BSON_DATA_ARRAY) {
	      options['index'] = index;
	      // Decode the size of the array document
	      var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
				var arrayOptions = options;

				// All elements of array to be returned as raw bson
				if(fieldsAsRaw[name]) {
					arrayOptions = {};
					for(var n in options) arrayOptions[n] = options[n];
					arrayOptions['raw'] = true;
				}

	      // Set the array to the object
	      object[name] = deserializeObject(buffer, arrayOptions, true);
	      // Adjust the index
	      index = index + objectSize;
			} else if(elementType == BSON.BSON_DATA_OBJECT) {
	      options['index'] = index;
	      // Decode the size of the object document
	      var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
				// Validate if string Size is larger than the actual provided buffer
				if(objectSize <= 0 || objectSize > (buffer.length - index)) throw new Error("bad embedded document length in bson");

				// We have a raw value
				if(options['raw']) {
					// Set the array to the object
		      object[name] = buffer.slice(index, index + objectSize);
				} else {
					// Set the array to the object
		      object[name] = deserializeObject(buffer, options, false);
				}

	      // Adjust the index
	      index = index + objectSize;
			} else if(elementType == BSON.BSON_DATA_REGEXP && bsonRegExp == false) {
	      // Create the regexp
				var r = readCStyleStringSpecial(buffer, index);
				var source = r.s;
				index = r.i;

				var r = readCStyleStringSpecial(buffer, index);
				var regExpOptions = r.s;
				index = r.i;

	      // For each option add the corresponding one for javascript
	      var optionsArray = new Array(regExpOptions.length);

	      // Parse options
	      for(var i = 0; i < regExpOptions.length; i++) {
	        switch(regExpOptions[i]) {
	          case 'm':
	            optionsArray[i] = 'm';
	            break;
	          case 's':
	            optionsArray[i] = 'g';
	            break;
	          case 'i':
	            optionsArray[i] = 'i';
	            break;
	        }
	      }

	      object[name] = new RegExp(source, optionsArray.join(''));
	    } else if(elementType == BSON.BSON_DATA_REGEXP && bsonRegExp == true) {
	      // Create the regexp
	      var r = readCStyleStringSpecial(buffer, index);
	      var source = r.s;
	      index = r.i;

	      var r = readCStyleStringSpecial(buffer, index);
	      var regExpOptions = r.s;
	      index = r.i;

	      // Set the object
	      object[name] = new BSONRegExp(source, regExpOptions);      
			} else if(elementType == BSON.BSON_DATA_LONG) {
	      // Unpack the low and high bits
	      var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      // Create long object
	      var long = new Long(lowBits, highBits);
	      // Promote the long if possible
	      if(promoteLongs) {
	        object[name] = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;
	      } else {
	        object[name] = long;
	      }
			} else if(elementType == BSON.BSON_DATA_SYMBOL) {
	      // Read the content of the field
	      var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
				// Validate if string Size is larger than the actual provided buffer
				if(stringSize <= 0 || stringSize > (buffer.length - index) || buffer[index + stringSize - 1] != 0) throw new Error("bad string length in bson");
	      // Add string to object
	      object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));
	      // Update parse index position
	      index = index + stringSize;
			} else if(elementType == BSON.BSON_DATA_TIMESTAMP) {
	      // Unpack the low and high bits
	      var lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      var highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      // Set the object
	      object[name] = new Timestamp(lowBits, highBits);
			} else if(elementType == BSON.BSON_DATA_MIN_KEY) {
	      // Parse the object
	      object[name] = new MinKey();
			} else if(elementType == BSON.BSON_DATA_MAX_KEY) {
	      // Parse the object
	      object[name] = new MaxKey();
			} else if(elementType == BSON.BSON_DATA_CODE) {
	      // Read the content of the field
	      var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
				// Validate if string Size is larger than the actual provided buffer
				if(stringSize <= 0 || stringSize > (buffer.length - index) || buffer[index + stringSize - 1] != 0) throw new Error("bad string length in bson");
	      // Function string
	      var functionString = buffer.toString('utf8', index, index + stringSize - 1);

	      // If we are evaluating the functions
	      if(evalFunctions) {
	        // Contains the value we are going to set
	        var value = null;
	        // If we have cache enabled let's look for the md5 of the function in the cache
	        if(cacheFunctions) {
	          var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
	          // Got to do this to avoid V8 deoptimizing the call due to finding eval
	          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
	        } else {
	          // Set directly
	          object[name] = isolateEval(functionString);
	        }
	      } else {
	        object[name]  = new Code(functionString, {});
	      }

	      // Update parse index position
	      index = index + stringSize;
			} else if(elementType == BSON.BSON_DATA_CODE_W_SCOPE) {
	      // Read the content of the field
	      var totalSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
	      var stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;
				// Validate if string Size is larger than the actual provided buffer
				if(stringSize <= 0 || stringSize > (buffer.length - index) || buffer[index + stringSize - 1] != 0) throw new Error("bad string length in bson");
	      // Javascript function
	      var functionString = buffer.toString('utf8', index, index + stringSize - 1);
	      // Update parse index position
	      index = index + stringSize;
	      // Parse the element
	      options['index'] = index;
	      // Decode the size of the object document
	      var objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;
	      // Decode the scope object
	      var scopeObject = deserializeObject(buffer, options, false);
	      // Adjust the index
	      index = index + objectSize;

	      // If we are evaluating the functions
	      if(evalFunctions) {
	        // Contains the value we are going to set
	        var value = null;
	        // If we have cache enabled let's look for the md5 of the function in the cache
	        if(cacheFunctions) {
	          var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
	          // Got to do this to avoid V8 deoptimizing the call due to finding eval
	          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
	        } else {
	          // Set directly
	          object[name] = isolateEval(functionString);
	        }

	        // Set the scope on the object
	        object[name].scope = scopeObject;
	      } else {
	        object[name]  = new Code(functionString, scopeObject);
	      }
	    }
	  }

	  // Check if we have a db ref object
	  if(object['$id'] != null) object = new DBRef(object['$ref'], object['$id'], object['$db']);

	  // Return the final objects
	  return object;
	}

	/**
	 * Ensure eval is isolated.
	 *
	 * @ignore
	 * @api private
	 */
	var isolateEvalWithHash = function(functionCache, hash, functionString, object) {
	  // Contains the value we are going to set
	  var value = null;

	  // Check for cache hit, eval if missing and return cached function
	  if(functionCache[hash] == null) {
	    eval("value = " + functionString);
	    functionCache[hash] = value;
	  }
	  // Set the object
	  return functionCache[hash].bind(object);
	}

	/**
	 * Ensure eval is isolated.
	 *
	 * @ignore
	 * @api private
	 */
	var isolateEval = function(functionString) {
	  // Contains the value we are going to set
	  var value = null;
	  // Eval the function
	  eval("value = " + functionString);
	  return value;
	}

	var BSON = {};

	/**
	 * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5
	 *
	 * @ignore
	 * @api private
	 */
	var functionCache = BSON.functionCache = {};

	/**
	 * Number BSON Type
	 *
	 * @classconstant BSON_DATA_NUMBER
	 **/
	BSON.BSON_DATA_NUMBER = 1;
	/**
	 * String BSON Type
	 *
	 * @classconstant BSON_DATA_STRING
	 **/
	BSON.BSON_DATA_STRING = 2;
	/**
	 * Object BSON Type
	 *
	 * @classconstant BSON_DATA_OBJECT
	 **/
	BSON.BSON_DATA_OBJECT = 3;
	/**
	 * Array BSON Type
	 *
	 * @classconstant BSON_DATA_ARRAY
	 **/
	BSON.BSON_DATA_ARRAY = 4;
	/**
	 * Binary BSON Type
	 *
	 * @classconstant BSON_DATA_BINARY
	 **/
	BSON.BSON_DATA_BINARY = 5;
	/**
	 * ObjectID BSON Type
	 *
	 * @classconstant BSON_DATA_OID
	 **/
	BSON.BSON_DATA_OID = 7;
	/**
	 * Boolean BSON Type
	 *
	 * @classconstant BSON_DATA_BOOLEAN
	 **/
	BSON.BSON_DATA_BOOLEAN = 8;
	/**
	 * Date BSON Type
	 *
	 * @classconstant BSON_DATA_DATE
	 **/
	BSON.BSON_DATA_DATE = 9;
	/**
	 * null BSON Type
	 *
	 * @classconstant BSON_DATA_NULL
	 **/
	BSON.BSON_DATA_NULL = 10;
	/**
	 * RegExp BSON Type
	 *
	 * @classconstant BSON_DATA_REGEXP
	 **/
	BSON.BSON_DATA_REGEXP = 11;
	/**
	 * Code BSON Type
	 *
	 * @classconstant BSON_DATA_CODE
	 **/
	BSON.BSON_DATA_CODE = 13;
	/**
	 * Symbol BSON Type
	 *
	 * @classconstant BSON_DATA_SYMBOL
	 **/
	BSON.BSON_DATA_SYMBOL = 14;
	/**
	 * Code with Scope BSON Type
	 *
	 * @classconstant BSON_DATA_CODE_W_SCOPE
	 **/
	BSON.BSON_DATA_CODE_W_SCOPE = 15;
	/**
	 * 32 bit Integer BSON Type
	 *
	 * @classconstant BSON_DATA_INT
	 **/
	BSON.BSON_DATA_INT = 16;
	/**
	 * Timestamp BSON Type
	 *
	 * @classconstant BSON_DATA_TIMESTAMP
	 **/
	BSON.BSON_DATA_TIMESTAMP = 17;
	/**
	 * Long BSON Type
	 *
	 * @classconstant BSON_DATA_LONG
	 **/
	BSON.BSON_DATA_LONG = 18;
	/**
	 * MinKey BSON Type
	 *
	 * @classconstant BSON_DATA_MIN_KEY
	 **/
	BSON.BSON_DATA_MIN_KEY = 0xff;
	/**
	 * MaxKey BSON Type
	 *
	 * @classconstant BSON_DATA_MAX_KEY
	 **/
	BSON.BSON_DATA_MAX_KEY = 0x7f;

	/**
	 * Binary Default Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
	 **/
	BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;
	/**
	 * Binary Function Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
	 **/
	BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;
	/**
	 * Binary Byte Array Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
	 **/
	BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * Binary UUID Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_UUID
	 **/
	BSON.BSON_BINARY_SUBTYPE_UUID = 3;
	/**
	 * Binary MD5 Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_MD5
	 **/
	BSON.BSON_BINARY_SUBTYPE_MD5 = 4;
	/**
	 * Binary User Defined Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
	 **/
	BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

	// BSON MAX VALUES
	BSON.BSON_INT32_MAX = 0x7FFFFFFF;
	BSON.BSON_INT32_MIN = -0x80000000;

	BSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;
	BSON.BSON_INT64_MIN = -Math.pow(2, 63);

	// JS MAX PRECISE VALUES
	BSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.
	BSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.

	// Internal long versions
	var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.
	var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.

	module.exports = deserialize


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict"

	var writeIEEE754 = __webpack_require__(176).writeIEEE754,
	  readIEEE754 = __webpack_require__(176).readIEEE754,
	  Long = __webpack_require__(177).Long,
	  Double = __webpack_require__(178).Double,
	  Timestamp = __webpack_require__(179).Timestamp,
	  ObjectID = __webpack_require__(180).ObjectID,
	  Symbol = __webpack_require__(183).Symbol,
	  Code = __webpack_require__(184).Code,
	  BSONRegExp = __webpack_require__(182).BSONRegExp,
	  MinKey = __webpack_require__(185).MinKey,
	  MaxKey = __webpack_require__(186).MaxKey,
	  DBRef = __webpack_require__(187).DBRef,
	  Binary = __webpack_require__(188).Binary;

	var regexp = /\x00/

	// To ensure that 0.4 of node works correctly
	var isDate = function isDate(d) {
	  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';
	}

	var isRegExp = function isRegExp(d) {
	  return Object.prototype.toString.call(d) === '[object RegExp]';
	}

	var serializeString = function(buffer, key, value, index) {
	  // Encode String type
	  buffer[index++] = BSON.BSON_DATA_STRING;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes + 1;
	  buffer[index - 1] = 0;
	  // Write the string
	  var size = buffer.write(value, index + 4, 'utf8');
	  // Write the size of the string to buffer
	  buffer[index + 3] = (size + 1 >> 24) & 0xff;
	  buffer[index + 2] = (size + 1 >> 16) & 0xff;
	  buffer[index + 1] = (size + 1 >> 8) & 0xff;
	  buffer[index] = size + 1 & 0xff;
	  // Update index
	  index = index + 4 + size;
	  // Write zero
	  buffer[index++] = 0;
	  return index;
	}

	var serializeNumber = function(buffer, key, value, index) {
	  // We have an integer value
	  if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	    // If the value fits in 32 bits encode as int, if it fits in a double
	    // encode it as a double, otherwise long
	    if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {
	      // Set int type 32 bits or less
	      buffer[index++] = BSON.BSON_DATA_INT;
	      // Number of written bytes
	      var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	      // Encode the name
	      index = index + numberOfWrittenBytes;
	      buffer[index++] = 0;
	      // Write the int value
	      buffer[index++] = value & 0xff;
	      buffer[index++] = (value >> 8) & 0xff;
	      buffer[index++] = (value >> 16) & 0xff;
	      buffer[index++] = (value >> 24) & 0xff;
	    } else if(value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	      // Encode as double
	      buffer[index++] = BSON.BSON_DATA_NUMBER;
	      // Number of written bytes
	      var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	      // Encode the name
	      index = index + numberOfWrittenBytes;
	      buffer[index++] = 0;
	      // Write float
	      writeIEEE754(buffer, value, index, 'little', 52, 8);
	      // Ajust index
	      index = index + 8;
	    } else {
	      // Set long type
	      buffer[index++] = BSON.BSON_DATA_LONG;
	      // Number of written bytes
	      var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	      // Encode the name
	      index = index + numberOfWrittenBytes;
	      buffer[index++] = 0;
	      var longVal = Long.fromNumber(value);
	      var lowBits = longVal.getLowBits();
	      var highBits = longVal.getHighBits();
	      // Encode low bits
	      buffer[index++] = lowBits & 0xff;
	      buffer[index++] = (lowBits >> 8) & 0xff;
	      buffer[index++] = (lowBits >> 16) & 0xff;
	      buffer[index++] = (lowBits >> 24) & 0xff;
	      // Encode high bits
	      buffer[index++] = highBits & 0xff;
	      buffer[index++] = (highBits >> 8) & 0xff;
	      buffer[index++] = (highBits >> 16) & 0xff;
	      buffer[index++] = (highBits >> 24) & 0xff;
	    }
	  } else {
	    // Encode as double
	    buffer[index++] = BSON.BSON_DATA_NUMBER;
	    // Number of written bytes
	    var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	    // Encode the name
	    index = index + numberOfWrittenBytes;
	    buffer[index++] = 0;
	    // Write float
	    writeIEEE754(buffer, value, index, 'little', 52, 8);
	    // Ajust index
	    index = index + 8;
	  }

	  return index;
	}

	var serializeUndefined = function(buffer, key, value, index) {
	  // Set long type
	  buffer[index++] = BSON.BSON_DATA_NULL;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  return index;
	}

	var serializeBoolean = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_BOOLEAN;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Encode the boolean value
	  buffer[index++] = value ? 1 : 0;
	  return index;
	}

	var serializeDate = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_DATE;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;

	  // Write the date
	  var dateInMilis = Long.fromNumber(value.getTime());
	  var lowBits = dateInMilis.getLowBits();
	  var highBits = dateInMilis.getHighBits();
	  // Encode low bits
	  buffer[index++] = lowBits & 0xff;
	  buffer[index++] = (lowBits >> 8) & 0xff;
	  buffer[index++] = (lowBits >> 16) & 0xff;
	  buffer[index++] = (lowBits >> 24) & 0xff;
	  // Encode high bits
	  buffer[index++] = highBits & 0xff;
	  buffer[index++] = (highBits >> 8) & 0xff;
	  buffer[index++] = (highBits >> 16) & 0xff;
	  buffer[index++] = (highBits >> 24) & 0xff;
	  return index;
	}

	var serializeRegExp = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_REGEXP;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Adjust the index
	  index = index + buffer.write(value.source, index, 'utf8');
	  // Write zero
	  buffer[index++] = 0x00;
	  // Write the parameters
	  if(value.global) buffer[index++] = 0x73; // s
	  if(value.ignoreCase) buffer[index++] = 0x69; // i
	  if(value.multiline) buffer[index++] = 0x6d; // m
	  // Add ending zero
	  buffer[index++] = 0x00;
	  return index;
	}

	var serializeBSONRegExp = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_REGEXP;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Adjust the index
	  index = index + buffer.write(value.pattern, index, 'utf8');
	  // Write zero
	  buffer[index++] = 0x00;
	  // Write the options
	  index = index + buffer.write(value.options, index, 'utf8');
	  // Add ending zero
	  buffer[index++] = 0x00;
	  return index;
	}

	var serializeMinMax = function(buffer, key, value, index) {
	  // Write the type of either min or max key
	  if(value === null) {
	    buffer[index++] = BSON.BSON_DATA_NULL;
	  } else if(value instanceof MinKey) {
	    buffer[index++] = BSON.BSON_DATA_MIN_KEY;
	  } else {
	    buffer[index++] = BSON.BSON_DATA_MAX_KEY;
	  }

	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  return index;
	}

	var serializeObjectId = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_OID;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');

	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;

	  // Write the objectId into the shared buffer
	  buffer.write(value.id, index, 'binary')

	  // Ajust index
	  return index + 12;
	}

	var serializeBuffer = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_BINARY;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Get size of the buffer (current write point)
	  var size = value.length;
	  // Write the size of the string to buffer
	  buffer[index++] = size & 0xff;
	  buffer[index++] = (size >> 8) & 0xff;
	  buffer[index++] = (size >> 16) & 0xff;
	  buffer[index++] = (size >> 24) & 0xff;
	  // Write the default subtype
	  buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;
	  // Copy the content form the binary field to the buffer
	  value.copy(buffer, index, 0, size);
	  // Adjust the index
	  index = index + size;
	  return index;
	}

	var serializeObject = function(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined) {
	  // Write the type
	  buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  var endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined);
	  // Write size
	  var size = endIndex - index;
	  return endIndex;
	}

	var serializeLong = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = value instanceof Long ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Write the date
	  var lowBits = value.getLowBits();
	  var highBits = value.getHighBits();
	  // Encode low bits
	  buffer[index++] = lowBits & 0xff;
	  buffer[index++] = (lowBits >> 8) & 0xff;
	  buffer[index++] = (lowBits >> 16) & 0xff;
	  buffer[index++] = (lowBits >> 24) & 0xff;
	  // Encode high bits
	  buffer[index++] = highBits & 0xff;
	  buffer[index++] = (highBits >> 8) & 0xff;
	  buffer[index++] = (highBits >> 16) & 0xff;
	  buffer[index++] = (highBits >> 24) & 0xff;
	  return index;
	}

	var serializeDouble = function(buffer, key, value, index) {
	  // Encode as double
	  buffer[index++] = BSON.BSON_DATA_NUMBER;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Write float
	  writeIEEE754(buffer, value, index, 'little', 52, 8);
	  // Ajust index
	  index = index + 8;
	  return index;
	}

	var serializeFunction = function(buffer, key, value, index, checkKeys, depth) {
	  buffer[index++] = BSON.BSON_DATA_CODE;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Function string
	  var functionString = value.toString();
	  // Write the string
	  var size = buffer.write(functionString, index + 4, 'utf8') + 1;
	  // Write the size of the string to buffer
	  buffer[index] = size & 0xff;
	  buffer[index + 1] = (size >> 8) & 0xff;
	  buffer[index + 2] = (size >> 16) & 0xff;
	  buffer[index + 3] = (size >> 24) & 0xff;
	  // Update index
	  index = index + 4 + size - 1;
	  // Write zero
	  buffer[index++] = 0;
	  return index;
	}

	var serializeCode = function(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined) {
	  if(value.scope != null && Object.keys(value.scope).length > 0) {
	    // Write the type
	    buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;
	    // Number of written bytes
	    var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	    // Encode the name
	    index = index + numberOfWrittenBytes;
	    buffer[index++] = 0;

	    // Starting index
	    var startIndex = index;

	    // Serialize the function
	    // Get the function string
	    var functionString = typeof value.code == 'string' ? value.code : value.code.toString();
	    // Index adjustment
	    index = index + 4;
	    // Write string into buffer
	    var codeSize = buffer.write(functionString, index + 4, 'utf8') + 1;
	    // Write the size of the string to buffer
	    buffer[index] = codeSize & 0xff;
	    buffer[index + 1] = (codeSize >> 8) & 0xff;
	    buffer[index + 2] = (codeSize >> 16) & 0xff;
	    buffer[index + 3] = (codeSize >> 24) & 0xff;
	    // Write end 0
	    buffer[index + 4 + codeSize - 1] = 0;
	    // Write the
	    index = index + codeSize + 4;

	    //
	    // Serialize the scope value
	    var endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined)
	    index = endIndex - 1;

	    // Writ the total
	    var totalSize = endIndex - startIndex;

	    // Write the total size of the object
	    buffer[startIndex++] = totalSize & 0xff;
	    buffer[startIndex++] = (totalSize >> 8) & 0xff;
	    buffer[startIndex++] = (totalSize >> 16) & 0xff;
	    buffer[startIndex++] = (totalSize >> 24) & 0xff;
	    // Write trailing zero
	    buffer[index++] = 0;
	  } else {
	    buffer[index++] = BSON.BSON_DATA_CODE;
	    // Number of written bytes
	    var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	    // Encode the name
	    index = index + numberOfWrittenBytes;
	    buffer[index++] = 0;
	    // Function string
	    var functionString = value.code.toString();
	    // Write the string
	    var size = buffer.write(functionString, index + 4, 'utf8') + 1;
	    // Write the size of the string to buffer
	    buffer[index] = size & 0xff;
	    buffer[index + 1] = (size >> 8) & 0xff;
	    buffer[index + 2] = (size >> 16) & 0xff;
	    buffer[index + 3] = (size >> 24) & 0xff;
	    // Update index
	    index = index + 4 + size - 1;
	    // Write zero
	    buffer[index++] = 0;
	  }

	  return index;
	}

	var serializeBinary = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_BINARY;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Extract the buffer
	  var data = value.value(true);
	  // Calculate size
	  var size = value.position;
	  // Write the size of the string to buffer
	  buffer[index++] = size & 0xff;
	  buffer[index++] = (size >> 8) & 0xff;
	  buffer[index++] = (size >> 16) & 0xff;
	  buffer[index++] = (size >> 24) & 0xff;
	  // Write the subtype to the buffer
	  buffer[index++] = value.sub_type;

	  // If we have binary type 2 the 4 first bytes are the size
	  if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {
	    buffer[index++] = size & 0xff;
	    buffer[index++] = (size >> 8) & 0xff;
	    buffer[index++] = (size >> 16) & 0xff;
	    buffer[index++] = (size >> 24) & 0xff;
	  }

	  // Write the data to the object
	  data.copy(buffer, index, 0, value.position);
	  // Adjust the index
	  index = index + value.position;
	  return index;
	}

	var serializeSymbol = function(buffer, key, value, index) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_SYMBOL;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');
	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;
	  // Write the string
	  var size = buffer.write(value.value, index + 4, 'utf8') + 1;
	  // Write the size of the string to buffer
	  buffer[index] = size & 0xff;
	  buffer[index + 1] = (size >> 8) & 0xff;
	  buffer[index + 2] = (size >> 16) & 0xff;
	  buffer[index + 3] = (size >> 24) & 0xff;
	  // Update index
	  index = index + 4 + size - 1;
	  // Write zero
	  buffer[index++] = 0x00;
	  return index;
	}

	var serializeDBRef = function(buffer, key, value, index, depth, serializeFunctions) {
	  // Write the type
	  buffer[index++] = BSON.BSON_DATA_OBJECT;
	  // Number of written bytes
	  var numberOfWrittenBytes = buffer.write(key, index, 'utf8');

	  // Encode the name
	  index = index + numberOfWrittenBytes;
	  buffer[index++] = 0;

	  var startIndex = index;
	  var endIndex;

	  // Serialize object
	  if(null != value.db) {
	    endIndex = serializeInto(buffer, {
	        '$ref': value.namespace
	      , '$id' : value.oid
	      , '$db' : value.db
	    }, false, index, depth + 1, serializeFunctions);
	  } else {
	    endIndex = serializeInto(buffer, {
	        '$ref': value.namespace
	      , '$id' : value.oid
	    }, false, index, depth + 1, serializeFunctions);
	  }

	  // Calculate object size
	  var size = endIndex - startIndex;
	  // Write the size
	  buffer[startIndex++] = size & 0xff;
	  buffer[startIndex++] = (size >> 8) & 0xff;
	  buffer[startIndex++] = (size >> 16) & 0xff;
	  buffer[startIndex++] = (size >> 24) & 0xff;
	  // Set index
	  return endIndex;
	}

	var serializeInto = function serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined) {
	  startingIndex = startingIndex || 0;

	  // Start place to serialize into
	  var index = startingIndex + 4;
	  var self = this;

	  // Special case isArray
	  if(Array.isArray(object)) {
	    // Get object keys
	    for(var i = 0; i < object.length; i++) {
	      var key = "" + i;
	      var value = object[i];

	      // Is there an override value
	      if(value && value.toBSON) {
	        if(typeof value.toBSON != 'function') throw new Error("toBSON is not a function");
	        value = value.toBSON();
	      }

	      var type = typeof value;

	      if(type == 'string') {
	        index = serializeString(buffer, key, value, index);
	      } else if(type == 'number') {
	        index = serializeNumber(buffer, key, value, index);
	      } else if(type == 'boolean') {
	        index = serializeBoolean(buffer, key, value, index);
	      } else if(value instanceof Date || isDate(value)) {
	        index = serializeDate(buffer, key, value, index);
	      } else if(type == 'undefined' || value == null) {
	        index = serializeUndefined(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'ObjectID') {
	        index = serializeObjectId(buffer, key, value, index);
	      } else if(Buffer.isBuffer(value)) {
	        index = serializeBuffer(buffer, key, value, index);
	      } else if(value instanceof RegExp || isRegExp(value)) {
	        index = serializeRegExp(buffer, key, value, index);
	      } else if(type == 'object' && value['_bsontype'] == null) {
	        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
	      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {
	        index = serializeLong(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'Double') {
	        index = serializeDouble(buffer, key, value, index);
	      } else if(typeof value == 'function' && serializeFunctions) {
	        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
	      } else if(value['_bsontype'] == 'Code') {
	        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
	      } else if(value['_bsontype'] == 'Binary') {
	        index = serializeBinary(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'Symbol') {
	        index = serializeSymbol(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'DBRef') {
	        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
	      } else if(value['_bsontype'] == 'BSONRegExp') {
	        index = serializeBSONRegExp(buffer, key, value, index);        
	      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {
	        index = serializeMinMax(buffer, key, value, index);
	      }
	    }
	  } else {
	    // Did we provide a custom serialization method
	    if(object.toBSON) {
	      if(typeof object.toBSON != 'function') throw new Error("toBSON is not a function");
	      object = object.toBSON();
	      if(object != null && typeof object != 'object') throw new Error("toBSON function did not return an object");
	    }

	    // Iterate over all the keys
	    for(var key in object) {
	      var value = object[key];
	      // Is there an override value
	      if(value && value.toBSON) {
	        if(typeof value.toBSON != 'function') throw new Error("toBSON is not a function");
	        value = value.toBSON();
	      }

	      // Check the type of the value
	      var type = typeof value;

	      // Check the key and throw error if it's illegal
	      if(key != '$db' && key != '$ref' && key != '$id') {
	        if (key.match(regexp) != null) {
	          // The BSON spec doesn't allow keys with null bytes because keys are
	          // null-terminated.
	          throw Error("key " + key + " must not contain null bytes");
	        }

	        if (checkKeys) {
	          if('$' == key[0]) {
	            throw Error("key " + key + " must not start with '$'");
	          } else if (!!~key.indexOf('.')) {
	            throw Error("key " + key + " must not contain '.'");
	          }
	        }
	      }

	      if(type == 'string') {
	        index = serializeString(buffer, key, value, index);
	      } else if(type == 'number') {
	        index = serializeNumber(buffer, key, value, index);
	      } else if(type == 'boolean') {
	        index = serializeBoolean(buffer, key, value, index);
	      } else if(value instanceof Date || isDate(value)) {
	        index = serializeDate(buffer, key, value, index);
	      } else if(value === undefined && ignoreUndefined == true) {
	      } else if(value === null || value === undefined) {
	        index = serializeUndefined(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'ObjectID') {
	        index = serializeObjectId(buffer, key, value, index);
	      } else if(Buffer.isBuffer(value)) {
	        index = serializeBuffer(buffer, key, value, index);
	      } else if(value instanceof RegExp || isRegExp(value)) {
	        index = serializeRegExp(buffer, key, value, index);
	      } else if(type == 'object' && value['_bsontype'] == null) {
	        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
	      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {
	        index = serializeLong(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'Double') {
	        index = serializeDouble(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'Code') {
	        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
	      } else if(typeof value == 'function' && serializeFunctions) {
	        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
	      } else if(value['_bsontype'] == 'Binary') {
	        index = serializeBinary(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'Symbol') {
	        index = serializeSymbol(buffer, key, value, index);
	      } else if(value['_bsontype'] == 'DBRef') {
	        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
	      } else if(value['_bsontype'] == 'BSONRegExp') {
	        index = serializeBSONRegExp(buffer, key, value, index);        
	      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {
	        index = serializeMinMax(buffer, key, value, index);
	      }
	    }
	  }

	  // Final padding byte for object
	  buffer[index++] = 0x00;

	  // Final size
	  var size = index - startingIndex;
	  // Write the size of the object
	  buffer[startingIndex++] = size & 0xff;
	  buffer[startingIndex++] = (size >> 8) & 0xff;
	  buffer[startingIndex++] = (size >> 16) & 0xff;
	  buffer[startingIndex++] = (size >> 24) & 0xff;
	  return index;
	}

	var BSON = {};

	/**
	 * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5
	 *
	 * @ignore
	 * @api private
	 */
	var functionCache = BSON.functionCache = {};

	/**
	 * Number BSON Type
	 *
	 * @classconstant BSON_DATA_NUMBER
	 **/
	BSON.BSON_DATA_NUMBER = 1;
	/**
	 * String BSON Type
	 *
	 * @classconstant BSON_DATA_STRING
	 **/
	BSON.BSON_DATA_STRING = 2;
	/**
	 * Object BSON Type
	 *
	 * @classconstant BSON_DATA_OBJECT
	 **/
	BSON.BSON_DATA_OBJECT = 3;
	/**
	 * Array BSON Type
	 *
	 * @classconstant BSON_DATA_ARRAY
	 **/
	BSON.BSON_DATA_ARRAY = 4;
	/**
	 * Binary BSON Type
	 *
	 * @classconstant BSON_DATA_BINARY
	 **/
	BSON.BSON_DATA_BINARY = 5;
	/**
	 * ObjectID BSON Type
	 *
	 * @classconstant BSON_DATA_OID
	 **/
	BSON.BSON_DATA_OID = 7;
	/**
	 * Boolean BSON Type
	 *
	 * @classconstant BSON_DATA_BOOLEAN
	 **/
	BSON.BSON_DATA_BOOLEAN = 8;
	/**
	 * Date BSON Type
	 *
	 * @classconstant BSON_DATA_DATE
	 **/
	BSON.BSON_DATA_DATE = 9;
	/**
	 * null BSON Type
	 *
	 * @classconstant BSON_DATA_NULL
	 **/
	BSON.BSON_DATA_NULL = 10;
	/**
	 * RegExp BSON Type
	 *
	 * @classconstant BSON_DATA_REGEXP
	 **/
	BSON.BSON_DATA_REGEXP = 11;
	/**
	 * Code BSON Type
	 *
	 * @classconstant BSON_DATA_CODE
	 **/
	BSON.BSON_DATA_CODE = 13;
	/**
	 * Symbol BSON Type
	 *
	 * @classconstant BSON_DATA_SYMBOL
	 **/
	BSON.BSON_DATA_SYMBOL = 14;
	/**
	 * Code with Scope BSON Type
	 *
	 * @classconstant BSON_DATA_CODE_W_SCOPE
	 **/
	BSON.BSON_DATA_CODE_W_SCOPE = 15;
	/**
	 * 32 bit Integer BSON Type
	 *
	 * @classconstant BSON_DATA_INT
	 **/
	BSON.BSON_DATA_INT = 16;
	/**
	 * Timestamp BSON Type
	 *
	 * @classconstant BSON_DATA_TIMESTAMP
	 **/
	BSON.BSON_DATA_TIMESTAMP = 17;
	/**
	 * Long BSON Type
	 *
	 * @classconstant BSON_DATA_LONG
	 **/
	BSON.BSON_DATA_LONG = 18;
	/**
	 * MinKey BSON Type
	 *
	 * @classconstant BSON_DATA_MIN_KEY
	 **/
	BSON.BSON_DATA_MIN_KEY = 0xff;
	/**
	 * MaxKey BSON Type
	 *
	 * @classconstant BSON_DATA_MAX_KEY
	 **/
	BSON.BSON_DATA_MAX_KEY = 0x7f;

	/**
	 * Binary Default Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
	 **/
	BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;
	/**
	 * Binary Function Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
	 **/
	BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;
	/**
	 * Binary Byte Array Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
	 **/
	BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * Binary UUID Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_UUID
	 **/
	BSON.BSON_BINARY_SUBTYPE_UUID = 3;
	/**
	 * Binary MD5 Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_MD5
	 **/
	BSON.BSON_BINARY_SUBTYPE_MD5 = 4;
	/**
	 * Binary User Defined Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
	 **/
	BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

	// BSON MAX VALUES
	BSON.BSON_INT32_MAX = 0x7FFFFFFF;
	BSON.BSON_INT32_MIN = -0x80000000;

	BSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;
	BSON.BSON_INT64_MIN = -Math.pow(2, 63);

	// JS MAX PRECISE VALUES
	BSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.
	BSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.

	// Internal long versions
	var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.
	var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.

	module.exports = serializeInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict"

	var writeIEEE754 = __webpack_require__(176).writeIEEE754
		, readIEEE754 = __webpack_require__(176).readIEEE754
		, Long = __webpack_require__(177).Long
	  , Double = __webpack_require__(178).Double
	  , Timestamp = __webpack_require__(179).Timestamp
	  , ObjectID = __webpack_require__(180).ObjectID
	  , Symbol = __webpack_require__(183).Symbol
	  , BSONRegExp = __webpack_require__(182).BSONRegExp
	  , Code = __webpack_require__(184).Code
	  , MinKey = __webpack_require__(185).MinKey
	  , MaxKey = __webpack_require__(186).MaxKey
	  , DBRef = __webpack_require__(187).DBRef
	  , Binary = __webpack_require__(188).Binary;

	// To ensure that 0.4 of node works correctly
	var isDate = function isDate(d) {
	  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';
	}

	var calculateObjectSize = function calculateObjectSize(object, serializeFunctions, ignoreUndefined) {
	  var totalLength = (4 + 1);

	  if(Array.isArray(object)) {
	    for(var i = 0; i < object.length; i++) {
	      totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined)
	    }
	  } else {
			// If we have toBSON defined, override the current object
			if(object.toBSON) {
				object = object.toBSON();
			}

			// Calculate size
	    for(var key in object) {
	      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined)
	    }
	  }

	  return totalLength;
	}

	/**
	 * @ignore
	 * @api private
	 */
	function calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {
		// If we have toBSON defined, override the current object
	  if(value && value.toBSON){
	    value = value.toBSON();
	  }

	  switch(typeof value) {
	    case 'string':
	      return 1 + Buffer.byteLength(name, 'utf8') + 1 + 4 + Buffer.byteLength(value, 'utf8') + 1;
	    case 'number':
	      if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {
	        if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) { // 32 bit
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (4 + 1);
	        } else {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (8 + 1);
	        }
	      } else {  // 64 bit
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (8 + 1);
	      }
	    case 'undefined':
	      if(isArray || !ignoreUndefined) return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (1);
	      return 0;
	    case 'boolean':
	      return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (1 + 1);
	    case 'object':
	      if(value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (1);
	      } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (12 + 1);
	      } else if(value instanceof Date || isDate(value)) {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (8 + 1);
	      } else if(typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (1 + 4 + 1) + value.length;
	      } else if(value instanceof Long || value instanceof Double || value instanceof Timestamp
	          || value['_bsontype'] == 'Long' || value['_bsontype'] == 'Double' || value['_bsontype'] == 'Timestamp') {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (8 + 1);
	      } else if(value instanceof Code || value['_bsontype'] == 'Code') {
	        // Calculate size depending on the availability of a scope
	        if(value.scope != null && Object.keys(value.scope).length > 0) {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + 4 + 4 + Buffer.byteLength(value.code.toString(), 'utf8') + 1 + calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);
	        } else {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + 4 + Buffer.byteLength(value.code.toString(), 'utf8') + 1;
	        }
	      } else if(value instanceof Binary || value['_bsontype'] == 'Binary') {
	        // Check what kind of subtype we have
	        if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (value.position + 1 + 4 + 1 + 4);
	        } else {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (value.position + 1 + 4 + 1);
	        }
	      } else if(value instanceof Symbol || value['_bsontype'] == 'Symbol') {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + Buffer.byteLength(value.value, 'utf8') + 4 + 1 + 1;
	      } else if(value instanceof DBRef || value['_bsontype'] == 'DBRef') {
	        // Set up correct object for serialization
	        var ordered_values = {
	            '$ref': value.namespace
	          , '$id' : value.oid
	        };

	        // Add db reference if it exists
	        if(null != value.db) {
	          ordered_values['$db'] = value.db;
	        }

	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + calculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined);
	      } else if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + Buffer.byteLength(value.source, 'utf8') + 1
	            + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1
	      } else if(value instanceof BSONRegExp || value['_bsontype'] == 'BSONRegExp') {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + Buffer.byteLength(value.pattern, 'utf8') + 1
	            + Buffer.byteLength(value.options, 'utf8') + 1
	      } else {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + calculateObjectSize(value, serializeFunctions, ignoreUndefined) + 1;
	      }
	    case 'function':
	      // WTF for 0.4.X where typeof /someregexp/ === 'function'
	      if(value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) == '[object RegExp]') {
	        return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + Buffer.byteLength(value.source, 'utf8') + 1
	          + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1
	      } else {
	        if(serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + 4 + 4 + Buffer.byteLength(value.toString(), 'utf8') + 1 + calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);
	        } else if(serializeFunctions) {
	          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + 1 + 4 + Buffer.byteLength(value.toString(), 'utf8') + 1;
	        }
	      }
	  }

	  return 0;
	}

	var BSON = {};

	/**
	 * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5
	 *
	 * @ignore
	 * @api private
	 */
	var functionCache = BSON.functionCache = {};

	/**
	 * Number BSON Type
	 *
	 * @classconstant BSON_DATA_NUMBER
	 **/
	BSON.BSON_DATA_NUMBER = 1;
	/**
	 * String BSON Type
	 *
	 * @classconstant BSON_DATA_STRING
	 **/
	BSON.BSON_DATA_STRING = 2;
	/**
	 * Object BSON Type
	 *
	 * @classconstant BSON_DATA_OBJECT
	 **/
	BSON.BSON_DATA_OBJECT = 3;
	/**
	 * Array BSON Type
	 *
	 * @classconstant BSON_DATA_ARRAY
	 **/
	BSON.BSON_DATA_ARRAY = 4;
	/**
	 * Binary BSON Type
	 *
	 * @classconstant BSON_DATA_BINARY
	 **/
	BSON.BSON_DATA_BINARY = 5;
	/**
	 * ObjectID BSON Type
	 *
	 * @classconstant BSON_DATA_OID
	 **/
	BSON.BSON_DATA_OID = 7;
	/**
	 * Boolean BSON Type
	 *
	 * @classconstant BSON_DATA_BOOLEAN
	 **/
	BSON.BSON_DATA_BOOLEAN = 8;
	/**
	 * Date BSON Type
	 *
	 * @classconstant BSON_DATA_DATE
	 **/
	BSON.BSON_DATA_DATE = 9;
	/**
	 * null BSON Type
	 *
	 * @classconstant BSON_DATA_NULL
	 **/
	BSON.BSON_DATA_NULL = 10;
	/**
	 * RegExp BSON Type
	 *
	 * @classconstant BSON_DATA_REGEXP
	 **/
	BSON.BSON_DATA_REGEXP = 11;
	/**
	 * Code BSON Type
	 *
	 * @classconstant BSON_DATA_CODE
	 **/
	BSON.BSON_DATA_CODE = 13;
	/**
	 * Symbol BSON Type
	 *
	 * @classconstant BSON_DATA_SYMBOL
	 **/
	BSON.BSON_DATA_SYMBOL = 14;
	/**
	 * Code with Scope BSON Type
	 *
	 * @classconstant BSON_DATA_CODE_W_SCOPE
	 **/
	BSON.BSON_DATA_CODE_W_SCOPE = 15;
	/**
	 * 32 bit Integer BSON Type
	 *
	 * @classconstant BSON_DATA_INT
	 **/
	BSON.BSON_DATA_INT = 16;
	/**
	 * Timestamp BSON Type
	 *
	 * @classconstant BSON_DATA_TIMESTAMP
	 **/
	BSON.BSON_DATA_TIMESTAMP = 17;
	/**
	 * Long BSON Type
	 *
	 * @classconstant BSON_DATA_LONG
	 **/
	BSON.BSON_DATA_LONG = 18;
	/**
	 * MinKey BSON Type
	 *
	 * @classconstant BSON_DATA_MIN_KEY
	 **/
	BSON.BSON_DATA_MIN_KEY = 0xff;
	/**
	 * MaxKey BSON Type
	 *
	 * @classconstant BSON_DATA_MAX_KEY
	 **/
	BSON.BSON_DATA_MAX_KEY = 0x7f;

	/**
	 * Binary Default Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
	 **/
	BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;
	/**
	 * Binary Function Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
	 **/
	BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;
	/**
	 * Binary Byte Array Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
	 **/
	BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
	/**
	 * Binary UUID Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_UUID
	 **/
	BSON.BSON_BINARY_SUBTYPE_UUID = 3;
	/**
	 * Binary MD5 Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_MD5
	 **/
	BSON.BSON_BINARY_SUBTYPE_MD5 = 4;
	/**
	 * Binary User Defined Type
	 *
	 * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
	 **/
	BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

	// BSON MAX VALUES
	BSON.BSON_INT32_MAX = 0x7FFFFFFF;
	BSON.BSON_INT32_MIN = -0x80000000;

	BSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;
	BSON.BSON_INT64_MIN = -Math.pow(2, 63);

	// JS MAX PRECISE VALUES
	BSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.
	BSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.

	// Internal long versions
	var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.
	var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.

	module.exports = calculateObjectSize;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var f = __webpack_require__(10).format
	  , MongoError = __webpack_require__(168);

	// Filters for classes
	var classFilters = {};
	var filteredClasses = {};
	var level = null;
	// Save the process id
	var pid = process.pid;
	// current logger
	var currentLogger = null;

	/**
	 * Creates a new Logger instance
	 * @class
	 * @param {string} className The Class name associated with the logging instance
	 * @param {object} [options=null] Optional settings.
	 * @param {Function} [options.logger=null] Custom logger function;
	 * @param {string} [options.loggerLevel=error] Override default global log level.
	 * @return {Logger} a Logger instance.
	 */
	var Logger = function(className, options) {
	  if(!(this instanceof Logger)) return new Logger(className, options);
	  options = options || {};

	  // Current reference
	  var self = this;
	  this.className = className;

	  // Current logger
	  if(currentLogger == null && options.logger) {
	    currentLogger = options.logger;
	  } else if(currentLogger == null) {
	    currentLogger = console.log;
	  }

	  // Set level of logging, default is error
	  if(level == null) {
	    level = options.loggerLevel || 'error';
	  }

	  // Add all class names
	  if(filteredClasses[this.className] == null) classFilters[this.className] =  true;
	}

	/**
	 * Log a message at the debug level
	 * @method
	 * @param {string} message The message to log
	 * @param {object} object additional meta data to log
	 * @return {null}
	 */
	Logger.prototype.debug = function(message, object) {
	  if(this.isDebug()
	    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])
	      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {
	    var dateTime = new Date().getTime();
	    var msg = f("[%s-%s:%s] %s %s", 'DEBUG', this.className, pid, dateTime, message);        
	    var state = {
	      type: 'debug', message: message, className: this.className, pid: pid, date: dateTime
	    };
	    if(object) state.meta = object;
	    currentLogger(msg, state);
	  }
	}

	/**
	 * Log a message at the info level
	 * @method
	 * @param {string} message The message to log
	 * @param {object} object additional meta data to log
	 * @return {null}
	 */
	Logger.prototype.info = function(message, object) {
	  if(this.isInfo()
	    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])
	      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {
	    var dateTime = new Date().getTime();
	    var msg = f("[%s-%s:%s] %s %s", 'INFO', this.className, pid, dateTime, message);
	    var state = {
	      type: 'info', message: message, className: this.className, pid: pid, date: dateTime
	    };
	    if(object) state.meta = object;
	    currentLogger(msg, state);
	  }
	},

	/**
	 * Log a message at the error level
	 * @method
	 * @param {string} message The message to log
	 * @param {object} object additional meta data to log
	 * @return {null}
	 */
	Logger.prototype.error = function(message, object) {
	  if(this.isError()
	    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])
	      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {
	    var dateTime = new Date().getTime();
	    var msg = f("[%s-%s:%s] %s %s", 'ERROR', this.className, pid, dateTime, message);
	    var state = {
	      type: 'error', message: message, className: this.className, pid: pid, date: dateTime
	    };
	    if(object) state.meta = object;
	    currentLogger(msg, state);
	  }
	},

	/**
	 * Is the logger set at info level
	 * @method
	 * @return {boolean}
	 */
	Logger.prototype.isInfo = function() {
	  return level == 'info' || level == 'debug';
	},

	/**
	 * Is the logger set at error level
	 * @method
	 * @return {boolean}
	 */
	Logger.prototype.isError = function() {
	  return level == 'error' || level == 'info' || level == 'debug';
	},

	/**
	 * Is the logger set at debug level
	 * @method
	 * @return {boolean}
	 */
	Logger.prototype.isDebug = function() {
	  return level == 'debug';
	}

	/**
	 * Resets the logger to default settings, error and no filtered classes
	 * @method
	 * @return {null}
	 */
	Logger.reset = function() {
	  level = 'error';
	  filteredClasses = {};
	}

	/**
	 * Get the current logger function
	 * @method
	 * @return {function}
	 */
	Logger.currentLogger = function() {
	  return currentLogger;
	}

	/**
	 * Set the current logger function
	 * @method
	 * @param {function} logger Logger function.
	 * @return {null}
	 */
	Logger.setCurrentLogger = function(logger) {
	  if(typeof logger != 'function') throw new MongoError("current logger must be a function");
	  currentLogger = logger;
	}

	/**
	 * Set what classes to log.
	 * @method
	 * @param {string} type The type of filter (currently only class)
	 * @param {string[]} values The filters to apply
	 * @return {null}
	 */
	Logger.filter = function(type, values) {
	  if(type == 'class' && Array.isArray(values)) {
	    filteredClasses = {};

	    values.forEach(function(x) {
	      filteredClasses[x] = true;
	    });
	  }
	}

	/**
	 * Set the current log level
	 * @method
	 * @param {string} level Set current log level (debug, info, error)
	 * @return {null}
	 */
	Logger.setLevel = function(_level) {
	  if(_level != 'info' && _level != 'error' && _level != 'debug') throw new Error(f("%s is an illegal logging level", _level));
	  level = _level;
	}

	module.exports = Logger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 193 */
/***/ function(module, exports) {

	"use strict";

	var needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];

	/**
	 * @fileOverview The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is
	 * used to construct connections.
	 * 
	 * @example
	 * var ReplSet = require('mongodb-core').ReplSet
	 *   , ReadPreference = require('mongodb-core').ReadPreference
	 *   , assert = require('assert');
	 * 
	 * var server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});
	 * // Wait for the connection event
	 * server.on('connect', function(server) {
	 *   var cursor = server.cursor('db.test'
	 *     , {find: 'db.test', query: {}}
	 *     , {readPreference: new ReadPreference('secondary')});
	 *   cursor.next(function(err, doc) {
	 *     server.destroy();
	 *   });
	 * });
	 * 
	 * // Start connecting
	 * server.connect();
	 */

	/**
	 * Creates a new Pool instance
	 * @class
	 * @param {string} preference A string describing the preference (primary|primaryPreferred|secondary|secondaryPreferred|nearest)
	 * @param {object} tags The tags object
	 * @param {object} [options] Additional read preference options
	 * @property {string} preference The preference string (primary|primaryPreferred|secondary|secondaryPreferred|nearest)
	 * @property {object} tags The tags object
	 * @property {object} options Additional read preference options
	 * @return {ReadPreference}
	 */
	var ReadPreference = function(preference, tags, options) {
	  this.preference = preference;
	  this.tags = tags;
	  this.options = options;
	}

	/**
	 * This needs slaveOk bit set
	 * @method
	 * @return {boolean}
	 */
	ReadPreference.prototype.slaveOk = function() {
	  return needSlaveOk.indexOf(this.preference) != -1;
	}

	/**
	 * Are the two read preference equal
	 * @method
	 * @return {boolean}
	 */
	ReadPreference.prototype.equals = function(readPreference) {
	  return readPreference.preference == this.preference;
	}

	/**
	 * Return JSON representation
	 * @method
	 * @return {Object}
	 */
	ReadPreference.prototype.toJSON = function() {
	  var readPreference = {mode: this.preference};
	  if(Array.isArray(this.tags)) readPreference.tags = this.tags;
	  return readPreference;
	}

	/**
	 * Primary read preference
	 * @method
	 * @return {ReadPreference}
	 */
	ReadPreference.primary = new ReadPreference('primary');
	/**
	 * Primary Preferred read preference
	 * @method
	 * @return {ReadPreference}
	 */
	ReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');
	/**
	 * Secondary read preference
	 * @method
	 * @return {ReadPreference}
	 */
	ReadPreference.secondary = new ReadPreference('secondary');
	/**
	 * Secondary Preferred read preference
	 * @method
	 * @return {ReadPreference}
	 */
	ReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');
	/**
	 * Nearest read preference
	 * @method
	 * @return {ReadPreference}
	 */
	ReadPreference.nearest = new ReadPreference('nearest');

	module.exports = ReadPreference;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var Long = __webpack_require__(175).Long
	  , Logger = __webpack_require__(192)
	  , MongoError = __webpack_require__(168)
	  , f = __webpack_require__(10).format;

	/**
	 * This is a cursor results callback
	 *
	 * @callback resultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {object} document
	 */

	/**
	 * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB
	 * allowing for iteration over the results returned from the underlying query.
	 *
	 * **CURSORS Cannot directly be instantiated**
	 * @example
	 * var Server = require('mongodb-core').Server
	 *   , ReadPreference = require('mongodb-core').ReadPreference
	 *   , assert = require('assert');
	 *
	 * var server = new Server({host: 'localhost', port: 27017});
	 * // Wait for the connection event
	 * server.on('connect', function(server) {
	 *   assert.equal(null, err);
	 *
	 *   // Execute the write
	 *   var cursor = _server.cursor('integration_tests.inserts_example4', {
	 *       find: 'integration_tests.example4'
	 *     , query: {a:1}
	 *   }, {
	 *     readPreference: new ReadPreference('secondary');
	 *   });
	 *
	 *   // Get the first document
	 *   cursor.next(function(err, doc) {
	 *     assert.equal(null, err);
	 *     server.destroy();
	 *   });
	 * });
	 *
	 * // Start connecting
	 * server.connect();
	 */

	/**
	 * Creates a new Cursor, not to be used directly
	 * @class
	 * @param {object} bson An instance of the BSON parser
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {{object}|Long} cmd The selector (can be a command or a cursorId)
	 * @param {object} [options=null] Optional settings.
	 * @param {object} [options.batchSize=1000] Batchsize for the operation
	 * @param {array} [options.documents=[]] Initial documents list for cursor
	 * @param {object} [options.transforms=null] Transform methods for the cursor results
	 * @param {function} [options.transforms.query] Transform the value returned from the initial query
	 * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype.next
	 * @param {object} topology The server topology instance.
	 * @param {object} topologyOptions The server topology options.
	 * @return {Cursor} A cursor instance
	 * @property {number} cursorBatchSize The current cursorBatchSize for the cursor
	 * @property {number} cursorLimit The current cursorLimit for the cursor
	 * @property {number} cursorSkip The current cursorSkip for the cursor
	 */
	var Cursor = function(bson, ns, cmd, options, topology, topologyOptions) {
	  options = options || {};
	  // Cursor reference
	  var self = this;
	  // Initial query
	  var query = null;

	  // Cursor connection
	  this.connection = null;
	  // Cursor server
	  this.server = null;

	  // Do we have a not connected handler
	  this.disconnectHandler = options.disconnectHandler;

	  // Set local values
	  this.bson = bson;
	  this.ns = ns;
	  this.cmd = cmd;
	  this.options = options;
	  this.topology = topology;

	  // All internal state
	  this.cursorState = {
	      cursorId: null
	    , cmd: cmd
	    , documents: options.documents || []
	    , cursorIndex: 0
	    , dead: false
	    , killed: false
	    , init: false
	    , notified: false
	    , limit: options.limit || cmd.limit || 0
	    , skip: options.skip || cmd.skip || 0
	    , batchSize: options.batchSize || cmd.batchSize || 1000
	    , currentLimit: 0
	    // Result field name if not a cursor (contains the array of results)
	    , transforms: options.transforms
	  }

	  // Callback controller
	  this.callbacks = null;

	  // Logger
	  this.logger = Logger('Cursor', options);

	  //
	  // Did we pass in a cursor id
	  if(typeof cmd == 'number') {
	    this.cursorState.cursorId = Long.fromNumber(cmd);
	  } else if(cmd instanceof Long) {
	    this.cursorState.cursorId = cmd;
	  }
	}

	Cursor.prototype.setCursorBatchSize = function(value) {
	  this.cursorState.batchSize = value;
	}

	Cursor.prototype.cursorBatchSize = function() {
	  return this.cursorState.batchSize;
	}

	Cursor.prototype.setCursorLimit = function(value) {
	  this.cursorState.limit = value;
	}

	Cursor.prototype.cursorLimit = function() {
	  return this.cursorState.limit;
	}

	Cursor.prototype.setCursorSkip = function(value) {
	  this.cursorState.skip = value;
	}

	Cursor.prototype.cursorSkip = function() {
	  return this.cursorState.skip;
	}

	// //
	// // Execute getMore command
	// var execGetMore = function(self, callback) {
	// }

	//
	// Execute the first query
	var execInitialQuery = function(self, query, cmd, options, cursorState, connection, logger, callbacks, callback) {
	  if(logger.isDebug()) {
	    logger.debug(f("issue initial query [%s] with flags [%s]"
	      , JSON.stringify(cmd)
	      , JSON.stringify(query)));
	  }

	  var queryCallback = function(err, result) {
	    if(err) return callback(err);

	    if(result.queryFailure) {
	      return callback(MongoError.create(result.documents[0]), null);
	    }

	    // Check if we have a command cursor
	    if(Array.isArray(result.documents) && result.documents.length == 1
	      && (!cmd.find || (cmd.find && cmd.virtual == false))
	      && (result.documents[0].cursor != 'string'
	        || result.documents[0]['$err']
	        || result.documents[0]['errmsg']
	        || Array.isArray(result.documents[0].result))
	      ) {

	      // We have a an error document return the error
	      if(result.documents[0]['$err']
	        || result.documents[0]['errmsg']) {
	        return callback(MongoError.create(result.documents[0]), null);
	      }

	      // We have a cursor document
	      if(result.documents[0].cursor != null
	        && typeof result.documents[0].cursor != 'string') {
	          var id = result.documents[0].cursor.id;
	          // If we have a namespace change set the new namespace for getmores
	          if(result.documents[0].cursor.ns) {
	            self.ns = result.documents[0].cursor.ns;
	          }
	          // Promote id to long if needed
	          cursorState.cursorId = typeof id == 'number' ? Long.fromNumber(id) : id;
	          // If we have a firstBatch set it
	          if(Array.isArray(result.documents[0].cursor.firstBatch)) {
	            cursorState.documents = result.documents[0].cursor.firstBatch;//.reverse();
	          }

	          // Return after processing command cursor
	          return callback(null, null);
	      }

	      if(Array.isArray(result.documents[0].result)) {
	        cursorState.documents = result.documents[0].result;
	        cursorState.cursorId = Long.ZERO;
	        return callback(null, null);
	      }
	    }

	    // Otherwise fall back to regular find path
	    cursorState.cursorId = result.cursorId;
	    cursorState.documents = result.documents;

	    // Transform the results with passed in transformation method if provided
	    if(cursorState.transforms && typeof cursorState.transforms.query == 'function') {
	      cursorState.documents = cursorState.transforms.query(result);
	    }

	    // Return callback
	    callback(null, null);
	  }

	  // If we have a raw query decorate the function
	  if(options.raw || cmd.raw) {
	    queryCallback.raw = options.raw || cmd.raw;
	  }

	  // Do we have documentsReturnedIn set on the query
	  if(typeof query.documentsReturnedIn == 'string') {
	    queryCallback.documentsReturnedIn = query.documentsReturnedIn;
	  }

	  // Set up callback
	  callbacks.register(query.requestId, queryCallback);

	  // Write the initial command out
	  connection.write(query.toBin());
	}

	//
	// Handle callback (including any exceptions thrown)
	var handleCallback = function(callback, err, result) {
	  try {
	    callback(err, result);
	  } catch(err) {
	    process.nextTick(function() {
	      throw err;
	    });
	  }
	}


	// Internal methods
	Cursor.prototype._find = function(callback) {
	  var self = this;
	  // execInitialQuery(self, self.query, self.cmd, self.options, self.cursorState, self.connection, self.logger, self.callbacks, function(err, r) {
	  if(self.logger.isDebug()) {
	    self.logger.debug(f("issue initial query [%s] with flags [%s]"
	      , JSON.stringify(self.cmd)
	      , JSON.stringify(self.query)));
	  }

	  var queryCallback = function(err, result) {
	    if(err) return callback(err);

	    if(result.queryFailure) {
	      return callback(MongoError.create(result.documents[0]), null);
	    }

	    // Check if we have a command cursor
	    if(Array.isArray(result.documents) && result.documents.length == 1
	      && (!self.cmd.find || (self.cmd.find && self.cmd.virtual == false))
	      && (result.documents[0].cursor != 'string'
	        || result.documents[0]['$err']
	        || result.documents[0]['errmsg']
	        || Array.isArray(result.documents[0].result))
	      ) {

	      // We have a an error document return the error
	      if(result.documents[0]['$err']
	        || result.documents[0]['errmsg']) {
	        return callback(MongoError.create(result.documents[0]), null);
	      }

	      // We have a cursor document
	      if(result.documents[0].cursor != null
	        && typeof result.documents[0].cursor != 'string') {
	          var id = result.documents[0].cursor.id;
	          // If we have a namespace change set the new namespace for getmores
	          if(result.documents[0].cursor.ns) {
	            self.ns = result.documents[0].cursor.ns;
	          }
	          // Promote id to long if needed
	          self.cursorState.cursorId = typeof id == 'number' ? Long.fromNumber(id) : id;
	          // If we have a firstBatch set it
	          if(Array.isArray(result.documents[0].cursor.firstBatch)) {
	            self.cursorState.documents = result.documents[0].cursor.firstBatch;//.reverse();
	          }

	          // Return after processing command cursor
	          return callback(null, null);
	      }

	      if(Array.isArray(result.documents[0].result)) {
	        self.cursorState.documents = result.documents[0].result;
	        self.cursorState.cursorId = Long.ZERO;
	        return callback(null, null);
	      }
	    }

	    // Otherwise fall back to regular find path
	    self.cursorState.cursorId = result.cursorId;
	    self.cursorState.documents = result.documents;

	    // Transform the results with passed in transformation method if provided
	    if(self.cursorState.transforms && typeof self.cursorState.transforms.query == 'function') {
	      self.cursorState.documents = self.cursorState.transforms.query(result);
	    }

	    // Return callback
	    callback(null, null);
	  }
	  // console.log("------------------------- 2")

	  // If we have a raw query decorate the function
	  if(self.options.raw || self.cmd.raw) {
	    queryCallback.raw = self.options.raw || self.cmd.raw;
	  }
	  // console.log("------------------------- 3")

	  // Do we have documentsReturnedIn set on the query
	  if(typeof self.query.documentsReturnedIn == 'string') {
	    queryCallback.documentsReturnedIn = self.query.documentsReturnedIn;
	  }
	  // console.log("------------------------- 4")

	  // Set up callback
	  self.callbacks.register(self.query.requestId, queryCallback);

	  // Write the initial command out
	  self.connection.write(self.query.toBin());
	// console.log("------------------------- 5")
	}

	Cursor.prototype._getmore = function(callback) {
	  if(this.logger.isDebug()) this.logger.debug(f("schedule getMore call for query [%s]", JSON.stringify(this.query)))
	  // Determine if it's a raw query
	  var raw = this.options.raw || this.cmd.raw;
	  // We have a wire protocol handler
	  this.server.wireProtocolHandler.getMore(this.bson, this.ns, this.cursorState, this.cursorState.batchSize, raw, this.connection, this.callbacks, this.options, callback);
	}

	Cursor.prototype._killcursor = function(callback) {
	  // Set cursor to dead
	  this.cursorState.dead = true;
	  this.cursorState.killed = true;
	  // Remove documents
	  this.cursorState.documents = [];

	  // If no cursor id just return
	  if(this.cursorState.cursorId == null || this.cursorState.cursorId.isZero() || this.cursorState.init == false) {
	    if(callback) callback(null, null);
	    return;
	  }

	  // Execute command
	  this.server.wireProtocolHandler.killCursor(this.bson, this.ns, this.cursorState.cursorId, this.connection, this.callbacks, callback);
	}

	/**
	 * Clone the cursor
	 * @method
	 * @return {Cursor}
	 */
	Cursor.prototype.clone = function() {
	  return this.topology.cursor(this.ns, this.cmd, this.options);
	}

	/**
	 * Checks if the cursor is dead
	 * @method
	 * @return {boolean} A boolean signifying if the cursor is dead or not
	 */
	Cursor.prototype.isDead = function() {
	  return this.cursorState.dead == true;
	}

	/**
	 * Checks if the cursor was killed by the application
	 * @method
	 * @return {boolean} A boolean signifying if the cursor was killed by the application
	 */
	Cursor.prototype.isKilled = function() {
	  return this.cursorState.killed == true;
	}

	/**
	 * Checks if the cursor notified it's caller about it's death
	 * @method
	 * @return {boolean} A boolean signifying if the cursor notified the callback
	 */
	Cursor.prototype.isNotified = function() {
	  return this.cursorState.notified == true;
	}

	/**
	 * Returns current buffered documents length
	 * @method
	 * @return {number} The number of items in the buffered documents
	 */
	Cursor.prototype.bufferedCount = function() {
	  return this.cursorState.documents.length - this.cursorState.cursorIndex;
	}

	/**
	 * Returns current buffered documents
	 * @method
	 * @return {Array} An array of buffered documents
	 */
	Cursor.prototype.readBufferedDocuments = function(number) {
	  var unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;
	  var length = number < unreadDocumentsLength ? number : unreadDocumentsLength;
	  var elements = this.cursorState.documents.slice(this.cursorState.cursorIndex, this.cursorState.cursorIndex + length);

	  // Transform the doc with passed in transformation method if provided
	  if(this.cursorState.transforms && typeof this.cursorState.transforms.doc == 'function') {
	    // Transform all the elements
	    for(var i = 0; i < elements.length; i++) {
	      elements[i] = this.cursorState.transforms.doc(elements[i]);
	    }
	  }

	  // Ensure we do not return any more documents than the limit imposed
	  // Just return the number of elements up to the limit
	  if(this.cursorState.limit > 0 && (this.cursorState.currentLimit + elements.length) > this.cursorState.limit) {
	    elements = elements.slice(0, (this.cursorState.limit - this.cursorState.currentLimit));
	    this.kill();
	  }

	  // Adjust current limit
	  this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;
	  this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length;

	  // Return elements
	  return elements;
	}

	/**
	 * Kill the cursor
	 * @method
	 * @param {resultCallback} callback A callback function
	 */
	Cursor.prototype.kill = function(callback) {
	  this._killcursor(callback);
	}

	/**
	 * Resets the cursor
	 * @method
	 * @return {null}
	 */
	Cursor.prototype.rewind = function() {
	  if(this.cursorState.init) {
	    if(!this.cursorState.dead) {
	      this.kill();
	    }

	    this.cursorState.currentLimit = 0;
	    this.cursorState.init = false;
	    this.cursorState.dead = false;
	    this.cursorState.killed = false;
	    this.cursorState.notified = false;
	    this.cursorState.documents = [];
	    this.cursorState.cursorId = null;
	    this.cursorState.cursorIndex = 0;
	  }
	}

	/**
	 * Validate if the connection is dead and return error
	 */
	var isConnectionDead = function(self, callback) {
	  if(self.connection
	    && !self.connection.isConnected()) {
	    self.cursorState.notified = true;
	    self.cursorState.killed = true;
	    self.cursorState.documents = [];
	    self.cursorState.cursorIndex = 0;
	    callback(MongoError.create(f('connection to host %s:%s was destroyed', self.connection.host, self.connection.port)))
	    return true;
	  }

	  return false;
	}

	/**
	 * Validate if the cursor is dead but was not explicitly killed by user
	 */
	var isCursorDeadButNotkilled = function(self, callback) {
	  // Cursor is dead but not marked killed, return null
	  if(self.cursorState.dead && !self.cursorState.killed) {
	    self.cursorState.notified = true;
	    self.cursorState.killed = true;
	    self.cursorState.documents = [];
	    self.cursorState.cursorIndex = 0;
	    handleCallback(callback, null, null);
	    return true;
	  }

	  return false;
	}

	/**
	 * Validate if the cursor is dead and was killed by user
	 */
	var isCursorDeadAndKilled = function(self, callback) {
	  if(self.cursorState.dead && self.cursorState.killed) {
	    handleCallback(callback, MongoError.create("cursor is dead"));
	    return true;
	  }

	  return false;
	}

	/**
	 * Validate if the cursor was killed by the user
	 */
	var isCursorKilled = function(self, callback) {
	  if(self.cursorState.killed) {
	    self.cursorState.notified = true;
	    self.cursorState.documents = [];
	    self.cursorState.cursorIndex = 0;
	    handleCallback(callback, null, null);
	    return true;
	  }

	  return false;
	}

	/**
	 * Mark cursor as being dead and notified
	 */
	var setCursorDeadAndNotified = function(self, callback) {
	  self.cursorState.dead = true;
	  self.cursorState.notified = true;
	  self.cursorState.documents = [];
	  self.cursorState.cursorIndex = 0;
	  handleCallback(callback, null, null);
	}

	/**
	 * Mark cursor as being notified
	 */
	var setCursorNotified = function(self, callback) {
	  self.cursorState.notified = true;
	  self.cursorState.documents = [];
	  self.cursorState.cursorIndex = 0;
	  handleCallback(callback, null, null);
	}

	var nextFunction = function(self, callback) {
	  // We have notified about it
	  if(self.cursorState.notified) {
	    return callback(new Error('cursor is exhausted'));
	  }

	  // Cursor is killed return null
	  if(isCursorKilled(self, callback)) return;

	  // Cursor is dead but not marked killed, return null
	  if(isCursorDeadButNotkilled(self, callback)) return;

	  // We have a dead and killed cursor, attempting to call next should error
	  if(isCursorDeadAndKilled(self, callback)) return;

	  // We have just started the cursor
	  if(!self.cursorState.init) {
	    // Topology is not connected, save the call in the provided store to be
	    // Executed at some point when the handler deems it's reconnected
	    if(!self.topology.isConnected(self.options) && self.disconnectHandler != null) {
	      return self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);
	    }

	    try {
	      // Get a server
	      self.server = self.topology.getServer(self.options);
	      // Get a connection
	      self.connection = self.server.getConnection();
	      // Get the callbacks
	      self.callbacks = self.server.getCallbacks();
	    } catch(err) {
	      return callback(err);
	    }

	    // Set as init
	    self.cursorState.init = true;

	    try {
	      // Get the right wire protocol command
	      self.query = self.server.wireProtocolHandler.command(self.bson, self.ns, self.cmd, self.cursorState, self.topology, self.options);
	    } catch(err) {
	      return callback(err);
	    }
	  }

	  // Process exhaust messages
	  var processExhaustMessages = function(err, result) {
	    if(err) {
	      self.cursorState.dead = true;
	      self.callbacks.unregister(self.query.requestId);
	      return callback(err);
	    }

	    // Concatenate all the documents
	    self.cursorState.documents = self.cursorState.documents.concat(result.documents);

	    // If we have no documents left
	    if(Long.ZERO.equals(result.cursorId)) {
	      self.cursorState.cursorId = Long.ZERO;
	      self.callbacks.unregister(self.query.requestId);
	      return nextFunction(self, callback);
	    }

	    // Set up next listener
	    self.callbacks.register(result.requestId, processExhaustMessages)

	    // Initial result
	    if(self.cursorState.cursorId == null) {
	      self.cursorState.cursorId = result.cursorId;
	      nextFunction(self, callback);
	    }
	  }

	  // If we have exhaust
	  if(self.cmd.exhaust && self.cursorState.cursorId == null) {
	    // Handle all the exhaust responses
	    self.callbacks.register(self.query.requestId, processExhaustMessages);
	    // Write the initial command out
	    return self.connection.write(self.query.toBin());
	  } else if(self.cmd.exhaust && self.cursorState.cursorIndex < self.cursorState.documents.length) {
	    return handleCallback(callback, null, self.cursorState.documents[self.cursorState.cursorIndex++]);
	  } else if(self.cmd.exhaust && Long.ZERO.equals(self.cursorState.cursorId)) {
	    self.callbacks.unregister(self.query.requestId);
	    return setCursorNotified(self, callback);
	  } else if(self.cmd.exhaust) {
	    return setTimeout(function() {
	      if(Long.ZERO.equals(self.cursorState.cursorId)) return;
	      nextFunction(self, callback);
	    }, 1);
	  }

	  // If we don't have a cursorId execute the first query
	  if(self.cursorState.cursorId == null) {
	    // Check if connection is dead and return if not possible to
	    // execute the query against the db
	    if(isConnectionDead(self, callback)) return;

	    // Check if topology is destroyed
	    if(self.topology.isDestroyed()) return callback(new MongoError(f('connection destroyed, not possible to instantiate cursor')));

	    // query, cmd, options, cursorState, callback
	    self._find(function(err, r) {
	      if(err) return handleCallback(callback, err, null);
	      if(self.cursorState.documents.length == 0 && !self.cmd.tailable && !self.cmd.awaitData) {
	        return setCursorNotified(self, callback);
	      }

	      nextFunction(self, callback);
	    });
	  } else if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {
	    // Ensure we kill the cursor on the server
	    self.kill();
	    // Set cursor in dead and notified state
	    return setCursorDeadAndNotified(self, callback);
	  } else if(self.cursorState.cursorIndex == self.cursorState.documents.length
	      && !Long.ZERO.equals(self.cursorState.cursorId)) {
	      // Ensure an empty cursor state
	      self.cursorState.documents = [];
	      self.cursorState.cursorIndex = 0;

	      // Check if topology is destroyed
	      if(self.topology.isDestroyed()) return callback(new MongoError(f('connection destroyed, not possible to instantiate cursor')));

	      // Check if connection is dead and return if not possible to
	      // execute a getmore on this connection
	      if(isConnectionDead(self, callback)) return;

	      // Execute the next get more
	      self._getmore(function(err, doc) {
	        if(err) return handleCallback(callback, err);
	        if(self.cursorState.documents.length == 0
	          && Long.ZERO.equals(self.cursorState.cursorId)) {
	            self.cursorState.dead = true;
	          }

	        // Tailable cursor getMore result, notify owner about it
	        // No attempt is made here to retry, this is left to the user of the
	        // core module to handle to keep core simple
	        if(self.cursorState.documents.length == 0 && self.cmd.tailable) {
	          return handleCallback(callback, MongoError.create({
	              message: "No more documents in tailed cursor"
	            , tailable: self.cmd.tailable
	            , awaitData: self.cmd.awaitData
	          }));
	        }

	        if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {
	          return setCursorDeadAndNotified(self, callback);
	        }

	        nextFunction(self, callback);
	      });
	  } else if(self.cursorState.documents.length == self.cursorState.cursorIndex
	    && self.cmd.tailable) {
	      return handleCallback(callback, MongoError.create({
	          message: "No more documents in tailed cursor"
	        , tailable: self.cmd.tailable
	        , awaitData: self.cmd.awaitData
	      }));
	  } else if(self.cursorState.documents.length == self.cursorState.cursorIndex
	      && Long.ZERO.equals(self.cursorState.cursorId)) {
	      setCursorDeadAndNotified(self, callback);
	  } else {
	    if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {
	      // Ensure we kill the cursor on the server
	      self.kill();
	      // Set cursor in dead and notified state
	      return setCursorDeadAndNotified(self, callback);
	    }

	    // Increment the current cursor limit
	    self.cursorState.currentLimit += 1;

	    // Get the document
	    var doc = self.cursorState.documents[self.cursorState.cursorIndex++];

	    // Transform the doc with passed in transformation method if provided
	    if(self.cursorState.transforms && typeof self.cursorState.transforms.doc == 'function') {
	      doc = self.cursorState.transforms.doc(doc);
	    }

	    // Return the document
	    handleCallback(callback, null, doc);
	  }
	}

	/**
	 * Retrieve the next document from the cursor
	 * @method
	 * @param {resultCallback} callback A callback function
	 */
	Cursor.prototype.next = function(callback) {
	  nextFunction(this, callback);
	}

	module.exports = Cursor;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var setProperty = __webpack_require__(170).setProperty
	  , getProperty = __webpack_require__(170).getProperty
	  , getSingleProperty = __webpack_require__(170).getSingleProperty;

	/**
	 * Creates a new CommandResult instance
	 * @class
	 * @param {object} result CommandResult object
	 * @param {Connection} connection A connection instance associated with this result
	 * @return {CommandResult} A cursor instance
	 */
	var CommandResult = function(result, connection) {
	  this.result = result;
	  this.connection = connection;
	}

	/**
	 * Convert CommandResult to JSON
	 * @method
	 * @return {object}
	 */
	CommandResult.prototype.toJSON = function() {
	  return this.result;
	}

	/**
	 * Convert CommandResult to String representation
	 * @method
	 * @return {string}
	 */
	CommandResult.prototype.toString = function() {
	  return JSON.stringify(this.toJSON());
	}

	module.exports = CommandResult;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var Insert = __webpack_require__(197).Insert
	  , Update = __webpack_require__(197).Update
	  , Remove = __webpack_require__(197).Remove
	  , Query = __webpack_require__(174).Query
	  , copy = __webpack_require__(170).copy
	  , KillCursor = __webpack_require__(174).KillCursor
	  , GetMore = __webpack_require__(174).GetMore
	  , Query = __webpack_require__(174).Query
	  , ReadPreference = __webpack_require__(193)
	  , f = __webpack_require__(10).format
	  , CommandResult = __webpack_require__(195)
	  , MongoError = __webpack_require__(168)
	  , Long = __webpack_require__(175).Long;

	// Write concern fields
	var writeConcernFields = ['w', 'wtimeout', 'j', 'fsync'];

	var WireProtocol = function() {}

	//
	// Needs to support legacy mass insert as well as ordered/unordered legacy
	// emulation
	//
	WireProtocol.prototype.insert = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  options = options || {};
	  // Default is ordered execution
	  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;
	  var legacy = typeof options.legacy == 'boolean' ? options.legacy : false;
	  ops = Array.isArray(ops) ? ops :[ops];

	  // If we have more than a 1000 ops fails
	  if(ops.length > 1000) return callback(new MongoError("exceeded maximum write batch size of 1000"));

	  // Write concern
	  var writeConcern = options.writeConcern || {w:1};

	  // We are unordered
	  if(!ordered || writeConcern.w == 0) {
	    return executeUnordered('insert', Insert, ismaster, ns, bson, pool, callbacks, ops, options, callback);
	  }

	  return executeOrdered('insert', Insert, ismaster, ns, bson, pool, callbacks, ops, options, callback);
	}

	WireProtocol.prototype.update = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  options = options || {};
	  // Default is ordered execution
	  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;
	  ops = Array.isArray(ops) ? ops :[ops];

	  // Write concern
	  var writeConcern = options.writeConcern || {w:1};

	  // We are unordered
	  if(!ordered || writeConcern.w == 0) {
	    return executeUnordered('update', Update, ismaster, ns, bson, pool, callbacks, ops, options, callback);
	  }

	  return executeOrdered('update', Update, ismaster, ns, bson, pool, callbacks, ops, options, callback);
	}

	WireProtocol.prototype.remove = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  options = options || {};
	  // Default is ordered execution
	  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;
	  ops = Array.isArray(ops) ? ops :[ops];

	  // Write concern
	  var writeConcern = options.writeConcern || {w:1};

	  // We are unordered
	  if(!ordered || writeConcern.w == 0) {
	    return executeUnordered('remove', Remove, ismaster, ns, bson, pool, callbacks, ops, options, callback);
	  }

	  return executeOrdered('remove', Remove, ismaster, ns, bson, pool, callbacks, ops, options, callback);
	}

	WireProtocol.prototype.killCursor = function(bson, ns, cursorId, connection, callbacks, callback) {
	  // Create a kill cursor command
	  var killCursor = new KillCursor(bson, [cursorId]);
	  // Execute the kill cursor command
	  if(connection && connection.isConnected()) connection.write(killCursor.toBin());
	  // Set cursor to 0
	  cursorId = Long.ZERO;
	  // Return to caller
	  if(callback) callback(null, null);
	}

	WireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, callbacks, options, callback) {
	  // Create getMore command
	  var getMore = new GetMore(bson, ns, cursorState.cursorId, {numberToReturn: batchSize});

	  // Query callback
	  var queryCallback = function(err, r) {
	    if(err) return callback(err);

	    // If we have a timed out query or a cursor that was killed
	    if((r.responseFlags & (1 << 0)) != 0) {
	      return callback(new MongoError("cursor killed or timed out"), null);
	    }

	    // Ensure we have a Long valie cursor id
	    var cursorId = typeof r.cursorId == 'number'
	      ? Long.fromNumber(r.cursorId)
	      : r.cursorId;

	    // Set all the values
	    cursorState.documents = r.documents;
	    cursorState.cursorId = cursorId;

	    // Return
	    callback(null);
	  }

	  // If we have a raw query decorate the function
	  if(raw) {
	    queryCallback.raw = raw;
	  }

	  // Register a callback
	  callbacks.register(getMore.requestId, queryCallback);
	  // Write out the getMore command
	  connection.write(getMore.toBin());
	}

	WireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {
	  // Establish type of command
	  if(cmd.find) {
	    return setupClassicFind(bson, ns, cmd, cursorState, topology, options)
	  } else if(cursorState.cursorId != null) {
	  } else if(cmd) {
	    return setupCommand(bson, ns, cmd, cursorState, topology, options);
	  } else {
	    throw new MongoError(f("command %s does not return a cursor", JSON.stringify(cmd)));
	  }
	}

	//
	// Execute a find command
	var setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {
	  var readPreference = options.readPreference || new ReadPreference('primary');
	  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);
	  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');

	  // Ensure we have at least some options
	  options = options || {};
	  // Set the optional batchSize
	  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;
	  var numberToReturn = 0;

	  // Unpack the limit and batchSize values
	  if(cursorState.limit == 0) {
	    numberToReturn = cursorState.batchSize;
	  } else if(cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || (cursorState.limit > 0 && cursorState.batchSize == 0)) {
	    numberToReturn = cursorState.limit;
	  } else {
	    numberToReturn = cursorState.batchSize;
	  }

	  var numberToSkip = cursorState.skip || 0;
	  // Build actual find command
	  var findCmd = {};
	  // Using special modifier
	  var usesSpecialModifier = false;

	  // We have a Mongos topology, check if we need to add a readPreference
	  if(topology.type == 'mongos' && readPreference) {
	    findCmd['$readPreference'] = readPreference.toJSON();
	    usesSpecialModifier = true;
	  }

	  // Add special modifiers to the query
	  if(cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;
	  if(cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;
	  if(cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;
	  if(cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;
	  if(cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;
	  if(cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;
	  if(cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;
	  if(cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;
	  if(cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;
	  if(cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;

	  // If we have explain, return a single document and close cursor
	  if(cmd.explain) {
	    numberToReturn = -1;
	    usesSpecialModifier = true;
	    findCmd['$explain'] = true;
	  }

	  // If we have a special modifier
	  if(usesSpecialModifier) {
	    findCmd['$query'] = cmd.query;
	  } else {
	    findCmd = cmd.query;
	  }

	  // Throw on majority readConcern passed in
	  if(cmd.readConcern && cmd.readConcern.level != 'local') {
	    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));
	  }

	  // Remove readConcern, ensure no failing commands
	  if(cmd.readConcern) {
	    cmd = copy(cmd);
	    delete cmd['readConcern'];
	  }

	  // Set up the serialize and ignoreUndefined fields
	  var serializeFunctions = typeof options.serializeFunctions == 'boolean' 
	    ? options.serializeFunctions : false;
	  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' 
	    ? options.ignoreUndefined : false;

	  // Build Query object
	  var query = new Query(bson, ns, findCmd, {
	      numberToSkip: numberToSkip, numberToReturn: numberToReturn
	    , checkKeys: false, returnFieldSelector: cmd.fields
	    , serializeFunctions: serializeFunctions, ignoreUndefined: ignoreUndefined
	  });

	  // Set query flags
	  query.slaveOk = readPreference.slaveOk();

	  // Set up the option bits for wire protocol
	  if(typeof cmd.tailable == 'boolean') query.tailable = cmd.tailable;
	  if(typeof cmd.oplogReplay == 'boolean') query.oplogReplay = cmd.oplogReplay;
	  if(typeof cmd.noCursorTimeout == 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;
	  if(typeof cmd.awaitData == 'boolean') query.awaitData = cmd.awaitData;
	  if(typeof cmd.exhaust == 'boolean') query.exhaust = cmd.exhaust;
	  if(typeof cmd.partial == 'boolean') query.partial = cmd.partial;
	  // Return the query
	  return query;
	}

	//
	// Set up a command cursor
	var setupCommand = function(bson, ns, cmd, cursorState, topology, options) {
	  var readPreference = options.readPreference || new ReadPreference('primary');
	  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);
	  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');

	  // Set empty options object
	  options = options || {}

	  // Final query
	  var finalCmd = {};
	  for(var name in cmd) {
	    finalCmd[name] = cmd[name];
	  }

	  // Build command namespace
	  var parts = ns.split(/\./);

	  // We have a Mongos topology, check if we need to add a readPreference
	  if(topology.type == 'mongos' && readPreference) {
	    finalCmd['$readPreference'] = readPreference.toJSON();
	  }

	  // Throw on majority readConcern passed in
	  if(cmd.readConcern && cmd.readConcern.level != 'local') {
	    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));
	  }

	  // Remove readConcern, ensure no failing commands
	  if(cmd.readConcern) delete cmd['readConcern'];

	  // Serialize functions
	  var serializeFunctions = typeof options.serializeFunctions == 'boolean'
	    ? options.serializeFunctions : false;

	  // Set up the serialize and ignoreUndefined fields
	  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' 
	    ? options.ignoreUndefined : false;

	  // Build Query object
	  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {
	      numberToSkip: 0, numberToReturn: -1
	    , checkKeys: false, serializeFunctions: serializeFunctions
	    , ignoreUndefined: ignoreUndefined
	  });

	  // Set query flags
	  query.slaveOk = readPreference.slaveOk();

	  // Return the query
	  return query;
	}

	/**
	 * @ignore
	 */
	var bindToCurrentDomain = function(callback) {
	  var domain = process.domain;
	  if(domain == null || callback == null) {
	    return callback;
	  } else {
	    return domain.bind(callback);
	  }
	}

	var hasWriteConcern = function(writeConcern) {
	  if(writeConcern.w
	    || writeConcern.wtimeout
	    || writeConcern.j == true
	    || writeConcern.fsync == true
	    || Object.keys(writeConcern).length == 0) {
	    return true;
	  }
	  return false;
	}

	var cloneWriteConcern = function(writeConcern) {
	  var wc = {};
	  if(writeConcern.w != null) wc.w = writeConcern.w;
	  if(writeConcern.wtimeout != null) wc.wtimeout = writeConcern.wtimeout;
	  if(writeConcern.j != null) wc.j = writeConcern.j;
	  if(writeConcern.fsync != null) wc.fsync = writeConcern.fsync;
	  return wc;
	}

	//
	// Aggregate up all the results
	//
	var aggregateWriteOperationResults = function(opType, ops, results, connection) {
	  var finalResult = { ok: 1, n: 0 }

	  // Map all the results coming back
	  for(var i = 0; i < results.length; i++) {
	    var result = results[i];
	    var op = ops[i];

	    if((result.upserted || (result.updatedExisting == false)) && finalResult.upserted == null) {
	      finalResult.upserted = [];
	    }

	    // Push the upserted document to the list of upserted values
	    if(result.upserted) {
	      finalResult.upserted.push({index: i, _id: result.upserted});
	    }

	    // We have an upsert where we passed in a _id
	    if(result.updatedExisting == false && result.n == 1 && result.upserted == null) {
	      finalResult.upserted.push({index: i, _id: op.q._id});
	    }

	    // We have an insert command
	    if(result.ok == 1 && opType == 'insert' && result.err == null) {
	      finalResult.n = finalResult.n + 1;
	    }

	    // We have a command error
	    if(result != null && result.ok == 0 || result.err || result.errmsg) {
	      if(result.ok == 0) finalResult.ok = 0;
	      finalResult.code = result.code;
	      finalResult.errmsg = result.errmsg || result.err || result.errMsg;

	      // Check if we have a write error
	      if(result.code == 11000
	        || result.code == 11001
	        || result.code == 12582
	        || result.code == 16544
	        || result.code == 16538
	        || result.code == 16542
	        || result.code == 14
	        || result.code == 13511) {
	        if(finalResult.writeErrors == null) finalResult.writeErrors = [];
	        finalResult.writeErrors.push({
	            index: i
	          , code: result.code
	          , errmsg: result.errmsg || result.err || result.errMsg
	        });
	      } else {
	        finalResult.writeConcernError = {
	            code: result.code
	          , errmsg: result.errmsg || result.err || result.errMsg
	        }
	      }
	    } else if(typeof result.n == 'number') {
	      finalResult.n += result.n;
	    } else {
	      finalResult.n += 1;
	    }

	    // Result as expected
	    if(result != null && result.lastOp) finalResult.lastOp = result.lastOp;
	  }

	  // Return finalResult aggregated results
	  return new CommandResult(finalResult, connection);
	}

	//
	// Execute all inserts in an ordered manner
	//
	var executeOrdered = function(opType ,command, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  var _ops = ops.slice(0);
	  // Bind to current domain
	  callback = bindToCurrentDomain(callback);
	  // Collect all the getLastErrors
	  var getLastErrors = [];

	  // Execute an operation
	  var executeOp = function(list, _callback) {
	    // Get a pool connection
	    var connection = pool.get();
	    // No more items in the list
	    if(list.length == 0) return _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));

	    // Get the first operation
	    var doc = list.shift();

	    // Create an insert command
	    var op = new command(Query.getRequestId(), ismaster, bson, ns, [doc], options);
	    // Write concern
	    var optionWriteConcern = options.writeConcern || {w:1};
	    // Final write concern
	    var writeConcern = cloneWriteConcern(optionWriteConcern);

	    // Get the db name
	    var db = ns.split('.').shift();

	    // Error out if no connection available
	    if(connection == null)
	      return _callback(new MongoError("no connection available"));

	    try {
	      // Execute the insert
	      connection.write(op.toBin());

	      // If write concern 0 don't fire getLastError
	      if(hasWriteConcern(writeConcern)) {
	        var getLastErrorCmd = {getlasterror: 1};
	        // Merge all the fields
	        for(var i = 0; i < writeConcernFields.length; i++) {
	          if(writeConcern[writeConcernFields[i]] != null)
	            getLastErrorCmd[writeConcernFields[i]] = writeConcern[writeConcernFields[i]];
	        }

	        // Create a getLastError command
	        var getLastErrorOp = new Query(bson, f("%s.$cmd", db), getLastErrorCmd, {numberToReturn: -1});
	        // Write the lastError message
	        connection.write(getLastErrorOp.toBin());
	        // Register the callback
	        callbacks.register(getLastErrorOp.requestId, function(err, result) {
	          if(err) return callback(err);
	          // Get the document
	          var doc = result.documents[0];
	          // Save the getLastError document
	          getLastErrors.push(doc);
	          // If we have an error terminate
	          if(doc.ok == 0 || doc.err || doc.errmsg) return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));
	          // Execute the next op in the list
	          executeOp(list, callback);
	        });
	      }
	    } catch(err) {
	      if(typeof err == 'string') err = new MongoError(err);
	      // We have a serialization error, rewrite as a write error to have same behavior as modern
	      // write commands
	      getLastErrors.push({ ok: 1, errmsg: err.message, code: 14 });
	      // Return due to an error
	      return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));
	    }
	  }

	  // Execute the operations
	  executeOp(_ops, callback);
	}

	var executeUnordered = function(opType, command, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  // Bind to current domain
	  callback = bindToCurrentDomain(callback);
	  // Total operations to write
	  var totalOps = ops.length;
	  // Collect all the getLastErrors
	  var getLastErrors = [];
	  // Write concern
	  var optionWriteConcern = options.writeConcern || {w:1};
	  // Final write concern
	  var writeConcern = cloneWriteConcern(optionWriteConcern);
	  // Driver level error
	  var error;

	  // Execute all the operations
	  for(var i = 0; i < ops.length; i++) {
	    // Create an insert command
	    var op = new command(Query.getRequestId(), ismaster, bson, ns, [ops[i]], options);
	    // Get db name
	    var db = ns.split('.').shift();

	    // Get a pool connection
	    var connection = pool.get();

	    // Error out if no connection available
	    if(connection == null)
	      return _callback(new MongoError("no connection available"));

	    try {
	      // Execute the insert
	      connection.write(op.toBin());
	      // If write concern 0 don't fire getLastError
	      if(hasWriteConcern(writeConcern)) {
	        var getLastErrorCmd = {getlasterror: 1};
	        // Merge all the fields
	        for(var j = 0; j < writeConcernFields.length; j++) {
	          if(writeConcern[writeConcernFields[j]] != null)
	            getLastErrorCmd[writeConcernFields[j]] = writeConcern[writeConcernFields[j]];
	        }

	        // Create a getLastError command
	        var getLastErrorOp = new Query(bson, f("%s.$cmd", db), getLastErrorCmd, {numberToReturn: -1});
	        // Write the lastError message
	        connection.write(getLastErrorOp.toBin());

	        // Give the result from getLastError the right index
	        var callbackOp = function(_index) {
	          return function(err, result) {
	            if(err) error = err;
	            // Update the number of operations executed
	            totalOps = totalOps - 1;
	            // Save the getLastError document
	            if(!err) getLastErrors[_index] = result.documents[0];
	            // Check if we are done
	            if(totalOps == 0) {
	              if(error) return callback(error);
	              callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));
	            }
	          }
	        }

	        // Register the callback
	        callbacks.register(getLastErrorOp.requestId, callbackOp(i));
	      }
	    } catch(err) {
	      if(typeof err == 'string') err = new MongoError(err);
	      // Update the number of operations executed
	      totalOps = totalOps - 1;
	      // We have a serialization error, rewrite as a write error to have same behavior as modern
	      // write commands
	      getLastErrors[i] = { ok: 1, errmsg: err.message, code: 14 };
	      // Check if we are done
	      if(totalOps == 0) {
	        callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));
	      }
	    }
	  }

	  // Empty w:0 return
	  if(writeConcern
	    && writeConcern.w == 0 && callback) {
	    callback(null, null);
	  }
	}

	module.exports = WireProtocol;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	var MongoError = __webpack_require__(168);

	// Wire command operation ids
	var OP_UPDATE = 2001;
	var OP_INSERT = 2002;
	var OP_DELETE = 2006;

	var Insert = function(requestId, ismaster, bson, ns, documents, options) {
	  // Basic options needed to be passed in
	  if(ns == null) throw new MongoError("ns must be specified for query");
	  if(!Array.isArray(documents) || documents.length == 0) throw new MongoError("documents array must contain at least one document to insert");

	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~ns.indexOf("\x00")) {
	    throw new MongoError("namespace cannot contain a null character");
	  }

	  // Set internal
	  this.requestId = requestId;
	  this.bson = bson;
	  this.ns = ns;
	  this.documents = documents;
	  this.ismaster = ismaster;

	  // Ensure empty options
	  options = options || {};

	  // Unpack options
	  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;
	  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;
	  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : true;
	  this.continueOnError = typeof options.continueOnError == 'boolean' ? options.continueOnError : false;
	  // Set flags
	  this.flags = this.continueOnError ? 1 : 0;
	}

	// To Binary
	Insert.prototype.toBin = function() {
	  // Contains all the buffers to be written
	  var buffers = [];

	  // Header buffer
	  var header = new Buffer(
	    4 * 4 // Header
	    + 4   // Flags
	    + Buffer.byteLength(this.ns) + 1 // namespace
	  );

	  // Add header to buffers
	  buffers.push(header);

	  // Total length of the message
	  var totalLength = header.length;

	  // Serialize all the documents
	  for(var i = 0; i < this.documents.length; i++) {
	    var buffer = this.bson.serialize(this.documents[i]
	      , this.checkKeys
	      , true
	      , this.serializeFunctions
	      , 0, this.ignoreUndefined);

	    // Document is larger than maxBsonObjectSize, terminate serialization
	    if(buffer.length > this.ismaster.maxBsonObjectSize) {
	      throw new MongoError("Document exceeds maximum allowed bson size of " + this.ismaster.maxBsonObjectSize + " bytes");
	    }

	    // Add to total length of wire protocol message
	    totalLength = totalLength + buffer.length;
	    // Add to buffer
	    buffers.push(buffer);
	  }

	  // Command is larger than maxMessageSizeBytes terminate serialization
	  if(totalLength > this.ismaster.maxMessageSizeBytes) {
	    throw new MongoError("Command exceeds maximum message size of " + this.ismaster.maxMessageSizeBytes + " bytes");
	  }

	  // Add all the metadata
	  var index = 0;

	  // Write header length
	  header[index + 3] = (totalLength >> 24) & 0xff;
	  header[index + 2] = (totalLength >> 16) & 0xff;
	  header[index + 1] = (totalLength >> 8) & 0xff;
	  header[index] = (totalLength) & 0xff;
	  index = index + 4;

	  // Write header requestId
	  header[index + 3] = (this.requestId >> 24) & 0xff;
	  header[index + 2] = (this.requestId >> 16) & 0xff;
	  header[index + 1] = (this.requestId >> 8) & 0xff;
	  header[index] = (this.requestId) & 0xff;
	  index = index + 4;

	  // No flags
	  header[index + 3] = (0 >> 24) & 0xff;
	  header[index + 2] = (0 >> 16) & 0xff;
	  header[index + 1] = (0 >> 8) & 0xff;
	  header[index] = (0) & 0xff;
	  index = index + 4;

	  // Operation
	  header[index + 3] = (OP_INSERT >> 24) & 0xff;
	  header[index + 2] = (OP_INSERT >> 16) & 0xff;
	  header[index + 1] = (OP_INSERT >> 8) & 0xff;
	  header[index] = (OP_INSERT) & 0xff;
	  index = index + 4;

	  // Flags
	  header[index + 3] = (this.flags >> 24) & 0xff;
	  header[index + 2] = (this.flags >> 16) & 0xff;
	  header[index + 1] = (this.flags >> 8) & 0xff;
	  header[index] = (this.flags) & 0xff;
	  index = index + 4;

	  // Write collection name
	  index = index + header.write(this.ns, index, 'utf8') + 1;
	  header[index - 1] = 0;

	  // Return the buffers
	  return buffers;
	}

	var Update = function(requestId, ismaster, bson, ns, update, options) {
	  // Basic options needed to be passed in
	  if(ns == null) throw new MongoError("ns must be specified for query");

	  // Ensure empty options
	  options = options || {};

	  // Set internal
	  this.requestId = requestId;
	  this.bson = bson;
	  this.ns = ns;
	  this.ismaster = ismaster;

	  // Unpack options
	  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;
	  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;
	  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;

	  // Unpack the update document
	  this.upsert = typeof update[0].upsert == 'boolean' ? update[0].upsert : false;
	  this.multi = typeof update[0].multi == 'boolean' ? update[0].multi : false;
	  this.q = update[0].q;
	  this.u = update[0].u;

	  // Create flag value
	  this.flags = this.upsert ? 1 : 0;
	  this.flags = this.multi ? this.flags | 2 : this.flags;
	}

	// To Binary
	Update.prototype.toBin = function() {
	  // Contains all the buffers to be written
	  var buffers = [];

	  // Header buffer
	  var header = new Buffer(
	    4 * 4 // Header
	    + 4   // ZERO
	    + Buffer.byteLength(this.ns) + 1 // namespace
	    + 4   // Flags
	  );

	  // Add header to buffers
	  buffers.push(header);

	  // Total length of the message
	  var totalLength = header.length;

	  // Serialize the selector
	  var selector = this.bson.serialize(this.q
	    , this.checkKeys
	    , true
	    , this.serializeFunctions
	    , 0, this.ignoreUndefined);
	  buffers.push(selector);
	  totalLength = totalLength + selector.length;

	  // Serialize the update
	  var update = this.bson.serialize(this.u
	    , this.checkKeys
	    , true
	    , this.serializeFunctions
	    , 0, this.ignoreUndefined);
	  buffers.push(update);
	  totalLength = totalLength + update.length;

	  // Index in header buffer
	  var index = 0;

	  // Write header length
	  header[index + 3] = (totalLength >> 24) & 0xff;
	  header[index + 2] = (totalLength >> 16) & 0xff;
	  header[index + 1] = (totalLength >> 8) & 0xff;
	  header[index] = (totalLength) & 0xff;
	  index = index + 4;

	  // Write header requestId
	  header[index + 3] = (this.requestId >> 24) & 0xff;
	  header[index + 2] = (this.requestId >> 16) & 0xff;
	  header[index + 1] = (this.requestId >> 8) & 0xff;
	  header[index] = (this.requestId) & 0xff;
	  index = index + 4;

	  // No flags
	  header[index + 3] = (0 >> 24) & 0xff;
	  header[index + 2] = (0 >> 16) & 0xff;
	  header[index + 1] = (0 >> 8) & 0xff;
	  header[index] = (0) & 0xff;
	  index = index + 4;

	  // Operation
	  header[index + 3] = (OP_UPDATE >> 24) & 0xff;
	  header[index + 2] = (OP_UPDATE >> 16) & 0xff;
	  header[index + 1] = (OP_UPDATE >> 8) & 0xff;
	  header[index] = (OP_UPDATE) & 0xff;
	  index = index + 4;

	  // Write ZERO
	  header[index + 3] = (0 >> 24) & 0xff;
	  header[index + 2] = (0 >> 16) & 0xff;
	  header[index + 1] = (0 >> 8) & 0xff;
	  header[index] = (0) & 0xff;
	  index = index + 4;

	  // Write collection name
	  index = index + header.write(this.ns, index, 'utf8') + 1;
	  header[index - 1] = 0;

	  // Flags
	  header[index + 3] = (this.flags >> 24) & 0xff;
	  header[index + 2] = (this.flags >> 16) & 0xff;
	  header[index + 1] = (this.flags >> 8) & 0xff;
	  header[index] = (this.flags) & 0xff;
	  index = index + 4;

	  // Return the buffers
	  return buffers;
	}

	var Remove = function(requestId, ismaster, bson, ns, remove, options) {
	  // Basic options needed to be passed in
	  if(ns == null) throw new MongoError("ns must be specified for query");

	  // Ensure empty options
	  options = options || {};

	  // Set internal
	  this.requestId = requestId;
	  this.bson = bson;
	  this.ns = ns;
	  this.ismaster = ismaster;

	  // Unpack options
	  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;
	  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;
	  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;

	  // Unpack the update document
	  this.limit = typeof remove[0].limit == 'number' ? remove[0].limit : 1;
	  this.q = remove[0].q;

	  // Create flag value
	  this.flags = this.limit == 1 ? 1 : 0;
	}

	// To Binary
	Remove.prototype.toBin = function() {
	  // Contains all the buffers to be written
	  var buffers = [];

	  // Header buffer
	  var header = new Buffer(
	    4 * 4 // Header
	    + 4   // ZERO
	    + Buffer.byteLength(this.ns) + 1 // namespace
	    + 4   // Flags
	  );

	  // Add header to buffers
	  buffers.push(header);

	  // Total length of the message
	  var totalLength = header.length;

	  // Serialize the selector
	  var selector = this.bson.serialize(this.q
	    , this.checkKeys
	    , true
	    , this.serializeFunctions
	    , 0, this.ignoreUndefined);
	  buffers.push(selector);
	  totalLength = totalLength + selector.length;

	  // Index in header buffer
	  var index = 0;

	  // Write header length
	  header[index + 3] = (totalLength >> 24) & 0xff;
	  header[index + 2] = (totalLength >> 16) & 0xff;
	  header[index + 1] = (totalLength >> 8) & 0xff;
	  header[index] = (totalLength) & 0xff;
	  index = index + 4;

	  // Write header requestId
	  header[index + 3] = (this.requestId >> 24) & 0xff;
	  header[index + 2] = (this.requestId >> 16) & 0xff;
	  header[index + 1] = (this.requestId >> 8) & 0xff;
	  header[index] = (this.requestId) & 0xff;
	  index = index + 4;

	  // No flags
	  header[index + 3] = (0 >> 24) & 0xff;
	  header[index + 2] = (0 >> 16) & 0xff;
	  header[index + 1] = (0 >> 8) & 0xff;
	  header[index] = (0) & 0xff;
	  index = index + 4;

	  // Operation
	  header[index + 3] = (OP_DELETE >> 24) & 0xff;
	  header[index + 2] = (OP_DELETE >> 16) & 0xff;
	  header[index + 1] = (OP_DELETE >> 8) & 0xff;
	  header[index] = (OP_DELETE) & 0xff;
	  index = index + 4;

	  // Write ZERO
	  header[index + 3] = (0 >> 24) & 0xff;
	  header[index + 2] = (0 >> 16) & 0xff;
	  header[index + 1] = (0 >> 8) & 0xff;
	  header[index] = (0) & 0xff;
	  index = index + 4;

	  // Write collection name
	  index = index + header.write(this.ns, index, 'utf8') + 1;
	  header[index - 1] = 0;

	  // Write ZERO
	  header[index + 3] = (this.flags >> 24) & 0xff;
	  header[index + 2] = (this.flags >> 16) & 0xff;
	  header[index + 1] = (this.flags >> 8) & 0xff;
	  header[index] = (this.flags) & 0xff;
	  index = index + 4;

	  // Return the buffers
	  return buffers;
	}

	module.exports = {
	    Insert: Insert
	  , Update: Update
	  , Remove: Remove
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var Insert = __webpack_require__(197).Insert
	  , Update = __webpack_require__(197).Update
	  , Remove = __webpack_require__(197).Remove
	  , Query = __webpack_require__(174).Query
	  , copy = __webpack_require__(170).copy
	  , KillCursor = __webpack_require__(174).KillCursor
	  , GetMore = __webpack_require__(174).GetMore
	  , Query = __webpack_require__(174).Query
	  , ReadPreference = __webpack_require__(193)
	  , f = __webpack_require__(10).format
	  , CommandResult = __webpack_require__(195)
	  , MongoError = __webpack_require__(168)
	  , Long = __webpack_require__(175).Long;

	var WireProtocol = function() {}

	//
	// Execute a write operation
	var executeWrite = function(topology, type, opsField, ns, ops, options, callback) {
	  if(ops.length == 0) throw new MongoError("insert must contain at least one document");
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  // Split the ns up to get db and collection
	  var p = ns.split(".");
	  var d = p.shift();
	  // Options
	  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;
	  var writeConcern = options.writeConcern || {};
	  // return skeleton
	  var writeCommand = {};
	  writeCommand[type] = p.join('.');
	  writeCommand[opsField] = ops;
	  writeCommand.ordered = ordered;
	  writeCommand.writeConcern = writeConcern;

	  // Options object
	  var opts = {};
	  if(type == 'insert') opts.checkKeys = true;
	  // Ensure we support serialization of functions
	  if(options.serializeFunctions) opts.serializeFunctions = options.serializeFunctions;
	  if(options.ignoreUndefined) opts.ignoreUndefined = options.ignoreUndefined;
	  // Execute command
	  topology.command(f("%s.$cmd", d), writeCommand, opts, callback);
	}

	//
	// Needs to support legacy mass insert as well as ordered/unordered legacy
	// emulation
	//
	WireProtocol.prototype.insert = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  executeWrite(topology, 'insert', 'documents', ns, ops, options, callback);
	}

	WireProtocol.prototype.update = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  executeWrite(topology, 'update', 'updates', ns, ops, options, callback);
	}

	WireProtocol.prototype.remove = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  executeWrite(topology, 'delete', 'deletes', ns, ops, options, callback);
	}

	WireProtocol.prototype.killCursor = function(bson, ns, cursorId, connection, callbacks, callback) {
	  // Create a kill cursor command
	  var killCursor = new KillCursor(bson, [cursorId]);
	  // Execute the kill cursor command
	  if(connection && connection.isConnected()) connection.write(killCursor.toBin());
	  // Set cursor to 0
	  cursorId = Long.ZERO;
	  // Return to caller
	  if(callback) callback(null, null);
	}

	WireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, callbacks, options, callback) {
	  // Create getMore command
	  var getMore = new GetMore(bson, ns, cursorState.cursorId, {numberToReturn: batchSize});

	  // Query callback
	  var queryCallback = function(err, r) {
	    if(err) return callback(err);

	    // If we have a timed out query or a cursor that was killed
	    if((r.responseFlags & (1 << 0)) != 0) {
	      return callback(new MongoError("cursor killed or timed out"), null);
	    }

	    // Ensure we have a Long valie cursor id
	    var cursorId = typeof r.cursorId == 'number'
	      ? Long.fromNumber(r.cursorId)
	      : r.cursorId;

	    // Set all the values
	    cursorState.documents = r.documents;
	    cursorState.cursorId = cursorId;

	    // Return
	    callback(null);
	  }

	  // If we have a raw query decorate the function
	  if(raw) {
	    queryCallback.raw = raw;
	  }

	  // Register a callback
	  callbacks.register(getMore.requestId, queryCallback);
	  // Write out the getMore command
	  connection.write(getMore.toBin());
	}

	WireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {
	  // Establish type of command
	  if(cmd.find) {
	    return setupClassicFind(bson, ns, cmd, cursorState, topology, options)
	  } else if(cursorState.cursorId != null) {
	  } else if(cmd) {
	    return setupCommand(bson, ns, cmd, cursorState, topology, options);
	  } else {
	    throw new MongoError(f("command %s does not return a cursor", JSON.stringify(cmd)));
	  }
	}

	//
	// Execute a find command
	var setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {
	  var readPreference = options.readPreference || new ReadPreference('primary');
	  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);
	  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');

	  // Ensure we have at least some options
	  options = options || {};
	  // Set the optional batchSize
	  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;
	  var numberToReturn = 0;

	  // Unpack the limit and batchSize values
	  if(cursorState.limit == 0) {
	    numberToReturn = cursorState.batchSize;
	  } else if(cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || (cursorState.limit > 0 && cursorState.batchSize == 0)) {
	    numberToReturn = cursorState.limit;
	  } else {
	    numberToReturn = cursorState.batchSize;
	  }

	  var numberToSkip = cursorState.skip || 0;
	  // Build actual find command
	  var findCmd = {};
	  // Using special modifier
	  var usesSpecialModifier = false;

	  // We have a Mongos topology, check if we need to add a readPreference
	  if(topology.type == 'mongos' && readPreference) {
	    findCmd['$readPreference'] = readPreference.toJSON();
	    usesSpecialModifier = true;
	  }

	  // Add special modifiers to the query
	  if(cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;
	  if(cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;
	  if(cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;
	  if(cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;
	  if(cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;
	  if(cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;
	  if(cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;
	  if(cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;
	  if(cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;
	  if(cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;

	  // If we have explain, return a single document and close cursor
	  if(cmd.explain) {
	    numberToReturn = -1;
	    usesSpecialModifier = true;
	    findCmd['$explain'] = true;
	  }

	  // If we have a special modifier
	  if(usesSpecialModifier) {
	    findCmd['$query'] = cmd.query;
	  } else {
	    findCmd = cmd.query;
	  }

	  // Throw on majority readConcern passed in
	  if(cmd.readConcern && cmd.readConcern.level != 'local') {
	    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));
	  }

	  // Remove readConcern, ensure no failing commands
	  if(cmd.readConcern) {
	    cmd = copy(cmd);
	    delete cmd['readConcern'];
	  }

	  // Serialize functions
	  var serializeFunctions = typeof options.serializeFunctions == 'boolean'
	    ? options.serializeFunctions : false;
	  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'
	    ? options.ignoreUndefined : false;

	  // Build Query object
	  var query = new Query(bson, ns, findCmd, {
	      numberToSkip: numberToSkip, numberToReturn: numberToReturn
	    , checkKeys: false, returnFieldSelector: cmd.fields
	    , serializeFunctions: serializeFunctions
	    , ignoreUndefined: ignoreUndefined
	  });

	  // Set query flags
	  query.slaveOk = readPreference.slaveOk();

	  // Set up the option bits for wire protocol
	  if(typeof cmd.tailable == 'boolean') query.tailable = cmd.tailable;
	  if(typeof cmd.oplogReplay == 'boolean') query.oplogReplay = cmd.oplogReplay;
	  if(typeof cmd.noCursorTimeout == 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;
	  if(typeof cmd.awaitData == 'boolean') query.awaitData = cmd.awaitData;
	  if(typeof cmd.exhaust == 'boolean') query.exhaust = cmd.exhaust;
	  if(typeof cmd.partial == 'boolean') query.partial = cmd.partial;
	  // Return the query
	  return query;
	}

	//
	// Set up a command cursor
	var setupCommand = function(bson, ns, cmd, cursorState, topology, options) {
	  var readPreference = options.readPreference || new ReadPreference('primary');
	  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);
	  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');

	  // Set empty options object
	  options = options || {}

	  // Final query
	  var finalCmd = {};
	  for(var name in cmd) {
	    finalCmd[name] = cmd[name];
	  }

	  // Build command namespace
	  var parts = ns.split(/\./);

	  // We have a Mongos topology, check if we need to add a readPreference
	  if(topology.type == 'mongos' && readPreference) {
	    finalCmd['$readPreference'] = readPreference.toJSON();
	  }

	  // Serialize functions
	  var serializeFunctions = typeof options.serializeFunctions == 'boolean'
	    ? options.serializeFunctions : false;

	  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'
	    ? options.ignoreUndefined : false;

	  // Throw on majority readConcern passed in
	  if(cmd.readConcern && cmd.readConcern.level != 'local') {
	    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));
	  }

	  // Remove readConcern, ensure no failing commands
	  if(cmd.readConcern) delete cmd['readConcern'];

	  // Build Query object
	  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {
	      numberToSkip: 0, numberToReturn: -1
	    , checkKeys: false, serializeFunctions: serializeFunctions
	    , ignoreUndefined: ignoreUndefined
	  });

	  // Set query flags
	  query.slaveOk = readPreference.slaveOk();

	  // Return the query
	  return query;
	}

	/**
	 * @ignore
	 */
	var bindToCurrentDomain = function(callback) {
	  var domain = process.domain;
	  if(domain == null || callback == null) {
	    return callback;
	  } else {
	    return domain.bind(callback);
	  }
	}

	module.exports = WireProtocol;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var Insert = __webpack_require__(197).Insert
	  , Update = __webpack_require__(197).Update
	  , Remove = __webpack_require__(197).Remove
	  , Query = __webpack_require__(174).Query
	  , copy = __webpack_require__(170).copy
	  , KillCursor = __webpack_require__(174).KillCursor
	  , GetMore = __webpack_require__(174).GetMore
	  , Query = __webpack_require__(174).Query
	  , ReadPreference = __webpack_require__(193)
	  , f = __webpack_require__(10).format
	  , CommandResult = __webpack_require__(195)
	  , MongoError = __webpack_require__(168)
	  , Long = __webpack_require__(175).Long;

	var WireProtocol = function(legacyWireProtocol) {
	  this.legacyWireProtocol = legacyWireProtocol;
	}

	//
	// Execute a write operation
	var executeWrite = function(topology, type, opsField, ns, ops, options, callback) {
	  if(ops.length == 0) throw new MongoError("insert must contain at least one document");
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  // Split the ns up to get db and collection
	  var p = ns.split(".");
	  var d = p.shift();
	  // Options
	  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;
	  var writeConcern = options.writeConcern || {};
	  // return skeleton
	  var writeCommand = {};
	  writeCommand[type] = p.join('.');
	  writeCommand[opsField] = ops;
	  writeCommand.ordered = ordered;
	  writeCommand.writeConcern = writeConcern;

	  // Do we have bypassDocumentValidation set, then enable it on the write command
	  if(typeof options.bypassDocumentValidation == 'boolean') {
	    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;
	  }

	  // Options object
	  var opts = {};
	  if(type == 'insert') opts.checkKeys = true;
	  // Ensure we support serialization of functions
	  if(options.serializeFunctions) opts.serializeFunctions = options.serializeFunctions;
	  if(options.ignoreUndefined) opts.ignoreUndefined = options.ignoreUndefined;
	  // Execute command
	  topology.command(f("%s.$cmd", d), writeCommand, opts, callback);
	}

	//
	// Needs to support legacy mass insert as well as ordered/unordered legacy
	// emulation
	//
	WireProtocol.prototype.insert = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  executeWrite(topology, 'insert', 'documents', ns, ops, options, callback);
	}

	WireProtocol.prototype.update = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  executeWrite(topology, 'update', 'updates', ns, ops, options, callback);
	}

	WireProtocol.prototype.remove = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {
	  executeWrite(topology, 'delete', 'deletes', ns, ops, options, callback);
	}

	WireProtocol.prototype.killCursor = function(bson, ns, cursorId, connection, callbacks, callback) {
	  // Build command namespace
	  var parts = ns.split(/\./);
	  // Command namespace
	  var commandns = f('%s.$cmd', parts.shift());
	  // Create getMore command
	  var killcursorCmd = {
	    killCursors: parts.join('.'),
	    cursors: [cursorId]
	  }

	  // Build Query object
	  var query = new Query(bson, commandns, killcursorCmd, {
	      numberToSkip: 0, numberToReturn: -1
	    , checkKeys: false, returnFieldSelector: null
	  });

	  // Set query flags
	  query.slaveOk = true;

	  // Execute the kill cursor command
	  if(connection && connection.isConnected()) {
	    connection.write(query.toBin());
	  }

	  // Kill cursor callback
	  var killCursorCallback = function(err, r) {
	    if(err) {
	      if(typeof callback != 'function') return;
	      return callback(err);
	    }

	    // If we have a timed out query or a cursor that was killed
	    if((r.responseFlags & (1 << 0)) != 0) {
	      if(typeof callback != 'function') return;
	      return callback(new MongoError("cursor killed or timed out"), null);
	    }

	    if(!Array.isArray(r.documents) || r.documents.length == 0) {
	      if(typeof callback != 'function') return;
	      return callback(new MongoError(f('invalid getMore result returned for cursor id %s', cursorState.cursorId)));
	    }

	    // Return the result
	    if(typeof callback == 'function') {
	      callback(null, r.documents[0]);
	    }
	  }

	  // Register a callback
	  callbacks.register(query.requestId, killCursorCallback);
	}

	WireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, callbacks, options, callback) {
	  var readPreference = options.readPreference || new ReadPreference('primary');
	  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);
	  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');
	  // Build command namespace
	  var parts = ns.split(/\./);
	  // Command namespace
	  var commandns = f('%s.$cmd', parts.shift());

	  // Check if we have an maxTimeMS set
	  var maxTimeMS = typeof cursorState.cmd.maxTimeMS == 'number' ? cursorState.cmd.maxTimeMS : 3000;

	  // Create getMore command
	  var getMoreCmd = {
	    getMore: cursorState.cursorId,
	    collection: parts.join('.'),
	    batchSize: batchSize,
	    maxTimeMS: maxTimeMS
	  }

	  // Build Query object
	  var query = new Query(bson, commandns, getMoreCmd, {
	      numberToSkip: 0, numberToReturn: -1
	    , checkKeys: false, returnFieldSelector: null
	  });

	  // Set query flags
	  query.slaveOk = readPreference.slaveOk();

	  // Query callback
	  var queryCallback = function(err, r) {
	    if(err) return callback(err);

	    // If we have a timed out query or a cursor that was killed
	    if((r.responseFlags & (1 << 0)) != 0) {
	      return callback(new MongoError("cursor killed or timed out"), null);
	    }

	    if(!Array.isArray(r.documents) || r.documents.length == 0)
	      return callback(new MongoError(f('invalid getMore result returned for cursor id %s', cursorState.cursorId)));

	    // Raw, return all the extracted documents
	    if(raw) {
	      cursorState.documents = r.documents;
	      cursorState.cursorId = r.cursorId;
	      return callback(null, r.documents);
	    }

	    // Ensure we have a Long valie cursor id
	    var cursorId = typeof r.documents[0].cursor.id == 'number'
	      ? Long.fromNumber(r.documents[0].cursor.id)
	      : r.documents[0].cursor.id;

	    // Set all the values
	    cursorState.documents = r.documents[0].cursor.nextBatch;
	    cursorState.cursorId = cursorId;

	    // Return the result
	    callback(null, r.documents[0]);
	  }

	  // If we have a raw query decorate the function
	  if(raw) {
	    queryCallback.raw = raw;
	  }

	  // Add the result field needed
	  queryCallback.documentsReturnedIn = 'nextBatch';

	  // Register a callback
	  callbacks.register(query.requestId, queryCallback);
	  // Write out the getMore command
	  connection.write(query.toBin());
	}

	WireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {
	  // Establish type of command
	  if(cmd.find) {
	    if(cmd.exhaust) {
	      return this.legacyWireProtocol.command(bson, ns, cmd, cursorState, topology, options);
	    }

	    // Create the find command
	    var query = executeFindCommand(bson, ns, cmd, cursorState, topology, options)
	    // Mark the cmd as virtual
	    cmd.virtual = false;
	    // Signal the documents are in the firstBatch value
	    query.documentsReturnedIn = 'firstBatch';
	    // Return the query
	    return query;
	  } else if(cursorState.cursorId != null) {
	  } else if(cmd) {
	    return setupCommand(bson, ns, cmd, cursorState, topology, options);
	  } else {
	    throw new MongoError(f("command %s does not return a cursor", JSON.stringify(cmd)));
	  }
	}

	// // Command
	// {
	//     find: ns
	//   , query: <object>
	//   , limit: <n>
	//   , fields: <object>
	//   , skip: <n>
	//   , hint: <string>
	//   , explain: <boolean>
	//   , snapshot: <boolean>
	//   , batchSize: <n>
	//   , returnKey: <boolean>
	//   , maxScan: <n>
	//   , min: <n>
	//   , max: <n>
	//   , showDiskLoc: <boolean>
	//   , comment: <string>
	//   , maxTimeMS: <n>
	//   , raw: <boolean>
	//   , readPreference: <ReadPreference>
	//   , tailable: <boolean>
	//   , oplogReplay: <boolean>
	//   , noCursorTimeout: <boolean>
	//   , awaitdata: <boolean>
	//   , exhaust: <boolean>
	//   , partial: <boolean>
	// }

	// FIND/GETMORE SPEC
	// {
	//     “find”: <string>,
	//     “filter”: { ... },
	//     “sort”: { ... },
	//     “projection”: { ... },
	//     “hint”: { ... },
	//     “skip”: <int>,
	//     “limit”: <int>,
	//     “batchSize”: <int>,
	//     “singleBatch”: <bool>,
	//     “comment”: <string>,
	//     “maxScan”: <int>,
	//     “maxTimeMS”: <int>,
	//     “max”: { ... },
	//     “min”: { ... },
	//     “returnKey”: <bool>,
	//     “showRecordId”: <bool>,
	//     “snapshot”: <bool>,
	//     “tailable”: <bool>,
	//     “oplogReplay”: <bool>,
	//     “noCursorTimeout”: <bool>,
	//     “awaitData”: <bool>,
	//     “partial”: <bool>,
	//     “$readPreference”: { ... }
	// }

	//
	// Execute a find command
	var executeFindCommand = function(bson, ns, cmd, cursorState, topology, options) {
	  var readPreference = options.readPreference || new ReadPreference('primary');
	  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);
	  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');

	  // Ensure we have at least some options
	  options = options || {};
	  // Set the optional batchSize
	  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;

	  // Build command namespace
	  var parts = ns.split(/\./);
	  // Command namespace
	  var commandns = f('%s.$cmd', parts.shift());

	  // Build actual find command
	  var findCmd = {
	    find: parts.join('.')
	  };

	  // I we provided a filter
	  if(cmd.query) findCmd.filter = cmd.query;

	  // Sort value
	  var sortValue = cmd.sort;

	  // Handle issue of sort being an Array
	  if(Array.isArray(sortValue)) {
	    var sortObject = {};

	    if(sortValue.length > 0 && !Array.isArray(sortValue[0])) {
	      var sortDirection = sortValue[1];
	      // Translate the sort order text
	      if(sortDirection == 'asc') {
	        sortDirection = 1;
	      } else if(sortDirection == 'desc') {
	        sortDirection = -1;
	      }

	      // Set the sort order
	      sortObject[sortValue[0]] = sortDirection;
	    } else {
	      for(var i = 0; i < sortValue.length; i++) {
	        var sortDirection = sortValue[i][1];
	        // Translate the sort order text
	        if(sortDirection == 'asc') {
	          sortDirection = 1;
	        } else if(sortDirection == 'desc') {
	          sortDirection = -1;
	        }

	        // Set the sort order
	        sortObject[sortValue[i][0]] = sortDirection;
	      }
	    }

	    sortValue = sortObject;
	  };

	  // Add sort to command
	  if(cmd.sort) findCmd.sort = sortValue;
	  // Add a projection to the command
	  if(cmd.fields) findCmd.projection = cmd.fields;
	  // Add a hint to the command
	  if(cmd.hint) findCmd.hint = cmd.hint;
	  // Add a skip
	  if(cmd.skip) findCmd.skip = cmd.skip;
	  // Add a limit
	  if(cmd.limit) findCmd.limit = cmd.limit;
	  // Add a batchSize
	  if(cmd.batchSize) findCmd.batchSize = cmd.batchSize;

	  // Check if we wish to have a singleBatch
	  if(cmd.limit < 0) {
	    findCmd.limit = Math.abs(cmd.limit);
	    findCmd.singleBatch = true;
	  }

	  // If we have comment set
	  if(cmd.comment) findCmd.comment = cmd.comment;

	  // If we have maxScan
	  if(cmd.maxScan) findCmd.maxScan = cmd.maxScan;

	  // If we have maxTimeMS set
	  if(cmd.maxTimeMS) findCmd.maxTimeMS = cmd.maxTimeMS;

	  // If we have min
	  if(cmd.min) findCmd.min = cmd.min;

	  // If we have max
	  if(cmd.max) findCmd.max = cmd.max;

	  // If we have returnKey set
	  if(cmd.returnKey) findCmd.returnKey = cmd.returnKey;

	  // If we have showDiskLoc set
	  if(cmd.showDiskLoc) findCmd.showRecordId = cmd.showDiskLoc;

	  // If we have snapshot set
	  if(cmd.snapshot) findCmd.snapshot = cmd.snapshot;

	  // If we have tailable set
	  if(cmd.tailable) findCmd.tailable = cmd.tailable;

	  // If we have oplogReplay set
	  if(cmd.oplogReplay) findCmd.oplogReplay = cmd.oplogReplay;

	  // If we have noCursorTimeout set
	  if(cmd.noCursorTimeout) findCmd.noCursorTimeout = cmd.noCursorTimeout;

	  // If we have awaitData set
	  if(cmd.awaitData) findCmd.awaitData = cmd.awaitData;
	  if(cmd.awaitdata) findCmd.awaitData = cmd.awaitdata;

	  // If we have partial set
	  if(cmd.partial) findCmd.partial = cmd.partial;

	  // We have a Mongos topology, check if we need to add a readPreference
	  if(topology.type == 'mongos' && readPreference) {
	    findCmd['$readPreference'] = readPreference.toJSON();
	  }

	  // If we have explain, we need to rewrite the find command
	  // to wrap it in the explain command
	  if(cmd.explain) {
	    findCmd = {
	      explain: findCmd
	    }
	  }

	  // Did we provide a readConcern
	  if(cmd.readConcern) findCmd.readConcern = cmd.readConcern;

	  // Set up the serialize and ignoreUndefined fields
	  var serializeFunctions = typeof options.serializeFunctions == 'boolean' 
	    ? options.serializeFunctions : false;
	  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' 
	    ? options.ignoreUndefined : false;

	  // Build Query object
	  var query = new Query(bson, commandns, findCmd, {
	      numberToSkip: 0, numberToReturn: -1
	    , checkKeys: false, returnFieldSelector: null
	    , serializeFunctions: serializeFunctions, ignoreUndefined: ignoreUndefined
	  });

	  // Set query flags
	  query.slaveOk = readPreference.slaveOk();

	  // Return the query
	  return query;
	}

	//
	// Set up a command cursor
	var setupCommand = function(bson, ns, cmd, cursorState, topology, options) {
	  var readPreference = options.readPreference || new ReadPreference('primary');
	  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);
	  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');

	  // Set empty options object
	  options = options || {}

	  // Final query
	  var finalCmd = {};
	  for(var name in cmd) {
	    finalCmd[name] = cmd[name];
	  }

	  // Build command namespace
	  var parts = ns.split(/\./);

	  // We have a Mongos topology, check if we need to add a readPreference
	  if(topology.type == 'mongos' && readPreference) {
	    finalCmd['$readPreference'] = readPreference.toJSON();
	  }

	  // Serialize functions
	  var serializeFunctions = typeof options.serializeFunctions == 'boolean'
	    ? options.serializeFunctions : false;

	  // Set up the serialize and ignoreUndefined fields
	  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' 
	    ? options.ignoreUndefined : false;

	  // Build Query object
	  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {
	      numberToSkip: 0, numberToReturn: -1
	    , checkKeys: false, serializeFunctions: serializeFunctions
	    , ignoreUndefined: ignoreUndefined
	  });

	  // Set query flags
	  query.slaveOk = readPreference.slaveOk();

	  // Return the query
	  return query;
	}

	/**
	 * @ignore
	 */
	var bindToCurrentDomain = function(callback) {
	  var domain = process.domain;
	  if(domain == null || callback == null) {
	    return callback;
	  } else {
	    return domain.bind(callback);
	  }
	}

	module.exports = WireProtocol;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , EventEmitter = __webpack_require__(19).EventEmitter;

	/**
	 * Creates a new Authentication Session
	 * @class
	 * @param {object} [options] Options for the session
	 * @param {{Server}|{ReplSet}|{Mongos}} topology The topology instance underpinning the session
	 */
	var Session = function(options, topology) {
	  this.options = options;
	  this.topology = topology;
	  
	  // Add event listener
	  EventEmitter.call(this);
	}

	inherits(Session, EventEmitter);

	/**
	 * Execute a command
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {object} cmd The command hash
	 * @param {object} [options.readPreference] Specify read preference if command supports it
	 * @param {object} [options.connection] Specify connection object to execute command against
	 * @param {opResultCallback} callback A callback function
	 */
	Session.prototype.command = function(ns, cmd, options, callback) {
	  this.topology.command(ns, cmd, options, callback);
	}

	/**
	 * Insert one or more documents
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of documents to insert
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {opResultCallback} callback A callback function
	 */
	Session.prototype.insert = function(ns, ops, options, callback) {
	  this.topology.insert(ns, ops, options, callback);
	}

	/**
	 * Perform one or more update operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of updates
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {opResultCallback} callback A callback function
	 */
	Session.prototype.update = function(ns, ops, options, callback) {
	  this.topology.update(ns, ops, options, callback);
	}

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of removes
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {opResultCallback} callback A callback function
	 */
	Session.prototype.remove = function(ns, ops, options, callback) {
	  this.topology.remove(ns, ops, options, callback);
	}

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId
	 * @param {object} [options.batchSize=0] Batchsize for the operation
	 * @param {array} [options.documents=[]] Initial documents list for cursor
	 * @param {boolean} [options.tailable=false] Tailable flag set
	 * @param {boolean} [options.oplogReply=false] oplogReply flag set
	 * @param {boolean} [options.awaitdata=false] awaitdata flag set
	 * @param {boolean} [options.exhaust=false] exhaust flag set
	 * @param {boolean} [options.partial=false] partial flag set
	 * @param {opResultCallback} callback A callback function
	 */
	Session.prototype.cursor = function(ns, cmd, options) {
	  return this.topology.cursor(ns, cmd, options);
	}  

	module.exports = Session;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var f = __webpack_require__(10).format
	  , crypto = __webpack_require__(52)
	  , MongoError = __webpack_require__(168);

	var AuthSession = function(db, username, password) {
	  this.db = db;
	  this.username = username;
	  this.password = password;
	}

	AuthSession.prototype.equal = function(session) {
	  return session.db == this.db 
	    && session.username == this.username
	    && session.password == this.password;  
	}

	/**
	 * Creates a new MongoCR authentication mechanism
	 * @class
	 * @return {MongoCR} A cursor instance
	 */
	var MongoCR = function() {
	  this.authStore = [];
	}

	// Add to store only if it does not exist
	var addAuthSession = function(authStore, session) {
	  var found = false;

	  for(var i = 0; i < authStore.length; i++) {
	    if(authStore[i].equal(session)) {
	      found = true;
	      break;
	    }
	  }

	  if(!found) authStore.push(session);
	}

	/**
	 * Authenticate
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {string} db Name of the database
	 * @param {string} username Username
	 * @param {string} password Password
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	MongoCR.prototype.auth = function(server, pool, db, username, password, callback) {
	  var self = this;
	  // Get all the connections
	  var connections = pool.getAll();
	  // Total connections
	  var count = connections.length;
	  if(count == 0) return callback(null, null);

	  // Valid connections
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  var errorObject = null;

	  // For each connection we need to authenticate
	  while(connections.length > 0) {    
	    // Execute MongoCR
	    var executeMongoCR = function(connection) {
	      // Let's start the process
	      server.command(f("%s.$cmd", db)
	        , { getnonce: 1 }
	        , { connection: connection }, function(err, r) {
	          var nonce = null;
	          var key = null;
	          
	          // Adjust the number of connections left
	          // Get nonce
	          if(err == null) {
	            nonce = r.result.nonce;
	            // Use node md5 generator
	            var md5 = crypto.createHash('md5');
	            // Generate keys used for authentication
	            md5.update(username + ":mongo:" + password);
	            var hash_password = md5.digest('hex');
	            // Final key
	            md5 = crypto.createHash('md5');
	            md5.update(nonce + username + hash_password);
	            key = md5.digest('hex');
	          }

	          // Execute command
	          server.command(f("%s.$cmd", db)
	            , { authenticate: 1, user: username, nonce: nonce, key:key}
	            , { connection: connection }, function(err, r) {
	              count = count - 1;

	              // If we have an error
	              if(err) {
	                errorObject = err;
	              } else if(r.result['$err']) {
	                errorObject = r.result;
	              } else if(r.result['errmsg']) {
	                errorObject = r.result;
	              } else {
	                credentialsValid = true;
	                numberOfValidConnections = numberOfValidConnections + 1;
	              }

	              // We have authenticated all connections
	              if(count == 0 && numberOfValidConnections > 0) {
	                // Store the auth details
	                addAuthSession(self.authStore, new AuthSession(db, username, password));
	                // Return correct authentication
	                callback(null, true);
	              } else if(count == 0) {
	                if(errorObject == null) errorObject = new MongoError(f("failed to authenticate using mongocr"));
	                callback(errorObject, false);
	              }
	          });
	      });
	    }

	    // Get the connection
	    executeMongoCR(connections.shift());
	  }
	}

	/**
	 * Re authenticate pool
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	MongoCR.prototype.reauthenticate = function(server, pool, callback) {
	  var count = this.authStore.length;
	  if(count == 0) return callback(null, null);
	  // Iterate over all the auth details stored
	  for(var i = 0; i < this.authStore.length; i++) {
	    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, function(err, r) {
	      count = count - 1;
	      // Done re-authenticating
	      if(count == 0) {
	        callback(null, null);
	      }
	    });
	  }
	}

	/**
	 * This is a result from a authentication strategy
	 *
	 * @callback authResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {boolean} result The result of the authentication process
	 */

	module.exports = MongoCR;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var f = __webpack_require__(10).format
	  , crypto = __webpack_require__(52)
	  , MongoError = __webpack_require__(168);

	var AuthSession = function(db, username, password) {
	  this.db = db;
	  this.username = username;
	  this.password = password;
	}

	AuthSession.prototype.equal = function(session) {
	  return session.db == this.db 
	    && session.username == this.username
	    && session.password == this.password;
	}

	/**
	 * Creates a new X509 authentication mechanism
	 * @class
	 * @return {X509} A cursor instance
	 */
	var X509 = function() {
	  this.authStore = [];
	}

	/**
	 * Authenticate
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {string} db Name of the database
	 * @param {string} username Username
	 * @param {string} password Password
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	X509.prototype.auth = function(server, pool, db, username, password, callback) {
	  var self = this;
	  // Get all the connections
	  var connections = pool.getAll();
	  // Total connections
	  var count = connections.length;
	  if(count == 0) return callback(null, null);

	  // Valid connections
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  var errorObject = null;

	  // For each connection we need to authenticate
	  while(connections.length > 0) {    
	    // Execute MongoCR
	    var execute = function(connection) {
	      // Let's start the sasl process
	      var command = {
	          authenticate: 1
	        , mechanism: 'MONGODB-X509'
	        , user: username
	      };

	      // Let's start the process
	      server.command("$external.$cmd"
	        , command
	        , { connection: connection }, function(err, r) {
	        // Adjust count
	        count = count - 1;

	        // If we have an error
	        if(err) {
	          errorObject = err;
	        } else if(r.result['$err']) {
	          errorObject = r.result;
	        } else if(r.result['errmsg']) {
	          errorObject = r.result;
	        } else {
	          credentialsValid = true;
	          numberOfValidConnections = numberOfValidConnections + 1;
	        }

	        // We have authenticated all connections
	        if(count == 0 && numberOfValidConnections > 0) {
	          // Store the auth details
	          addAuthSession(self.authStore, new AuthSession(db, username, password));
	          // Return correct authentication
	          callback(null, true);
	        } else if(count == 0) {
	          if(errorObject == null) errorObject = new MongoError(f("failed to authenticate using mongocr"));
	          callback(errorObject, false);
	        }
	      });
	    }

	    // Get the connection
	    execute(connections.shift());
	  }
	}

	// Add to store only if it does not exist
	var addAuthSession = function(authStore, session) {
	  var found = false;

	  for(var i = 0; i < authStore.length; i++) {
	    if(authStore[i].equal(session)) {
	      found = true;
	      break;
	    }
	  }

	  if(!found) authStore.push(session);
	}

	/**
	 * Re authenticate pool
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	X509.prototype.reauthenticate = function(server, pool, callback) {
	  var count = this.authStore.length;
	  if(count == 0) return callback(null, null);
	  // Iterate over all the auth details stored
	  for(var i = 0; i < this.authStore.length; i++) {
	    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, function(err, r) {
	      count = count - 1;
	      // Done re-authenticating
	      if(count == 0) {
	        callback(null, null);
	      }
	    });
	  }
	}

	/**
	 * This is a result from a authentication strategy
	 *
	 * @callback authResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {boolean} result The result of the authentication process
	 */

	module.exports = X509;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var f = __webpack_require__(10).format
	  , crypto = __webpack_require__(52)
	  , Binary = __webpack_require__(175).Binary
	  , MongoError = __webpack_require__(168);

	var AuthSession = function(db, username, password) {
	  this.db = db;
	  this.username = username;
	  this.password = password;
	}

	AuthSession.prototype.equal = function(session) {
	  return session.db == this.db 
	    && session.username == this.username
	    && session.password == this.password;
	}

	/**
	 * Creates a new Plain authentication mechanism
	 * @class
	 * @return {Plain} A cursor instance
	 */
	var Plain = function() {
	  this.authStore = [];
	}

	/**
	 * Authenticate
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {string} db Name of the database
	 * @param {string} username Username
	 * @param {string} password Password
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	Plain.prototype.auth = function(server, pool, db, username, password, callback) {
	  var self = this;
	  // Get all the connections
	  var connections = pool.getAll();
	  // Total connections
	  var count = connections.length;
	  if(count == 0) return callback(null, null);

	  // Valid connections
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  var errorObject = null;

	  // For each connection we need to authenticate
	  while(connections.length > 0) {    
	    // Execute MongoCR
	    var execute = function(connection) {
	      // Create payload
	      var payload = new Binary(f("\x00%s\x00%s", username, password));

	      // Let's start the sasl process
	      var command = {
	          saslStart: 1
	        , mechanism: 'PLAIN'
	        , payload: payload
	        , autoAuthorize: 1
	      };

	      // Let's start the process
	      server.command("$external.$cmd"
	        , command
	        , { connection: connection }, function(err, r) {
	        // Adjust count
	        count = count - 1;

	        // If we have an error
	        if(err) {
	          errorObject = err;
	        } else if(r.result['$err']) {
	          errorObject = r.result;
	        } else if(r.result['errmsg']) {
	          errorObject = r.result;
	        } else {
	          credentialsValid = true;
	          numberOfValidConnections = numberOfValidConnections + 1;
	        }

	        // We have authenticated all connections
	        if(count == 0 && numberOfValidConnections > 0) {
	          // Store the auth details
	          addAuthSession(self.authStore, new AuthSession(db, username, password));
	          // Return correct authentication
	          callback(null, true);
	        } else if(count == 0) {
	          if(errorObject == null) errorObject = new MongoError(f("failed to authenticate using mongocr"));
	          callback(errorObject, false);
	        }
	      });
	    }

	    // Get the connection
	    execute(connections.shift());
	  }
	}

	// Add to store only if it does not exist
	var addAuthSession = function(authStore, session) {
	  var found = false;

	  for(var i = 0; i < authStore.length; i++) {
	    if(authStore[i].equal(session)) {
	      found = true;
	      break;
	    }
	  }

	  if(!found) authStore.push(session);
	}

	/**
	 * Re authenticate pool
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	Plain.prototype.reauthenticate = function(server, pool, callback) {
	  var count = this.authStore.length;
	  if(count == 0) return callback(null, null);
	  // Iterate over all the auth details stored
	  for(var i = 0; i < this.authStore.length; i++) {
	    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, function(err, r) {
	      count = count - 1;
	      // Done re-authenticating
	      if(count == 0) {
	        callback(null, null);
	      }
	    });
	  }
	}

	/**
	 * This is a result from a authentication strategy
	 *
	 * @callback authResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {boolean} result The result of the authentication process
	 */

	module.exports = Plain;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var f = __webpack_require__(10).format
	  , crypto = __webpack_require__(52)
	  , MongoError = __webpack_require__(168);

	var AuthSession = function(db, username, password, options) {
	  this.db = db;
	  this.username = username;
	  this.password = password;
	  this.options = options;
	}

	AuthSession.prototype.equal = function(session) {
	  return session.db == this.db 
	    && session.username == this.username
	    && session.password == this.password;
	}

	// Kerberos class
	var Kerberos = null;
	var MongoAuthProcess = null;

	// Try to grab the Kerberos class
	try {
	  Kerberos = __webpack_require__(205).Kerberos
	  // Authentication process for Mongo
	  MongoAuthProcess = __webpack_require__(205).processes.MongoAuthProcess
	} catch(err) {}

	/**
	 * Creates a new GSSAPI authentication mechanism
	 * @class
	 * @return {GSSAPI} A cursor instance
	 */
	var GSSAPI = function() {
	  this.authStore = [];
	}

	/**
	 * Authenticate
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {string} db Name of the database
	 * @param {string} username Username
	 * @param {string} password Password
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	GSSAPI.prototype.auth = function(server, pool, db, username, password, options, callback) {
	  var self = this;
	  // We don't have the Kerberos library
	  if(Kerberos == null) return callback(new Error("Kerberos library is not installed"));  
	  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';
	  // Get all the connections
	  var connections = pool.getAll();
	  // Total connections
	  var count = connections.length;
	  if(count == 0) return callback(null, null);

	  // Valid connections
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  var errorObject = null;

	  // For each connection we need to authenticate
	  while(connections.length > 0) {    
	    // Execute MongoCR
	    var execute = function(connection) {
	      // Start Auth process for a connection
	      GSSAPIInitialize(db, username, password, db, gssapiServiceName, server, connection, function(err, r) {
	        // Adjust count
	        count = count - 1;

	        // If we have an error
	        if(err) {
	          errorObject = err;
	        } else if(r.result['$err']) {
	          errorObject = r.result;
	        } else if(r.result['errmsg']) {
	          errorObject = r.result;
	        } else {
	          credentialsValid = true;
	          numberOfValidConnections = numberOfValidConnections + 1;
	        }

	        // We have authenticated all connections
	        if(count == 0 && numberOfValidConnections > 0) {
	          // Store the auth details
	          addAuthSession(self.authStore, new AuthSession(db, username, password, options));
	          // Return correct authentication
	          callback(null, true);
	        } else if(count == 0) {
	          if(errorObject == null) errorObject = new MongoError(f("failed to authenticate using mongocr"));
	          callback(errorObject, false);
	        }
	      });
	    }

	    // Get the connection
	    execute(connections.shift());
	  }
	}

	//
	// Initialize step
	var GSSAPIInitialize = function(db, username, password, authdb, gssapiServiceName, server, connection, callback) {
	  // Create authenticator
	  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName);

	  // Perform initialization
	  mongo_auth_process.init(username, password, function(err, context) {
	    if(err) return callback(err, false);

	    // Perform the first step
	    mongo_auth_process.transition('', function(err, payload) {
	      if(err) return callback(err, false);

	      // Call the next db step
	      MongoDBGSSAPIFirstStep(mongo_auth_process, payload, db, username, password, authdb, server, connection, callback);
	    });
	  });
	}

	//
	// Perform first step against mongodb
	var MongoDBGSSAPIFirstStep = function(mongo_auth_process, payload, db, username, password, authdb, server, connection, callback) {
	  // Build the sasl start command
	  var command = {
	      saslStart: 1
	    , mechanism: 'GSSAPI'
	    , payload: payload
	    , autoAuthorize: 1
	  };

	  // Execute first sasl step
	  server.command("$external.$cmd"
	    , command
	    , { connection: connection }, function(err, r) {
	    if(err) return callback(err, false);    
	    var doc = r.result;
	    // Execute mongodb transition
	    mongo_auth_process.transition(r.result.payload, function(err, payload) {
	      if(err) return callback(err, false);

	      // MongoDB API Second Step
	      MongoDBGSSAPISecondStep(mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback);
	    });
	  });
	}

	//
	// Perform first step against mongodb
	var MongoDBGSSAPISecondStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback) {
	  // Build Authentication command to send to MongoDB
	  var command = {
	      saslContinue: 1
	    , conversationId: doc.conversationId
	    , payload: payload
	  };

	  // Execute the command
	  server.command("$external.$cmd"
	    , command
	    , { connection: connection }, function(err, r) {
	    if(err) return callback(err, false);
	    var doc = r.result;
	    // Call next transition for kerberos
	    mongo_auth_process.transition(doc.payload, function(err, payload) {
	      if(err) return callback(err, false);

	      // Call the last and third step
	      MongoDBGSSAPIThirdStep(mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback);
	    });    
	  });
	}

	var MongoDBGSSAPIThirdStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback) {
	  // Build final command
	  var command = {
	      saslContinue: 1
	    , conversationId: doc.conversationId
	    , payload: payload
	  };

	  // Execute the command
	  server.command("$external.$cmd"
	    , command
	    , { connection: connection }, function(err, r) {
	    if(err) return callback(err, false);
	    mongo_auth_process.transition(null, function(err, payload) {
	      if(err) return callback(err, null);
	      callback(null, r);
	    });
	  });
	}

	// Add to store only if it does not exist
	var addAuthSession = function(authStore, session) {
	  var found = false;

	  for(var i = 0; i < authStore.length; i++) {
	    if(authStore[i].equal(session)) {
	      found = true;
	      break;
	    }
	  }

	  if(!found) authStore.push(session);
	}

	/**
	 * Re authenticate pool
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	GSSAPI.prototype.reauthenticate = function(server, pool, callback) {
	  var count = this.authStore.length;
	  if(count == 0) return callback(null, null);
	  // Iterate over all the auth details stored
	  for(var i = 0; i < this.authStore.length; i++) {
	    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, this.authStore[i].options, function(err, r) {
	      count = count - 1;
	      // Done re-authenticating
	      if(count == 0) {
	        callback(null, null);
	      }
	    });
	  }
	}

	/**
	 * This is a result from a authentication strategy
	 *
	 * @callback authResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {boolean} result The result of the authentication process
	 */

	module.exports = GSSAPI;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	// Get the Kerberos library
	module.exports = __webpack_require__(206);
	// Set up the auth processes
	module.exports['processes'] = {
	  MongoAuthProcess: __webpack_require__(211).MongoAuthProcess
	}

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var kerberos = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , KerberosNative = kerberos.Kerberos;

	var Kerberos = function() {
	  this._native_kerberos = new KerberosNative(); 
	}

	// callback takes two arguments, an error string if defined and a new context
	// uri should be given as service@host.  Services are not always defined
	// in a straightforward way.  Use 'HTTP' for SPNEGO / Negotiate authentication. 
	Kerberos.prototype.authGSSClientInit = function(uri, flags, callback) {
	  return this._native_kerberos.authGSSClientInit(uri, flags, callback);
	}

	// This will obtain credentials using a credentials cache. To override the default
	// location (posible /tmp/krb5cc_nnnnnn, where nnnn is your numeric uid) use 
	// the environment variable KRB5CNAME. 
	// The credentials (suitable for using in an 'Authenticate: ' header, when prefixed
	// with 'Negotiate ') will be available as context.response inside the callback
	// if no error is indicated.
	// callback takes one argument, an error string if defined
	Kerberos.prototype.authGSSClientStep = function(context, challenge, callback) {
	  if(typeof challenge == 'function') {
	    callback = challenge;
	    challenge = '';
	  }

	  return this._native_kerberos.authGSSClientStep(context, challenge, callback);
	}

	Kerberos.prototype.authGSSClientUnwrap = function(context, challenge, callback) {
	  if(typeof challenge == 'function') {
	    callback = challenge;
	    challenge = '';
	  }

	  return this._native_kerberos.authGSSClientUnwrap(context, challenge, callback);
	}

	Kerberos.prototype.authGSSClientWrap = function(context, challenge, user_name, callback) {
	  if(typeof user_name == 'function') {
	    callback = user_name;
	    user_name = '';
	  }

	  return this._native_kerberos.authGSSClientWrap(context, challenge, user_name, callback);
	}

	// free memory used by a context created using authGSSClientInit.
	// callback takes one argument, an error string if defined.
	Kerberos.prototype.authGSSClientClean = function(context, callback) {
	  return this._native_kerberos.authGSSClientClean(context, callback);
	}

	// The server will obtain credentials using a keytab.  To override the 
	// default location (probably /etc/krb5.keytab) set the KRB5_KTNAME
	// environment variable.
	// The service name should be in the form service, or service@host.name
	// e.g. for HTTP, use "HTTP" or "HTTP@my.host.name". See gss_import_name
	// for GSS_C_NT_HOSTBASED_SERVICE.
	// callback takes two arguments, an error string if defined and a new context
	Kerberos.prototype.authGSSServerInit = function(service, callback) {
	  return this._native_kerberos.authGSSServerInit(service, callback);
	};

	//callback takes one argument, an error string if defined.
	Kerberos.prototype.authGSSServerClean = function(context, callback) {
	  return this._native_kerberos.authGSSServerClean(context, callback);
	};

	// authData should be the base64 encoded authentication data obtained
	// from client, e.g., in the Authorization header (without the leading 
	// "Negotiate " string) during SPNEGO authentication.  The authenticated user 
	// is available in context.username after successful authentication.
	// callback takes one argument, an error string if defined.
	Kerberos.prototype.authGSSServerStep = function(context, authData, callback) {
	  return this._native_kerberos.authGSSServerStep(context, authData, callback);
	};

	Kerberos.prototype.acquireAlternateCredentials = function(user_name, password, domain) {
	  return this._native_kerberos.acquireAlternateCredentials(user_name, password, domain); 
	}

	Kerberos.prototype.prepareOutboundPackage = function(principal, inputdata) {
	  return this._native_kerberos.prepareOutboundPackage(principal, inputdata); 
	}

	Kerberos.prototype.decryptMessage = function(challenge) {
	  return this._native_kerberos.decryptMessage(challenge);
	}

	Kerberos.prototype.encryptMessage = function(challenge) {
	  return this._native_kerberos.encryptMessage(challenge); 
	}

	Kerberos.prototype.queryContextAttribute = function(attribute) {
	  if(typeof attribute != 'number' && attribute != 0x00) throw new Error("Attribute not supported");
	  return this._native_kerberos.queryContextAttribute(attribute);
	}

	// Some useful result codes
	Kerberos.AUTH_GSS_CONTINUE     = 0;
	Kerberos.AUTH_GSS_COMPLETE     = 1;
	     
	// Some useful gss flags 
	Kerberos.GSS_C_DELEG_FLAG      = 1;
	Kerberos.GSS_C_MUTUAL_FLAG     = 2;
	Kerberos.GSS_C_REPLAY_FLAG     = 4;
	Kerberos.GSS_C_SEQUENCE_FLAG   = 8;
	Kerberos.GSS_C_CONF_FLAG       = 16; 
	Kerberos.GSS_C_INTEG_FLAG      = 32;
	Kerberos.GSS_C_ANON_FLAG       = 64;
	Kerberos.GSS_C_PROT_READY_FLAG = 128; 
	Kerberos.GSS_C_TRANS_FLAG      = 256;

	// Export Kerberos class
	exports.Kerberos = Kerberos;

	// If we have SSPI (windows)
	if(kerberos.SecurityCredentials) {
	  // Put all SSPI classes in it's own namespace
	  exports.SSIP = {
	      SecurityCredentials: __webpack_require__(207).SecurityCredentials
	    , SecurityContext: __webpack_require__(208).SecurityContext
	    , SecurityBuffer: __webpack_require__(209).SecurityBuffer
	    , SecurityBufferDescriptor: __webpack_require__(210).SecurityBufferDescriptor
	  }
	}


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityCredentialsNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityCredentials;

	// Add simple kebros helper
	SecurityCredentialsNative.aquire_kerberos = function(username, password, domain, callback) {
	  if(typeof password == 'function') {
	    callback = password;
	    password = null;
	  } else if(typeof domain == 'function') {
	    callback = domain;
	    domain = null;
	  }

	  // We are going to use the async version
	  if(typeof callback == 'function') {
	    return SecurityCredentialsNative.aquire('Kerberos', username, password, domain, callback);
	  } else {
	    return SecurityCredentialsNative.aquireSync('Kerberos', username, password, domain);
	  }
	}

	// Export the modified class
	exports.SecurityCredentials = SecurityCredentialsNative;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityContextNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityContext;
	// Export the modified class
	exports.SecurityContext = SecurityContextNative;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityBufferNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityBuffer;

	// Add some attributes
	SecurityBufferNative.VERSION  = 0;
	SecurityBufferNative.EMPTY    = 0;
	SecurityBufferNative.DATA     = 1;
	SecurityBufferNative.TOKEN    = 2;
	SecurityBufferNative.PADDING  = 9;
	SecurityBufferNative.STREAM   = 10;

	// Export the modified class
	exports.SecurityBuffer = SecurityBufferNative;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var SecurityBufferDescriptorNative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../../build/Release/kerberos\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).SecurityBufferDescriptor;
	// Export the modified class
	exports.SecurityBufferDescriptor = SecurityBufferDescriptorNative;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var format = __webpack_require__(10).format;

	var MongoAuthProcess = function(host, port, service_name) {  
	  // Check what system we are on
	  if(process.platform == 'win32') {
	    this._processor = new Win32MongoProcessor(host, port, service_name);
	  } else {
	    this._processor = new UnixMongoProcessor(host, port, service_name);
	  }
	}

	MongoAuthProcess.prototype.init = function(username, password, callback) {
	  this._processor.init(username, password, callback);
	}

	MongoAuthProcess.prototype.transition = function(payload, callback) {
	  this._processor.transition(payload, callback);
	}

	/*******************************************************************
	 *
	 * Win32 SSIP Processor for MongoDB
	 *
	 *******************************************************************/
	var Win32MongoProcessor = function(host, port, service_name) {
	  this.host = host;
	  this.port = port  
	  // SSIP classes
	  this.ssip = __webpack_require__(206).SSIP;
	  // Set up first transition
	  this._transition = Win32MongoProcessor.first_transition(this);
	  // Set up service name
	  service_name = service_name || "mongodb";
	  // Set up target
	  this.target = format("%s/%s", service_name, host);
	  // Number of retries
	  this.retries = 10;
	}

	Win32MongoProcessor.prototype.init = function(username, password, callback) {
	  var self = this;
	  // Save the values used later
	  this.username = username;
	  this.password = password;
	  // Aquire credentials
	  this.ssip.SecurityCredentials.aquire_kerberos(username, password, function(err, security_credentials) {
	    if(err) return callback(err);
	    // Save credentials
	    self.security_credentials = security_credentials;
	    // Callback with success
	    callback(null);
	  });
	}

	Win32MongoProcessor.prototype.transition = function(payload, callback) {
	  if(this._transition == null) return callback(new Error("Transition finished"));
	  this._transition(payload, callback);
	}

	Win32MongoProcessor.first_transition = function(self) {
	  return function(payload, callback) {    
	    self.ssip.SecurityContext.initialize(
	      self.security_credentials, 
	      self.target, 
	      payload, function(err, security_context) {   
	        if(err) return callback(err);
	        
	        // If no context try again until we have no more retries
	        if(!security_context.hasContext) {
	          if(self.retries == 0) return callback(new Error("Failed to initialize security context"));
	          // Update the number of retries
	          self.retries = self.retries - 1;
	          // Set next transition
	          return self.transition(payload, callback);
	        }

	        // Set next transition
	        self._transition = Win32MongoProcessor.second_transition(self);
	        self.security_context = security_context;
	        // Return the payload
	        callback(null, security_context.payload);
	    });
	  }
	}

	Win32MongoProcessor.second_transition = function(self) {
	  return function(payload, callback) {    
	    // Perform a step
	    self.security_context.initialize(self.target, payload, function(err, security_context) {
	      if(err) return callback(err);

	      // If no context try again until we have no more retries
	      if(!security_context.hasContext) {
	        if(self.retries == 0) return callback(new Error("Failed to initialize security context"));
	        // Update the number of retries
	        self.retries = self.retries - 1;
	        // Set next transition
	        self._transition = Win32MongoProcessor.first_transition(self);
	        // Retry
	        return self.transition(payload, callback);
	      }

	      // Set next transition
	      self._transition = Win32MongoProcessor.third_transition(self);
	      // Return the payload
	      callback(null, security_context.payload);
	    });
	  }  
	}

	Win32MongoProcessor.third_transition = function(self) {
	  return function(payload, callback) {   
	    var messageLength = 0;
	    // Get the raw bytes
	    var encryptedBytes = new Buffer(payload, 'base64');
	    var encryptedMessage = new Buffer(messageLength);
	    // Copy first byte
	    encryptedBytes.copy(encryptedMessage, 0, 0, messageLength);
	    // Set up trailer
	    var securityTrailerLength = encryptedBytes.length - messageLength;
	    var securityTrailer = new Buffer(securityTrailerLength);
	    // Copy the bytes
	    encryptedBytes.copy(securityTrailer, 0, messageLength, securityTrailerLength);

	    // Types used
	    var SecurityBuffer = self.ssip.SecurityBuffer;
	    var SecurityBufferDescriptor = self.ssip.SecurityBufferDescriptor;

	    // Set up security buffers
	    var buffers = [
	        new SecurityBuffer(SecurityBuffer.DATA, encryptedBytes)
	      , new SecurityBuffer(SecurityBuffer.STREAM, securityTrailer)
	    ];

	    // Set up the descriptor
	    var descriptor = new SecurityBufferDescriptor(buffers);

	    // Decrypt the data
	    self.security_context.decryptMessage(descriptor, function(err, security_context) {
	      if(err) return callback(err);

	      var length = 4;
	      if(self.username != null) {
	        length += self.username.length;          
	      }

	      var bytesReceivedFromServer = new Buffer(length);
	      bytesReceivedFromServer[0] = 0x01;  // NO_PROTECTION
	      bytesReceivedFromServer[1] = 0x00;  // NO_PROTECTION
	      bytesReceivedFromServer[2] = 0x00;  // NO_PROTECTION
	      bytesReceivedFromServer[3] = 0x00;  // NO_PROTECTION        

	      if(self.username != null) {
	        var authorization_id_bytes = new Buffer(self.username, 'utf8');
	        authorization_id_bytes.copy(bytesReceivedFromServer, 4, 0);
	      }

	      self.security_context.queryContextAttributes(0x00, function(err, sizes) {
	        if(err) return callback(err);

	        var buffers = [
	            new SecurityBuffer(SecurityBuffer.TOKEN, new Buffer(sizes.securityTrailer))
	          , new SecurityBuffer(SecurityBuffer.DATA, bytesReceivedFromServer)
	          , new SecurityBuffer(SecurityBuffer.PADDING, new Buffer(sizes.blockSize))
	        ]

	        var descriptor = new SecurityBufferDescriptor(buffers);

	        self.security_context.encryptMessage(descriptor, 0x80000001, function(err, security_context) {
	          if(err) return callback(err);
	          callback(null, security_context.payload);
	        });
	      });
	    });
	  }  
	}

	/*******************************************************************
	 *
	 * UNIX MIT Kerberos processor
	 *
	 *******************************************************************/
	var UnixMongoProcessor = function(host, port, service_name) {
	  this.host = host;
	  this.port = port  
	  // SSIP classes
	  this.Kerberos = __webpack_require__(206).Kerberos;
	  this.kerberos = new this.Kerberos();
	  service_name = service_name || "mongodb";
	  // Set up first transition
	  this._transition = UnixMongoProcessor.first_transition(this);
	  // Set up target
	  this.target = format("%s@%s", service_name, host);
	  // Number of retries
	  this.retries = 10;
	}

	UnixMongoProcessor.prototype.init = function(username, password, callback) {
	  var self = this;
	  this.username = username;
	  this.password = password;
	  // Call client initiate
	  this.kerberos.authGSSClientInit(
	      self.target
	    , this.Kerberos.GSS_C_MUTUAL_FLAG, function(err, context) {
	      self.context = context;
	      // Return the context
	      callback(null, context);
	  });
	}

	UnixMongoProcessor.prototype.transition = function(payload, callback) {
	  if(this._transition == null) return callback(new Error("Transition finished"));
	  this._transition(payload, callback);
	}

	UnixMongoProcessor.first_transition = function(self) {
	  return function(payload, callback) {    
	    self.kerberos.authGSSClientStep(self.context, '', function(err, result) {
	      if(err) return callback(err);
	      // Set up the next step
	      self._transition = UnixMongoProcessor.second_transition(self);
	      // Return the payload
	      callback(null, self.context.response);
	    })
	  }
	}

	UnixMongoProcessor.second_transition = function(self) {
	  return function(payload, callback) {    
	    self.kerberos.authGSSClientStep(self.context, payload, function(err, result) {
	      if(err && self.retries == 0) return callback(err);
	      // Attempt to re-establish a context
	      if(err) {
	        // Adjust the number of retries
	        self.retries = self.retries - 1;
	        // Call same step again
	        return self.transition(payload, callback);
	      }
	      
	      // Set up the next step
	      self._transition = UnixMongoProcessor.third_transition(self);
	      // Return the payload
	      callback(null, self.context.response || '');
	    });
	  }
	}

	UnixMongoProcessor.third_transition = function(self) {
	  return function(payload, callback) {    
	    // GSS Client Unwrap
	    self.kerberos.authGSSClientUnwrap(self.context, payload, function(err, result) {
	      if(err) return callback(err, false);
	      
	      // Wrap the response
	      self.kerberos.authGSSClientWrap(self.context, self.context.response, self.username, function(err, result) {
	        if(err) return callback(err, false);
	        // Set up the next step
	        self._transition = UnixMongoProcessor.fourth_transition(self);
	        // Return the payload
	        callback(null, self.context.response);
	      });
	    });
	  }
	}

	UnixMongoProcessor.fourth_transition = function(self) {
	  return function(payload, callback) {    
	    // Clean up context
	    self.kerberos.authGSSClientClean(self.context, function(err, result) {
	      if(err) return callback(err, false);
	      // Set the transition to null
	      self._transition = null;
	      // Callback with valid authentication
	      callback(null, true);
	    });
	  }
	}

	// Set the process
	exports.MongoAuthProcess = MongoAuthProcess;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(5).Buffer))

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var f = __webpack_require__(10).format
	  , crypto = __webpack_require__(52)
	  , MongoError = __webpack_require__(168);

	var AuthSession = function(db, username, password, options) {
	  this.db = db;
	  this.username = username;
	  this.password = password;
	  this.options = options;
	}

	AuthSession.prototype.equal = function(session) {
	  return session.db == this.db 
	    && session.username == this.username
	    && session.password == this.password;
	}

	// Kerberos class
	var Kerberos = null;
	var MongoAuthProcess = null;

	// Try to grab the Kerberos class
	try {
	  Kerberos = __webpack_require__(205).Kerberos
	  // Authentication process for Mongo
	  MongoAuthProcess = __webpack_require__(205).processes.MongoAuthProcess
	} catch(err) {}

	/**
	 * Creates a new SSPI authentication mechanism
	 * @class
	 * @return {SSPI} A cursor instance
	 */
	var SSPI = function() {
	  this.authStore = [];
	}

	/**
	 * Authenticate
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {string} db Name of the database
	 * @param {string} username Username
	 * @param {string} password Password
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	SSPI.prototype.auth = function(server, pool, db, username, password, options, callback) {
	  var self = this;
	  // We don't have the Kerberos library
	  if(Kerberos == null) return callback(new Error("Kerberos library is not installed"));  
	  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';
	  // Get all the connections
	  var connections = pool.getAll();
	  // Total connections
	  var count = connections.length;
	  if(count == 0) return callback(null, null);

	  // Valid connections
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  var errorObject = null;

	  // For each connection we need to authenticate
	  while(connections.length > 0) {    
	    // Execute MongoCR
	    var execute = function(connection) {
	      // Start Auth process for a connection
	      SSIPAuthenticate(username, password, gssapiServiceName, server, connection, function(err, r) {
	        // Adjust count
	        count = count - 1;

	        // If we have an error
	        if(err) {
	          errorObject = err;
	        } else if(r && typeof r == 'object' && r.result['$err']) {
	          errorObject = r.result;
	        } else if(r && typeof r == 'object' && r.result['errmsg']) {
	          errorObject = r.result;
	        } else {
	          credentialsValid = true;
	          numberOfValidConnections = numberOfValidConnections + 1;
	        }

	        // We have authenticated all connections
	        if(count == 0 && numberOfValidConnections > 0) {
	          // Store the auth details
	          addAuthSession(self.authStore, new AuthSession(db, username, password, options));
	          // Return correct authentication
	          callback(null, true);
	        } else if(count == 0) {
	          if(errorObject == null) errorObject = new MongoError(f("failed to authenticate using mongocr"));
	          callback(errorObject, false);
	        }
	      });
	    }

	    // Get the connection
	    execute(connections.shift());
	  }
	}

	var SSIPAuthenticate = function(username, password, gssapiServiceName, server, connection, callback) {
	  // Build Authentication command to send to MongoDB
	  var command = {
	      saslStart: 1
	    , mechanism: 'GSSAPI'
	    , payload: ''
	    , autoAuthorize: 1
	  };

	  // Create authenticator
	  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName);

	  // Execute first sasl step
	  server.command("$external.$cmd"
	    , command
	    , { connection: connection }, function(err, r) {
	    if(err) return callback(err, false);    
	    var doc = r.result;

	    mongo_auth_process.init(username, password, function(err) {
	      if(err) return callback(err);

	      mongo_auth_process.transition(doc.payload, function(err, payload) {
	        if(err) return callback(err);

	        // Perform the next step against mongod
	        var command = {
	            saslContinue: 1
	          , conversationId: doc.conversationId
	          , payload: payload
	        };

	        // Execute the command
	        server.command("$external.$cmd"
	          , command
	          , { connection: connection }, function(err, r) {
	          if(err) return callback(err, false);
	          var doc = r.result;

	          mongo_auth_process.transition(doc.payload, function(err, payload) {
	            if(err) return callback(err);

	            // Perform the next step against mongod
	            var command = {
	                saslContinue: 1
	              , conversationId: doc.conversationId
	              , payload: payload
	            };

	            // Execute the command
	            server.command("$external.$cmd"
	              , command
	              , { connection: connection }, function(err, r) {
	              if(err) return callback(err, false);
	              var doc = r.result;
	              
	              mongo_auth_process.transition(doc.payload, function(err, payload) {
	                // Perform the next step against mongod
	                var command = {
	                    saslContinue: 1
	                  , conversationId: doc.conversationId
	                  , payload: payload
	                };

	                // Execute the command
	                server.command("$external.$cmd"
	                  , command
	                  , { connection: connection }, function(err, r) {
	                  if(err) return callback(err, false);
	                  var doc = r.result;

	                  if(doc.done) return callback(null, true);
	                  callback(new Error("Authentication failed"), false);
	                });        
	              });
	            });
	          });
	        });
	      });
	    });
	  });  
	}

	// Add to store only if it does not exist
	var addAuthSession = function(authStore, session) {
	  var found = false;

	  for(var i = 0; i < authStore.length; i++) {
	    if(authStore[i].equal(session)) {
	      found = true;
	      break;
	    }
	  }

	  if(!found) authStore.push(session);
	}

	/**
	 * Re authenticate pool
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	SSPI.prototype.reauthenticate = function(server, pool, callback) {
	  var count = this.authStore.length;
	  if(count == 0) return callback(null, null);
	  // Iterate over all the auth details stored
	  for(var i = 0; i < this.authStore.length; i++) {
	    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, this.authStore[i].options, function(err, r) {
	      count = count - 1;
	      // Done re-authenticating
	      if(count == 0) {
	        callback(null, null);
	      }
	    });
	  }
	}

	/**
	 * This is a result from a authentication strategy
	 *
	 * @callback authResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {boolean} result The result of the authentication process
	 */

	module.exports = SSPI;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	var f = __webpack_require__(10).format
	  , crypto = __webpack_require__(52)
	  , Binary = __webpack_require__(175).Binary
	  , MongoError = __webpack_require__(168);

	var AuthSession = function(db, username, password) {
	  this.db = db;
	  this.username = username;
	  this.password = password;
	} 

	AuthSession.prototype.equal = function(session) {
	  return session.db == this.db 
	    && session.username == this.username
	    && session.password == this.password;
	}

	/**
	 * Creates a new ScramSHA1 authentication mechanism
	 * @class
	 * @return {ScramSHA1} A cursor instance
	 */
	var ScramSHA1 = function() {
	  this.authStore = [];
	}

	var parsePayload = function(payload) {
	  var dict = {};
	  var parts = payload.split(',');

	  for(var i = 0; i < parts.length; i++) {
	    var valueParts = parts[i].split('=');
	    dict[valueParts[0]] = valueParts[1];
	  }

	  return dict;
	}

	var passwordDigest = function(username, password) {
	  if(typeof username != 'string') throw new MongoError("username must be a string");
	  if(typeof password != 'string') throw new MongoError("password must be a string");
	  if(password.length == 0) throw new MongoError("password cannot be empty");
	  // Use node md5 generator
	  var md5 = crypto.createHash('md5');
	  // Generate keys used for authentication
	  md5.update(username + ":mongo:" + password);
	  return md5.digest('hex');
	}

	// XOR two buffers
	var xor = function(a, b) {
	  if (!Buffer.isBuffer(a)) a = new Buffer(a)
	  if (!Buffer.isBuffer(b)) b = new Buffer(b)
	  var res = []
	  if (a.length > b.length) {
	    for (var i = 0; i < b.length; i++) {
	      res.push(a[i] ^ b[i])
	    }
	  } else {
	    for (var i = 0; i < a.length; i++) {
	      res.push(a[i] ^ b[i])
	    }
	  }
	  return new Buffer(res);
	}

	// Create a final digest
	var hi = function(data, salt, iterations) {
	  // Create digest
	  var digest = function(msg) {
	    var hmac = crypto.createHmac('sha1', data);
	    hmac.update(msg);
	    return new Buffer(hmac.digest('base64'), 'base64');
	  }

	  // Create variables
	  salt = Buffer.concat([salt, new Buffer('\x00\x00\x00\x01')])
	  var ui = digest(salt);
	  var u1 = ui;
	  
	  for(var i = 0; i < iterations - 1; i++) {
	    u1 = digest(u1);
	    ui = xor(ui, u1);
	  }

	  return ui;
	}

	/**
	 * Authenticate
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {string} db Name of the database
	 * @param {string} username Username
	 * @param {string} password Password
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	ScramSHA1.prototype.auth = function(server, pool, db, username, password, callback) {
	  var self = this;
	  // Get all the connections
	  var connections = pool.getAll();
	  // Total connections
	  var count = connections.length;
	  if(count == 0) return callback(null, null);

	  // Valid connections
	  var numberOfValidConnections = 0;
	  var credentialsValid = false;
	  var errorObject = null;

	  // For each connection we need to authenticate
	  while(connections.length > 0) {    
	    // Execute MongoCR
	    var executeScram = function(connection) {
	      // Clean up the user
	      username = username.replace('=', "=3D").replace(',', '=2C');

	      // Create a random nonce
	      var nonce = crypto.randomBytes(24).toString('base64');
	      // var nonce = 'MsQUY9iw0T9fx2MUEz6LZPwGuhVvWAhc'
	      var firstBare = f("n=%s,r=%s", username, nonce);

	      // Build command structure
	      var cmd = {
	          saslStart: 1
	        , mechanism: 'SCRAM-SHA-1'
	        , payload: new Binary(f("n,,%s", firstBare))
	        , autoAuthorize: 1
	      }

	      // Handle the error
	      var handleError = function(err, r) {
	        if(err) {
	          numberOfValidConnections = numberOfValidConnections - 1;            
	          errorObject = err; return false;
	        } else if(r.result['$err']) {
	          errorObject = r.result; return false;
	        } else if(r.result['errmsg']) {
	          errorObject = r.result; return false;
	        } else {
	          credentialsValid = true;
	          numberOfValidConnections = numberOfValidConnections + 1;            
	        }

	        return true
	      }

	      // Finish up
	      var finish = function(_count, _numberOfValidConnections) {
	        if(_count == 0 && _numberOfValidConnections > 0) {
	          // Store the auth details
	          addAuthSession(self.authStore, new AuthSession(db, username, password));
	          // Return correct authentication
	          return callback(null, true);
	        } else if(_count == 0) {
	          if(errorObject == null) errorObject = new MongoError(f("failed to authenticate using scram"));
	          return callback(errorObject, false);
	        }
	      }

	      var handleEnd = function(_err, _r) {
	        // Handle any error
	        handleError(_err, _r)
	        // Adjust the number of connections
	        count = count - 1;
	        // Execute the finish
	        finish(count, numberOfValidConnections);                
	      }

	      // Execute start sasl command
	      server.command(f("%s.$cmd", db)
	        , cmd, { connection: connection }, function(err, r) {
	        
	        // Do we have an error, handle it
	        if(handleError(err, r) == false) {
	          count = count - 1;

	          if(count == 0 && numberOfValidConnections > 0) {
	            // Store the auth details
	            addAuthSession(self.authStore, new AuthSession(db, username, password));
	            // Return correct authentication
	            return callback(null, true);
	          } else if(count == 0) {
	            if(errorObject == null) errorObject = new MongoError(f("failed to authenticate using scram"));
	            return callback(errorObject, false);
	          }

	          return;
	        }

	        // Get the dictionary
	        var dict = parsePayload(r.result.payload.value())

	        // Unpack dictionary
	        var iterations = parseInt(dict.i, 10);
	        var salt = dict.s;
	        var rnonce = dict.r;

	        // Set up start of proof
	        var withoutProof = f("c=biws,r=%s", rnonce);
	        var passwordDig = passwordDigest(username, password);
	        var saltedPassword = hi(passwordDig
	            , new Buffer(salt, 'base64')
	            , iterations);
	        
	        // Create the client key
	        var hmac = crypto.createHmac('sha1', saltedPassword);
	        hmac.update(new Buffer("Client Key"));
	        var clientKey = new Buffer(hmac.digest('base64'), 'base64');

	        // Create the stored key
	        var hash = crypto.createHash('sha1');
	        hash.update(clientKey);
	        var storedKey = new Buffer(hash.digest('base64'), 'base64');

	        // Create the authentication message
	        var authMsg = [firstBare, r.result.payload.value().toString('base64'), withoutProof].join(',');

	        // Create client signature
	        var hmac = crypto.createHmac('sha1', storedKey);
	        hmac.update(new Buffer(authMsg));          
	        var clientSig = new Buffer(hmac.digest('base64'), 'base64');

	        // Create client proof
	        var clientProof = f("p=%s", new Buffer(xor(clientKey, clientSig)).toString('base64'));

	        // Create client final
	        var clientFinal = [withoutProof, clientProof].join(',');

	        // Generate server key
	        var hmac = crypto.createHmac('sha1', saltedPassword);
	        hmac.update(new Buffer('Server Key'))
	        var serverKey = new Buffer(hmac.digest('base64'), 'base64');

	        // Generate server signature
	        var hmac = crypto.createHmac('sha1', serverKey);
	        hmac.update(new Buffer(authMsg))
	        var serverSig = new Buffer(hmac.digest('base64'), 'base64');

	        //
	        // Create continue message
	        var cmd = {
	            saslContinue: 1
	          , conversationId: r.result.conversationId
	          , payload: new Binary(new Buffer(clientFinal))
	        }

	        //
	        // Execute sasl continue
	        server.command(f("%s.$cmd", db)
	          , cmd, { connection: connection }, function(err, r) {
	            if(r && r.result.done == false) {
	              var cmd = {
	                  saslContinue: 1
	                , conversationId: r.result.conversationId
	                , payload: new Buffer(0)
	              }

	              server.command(f("%s.$cmd", db)
	                , cmd, { connection: connection }, function(err, r) {
	                  handleEnd(err, r);
	              });
	            } else {
	              handleEnd(err, r);
	            }
	        });
	      });
	    }

	    // Get the connection
	    executeScram(connections.shift());
	  }
	}

	// Add to store only if it does not exist
	var addAuthSession = function(authStore, session) {
	  var found = false;

	  for(var i = 0; i < authStore.length; i++) {
	    if(authStore[i].equal(session)) {
	      found = true;
	      break;
	    }
	  }

	  if(!found) authStore.push(session);
	}

	/**
	 * Re authenticate pool
	 * @method
	 * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on
	 * @param {Pool} pool Connection pool for this topology
	 * @param {authResultCallback} callback The callback to return the result from the authentication
	 * @return {object}
	 */
	ScramSHA1.prototype.reauthenticate = function(server, pool, callback) {
	  var count = this.authStore.length;
	  if(count == 0) return callback(null, null);
	  // Iterate over all the auth details stored
	  for(var i = 0; i < this.authStore.length; i++) {
	    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, function(err, r) {
	      count = count - 1;
	      // Done re-authenticating
	      if(count == 0) {
	        callback(null, null);
	      }
	    });
	  }
	}


	module.exports = ScramSHA1;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , b = __webpack_require__(175)
	  , bindToCurrentDomain = __webpack_require__(170).bindToCurrentDomain
	  , debugOptions = __webpack_require__(170).debugOptions
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , Server = __webpack_require__(169)
	  , ReadPreference = __webpack_require__(193)
	  , MongoError = __webpack_require__(168)
	  , Ping = __webpack_require__(215)
	  , Session = __webpack_require__(200)
	  , BasicCursor = __webpack_require__(194)
	  , BSON = __webpack_require__(175).native().BSON
	  , State = __webpack_require__(216)
	  , Logger = __webpack_require__(192);

	/**
	 * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is
	 * used to construct connecctions.
	 *
	 * @example
	 * var ReplSet = require('mongodb-core').ReplSet
	 *   , ReadPreference = require('mongodb-core').ReadPreference
	 *   , assert = require('assert');
	 *
	 * var server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});
	 * // Wait for the connection event
	 * server.on('connect', function(server) {
	 *   server.destroy();
	 * });
	 *
	 * // Start connecting
	 * server.connect();
	 */

	var DISCONNECTED = 'disconnected';
	var CONNECTING = 'connecting';
	var CONNECTED = 'connected';
	var DESTROYED = 'destroyed';

	//
	// ReplSet instance id
	var replSetId = 1;

	//
	// Clone the options
	var cloneOptions = function(options) {
	  var opts = {};
	  for(var name in options) {
	    opts[name] = options[name];
	  }
	  return opts;
	}

	// All bson types
	var bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];
	// BSON parser
	var bsonInstance = null;

	/**
	 * Creates a new Replset instance
	 * @class
	 * @param {array} seedlist A list of seeds for the replicaset
	 * @param {boolean} options.setName The Replicaset set name
	 * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset
	 * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry
	 * @param {boolean} [options.emitError=false] Server will emit errors events
	 * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
	 * @param {number} [options.size=5] Server connection pool size
	 * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
	 * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled
	 * @param {boolean} [options.noDelay=true] TCP Connection no delay
	 * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting
	 * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
	 * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed
	 * @param {boolean} [options.ssl=false] Use SSL for connection
	 * @param {Buffer} [options.ca] SSL Certificate store binary buffer
	 * @param {Buffer} [options.cert] SSL Certificate binary buffer
	 * @param {Buffer} [options.key] SSL Key file binary buffer
	 * @param {string} [options.passphrase] SSL Certificate pass phrase
	 * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates
	 * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
	 * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers
	 * @param {number} [options.acceptableLatency=250] Acceptable latency for selecting a server for reading (in milliseconds)
	 * @return {ReplSet} A cursor instance
	 * @fires ReplSet#connect
	 * @fires ReplSet#ha
	 * @fires ReplSet#joined
	 * @fires ReplSet#left
	 */
	var ReplSet = function(seedlist, options) {
	  var self = this;
	  options = options || {};

	  // Validate seedlist
	  if(!Array.isArray(seedlist)) throw new MongoError("seedlist must be an array");
	  // Validate list
	  if(seedlist.length == 0) throw new MongoError("seedlist must contain at least one entry");
	  // Validate entries
	  seedlist.forEach(function(e) {
	    if(typeof e.host != 'string' || typeof e.port != 'number')
	      throw new MongoError("seedlist entry must contain a host and port");
	  });

	  // Add event listener
	  EventEmitter.call(this);

	  // Set the bson instance
	  bsonInstance = bsonInstance == null ? new BSON(bsonTypes) : bsonInstance;

	  // Internal state hash for the object
	  this.s = {
	      options: options
	    // Logger instance
	    , logger: Logger('ReplSet', options)
	    // Uniquely identify the replicaset instance
	    , id: replSetId++
	    // Index
	    , index: 0
	    // Ha Index
	    , haId: 0
	    // Current credentials used for auth
	    , credentials: []
	    // Factory overrides
	    , Cursor: options.cursorFactory || BasicCursor
	    // BSON Parser, ensure we have a single instance
	    , bsonInstance: bsonInstance
	    // Pick the right bson parser
	    , bson: options.bson ? options.bson : bsonInstance
	    // Special replicaset options
	    , secondaryOnlyConnectionAllowed: typeof options.secondaryOnlyConnectionAllowed == 'boolean'
	    ? options.secondaryOnlyConnectionAllowed : false
	    , haInterval: options.haInterval || 10000
	    // Are we running in debug mode
	    , debug: typeof options.debug == 'boolean' ? options.debug : false
	    // The replicaset name
	    , setName: options.setName
	    // Swallow or emit errors
	    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false
	    // Grouping tag used for debugging purposes
	    , tag: options.tag
	    // Do we have a not connected handler
	    , disconnectHandler: options.disconnectHandler
	    // Currently connecting servers
	    , connectingServers: {}
	    // Contains any alternate strategies for picking
	    , readPreferenceStrategies: {}
	    // Auth providers
	    , authProviders: {}
	    // All the servers
	    , disconnectedServers: []
	    // Initial connection servers
	    , initialConnectionServers: []
	    // High availability process running
	    , highAvailabilityProcessRunning: false
	    // Full setup
	    , fullsetup: false
	    // All servers accounted for (used for testing)
	    , all: false
	    // Seedlist
	    , seedlist: seedlist
	    // Authentication in progress
	    , authInProgress: false
	    // Servers added while auth in progress
	    , authInProgressServers: []
	    // Minimum heartbeat frequency used if we detect a server close
	    , minHeartbeatFrequencyMS: 500
	  }

	  // Add bson parser to options
	  options.bson = this.s.bson;
	  // Set up the connection timeout for the options
	  options.connectionTimeout = options.connectionTimeout || 10000;

	  // Replicaset state
	  var replState = new State(this, {
	      id: this.s.id, setName: this.s.setName
	    , connectingServers: this.s.connectingServers
	    , secondaryOnlyConnectionAllowed: this.s.secondaryOnlyConnectionAllowed
	  });

	  // Add Replicaset state to our internal state
	  this.s.replState = replState;

	  // BSON property (find a server and pass it along)
	  Object.defineProperty(this, 'bson', {
	    enumerable: true, get: function() {
	      var servers = self.s.replState.getAll();
	      return servers.length > 0 ? servers[0].bson : null;
	    }
	  });

	  Object.defineProperty(this, 'id', {
	    enumerable:true, get: function() { return self.s.id; }
	  });

	  Object.defineProperty(this, 'haInterval', {
	    enumerable:true, get: function() { return self.s.haInterval; }
	  });

	  Object.defineProperty(this, 'state', {
	    enumerable:true, get: function() { return self.s.replState; }
	  });

	  //
	  // Debug options
	  if(self.s.debug) {
	    // Add access to the read Preference Strategies
	    Object.defineProperty(this, 'readPreferenceStrategies', {
	      enumerable: true, get: function() { return self.s.readPreferenceStrategies; }
	    });
	  }

	  Object.defineProperty(this, 'type', {
	    enumerable:true, get: function() { return 'replset'; }
	  });

	  // Add the ping strategy for nearest
	  this.addReadPreferenceStrategy('nearest', new Ping(options));
	}

	inherits(ReplSet, EventEmitter);

	//
	// Plugin methods
	//

	/**
	 * Add custom read preference strategy
	 * @method
	 * @param {string} name Name of the read preference strategy
	 * @param {object} strategy Strategy object instance
	 */
	ReplSet.prototype.addReadPreferenceStrategy = function(name, func) {
	  this.s.readPreferenceStrategies[name] = func;
	}

	/**
	 * Add custom authentication mechanism
	 * @method
	 * @param {string} name Name of the authentication mechanism
	 * @param {object} provider Authentication object instance
	 */
	ReplSet.prototype.addAuthProvider = function(name, provider) {
	  if(this.s.authProviders == null) this.s.authProviders = {};
	  this.s.authProviders[name] = provider;
	}

	/**
	 * Name of BSON parser currently used
	 * @method
	 * @return {string}
	 */
	ReplSet.prototype.parserType = function() {
	  if(this.s.bson.serialize.toString().indexOf('[native code]') != -1)
	    return 'c++';
	  return 'js';
	}

	/**
	 * Execute a command
	 * @method
	 * @param {string} type Type of BSON parser to use (c++ or js)
	 */
	ReplSet.prototype.setBSONParserType = function(type) {
	  var nBSON = null;

	  if(type == 'c++') {
	    nBSON = __webpack_require__(175).native().BSON;
	  } else if(type == 'js') {
	    nBSON = __webpack_require__(175).pure().BSON;
	  } else {
	    throw new MongoError(f("% parser not supported", type));
	  }

	  this.s.options.bson = new nBSON(bsonTypes);
	}

	/**
	 * Returns the last known ismaster document for this server
	 * @method
	 * @return {object}
	 */
	ReplSet.prototype.lastIsMaster = function() {
	  return this.s.replState.lastIsMaster();
	}

	/**
	 * Get connection
	 * @method
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @return {Connection}
	 */
	ReplSet.prototype.getConnection = function(options) {
	  // Ensure we have no options
	  options = options || {};
	  // Pick the right server based on readPreference
	  var server = pickServer(this, this.s, options.readPreference);
	  if(server == null) return null;
	  // Return connection
	  return server.getConnection();
	}

	/**
	 * All raw connections
	 * @method
	 * @return {Connection[]}
	 */
	ReplSet.prototype.connections = function() {
	  return this.s.replState.getAllConnections();
	}

	/**
	 * Get server
	 * @method
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @return {Server}
	 */
	ReplSet.prototype.getServer = function(options) {
	  // Ensure we have no options
	  options = options || {};
	  // Pick the right server based on readPreference
	  return pickServer(this, this.s, options.readPreference);
	}

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId
	 * @param {object} [options.batchSize=0] Batchsize for the operation
	 * @param {array} [options.documents=[]] Initial documents list for cursor
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	ReplSet.prototype.cursor = function(ns, cmd, cursorOptions) {
	  cursorOptions = cursorOptions || {};
	  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;
	  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);
	}

	//
	// Execute write operation
	var executeWriteOperation = function(self, op, ns, ops, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  var server = null;
	  // Ensure we have no options
	  options = options || {};
	  // Get a primary
	  try {
	    server = pickServer(self, self.s, ReadPreference.primary);
	    if(self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);
	  } catch(err) {
	    return callback(err);
	  }

	  // No server returned we had an error
	  if(server == null) return callback(new MongoError("no server found"));

	  // Handler
	  var handler = function(err, r) {
	    // We have a no master error, immediately refresh the view of the replicaset
	    if(notMasterError(r) || notMasterError(err)) replicasetInquirer(self, self.s, true)();
	    // Return the result
	    callback(err, r);
	  }

	  // Add operationId if existing
	  if(callback.operationId) handler.operationId = callback.operationId;
	  // Execute the command
	  server[op](ns, ops, options, handler);
	}

	/**
	 * Execute a command
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {object} cmd The command hash
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @param {Connection} [options.connection] Specify connection object to execute command against
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	ReplSet.prototype.command = function(ns, cmd, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));

	  var server = null;
	  var self = this;
	  // Ensure we have no options
	  options = options || {};

	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!this.isConnected(options) && this.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
	  }

	  // We need to execute the command on all servers
	  if(options.onAll) {
	    var servers = this.s.replState.getAll();
	    var count = servers.length;
	    var cmdErr = null;

	    for(var i = 0; i < servers.length; i++) {
	      servers[i].command(ns, cmd, options, function(err, r) {
	        count = count - 1;
	        // Finished executing command
	        if(count == 0) {
	          // Was it a logout command clear any credentials
	          if(cmd.logout) clearCredentials(self.s, ns);
	          // We have a no master error, immediately refresh the view of the replicaset
	          if(notMasterError(r) || notMasterError(err)) replicasetInquirer(self, self.s, true)();
	          // Return the error
	          callback(err, r);
	        }
	      });
	    }

	    return;
	  }

	  // Pick the right server based on readPreference
	  try {
	    server = pickServer(self, self.s, options.writeConcern ? ReadPreference.primary : options.readPreference);
	    if(self.s.debug) self.emit('pickedServer', options.writeConcern ? ReadPreference.primary : options.readPreference, server);
	  } catch(err) {
	    return callback(err);
	  }

	  // No server returned we had an error
	  if(server == null) return callback(new MongoError("no server found"));
	  // Execute the command
	  server.command(ns, cmd, options, function(err, r) {
	    // Was it a logout command clear any credentials
	    if(cmd.logout) clearCredentials(self.s, ns);
	    // We have a no master error, immediately refresh the view of the replicaset
	    if(notMasterError(r) || notMasterError(err)) {
	      replicasetInquirer(self, self.s, true)();
	    }
	    // Return the error
	    callback(err, r);
	  });
	}

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of removes
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	ReplSet.prototype.remove = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!this.isConnected() && this.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);
	  }

	  executeWriteOperation(this, 'remove', ns, ops, options, callback);
	}

	/**
	 * Insert one or more documents
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of documents to insert
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	ReplSet.prototype.insert = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!this.isConnected() && this.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);
	  }

	  executeWriteOperation(this, 'insert', ns, ops, options, callback);
	}

	/**
	 * Perform one or more update operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of updates
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	ReplSet.prototype.update = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!this.isConnected() && this.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return this.s.disconnectHandler.add('update', ns, ops, options, callback);
	  }

	  executeWriteOperation(this, 'update', ns, ops, options, callback);
	}

	/**
	 * Authenticate using a specified mechanism
	 * @method
	 * @param {string} mechanism The Auth mechanism we are invoking
	 * @param {string} db The db we are invoking the mechanism against
	 * @param {...object} param Parameters for the specific mechanism
	 * @param {authResultCallback} callback A callback function
	 */
	ReplSet.prototype.auth = function(mechanism, db) {
	  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  var callback = args.pop();

	  // If we don't have the mechanism fail
	  if(this.s.authProviders[mechanism] == null && mechanism != 'default')
	    throw new MongoError(f("auth provider %s does not exist", mechanism));

	  // Authenticate against all the servers
	  var servers = this.s.replState.getAll().slice(0);
	  var count = servers.length;
	  // Correct authentication
	  var authenticated = true;
	  var authErr = null;
	  // Set auth in progress
	  this.s.authInProgress = true;

	  // Authenticate against all servers
	  while(servers.length > 0) {
	    var server = servers.shift();

	    // Arguments without a callback
	    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));
	    // Create arguments
	    var finalArguments = argsWithoutCallback.concat([function(err, r) {
	      count = count - 1;
	      if(err) authErr = err;
	      if(!r) authenticated = false;

	      // We are done
	      if(count == 0) {
	        // We have more servers that are not authenticated, let's authenticate
	        if(self.s.authInProgressServers.length > 0) {
	          self.s.authInProgressServers = [];
	          return self.auth.apply(self, [mechanism, db].concat(args).concat([callback]));
	        }

	        // Auth is done
	        self.s.authInProgress = false;
	        // Add successful credentials
	        if(authErr == null) addCredentials(self.s, db, argsWithoutCallback);
	        // Return the auth error
	        if(authErr) return callback(authErr, false);
	        // Successfully authenticated session
	        callback(null, new Session({}, self));
	      }
	    }]);

	    // Execute the auth
	    server.auth.apply(server, finalArguments);
	  }
	}

	ReplSet.prototype.state = function() {
	  return this.s.replState.state;
	}

	/**
	 * Ensure single socket connections to arbiters and hidden servers
	 * @method
	 */
	var handleIsmaster = function(self) {
	  return function(ismaster, _server) {
	    if(ismaster.arbiterOnly) {
	      _server.s.options.size = 1;
	    } else if(ismaster.hidden) {
	      _server.s.options.size = 1;
	    }
	  }
	}

	/**
	 * Initiate server connect
	 * @method
	 */
	ReplSet.prototype.connect = function(_options) {
	  var self = this;
	  // Start replicaset inquiry process
	  setTimeout(replicasetInquirer(this, this.s, false), this.s.haInterval);
	  // Additional options
	  if(_options) for(var name in _options) this.s.options[name] = _options[name];

	  // Set the state as connecting
	  this.s.replState.state = CONNECTING;

	  // No fullsetup reached
	  this.s.fullsetup = false;

	  // For all entries in the seedlist build a server instance
	  this.s.seedlist.forEach(function(e) {
	    // Clone options
	    var opts = cloneOptions(self.s.options);
	    // Add host and port
	    opts.host = e.host;
	    opts.port = e.port;
	    opts.reconnect = false;
	    opts.readPreferenceStrategies = self.s.readPreferenceStrategies;
	    opts.emitError = true;
	    if(self.s.tag) opts.tag = self.s.tag;
	    // Share the auth store
	    opts.authProviders = self.s.authProviders;
	    // Create a new Server
	    var server = new Server(opts);
	    // Handle the ismaster
	    server.on('ismaster', handleIsmaster(self));
	    // Add to list of disconnected servers
	    self.s.disconnectedServers.push(server);
	    // Add to list of inflight Connections
	    self.s.initialConnectionServers.push(server);
	  });

	  // Attempt to connect to all the servers
	  while(this.s.disconnectedServers.length > 0) {
	    // Get the server
	    var server = this.s.disconnectedServers.shift();

	    // Set up the event handlers
	    server.once('error', errorHandlerTemp(this, this.s, 'error'));
	    server.once('close', errorHandlerTemp(this, this.s, 'close'));
	    server.once('timeout', errorHandlerTemp(this, this.s, 'timeout'));
	    server.once('connect', connectHandler(this, this.s));

	    // Attempt to connect
	    server.connect();
	  }
	}

	/**
	 * Figure out if the server is connected
	 * @method
	 * @return {boolean}
	 */
	ReplSet.prototype.isConnected = function(options) {
	  options = options || {};
	  // If we specified a read preference check if we are connected to something
	  // than can satisfy this
	  if(options.readPreference
	    && options.readPreference.equals(ReadPreference.secondary))
	    return this.s.replState.isSecondaryConnected();

	  if(options.readPreference
	    && options.readPreference.equals(ReadPreference.primary))
	    return this.s.replState.isSecondaryConnected() || this.s.replState.isPrimaryConnected();

	  if(this.s.secondaryOnlyConnectionAllowed
	    && this.s.replState.isSecondaryConnected()) return true;
	  return this.s.replState.isPrimaryConnected();
	}

	/**
	 * Figure out if the replicaset instance was destroyed by calling destroy
	 * @method
	 * @return {boolean}
	 */
	ReplSet.prototype.isDestroyed = function() {
	  return this.s.replState.state == DESTROYED;
	}

	/**
	 * Destroy the server connection
	 * @method
	 */
	ReplSet.prototype.destroy = function(emitClose) {
	  var self = this;
	  if(this.s.logger.isInfo()) this.s.logger.info(f('[%s] destroyed', this.s.id));
	  this.s.replState.state = DESTROYED;

	  // Emit close
	  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);

	  // Destroy state
	  this.s.replState.destroy();

	  // Clear out any listeners
	  var events = ['timeout', 'error', 'close', 'joined', 'left'];
	  events.forEach(function(e) {
	    self.removeAllListeners(e);
	  });
	}

	/**
	 * A replset connect event, used to verify that the connection is up and running
	 *
	 * @event ReplSet#connect
	 * @type {ReplSet}
	 */

	/**
	 * The replset high availability event
	 *
	 * @event ReplSet#ha
	 * @type {function}
	 * @param {string} type The stage in the high availability event (start|end)
	 * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only
	 * @param {number} data.id The id for this high availability request
	 * @param {object} data.state An object containing the information about the current replicaset
	 */

	/**
	 * A server member left the replicaset
	 *
	 * @event ReplSet#left
	 * @type {function}
	 * @param {string} type The type of member that left (primary|secondary|arbiter)
	 * @param {Server} server The server object that left
	 */

	/**
	 * A server member joined the replicaset
	 *
	 * @event ReplSet#joined
	 * @type {function}
	 * @param {string} type The type of member that joined (primary|secondary|arbiter)
	 * @param {Server} server The server object that joined
	 */

	//
	// Inquires about state changes
	//

	// Add the new credential for a db, removing the old
	// credential from the cache
	var addCredentials = function(s, db, argsWithoutCallback) {
	  // Remove any credentials for the db
	  clearCredentials(s, db + ".dummy");
	  // Add new credentials to list
	  s.credentials.push(argsWithoutCallback);
	}

	// Clear out credentials for a namespace
	var clearCredentials = function(s, ns) {
	  var db = ns.split('.')[0];
	  var filteredCredentials = [];

	  // Filter out all credentials for the db the user is logging out off
	  for(var i = 0; i < s.credentials.length; i++) {
	    if(s.credentials[i][1] != db) filteredCredentials.push(s.credentials[i]);
	  }

	  // Set new list of credentials
	  s.credentials = filteredCredentials;
	}

	//
	// Filter serves by tags
	var filterByTags = function(readPreference, servers) {
	  if(readPreference.tags == null) return servers;
	  var filteredServers = [];
	  var tags = readPreference.tags;

	  // Iterate over all the servers
	  for(var i = 0; i < servers.length; i++) {
	    var serverTag = servers[i].lastIsMaster().tags || {};
	    // Did we find the a matching server
	    var found = true;
	    // Check if the server is valid
	    for(var name in tags) {
	      if(serverTag[name] != tags[name]) found = false;
	    }

	    // Add to candidate list
	    if(found) filteredServers.push(servers[i]);
	  }

	  // Returned filtered servers
	  return filteredServers;
	}

	//
	// Pick a server based on readPreference
	var pickServer = function(self, s, readPreference) {
	  // If no read Preference set to primary by default
	  readPreference = readPreference || ReadPreference.primary;

	  // Do we have a custom readPreference strategy, use it
	  if(s.readPreferenceStrategies != null && s.readPreferenceStrategies[readPreference.preference] != null) {
	    if(s.readPreferenceStrategies[readPreference.preference] == null) throw new MongoError(f("cannot locate read preference handler for %s", readPreference.preference));
	    var server = s.readPreferenceStrategies[readPreference.preference].pickServer(s.replState, readPreference);
	    if(s.debug) self.emit('pickedServer', readPreference, server);
	    return server;
	  }

	  // Filter out any hidden secondaries
	  var secondaries = s.replState.secondaries.filter(function(server) {
	    if(server.lastIsMaster().hidden) return false;
	    return true;
	  });

	  // Check if we can satisfy and of the basic read Preferences
	  if(readPreference.equals(ReadPreference.secondary)
	    && secondaries.length == 0)
	      throw new MongoError("no secondary server available");

	  if(readPreference.equals(ReadPreference.secondaryPreferred)
	      && secondaries.length == 0
	      && s.replState.primary == null)
	    throw new MongoError("no secondary or primary server available");

	  if(readPreference.equals(ReadPreference.primary)
	    && s.replState.primary == null)
	      throw new MongoError("no primary server available");

	  // Secondary
	  if(readPreference.equals(ReadPreference.secondary)) {
	    s.index = (s.index + 1) % secondaries.length;
	    return secondaries[s.index];
	  }

	  // Secondary preferred
	  if(readPreference.equals(ReadPreference.secondaryPreferred)) {
	    if(secondaries.length > 0) {
	      // Apply tags if present
	      var servers = filterByTags(readPreference, secondaries);
	      // If have a matching server pick one otherwise fall through to primary
	      if(servers.length > 0) {
	        s.index = (s.index + 1) % servers.length;
	        return servers[s.index];
	      }
	    }

	    return s.replState.primary;
	  }

	  // Primary preferred
	  if(readPreference.equals(ReadPreference.primaryPreferred)) {
	    if(s.replState.primary) return s.replState.primary;

	    if(secondaries.length > 0) {
	      // Apply tags if present
	      var servers = filterByTags(readPreference, secondaries);
	      // If have a matching server pick one otherwise fall through to primary
	      if(servers.length > 0) {
	        s.index = (s.index + 1) % servers.length;
	        return servers[s.index];
	      }

	      // Throw error a we have not valid secondary or primary servers
	      throw new MongoError("no secondary or primary server available");
	    }
	  }

	  // Return the primary
	  return s.replState.primary;
	}

	var replicasetInquirer = function(self, state, norepeat) {
	  return function() {
	    if(state.replState.state == DESTROYED) return
	    // Process already running don't rerun
	    if(state.highAvailabilityProcessRunning) return;
	    // Started processes
	    state.highAvailabilityProcessRunning = true;
	    if(state.logger.isInfo()) state.logger.info(f('[%s] monitoring process running %s', state.id, JSON.stringify(state.replState)));

	    // Unique HA id to identify the current look running
	    var localHaId = state.haId++;

	    // Clean out any failed connection attempts
	    state.connectingServers = {};

	    // Controls if we are doing a single inquiry or repeating
	    norepeat = typeof norepeat == 'boolean' ? norepeat : false;

	    // If we have a primary and a disconnect handler, execute
	    // buffered operations
	    if(state.replState.isPrimaryConnected() && state.replState.isSecondaryConnected() && state.disconnectHandler) {
	      state.disconnectHandler.execute();
	    }

	    // Emit replicasetInquirer
	    self.emit('ha', 'start', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});

	    // Let's process all the disconnected servers
	    while(state.disconnectedServers.length > 0) {
	      // Get the first disconnected server
	      var server = state.disconnectedServers.shift();
	      if(state.logger.isInfo()) state.logger.info(f('[%s] monitoring attempting to connect to %s', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));
	      // Set up the event handlers
	      server.once('error', errorHandlerTemp(self, state, 'error'));
	      server.once('close', errorHandlerTemp(self, state, 'close'));
	      server.once('timeout', errorHandlerTemp(self, state, 'timeout'));
	      server.once('connect', connectHandler(self, state));
	      // Attempt to connect
	      server.connect();
	    }

	    // Cleanup state (removed disconnected servers)
	    state.replState.clean();

	    // We need to query all servers
	    var servers = state.replState.getAll();
	    var serversLeft = servers.length;

	    // If no servers and we are not destroyed keep pinging
	    if(servers.length == 0 && state.replState.state == CONNECTED) {
	      // Emit ha process end
	      self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});
	      // Ended highAvailabilityProcessRunning
	      state.highAvailabilityProcessRunning = false;
	      // Restart ha process
	      if(!norepeat) setTimeout(replicasetInquirer(self, state, false), state.haInterval);
	      return;
	    }

	    //
	    // ismaster for Master server
	    var primaryIsMaster = null;

	    // Kill the server connection if it hangs
	    var timeoutServer = function(_server) {
	      return setTimeout(function() {
	        if(_server.isConnected()) {
	          _server.connections()[0].connection.destroy();
	        }
	      }, self.s.options.connectionTimeout);
	    }

	    //
	    // Inspect a specific servers ismaster
	    var inspectServer = function(server) {
	      if(state.replState.state == DESTROYED) return;
	      // Did we get a server
	      if(server && server.isConnected()) {
	        // Get the timeout id
	        var timeoutId = timeoutServer(server);
	        // Execute ismaster
	        server.command('system.$cmd', {ismaster:true}, function(err, r) {
	          // Clear out the timeoutServer
	          clearTimeout(timeoutId);
	          // If the state was destroyed
	          if(state.replState.state == DESTROYED) return;
	          // Count down the number of servers left
	          serversLeft = serversLeft - 1;
	          // If we have an error but still outstanding server request return
	          if(err && serversLeft > 0) return;
	          // We had an error and have no more servers to inspect, schedule a new check
	          if(err && serversLeft == 0) {
	            self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});
	            // Ended highAvailabilityProcessRunnfing
	            state.highAvailabilityProcessRunning = false;
	            // Return the replicasetInquirer
	            if(!norepeat) setTimeout(replicasetInquirer(self, state, false), state.haInterval);
	            return;
	          }

	          // Let all the read Preferences do things to the servers
	          var rPreferencesCount = Object.keys(state.readPreferenceStrategies).length;

	          // Handle the primary
	          var ismaster = r.result;
	          if(state.logger.isDebug()) state.logger.debug(f('[%s] monitoring process ismaster %s', state.id, JSON.stringify(ismaster)));

	          // Update the replicaset state
	          state.replState.update(ismaster, server);

	          // Add any new servers
	          if(err == null && ismaster.ismaster && Array.isArray(ismaster.hosts)) {
	            // Hosts to process
	            var hosts = ismaster.hosts;
	            // Add arbiters to list of hosts if we have any
	            if(Array.isArray(ismaster.arbiters)) hosts = hosts.concat(ismaster.arbiters);
	            if(Array.isArray(ismaster.passives)) hosts = hosts.concat(ismaster.passives);
	            // Process all the hsots
	            processHosts(self, state, hosts);
	          }

	          // No read Preferences strategies
	          if(rPreferencesCount == 0) {
	            // Don't schedule a new inquiry
	            if(serversLeft > 0) return;
	            // Emit ha process end
	            self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});
	            // Ended highAvailabilityProcessRunning
	            state.highAvailabilityProcessRunning = false;
	            // Let's keep monitoring
	            if(!norepeat) setTimeout(replicasetInquirer(self, state, false), state.haInterval);
	            return;
	          }

	          // No servers left to query, execute read preference strategies
	          if(serversLeft == 0) {
	            // Go over all the read preferences
	            for(var name in state.readPreferenceStrategies) {
	              state.readPreferenceStrategies[name].ha(self, state.replState, function() {
	                rPreferencesCount = rPreferencesCount - 1;

	                if(rPreferencesCount == 0) {
	                  // Add any new servers in primary ismaster
	                  if(err == null
	                    && ismaster.ismaster
	                    && Array.isArray(ismaster.hosts)) {
	                      processHosts(self, state, ismaster.hosts);
	                  }

	                  // Emit ha process end
	                  self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});
	                  // Ended highAvailabilityProcessRunning
	                  state.highAvailabilityProcessRunning = false;
	                  // Let's keep monitoring
	                  if(!norepeat) setTimeout(replicasetInquirer(self, state, false), state.haInterval);
	                  return;
	                }
	              });
	            }
	          }
	        });
	      }
	    }

	    // Call ismaster on all servers
	    for(var i = 0; i < servers.length; i++) {
	      inspectServer(servers[i]);
	    }

	    // If no more initial servers and new scheduled servers to connect
	    if(state.replState.secondaries.length >= 1 && state.replState.primary != null && !state.fullsetup) {
	      state.fullsetup = true;
	      self.emit('fullsetup', self);
	    }

	    // If all servers are accounted for and we have not sent the all event
	    if(state.replState.primary != null && self.lastIsMaster()
	      && Array.isArray(self.lastIsMaster().hosts) && !state.all) {
	      var length = 1 + state.replState.secondaries.length;
	      // If we have all secondaries + primary
	      if(length == self.lastIsMaster().hosts.length + 1) {
	        state.all = true;
	        self.emit('all', self);
	      }
	    }
	  }
	}

	// Error handler for initial connect
	var errorHandlerTemp = function(self, state, event) {
	  return function(err, server) {
	    // Log the information
	    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s disconnected', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));
	    // Filter out any connection servers
	    state.initialConnectionServers = state.initialConnectionServers.filter(function(_server) {
	      return server.name != _server.name;
	    });

	    // Connection is destroyed, ignore
	    if(state.replState.state == DESTROYED) return;

	    // Remove any non used handlers
	    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {
	      server.removeAllListeners(e);
	    })

	    // Push to list of disconnected servers
	    addToListIfNotExist(state.disconnectedServers, server);

	    // End connection operation if we have no legal replicaset state
	    if(state.initialConnectionServers == 0 && state.replState.state == CONNECTING) {
	       if((state.secondaryOnlyConnectionAllowed && !state.replState.isSecondaryConnected() && !state.replState.isPrimaryConnected())
	        || (!state.secondaryOnlyConnectionAllowed && !state.replState.isPrimaryConnected())) {
	          if(state.logger.isInfo()) state.logger.info(f('[%s] no valid seed servers in list', state.id));

	          if(self.listeners('error').length > 0)
	            return self.emit('error', new MongoError('no valid seed servers in list'));
	       }
	    }

	    // If the number of disconnected servers is equal to
	    // the number of seed servers we cannot connect
	    if(state.disconnectedServers.length == state.seedlist.length && state.replState.state == CONNECTING) {
	      if(state.emitError && self.listeners('error').length > 0) {
	        if(state.logger.isInfo()) state.logger.info(f('[%s] no valid seed servers in list', state.id));

	        if(self.listeners('error').length > 0)
	          self.emit('error', new MongoError('no valid seed servers in list'));
	      }
	    }
	  }
	}

	// Connect handler
	var connectHandler = function(self, state) {
	  return function(server) {
	    if(state.logger.isInfo()) state.logger.info(f('[%s] connected to %s', state.id, server.name));
	    // Destroyed connection
	    if(state.replState.state == DESTROYED) {
	      server.destroy(false, false);
	      return;
	    }

	    // Filter out any connection servers
	    state.initialConnectionServers = state.initialConnectionServers.filter(function(_server) {
	      return server.name != _server.name;
	    });

	    // Process the new server
	    var processNewServer = function() {
	      // Discover any additional servers
	      var ismaster = server.lastIsMaster();

	      var events = ['error', 'close', 'timeout', 'connect', 'message'];
	      // Remove any non used handlers
	      events.forEach(function(e) {
	        server.removeAllListeners(e);
	      })

	      // Clean up
	      delete state.connectingServers[server.name];
	      // Update the replicaset state, destroy if not added
	      if(!state.replState.update(ismaster, server)) {
	        return server.destroy();
	      }

	      // Add the server handling code
	      if(server.isConnected()) {
	        server.on('error', errorHandler(self, state));
	        server.on('close', closeHandler(self, state));
	        server.on('timeout', timeoutHandler(self, state));
	      }

	      // Hosts to process
	      var hosts = ismaster.hosts;
	      // Add arbiters to list of hosts if we have any
	      if(Array.isArray(ismaster.arbiters)) hosts = hosts.concat(ismaster.arbiters);
	      if(Array.isArray(ismaster.passives)) hosts = hosts.concat(ismaster.passives);

	      // Add any new servers
	      processHosts(self, state, hosts);

	      // If have the server instance already destroy it
	      if(state.initialConnectionServers.length == 0 && Object.keys(state.connectingServers).length == 0
	        && !state.replState.isPrimaryConnected() && !state.secondaryOnlyConnectionAllowed && state.replState.state == CONNECTING) {
	        if(state.logger.isInfo()) state.logger.info(f('[%s] no primary found in replicaset', state.id));
	        self.emit('error', new MongoError("no primary found in replicaset"));
	        return self.destroy();
	      }

	      // If no more initial servers and new scheduled servers to connect
	      if(state.replState.secondaries.length >= 1 && state.replState.primary != null && !state.fullsetup) {
	        state.fullsetup = true;
	        self.emit('fullsetup', self);
	      }
	    }

	    // Save up new members to be authenticated against
	    if(self.s.authInProgress) {
	      self.s.authInProgressServers.push(server);
	    }

	    // No credentials just process server
	    if(state.credentials.length == 0) return processNewServer();
	    // Do we have credentials, let's apply them all
	    var count = state.credentials.length;
	    // Apply the credentials
	    for(var i = 0; i < state.credentials.length; i++) {
	      server.auth.apply(server, state.credentials[i].concat([function(err, r) {
	        count = count - 1;
	        if(count == 0) processNewServer();
	      }]));
	    }
	  }
	}

	//
	// Detect if we need to add new servers
	var processHosts = function(self, state, hosts) {
	  if(state.replState.state == DESTROYED) return;
	  if(Array.isArray(hosts)) {
	    // Check any hosts exposed by ismaster
	    for(var i = 0; i < hosts.length; i++) {
	      // If not found we need to create a new connection
	      if(!state.replState.contains(hosts[i])) {
	        if(state.connectingServers[hosts[i]] == null && !inInitialConnectingServers(self, state, hosts[i])) {
	          if(state.logger.isInfo()) state.logger.info(f('[%s] scheduled server %s for connection', state.id, hosts[i]));
	          // Make sure we know what is trying to connect
	          state.connectingServers[hosts[i]] = hosts[i];
	          // Connect the server
	          connectToServer(self, state, hosts[i].split(':')[0], parseInt(hosts[i].split(':')[1], 10));
	        }
	      }
	    }
	  }
	}

	var inInitialConnectingServers = function(self, state, address) {
	  for(var i = 0; i < state.initialConnectionServers.length; i++) {
	    if(state.initialConnectionServers[i].name == address) return true;
	  }
	  return false;
	}

	// Connect to a new server
	var connectToServer = function(self, state, host, port) {
	  var opts = cloneOptions(state.options);
	  opts.host = host;
	  opts.port = port;
	  opts.reconnect = false;
	  opts.readPreferenceStrategies = state.readPreferenceStrategies;
	  if(state.tag) opts.tag = state.tag;
	  // Share the auth store
	  opts.authProviders = state.authProviders;
	  opts.emitError = true;
	  // Create a new server instance
	  var server = new Server(opts);
	  // Handle the ismaster
	  server.on('ismaster', handleIsmaster(self));
	  // Set up the event handlers
	  server.once('error', errorHandlerTemp(self, state, 'error'));
	  server.once('close', errorHandlerTemp(self, state, 'close'));
	  server.once('timeout', errorHandlerTemp(self, state, 'timeout'));
	  server.once('connect', connectHandler(self, state));
	  // Attempt to connect
	  server.connect();
	}

	//
	// Add server to the list if it does not exist
	var addToListIfNotExist = function(list, server) {
	  var found = false;

	  // Remove any non used handlers
	  ['error', 'close', 'timeout', 'connect'].forEach(function(e) {
	    server.removeAllListeners(e);
	  })

	  // Check if the server already exists
	  for(var i = 0; i < list.length; i++) {
	    if(list[i].equals(server)) found = true;
	  }

	  if(!found) {
	    list.push(server);
	  }

	  return found;
	}

	var errorHandler = function(self, state) {
	  return function(err, server) {
	    if(state.replState.state == DESTROYED) return;
	    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s errored out with %s', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name, JSON.stringify(err)));
	    var found = addToListIfNotExist(state.disconnectedServers, server);
	    if(!found) self.emit('left', state.replState.remove(server), server);
	    if(found && state.emitError && self.listeners('error').length > 0) self.emit('error', err, server);

	    // Fire off a detection of missing server using minHeartbeatFrequencyMS
	    setTimeout(function() {
	      replicasetInquirer(self, self.s, true)();
	    }, self.s.minHeartbeatFrequencyMS);
	  }
	}

	var timeoutHandler = function(self, state) {
	  return function(err, server) {
	    if(state.replState.state == DESTROYED) return;
	    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s timed out', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));
	    var found = addToListIfNotExist(state.disconnectedServers, server);
	    if(!found) self.emit('left', state.replState.remove(server), server);

	    // Fire off a detection of missing server using minHeartbeatFrequencyMS
	    setTimeout(function() {
	      replicasetInquirer(self, self.s, true)();
	    }, self.s.minHeartbeatFrequencyMS);
	  }
	}

	var closeHandler = function(self, state) {
	  return function(err, server) {
	    if(state.replState.state == DESTROYED) return;
	    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s closed', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));
	    var found = addToListIfNotExist(state.disconnectedServers, server);
	    if(!found) self.emit('left', state.replState.remove(server), server);

	    // Fire off a detection of missing server using minHeartbeatFrequencyMS
	    setTimeout(function() {
	      replicasetInquirer(self, self.s, true)();
	    }, self.s.minHeartbeatFrequencyMS);
	  }
	}

	//
	// Validate if a non-master or recovering error
	var notMasterError = function(r) {
	  // Get result of any
	  var result = r && r.result ? r.result : r;

	  // Explore if we have a not master error
	  if(result && (result.err == 'not master'
	    || result.errmsg == 'not master' || (result['$err'] && result['$err'].indexOf('not master or secondary') != -1)
	    || (result['$err'] && result['$err'].indexOf("not master and slaveOk=false") != -1)
	    || result.errmsg == 'node is recovering')) {
	    return true;
	  }

	  return false;
	}

	module.exports = ReplSet;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Logger = __webpack_require__(192)
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format;

	/**
	 * Creates a new Ping read preference strategy instance
	 * @class
	 * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers
	 * @param {number} [options.acceptableLatency=250] Acceptable latency for selecting a server for reading (in milliseconds)
	 * @return {Ping} A cursor instance
	 */
	var Ping = function(options) {
	  // Add event listener
	  EventEmitter.call(this);

	  // Contains the ping state
	  this.s = {
	    // Contains all the ping data
	      pings: {}
	    // Set no options if none provided
	    , options: options || {}
	    // Logger
	    , logger: Logger('Ping', options)
	    // Ping interval
	    , pingInterval: options.pingInterval || 10000
	    , acceptableLatency: options.acceptableLatency || 15
	    // Debug options
	    , debug: typeof options.debug == 'boolean' ? options.debug : false
	    // Index
	    , index: 0
	    // Current ping time
	    , lastPing: null

	  }

	  // Log the options set
	  if(this.s.logger.isDebug()) this.s.logger.debug(f('ping strategy interval [%s], acceptableLatency [%s]', this.s.pingInterval, this.s.acceptableLatency));

	  // If we have enabled debug 
	  if(this.s.debug) {
	    // Add access to the read Preference Strategies
	    Object.defineProperty(this, 'data', {
	      enumerable: true, get: function() { return this.s.pings; }
	    });    
	  }
	}

	inherits(Ping, EventEmitter);

	/**
	 * @ignore
	 */
	var filterByTags = function(readPreference, servers) {
	  if(readPreference.tags == null) return servers;
	  var filteredServers = [];
	  var tags = readPreference.tags;

	  // Iterate over all the servers
	  for(var i = 0; i < servers.length; i++) {
	    var serverTag = servers[i].lastIsMaster().tags || {};
	    // Did we find the a matching server
	    var found = true;
	    // Check if the server is valid
	    for(var name in tags) {
	      if(serverTag[name] != tags[name]) found = false;
	    }

	    // Add to candidate list
	    if(found) filteredServers.push(servers[i]);
	  }

	  // Returned filtered servers
	  return filteredServers;
	}

	/**
	 * Pick a server
	 * @method
	 * @param {State} set The current replicaset state object 
	 * @param {ReadPreference} readPreference The current readPreference object
	 * @param {readPreferenceResultCallback} callback The callback to return the result from the function
	 * @return {object}
	 */
	Ping.prototype.pickServer = function(set, readPreference) {
	  var self = this;
	  // Only get primary and secondaries as seeds
	  var seeds = {};
	  var servers = [];
	  if(set.primary) {
	    servers.push(set.primary);
	  }

	  for(var i = 0; i < set.secondaries.length; i++) {
	    servers.push(set.secondaries[i]);
	  }

	  // Filter by tags
	  servers = filterByTags(readPreference, servers);

	  // Transform the list
	  var serverList = [];
	  // for(var name in seeds) {
	  for(var i = 0; i < servers.length; i++) {
	    serverList.push({name: servers[i].name, time: self.s.pings[servers[i].name] || 0});
	  }

	  // Sort by time
	  serverList.sort(function(a, b) {
	    return a.time > b.time;
	  });

	  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)
	  var lowest = serverList.length > 0 ? serverList[0].time : 0;

	  // Filter by latency
	  serverList = serverList.filter(function(s) {
	    return s.time <= lowest + self.s.acceptableLatency;
	  });

	  // No servers, default to primary
	  if(serverList.length == 0 && set.primary) {
	    if(self.s.logger.isInfo()) self.s.logger.info(f('picked primary server [%s]', set.primary.name));
	    return set.primary;
	  } else if(serverList.length == 0) {
	    return null
	  }

	  // We picked first server
	  if(self.s.logger.isInfo()) self.s.logger.info(f('picked server [%s] with ping latency [%s]', serverList[0].name, serverList[0].time));

	  // Add to the index
	  self.s.index = self.s.index + 1;
	  // Select the index
	  self.s.index = self.s.index % serverList.length;
	  // Return the first server of the sorted and filtered list
	  return set.get(serverList[self.s.index].name);
	}

	/**
	 * Start of an operation
	 * @method
	 * @param {Server} server The server the operation is running against
	 * @param {object} query The operation running
	 * @param {Date} date The start time of the operation
	 * @return {object}
	 */
	Ping.prototype.startOperation = function(server, query, date) {
	}

	/**
	 * End of an operation
	 * @method
	 * @param {Server} server The server the operation is running against
	 * @param {error} err An error from the operation
	 * @param {object} result The result from the operation
	 * @param {Date} date The start time of the operation
	 * @return {object}
	 */
	Ping.prototype.endOperation = function(server, err, result, date) {
	}

	/**
	 * High availability process running
	 * @method
	 * @param {State} set The current replicaset state object 
	 * @param {resultCallback} callback The callback to return the result from the function
	 * @return {object}
	 */
	Ping.prototype.ha = function(topology, state, callback) {
	  var self = this;
	  var servers = state.getAll();
	  var count = servers.length;

	  // No servers return
	  if(servers.length == 0) return callback(null, null);

	  // Return if we have not yet reached the ping interval
	  if(self.s.lastPing != null) {
	    var diff = new Date().getTime() - self.s.lastPing.getTime();
	    if(diff < self.s.pingInterval) return callback(null, null);
	  }

	  // Execute operation
	  var operation = function(_server) {
	    var start = new Date();      
	    // Execute ping against server
	    _server.command('system.$cmd', {ismaster:1}, function(err, r) {
	      count = count - 1;
	      var time = new Date().getTime() - start.getTime();
	      self.s.pings[_server.name] = time;
	      // Log info for debug
	      if(self.s.logger.isDebug()) self.s.logger.debug(f('ha latency for server [%s] is [%s] ms', _server.name, time));
	      // We are done with all the servers
	      if(count == 0) {
	        // Emit ping event
	        topology.emit('ping', err, r ? r.result : null);
	        // Update the last ping time
	        self.s.lastPing = new Date();
	        // Return
	        callback(null, null);
	      }
	    });
	  }

	  // Let's ping all servers
	  while(servers.length > 0) {
	    operation(servers.shift());
	  }
	}

	var removeServer = function(self, server) {
	  delete self.s.pings[server.name];
	}

	/**
	 * Server connection closed
	 * @method
	 * @param {Server} server The server that closed
	 */
	Ping.prototype.close = function(server) {
	  removeServer(this, server);
	}

	/**
	 * Server connection errored out
	 * @method
	 * @param {Server} server The server that errored out
	 */
	Ping.prototype.error = function(server) {
	  removeServer(this, server);
	}

	/**
	 * Server connection timeout
	 * @method
	 * @param {Server} server The server that timed out
	 */
	Ping.prototype.timeout = function(server) {
	  removeServer(this, server);
	}

	/**
	 * Server connection happened
	 * @method
	 * @param {Server} server The server that connected
	 * @param {resultCallback} callback The callback to return the result from the function
	 */
	Ping.prototype.connect = function(server, callback) {
	  var self = this;
	  // Get the command start date
	  var start = new Date();
	  // Execute ping against server
	  server.command('system.$cmd', {ismaster:1}, function(err, r) {
	    var time = new Date().getTime() - start.getTime();
	    self.s.pings[server.name] = time;
	    // Log info for debug
	    if(self.s.logger.isDebug()) self.s.logger.debug(f('connect latency for server [%s] is [%s] ms', server.name, time));
	    // Set last ping
	    self.s.lastPing = new Date();
	    // Done, return
	    callback(null, null);
	  });    
	}

	/**
	 * This is a result from a readPreference strategy
	 *
	 * @callback readPreferenceResultCallback
	 * @param {error} error An error object. Set to null if no error present
	 * @param {Server} server The server picked by the strategy
	 */

	module.exports = Ping;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	var Logger = __webpack_require__(192)
	  , f = __webpack_require__(10).format
	  , ObjectId = __webpack_require__(175).ObjectId
	  , MongoError = __webpack_require__(168);

	var DISCONNECTED = 'disconnected';
	var CONNECTING = 'connecting';
	var CONNECTED = 'connected';
	var DESTROYED = 'destroyed';

	/**
	 * Creates a new Replicaset State object
	 * @class
	 * @property {object} primary Primary property
	 * @property {array} secondaries List of secondaries
	 * @property {array} arbiters List of arbiters
	 * @return {State} A cursor instance
	 */
	var State = function(replSet, options) {
	  this.replSet = replSet;
	  this.options = options;
	  this.secondaries = [];
	  this.arbiters = [];
	  this.passives = [];
	  this.primary = null;
	  // Initial state is disconnected
	  this.state = DISCONNECTED;
	  // Current electionId
	  this.electionId = null;
	  // Get a logger instance
	  this.logger = Logger('ReplSet', options);
	  // Unpacked options
	  this.id = options.id;
	  this.setName = options.setName;
	  this.connectingServers = options.connectingServers;
	  this.secondaryOnlyConnectionAllowed = options.secondaryOnlyConnectionAllowed;
	}

	/**
	 * Is there a secondary connected
	 * @method
	 * @return {boolean}
	 */
	State.prototype.isSecondaryConnected = function() {
	  for(var i = 0; i < this.secondaries.length; i++) {
	    if(this.secondaries[i].isConnected()) return true;
	  }

	  return false;
	}

	/**
	 * Is there a primary connection
	 * @method
	 * @return {boolean}
	 */
	State.prototype.isPrimaryConnected = function() {
	  return this.primary != null && this.primary.isConnected();
	}

	/**
	 * Is the given address the primary
	 * @method
	 * @param {string} address Server address
	 * @return {boolean}
	 */
	State.prototype.isPrimary = function(address) {
	  if(this.primary == null) return false;
	  return this.primary && this.primary.equals(address);
	}

	/**
	 * Is the given address a secondary
	 * @method
	 * @param {string} address Server address
	 * @return {boolean}
	 */
	State.prototype.isSecondary = function(address) {
	  // Check if the server is a secondary at the moment
	  for(var i = 0; i < this.secondaries.length; i++) {
	    if(this.secondaries[i].equals(address)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Is the given address a secondary
	 * @method
	 * @param {string} address Server address
	 * @return {boolean}
	 */
	State.prototype.isPassive = function(address) {
	  // Check if the server is a secondary at the moment
	  for(var i = 0; i < this.passives.length; i++) {
	    if(this.passives[i].equals(address)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Does the replicaset contain this server
	 * @method
	 * @param {string} address Server address
	 * @return {boolean}
	 */
	State.prototype.contains = function(address) {
	  if(this.primary && this.primary.equals(address)) return true;
	  for(var i = 0; i < this.secondaries.length; i++) {
	    if(this.secondaries[i].equals(address)) return true;
	  }

	  for(var i = 0; i < this.arbiters.length; i++) {
	    if(this.arbiters[i].equals(address)) return true;
	  }

	  for(var i = 0; i < this.passives.length; i++) {
	    if(this.passives[i].equals(address)) return true;
	  }

	  return false;
	}

	/**
	 * Clean out all dead connections
	 * @method
	 */
	State.prototype.clean = function() {
	  if(this.primary != null && !this.primary.isConnected()) {
	    this.primary = null;
	  }

	  // Filter out disconnected servers
	  this.secondaries = this.secondaries.filter(function(s) {
	    return s.isConnected();
	  });

	  // Filter out disconnected servers
	  this.arbiters = this.arbiters.filter(function(s) {
	    return s.isConnected();
	  });
	}

	/**
	 * Destroy state
	 * @method
	 */
	State.prototype.destroy = function() {
	  this.state = DESTROYED;
	  if(this.primary) this.primary.destroy();
	  this.secondaries.forEach(function(s) {
	    s.destroy();
	  });
	}

	/**
	 * Remove server from state
	 * @method
	 * @param {Server} Server to remove
	 * @return {string} Returns type of server removed (primary|secondary)
	 */
	State.prototype.remove = function(server) {
	  if(this.primary && this.primary.equals(server)) {
	    this.primary = null;
	  }

	  var length = this.arbiters.length;
	  // Filter out the server from the arbiters
	  this.arbiters = this.arbiters.filter(function(s) {
	    return !s.equals(server);
	  });
	  if(this.arbiters.length < length) return 'arbiter';

	  var length = this.passives.length;
	  // Filter out the server from the passives
	  this.passives = this.passives.filter(function(s) {
	    return !s.equals(server);
	  });

	  // We have removed a passive
	  if(this.passives.length < length)  {
	    // Ensure we removed it from the list of secondaries as well if it exists
	    this.secondaries = this.secondaries.filter(function(s) {
	      return !s.equals(server);
	    });
	  }

	  // Filter out the server from the secondaries
	  this.secondaries = this.secondaries.filter(function(s) {
	    return !s.equals(server);
	  });

	  // Get the isMaster
	  var isMaster = server.lastIsMaster();
	  // Return primary if the server was primary
	  if(isMaster.ismaster) return 'primary';
	  if(isMaster.secondary) return 'secondary';
	  if(isMaster.passive) return 'passive';
	  return 'arbiter';
	}

	/**
	 * Get the server by name
	 * @method
	 * @param {string} address Server address
	 * @return {Server}
	 */
	State.prototype.get = function(server) {
	  var found = false;
	  // All servers to search
	  var servers = this.primary ? [this.primary] : [];
	  servers = servers.concat(this.secondaries);
	  // Locate the server
	  for(var i = 0; i < servers.length; i++) {
	    if(servers[i].equals(server)) {
	      return servers[i];
	    }
	  }
	}

	/**
	 * Get all the servers in the set
	 * @method
	 * @return {array}
	 */
	State.prototype.getAll = function() {
	  var servers = [];
	  if(this.primary) servers.push(this.primary);
	  return servers.concat(this.secondaries);
	}

	/**
	 * All raw connections
	 * @method
	 * @return {array}
	 */
	State.prototype.getAllConnections = function() {
	  var connections = [];
	  if(this.primary) connections = connections.concat(this.primary.connections());
	  this.secondaries.forEach(function(s) {
	    connections = connections.concat(s.connections());
	  })

	  return connections;
	}

	/**
	 * Return JSON object
	 * @method
	 * @return {object}
	 */
	State.prototype.toJSON = function() {
	  return {
	      primary: this.primary ? this.primary.lastIsMaster().me : null
	    , secondaries: this.secondaries.map(function(s) {
	      return s.lastIsMaster().me
	    })
	  }
	}

	/**
	 * Returns the last known ismaster document for this server
	 * @method
	 * @return {object}
	 */
	State.prototype.lastIsMaster = function() {
	  if(this.primary) return this.primary.lastIsMaster();
	  if(this.secondaries.length > 0) return this.secondaries[0].lastIsMaster();
	  return {};
	}

	/**
	 * Promote server to primary
	 * @method
	 * @param {Server} server Server we wish to promote
	 */
	State.prototype.promotePrimary = function(server) {
	  var currentServer = this.get(server);
	  // Server does not exist in the state, add it as new primary
	  if(currentServer == null) {
	    this.primary = server;
	    return;
	  }

	  // We found a server, make it primary and remove it from the secondaries
	  // Remove the server first
	  this.remove(currentServer);
	  // Set as primary
	  this.primary = currentServer;
	}

	var add = function(list, server) {
	  // Check if the server is a secondary at the moment
	  for(var i = 0; i < list.length; i++) {
	    if(list[i].equals(server)) return false;
	  }

	  list.push(server);
	  return true;
	}

	/**
	 * Add server to list of secondaries
	 * @method
	 * @param {Server} server Server we wish to add
	 */
	State.prototype.addSecondary = function(server) {
	  return add(this.secondaries, server);
	}

	/**
	 * Add server to list of arbiters
	 * @method
	 * @param {Server} server Server we wish to add
	 */
	State.prototype.addArbiter = function(server) {
	  return add(this.arbiters, server);
	}

	/**
	 * Add server to list of passives
	 * @method
	 * @param {Server} server Server we wish to add
	 */
	State.prototype.addPassive = function(server) {
	  return add(this.passives, server);
	}

	var compareObjectIds = function(id1, id2) {
	  var a = new Buffer(id1.toHexString(), 'hex');
	  var b = new Buffer(id2.toHexString(), 'hex');

	  if(a === b) {
	    return 0;
	  }

	  if(typeof Buffer.compare === 'function') {
	    return Buffer.compare(a, b);
	  }

	  var x = a.length;
	  var y = b.length;
	  var len = Math.min(x, y);

	  for (var i = 0; i < len; i++) {
	    if (a[i] !== b[i]) {
	      break;
	    }
	  }

	  if (i !== len) {
	    x = a[i];
	    y = b[i];
	  }

	  return x < y ? -1 : y < x ? 1 : 0;
	}

	/**
	 * Update the state given a specific ismaster result
	 * @method
	 * @param {object} ismaster IsMaster result
	 * @param {Server} server IsMaster Server source
	 */
	State.prototype.update = function(ismaster, server) {
	  var self = this;
	  // Not in a known connection valid state
	  if(!ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly) {
	    // Remove the state
	    var result = self.remove(server);
	    if(self.state == CONNECTED)  {
	      if(self.logger.isInfo()) self.logger.info(f('[%s] removing %s from set', self.id, ismaster.me));
	      self.replSet.emit('left', self.remove(server), server);
	    }

	    return false;
	  }

	  // Set the setName if it's not set from the first server
	  if(self.setName == null && ismaster.setName) {
	    if(self.logger.isInfo()) self.logger.info(f('[%s] setting setName to %s', self.id, ismaster.setName));
	    self.setName = ismaster.setName;
	  }

	  // Check if the replicaset name matches the provided one
	  if(ismaster.setName && self.setName != ismaster.setName) {
	    if(self.logger.isError()) self.logger.error(f('[%s] server in replset %s is not part of the specified setName %s', self.id, ismaster.setName, self.setName));
	    self.remove(server);
	    self.replSet.emit('error', new MongoError("provided setName for Replicaset Connection does not match setName found in server seedlist"));
	    return false;
	  }

	  // Log information
	  if(self.logger.isInfo()) self.logger.info(f('[%s] updating replicaset state %s', self.id, JSON.stringify(this)));

	  // It's a master set it
	  if(ismaster.ismaster && self.setName == ismaster.setName && !self.isPrimary(ismaster.me)) {
	    // Check if the electionId is not null
	    if(ismaster.electionId instanceof ObjectId && self.electionId instanceof ObjectId) {
	      if(compareObjectIds(self.electionId, ismaster.electionId) == -1) {
	        self.electionId = ismaster.electionId;
	      } else if(compareObjectIds(self.electionId, ismaster.electionId) == 0) {
	        self.electionId = ismaster.electionId;
	      } else {
	        return false;
	      }
	    }

	    // Initial electionId
	    if(ismaster.electionId instanceof ObjectId && self.electionId == null) {
	      self.electionId = ismaster.electionId;
	    }

	    // Promote to primary
	    self.promotePrimary(server);
	    // Log change of primary
	    if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to primary', self.id, ismaster.me));
	    // Emit primary
	    self.replSet.emit('joined', 'primary', this.primary);

	    // We are connected
	    if(self.state == CONNECTING) {
	      self.state = CONNECTED;
	      self.replSet.emit('connect', self.replSet);
	    } else {
	      self.state = CONNECTED;
	      self.replSet.emit('reconnect', server);
	    }
	  } else if(!ismaster.ismaster && self.setName == ismaster.setName
	    && ismaster.arbiterOnly) {
	      if(self.addArbiter(server)) {
	        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to arbiter', self.id, ismaster.me));
	        self.replSet.emit('joined', 'arbiter', server);
	        return true;
	      };

	      return false;
	  } else if(!ismaster.ismaster && self.setName == ismaster.setName
	    && ismaster.secondary && ismaster.passive) {
	      if(self.addPassive(server) && self.addSecondary(server)) {
	        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to passive', self.id, ismaster.me));
	        self.replSet.emit('joined', 'passive', server);

	        // If we have secondaryOnlyConnectionAllowed and just a passive it's
	        // still a valid connection
	        if(self.secondaryOnlyConnectionAllowed && self.state == CONNECTING) {
	          self.state = CONNECTED;
	          self.replSet.emit('connect', self.replSet);
	        }

	        return true;
	      };

	      return false;
	  } else if(!ismaster.ismaster && self.setName == ismaster.setName
	    && ismaster.secondary) {
	      if(self.addSecondary(server)) {
	        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to secondary', self.id, ismaster.me));
	        self.replSet.emit('joined', 'secondary', server);

	        if(self.secondaryOnlyConnectionAllowed && self.state == CONNECTING) {
	          self.state = CONNECTED;
	          self.replSet.emit('connect', self.replSet);
	        }

	        return true;
	      };

	      return false;
	  }

	  // Return update applied
	  return true;
	}

	module.exports = State;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , b = __webpack_require__(175)
	  , bindToCurrentDomain = __webpack_require__(170).bindToCurrentDomain
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , BasicCursor = __webpack_require__(194)
	  , BSON = __webpack_require__(175).native().BSON
	  , BasicCursor = __webpack_require__(194)
	  , Server = __webpack_require__(169)
	  , Logger = __webpack_require__(192)
	  , ReadPreference = __webpack_require__(193)
	  , Session = __webpack_require__(200)
	  , MongoError = __webpack_require__(168);

	/**
	 * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is
	 * used to construct connections.
	 * 
	 * @example
	 * var Mongos = require('mongodb-core').Mongos
	 *   , ReadPreference = require('mongodb-core').ReadPreference
	 *   , assert = require('assert');
	 * 
	 * var server = new Mongos([{host: 'localhost', port: 30000}]);
	 * // Wait for the connection event
	 * server.on('connect', function(server) {
	 *   server.destroy();
	 * });
	 * 
	 * // Start connecting
	 * server.connect();
	 */

	var DISCONNECTED = 'disconnected';
	var CONNECTING = 'connecting';
	var CONNECTED = 'connected';
	var DESTROYED = 'destroyed';

	// All bson types
	var bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];
	// BSON parser
	var bsonInstance = null;

	// Instance id
	var mongosId = 0;

	//
	// Clone the options
	var cloneOptions = function(options) {
	  var opts = {};
	  for(var name in options) {
	    opts[name] = options[name];
	  }
	  return opts;
	}

	var State = function(readPreferenceStrategies) {
	  // Internal state
	  this.s = {
	      connectedServers: []
	    , disconnectedServers: []
	    , readPreferenceStrategies: readPreferenceStrategies
	  }
	}

	//
	// A Mongos connected
	State.prototype.connected = function(server) {
	  // Locate in disconnected servers and remove
	  this.s.disconnectedServers = this.s.disconnectedServers.filter(function(s) {
	    return !s.equals(server);
	  });

	  var found = false;
	  // Check if the server exists
	  this.s.connectedServers.forEach(function(s) {
	    if(s.equals(server)) found = true;
	  });

	  // Add to disconnected list if it does not already exist
	  if(!found) this.s.connectedServers.push(server);
	}

	//
	// A Mongos disconnected
	State.prototype.disconnected = function(server) {
	  // Locate in disconnected servers and remove
	  this.s.connectedServers = this.s.connectedServers.filter(function(s) {
	    return !s.equals(server);
	  });

	  var found = false;
	  // Check if the server exists
	  this.s.disconnectedServers.forEach(function(s) {
	    if(s.equals(server)) found = true;
	  });

	  // Add to disconnected list if it does not already exist
	  if(!found) this.s.disconnectedServers.push(server);
	}

	//
	// Return the list of disconnected servers
	State.prototype.disconnectedServers = function() {
	  return this.s.disconnectedServers.slice(0);
	}

	//
	// Get connectedServers
	State.prototype.connectedServers = function() {
	  return this.s.connectedServers.slice(0)
	}

	//
	// Get all servers
	State.prototype.getAll = function() {
	  return this.s.connectedServers.slice(0).concat(this.s.disconnectedServers);
	}

	//
	// Get all connections
	State.prototype.getAllConnections = function() {
	  var connections = [];
	  this.s.connectedServers.forEach(function(e) {
	    connections = connections.concat(e.connections());
	  });
	  return connections;
	}

	//
	// Destroy the state
	State.prototype.destroy = function() {
	  // Destroy any connected servers
	  while(this.s.connectedServers.length > 0) {
	    var server = this.s.connectedServers.shift();

	    // Remove any non used handlers
	    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {
	      server.removeAllListeners(e);
	    })

	    // Server destroy
	    server.destroy();
	    // Add to list of disconnected servers
	    this.s.disconnectedServers.push(server);
	  }        
	}

	//
	// Are we connected
	State.prototype.isConnected = function() {
	  return this.s.connectedServers.length > 0;
	}

	//
	// Pick a server
	State.prototype.pickServer = function(readPreference) {
	  readPreference = readPreference || ReadPreference.primary;

	  // Do we have a custom readPreference strategy, use it
	  if(this.s.readPreferenceStrategies != null && this.s.readPreferenceStrategies[readPreference] != null) {
	    return this.s.readPreferenceStrategies[readPreference].pickServer(connectedServers, readPreference);
	  }

	  // No valid connections
	  if(this.s.connectedServers.length == 0) throw new MongoError("no mongos proxy available");
	  // Pick first one
	  return this.s.connectedServers[0];
	}

	/**
	 * Creates a new Mongos instance
	 * @class
	 * @param {array} seedlist A list of seeds for the replicaset
	 * @param {number} [options.reconnectTries=30] Reconnect retries for HA if no servers available
	 * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry
	 * @param {boolean} [options.emitError=false] Server will emit errors events
	 * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
	 * @param {number} [options.size=5] Server connection pool size
	 * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
	 * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled
	 * @param {boolean} [options.noDelay=true] TCP Connection no delay
	 * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting
	 * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
	 * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed
	 * @param {boolean} [options.ssl=false] Use SSL for connection
	 * @param {Buffer} [options.ca] SSL Certificate store binary buffer
	 * @param {Buffer} [options.cert] SSL Certificate binary buffer
	 * @param {Buffer} [options.key] SSL Key file binary buffer
	 * @param {string} [options.passphrase] SSL Certificate pass phrase
	 * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates
	 * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
	 * @return {Mongos} A cursor instance
	 * @fires Mongos#connect
	 * @fires Mongos#joined
	 * @fires Mongos#left
	 */
	var Mongos = function(seedlist, options) {  
	  var self = this;
	  options = options || {};
	  
	  // Add event listener
	  EventEmitter.call(this);

	  // Validate seedlist
	  if(!Array.isArray(seedlist)) throw new MongoError("seedlist must be an array");
	  // Validate list
	  if(seedlist.length == 0) throw new MongoError("seedlist must contain at least one entry");
	  // Validate entries
	  seedlist.forEach(function(e) {
	    if(typeof e.host != 'string' || typeof e.port != 'number') 
	      throw new MongoError("seedlist entry must contain a host and port");
	  });

	  // BSON Parser, ensure we have a single instance
	  bsonInstance = bsonInstance == null ? new BSON(bsonTypes) : bsonInstance;
	  // Pick the right bson parser
	  var bson = options.bson ? options.bson : bsonInstance;
	  // Add bson parser to options
	  options.bson = bson;

	  // The Mongos state
	  this.s = {
	    // Seed list for sharding passed in
	      seedlist: seedlist
	    // Passed in options
	    , options: options
	    // Logger
	    , logger: Logger('Mongos', options)
	    // Reconnect tries
	    , reconnectTries: options.reconnectTries || 30
	    // Ha interval
	    , haInterval: options.haInterval || 5000
	    // Have omitted fullsetup
	    , fullsetup: false
	    // Cursor factory
	    , Cursor: options.cursorFactory || BasicCursor
	    // Current credentials used for auth
	    , credentials: []
	    // BSON Parser
	    , bsonInstance: bsonInstance
	    , bson: bson
	    // Default state
	    , state: DISCONNECTED
	    // Swallow or emit errors
	    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false
	    // Contains any alternate strategies for picking
	    , readPreferenceStrategies: {}
	    // Auth providers
	    , authProviders: {}
	    // Unique instance id
	    , id: mongosId++
	    // Authentication in progress
	    , authInProgress: false
	    // Servers added while auth in progress
	    , authInProgressServers: []
	    // Current retries left
	    , retriesLeft: options.reconnectTries || 30
	    // Do we have a not connected handler
	    , disconnectHandler: options.disconnectHandler
	  }

	  // Set up the connection timeout for the options
	  options.connectionTimeout = options.connectionTimeout || 1000;

	  // Create a new state for the mongos
	  this.s.mongosState = new State(this.s.readPreferenceStrategies);

	  // BSON property (find a server and pass it along)
	  Object.defineProperty(this, 'bson', {
	    enumerable: true, get: function() { 
	      var servers = self.s.mongosState.getAll();
	      return servers.length > 0 ? servers[0].bson : null; 
	    }
	  });

	  Object.defineProperty(this, 'id', {
	    enumerable:true, get: function() { return self.s.id; }
	  });

	  Object.defineProperty(this, 'type', {
	    enumerable:true, get: function() { return 'mongos'; }
	  });

	  Object.defineProperty(this, 'haInterval', {
	    enumerable:true, get: function() { return self.s.haInterval; }
	  });

	  Object.defineProperty(this, 'state', {
	    enumerable:true, get: function() { return self.s.mongosState; }
	  });
	}

	inherits(Mongos, EventEmitter);

	/**
	 * Name of BSON parser currently used
	 * @method
	 * @return {string}
	 */
	Mongos.prototype.parserType = function() {
	  if(this.s.bson.serialize.toString().indexOf('[native code]') != -1)
	    return 'c++';
	  return 'js';
	}

	/**
	 * Execute a command
	 * @method
	 * @param {string} type Type of BSON parser to use (c++ or js)
	 */
	Mongos.prototype.setBSONParserType = function(type) {
	  var nBSON = null;

	  if(type == 'c++') {
	    nBSON = __webpack_require__(175).native().BSON;
	  } else if(type == 'js') {
	    nBSON = __webpack_require__(175).pure().BSON;
	  } else {
	    throw new MongoError(f("% parser not supported", type));
	  }

	  this.s.options.bson = new nBSON(bsonTypes);
	}  

	/**
	 * Returns the last known ismaster document for this server
	 * @method
	 * @return {object}
	 */
	Mongos.prototype.lastIsMaster = function() {
	  var connectedServers = this.s.mongosState.connectedServers();
	  if(connectedServers.length > 0) return connectedServers[0].lastIsMaster();
	  return null; 
	}

	/**
	 * Initiate server connect
	 * @method
	 */
	Mongos.prototype.connect = function(_options) {
	  var self = this;
	  // Start replicaset inquiry process
	  setTimeout(mongosInquirer(self, self.s), self.s.haInterval);
	  // Additional options
	  if(_options) for(var name in _options) self.s.options[name] = _options[name];
	  // For all entries in the seedlist build a server instance
	  self.s.seedlist.forEach(function(e) {
	    // Clone options
	    var opts = cloneOptions(self.s.options);
	    // Add host and port
	    opts.host = e.host;
	    opts.port = e.port;
	    opts.reconnect = false;
	    opts.readPreferenceStrategies = self.s.readPreferenceStrategies;
	    // Share the auth store
	    opts.authProviders = self.s.authProviders;
	    // Don't emit errors
	    opts.emitError = true;
	    // Create a new Server
	    self.s.mongosState.disconnected(new Server(opts));
	  });

	  // Get the disconnected servers
	  var servers = self.s.mongosState.disconnectedServers();

	  // Attempt to connect to all the servers
	  while(servers.length > 0) {
	    // Get the server
	    var server = servers.shift();      

	    // Remove any non used handlers
	    ['error', 'close', 'timeout', 'connect', 'message', 'parseError'].forEach(function(e) {
	      server.removeAllListeners(e);
	    });

	    // Set up the event handlers
	    server.once('error', errorHandlerTemp(self, self.s, server));
	    server.once('close', errorHandlerTemp(self, self.s, server));
	    server.once('timeout', errorHandlerTemp(self, self.s, server));
	    server.once('parseError', errorHandlerTemp(self, self.s, server));
	    server.once('connect', connectHandler(self, self.s, 'connect'));

	    if(self.s.logger.isInfo()) self.s.logger.info(f('connecting to server %s', server.name));
	    // Attempt to connect
	    server.connect();
	  }
	}

	/**
	 * Destroy the server connection
	 * @method
	 */
	Mongos.prototype.destroy = function(emitClose) {
	  this.s.state = DESTROYED;
	  // Emit close
	  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);
	  // Destroy the state
	  this.s.mongosState.destroy();
	}

	/**
	 * Figure out if the server is connected
	 * @method
	 * @return {boolean}
	 */
	Mongos.prototype.isConnected = function() {
	  return this.s.mongosState.isConnected();
	}

	/**
	 * Figure out if the server instance was destroyed by calling destroy
	 * @method
	 * @return {boolean}
	 */
	Mongos.prototype.isDestroyed = function() {
	  return this.s.state  == DESTROYED;
	}

	//
	// Operations
	//

	/**
	 * Insert one or more documents
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of documents to insert
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Mongos.prototype.insert = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!this.isConnected() && this.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);
	  }

	  executeWriteOperation(this.s, 'insert', ns, ops, options, callback);
	}

	/**
	 * Perform one or more update operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of updates
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Mongos.prototype.update = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!this.isConnected() && this.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return this.s.disconnectHandler.add('update', ns, ops, options, callback);
	  }

	  executeWriteOperation(this.s, 'update', ns, ops, options, callback);
	}

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {array} ops An array of removes
	 * @param {boolean} [options.ordered=true] Execute in order or out of order
	 * @param {object} [options.writeConcern={}] Write concern for the operation
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Mongos.prototype.remove = function(ns, ops, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!this.isConnected() && this.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);
	  }

	  executeWriteOperation(this.s, 'remove', ns, ops, options, callback);
	}    

	/**
	 * Execute a command
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {object} cmd The command hash
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @param {Connection} [options.connection] Specify connection object to execute command against
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Mongos.prototype.command = function(ns, cmd, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
	  var self = this;

	  // Topology is not connected, save the call in the provided store to be
	  // Executed at some point when the handler deems it's reconnected
	  if(!self.isConnected() && self.s.disconnectHandler != null) {
	    callback = bindToCurrentDomain(callback);
	    return self.s.disconnectHandler.add('command', ns, cmd, options, callback);
	  }

	  var server = null;
	  // Ensure we have no options
	  options = options || {};

	  // We need to execute the command on all servers
	  if(options.onAll) {
	    var servers = self.s.mongosState.getAll();
	    var count = servers.length;
	    var cmdErr = null;

	    for(var i = 0; i < servers.length; i++) {
	      servers[i].command(ns, cmd, options, function(err, r) {
	        count = count - 1;
	        // Finished executing command
	        if(count == 0) {
	          // Was it a logout command clear any credentials      
	          if(cmd.logout) clearCredentials(state, ns);
	          // Return the error
	          callback(err, r);
	        }
	      });
	    }

	    return;
	  }


	  try {
	    // Get a primary      
	    server = self.s.mongosState.pickServer(options.writeConcern ? ReadPreference.primary : options.readPreference);
	  } catch(err) {
	    return callback(err);
	  }

	  // No server returned we had an error
	  if(server == null) return callback(new MongoError("no mongos found"));
	  server.command(ns, cmd, options, function(err, r) {
	    // Was it a logout command clear any credentials      
	    if(cmd.logout) clearCredentials(self.s, ns);
	    callback(err, r);      
	  });
	}

	/**
	 * Perform one or more remove operations
	 * @method
	 * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
	 * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId
	 * @param {object} [options.batchSize=0] Batchsize for the operation
	 * @param {array} [options.documents=[]] Initial documents list for cursor
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized. 
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {opResultCallback} callback A callback function
	 */
	Mongos.prototype.cursor = function(ns, cmd, cursorOptions) {
	  cursorOptions = cursorOptions || {};
	  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;
	  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);
	}

	/**
	 * Authenticate using a specified mechanism
	 * @method
	 * @param {string} mechanism The Auth mechanism we are invoking
	 * @param {string} db The db we are invoking the mechanism against
	 * @param {...object} param Parameters for the specific mechanism
	 * @param {authResultCallback} callback A callback function
	 */
	Mongos.prototype.auth = function(mechanism, db) {
	  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  var callback = args.pop();

	  // If we don't have the mechanism fail
	  if(this.s.authProviders[mechanism] == null && mechanism != 'default')
	    throw new MongoError(f("auth provider %s does not exist", mechanism));

	  // Authenticate against all the servers
	  var servers = this.s.mongosState.connectedServers().slice(0);
	  var count = servers.length;
	  // Correct authentication
	  var authenticated = true;
	  var authErr = null;
	  // Set auth in progress
	  this.s.authInProgress = true;

	  // Authenticate against all servers
	  while(servers.length > 0) {
	    var server = servers.shift();
	    // Arguments without a callback
	    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));
	    // Create arguments
	    var finalArguments = argsWithoutCallback.concat([function(err, r) {
	      count = count - 1;
	      if(err) authErr = err;
	      if(!r) authenticated = false;

	      // We are done
	      if(count == 0) {
	        // We have more servers that are not authenticated, let's authenticate
	        if(self.s.authInProgressServers.length > 0) {
	          self.s.authInProgressServers = [];
	          return self.auth.apply(self, [mechanism, db].concat(args).concat([callback]));
	        }

	        // Auth is done
	        self.s.authInProgress = false;
	        // Add successful credentials
	        if(authErr == null) addCredentials(self.s, db, argsWithoutCallback);
	        // Return the auth error
	        if(authErr) return callback(authErr, false);
	        // Successfully authenticated session
	        callback(null, new Session({}, self));
	      }
	    }]);

	    // Execute the auth
	    server.auth.apply(server, finalArguments);
	  }
	}  

	//
	// Plugin methods
	//

	/**
	 * Add custom read preference strategy
	 * @method
	 * @param {string} name Name of the read preference strategy
	 * @param {object} strategy Strategy object instance
	 */
	Mongos.prototype.addReadPreferenceStrategy = function(name, strategy) {
	  if(this.s.readPreferenceStrategies == null) this.s.readPreferenceStrategies = {};
	  this.s.readPreferenceStrategies[name] = strategy;
	}

	/**
	 * Add custom authentication mechanism
	 * @method
	 * @param {string} name Name of the authentication mechanism
	 * @param {object} provider Authentication object instance
	 */
	Mongos.prototype.addAuthProvider = function(name, provider) {
	  this.s.authProviders[name] = provider;
	}

	/**
	 * Get connection
	 * @method
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @return {Connection}
	 */
	Mongos.prototype.getConnection = function(options) {
	  // Ensure we have no options
	  options = options || {};
	  // Pick the right server based on readPreference
	  var server = this.s.mongosState.pickServer(options.readPreference);
	  if(server == null) return null;
	  // Return connection
	  return server.getConnection();
	}

	/**
	 * Get server
	 * @method
	 * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
	 * @return {Server}
	 */
	Mongos.prototype.getServer = function(options) {
	  // Ensure we have no options
	  options = options || {};
	  // Pick the right server based on readPreference
	  return this.s.mongosState.pickServer(options.readPreference);
	}

	/**
	 * All raw connections
	 * @method
	 * @return {Connection[]}
	 */
	Mongos.prototype.connections = function() {
	  return this.s.mongosState.getAllConnections();
	}

	//
	// Inquires about state changes
	//
	var mongosInquirer = function(self, state) {    
	  return function() {
	    if(state.state == DESTROYED) return
	    if(state.state == CONNECTED) state.retriesLeft = state.reconnectTries;

	    // If we have a disconnected site
	    if(state.state == DISCONNECTED && state.retriesLeft == 0) {
	      self.destroy();
	      return self.emit('error', new MongoError(f('failed to reconnect after %s', state.reconnectTries)));
	    } else if(state == DISCONNECTED) {
	      state.retriesLeft = state.retriesLeft - 1;
	    }

	    // If we have a primary and a disconnect handler, execute
	    // buffered operations
	    if(state.mongosState.isConnected() && state.disconnectHandler) {
	      state.disconnectHandler.execute();
	    }

	    // Log the information
	    if(state.logger.isDebug()) state.logger.debug(f('mongos ha proceess running'));
	    
	    // Let's query any disconnected proxies
	    var disconnectedServers = state.mongosState.disconnectedServers();
	    if(disconnectedServers.length == 0) return setTimeout(mongosInquirer(self, state), state.haInterval);
	    
	    // Count of connections waiting to be connected
	    var connectionCount = disconnectedServers.length;
	    if(state.logger.isDebug()) state.logger.debug(f('mongos ha proceess found %d disconnected proxies', connectionCount));
	    
	    // Let's attempt to reconnect
	    while(disconnectedServers.length > 0) {
	      var server = disconnectedServers.shift();
	      if(state.logger.isDebug()) state.logger.debug(f('attempting to connect to server %s', server.name));

	      // Remove any listeners
	      ['error', 'close', 'timeout', 'connect', 'message', 'parseError'].forEach(function(e) {
	        server.removeAllListeners(e);
	      });
	  
	      // Set up the event handlers
	      server.once('error', errorHandlerTemp(self, state, server));
	      server.once('close', errorHandlerTemp(self, state, server));
	      server.once('timeout', errorHandlerTemp(self, state, server));
	      server.once('connect', connectHandler(self, state, 'ha'));
	      // Start connect
	      server.connect();
	    }

	    // Let's keep monitoring but wait for possible timeout to happen
	    return setTimeout(mongosInquirer(self, state), state.options.connectionTimeout + state.haInterval);      
	  }
	}

	//
	// Error handler for initial connect
	var errorHandlerTemp = function(self, state, server) {
	  return function(err, server) {
	    // Log the information
	    if(state.logger.isInfo()) state.logger.info(f('server %s disconnected with error %s',  server.name, JSON.stringify(err)));

	    // Remove any non used handlers
	    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {
	      server.removeAllListeners(e);
	    })

	    // Signal disconnect of server
	    state.mongosState.disconnected(server);
	  }
	}

	//
	// Handlers
	var errorHandler = function(self, state) {
	  return function(err, server) {
	    if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', server.name, JSON.stringify(err)));
	    state.mongosState.disconnected(server);
	    // No more servers left emit close
	    if(state.mongosState.connectedServers().length == 0) {
	      state.state = DISCONNECTED;
	    }

	    // Signal server left
	    self.emit('left', 'mongos', server);    
	    if(state.emitError) self.emit('error', err, server);
	  }
	}

	var timeoutHandler = function(self, state) {
	  return function(err, server) {
	    if(state.logger.isInfo()) state.logger.info(f('server %s timed out', server.name));
	    state.mongosState.disconnected(server);

	    // No more servers emit close event if no entries left
	    if(state.mongosState.connectedServers().length == 0) {
	      state.state = DISCONNECTED;
	    }

	    // Signal server left
	    self.emit('left', 'mongos', server);
	  }
	}

	var closeHandler = function(self, state) {
	  return function(err, server) {
	    if(state.logger.isInfo()) state.logger.info(f('server %s closed', server.name));
	    state.mongosState.disconnected(server);

	    // No more servers left emit close
	    if(state.mongosState.connectedServers().length == 0) {
	      state.state = DISCONNECTED;
	    }

	    // Signal server left
	    self.emit('left', 'mongos', server);
	  }
	}

	// Connect handler
	var connectHandler = function(self, state, e) {
	  return function(server) {
	    if(state.logger.isInfo()) state.logger.info(f('connected to %s', server.name));

	    // Remove any non used handlers
	    ['error', 'close', 'timeout', 'connect', 'message', 'parseError'].forEach(function(e) {
	      server.removeAllListeners(e);
	    });

	    // finish processing the server
	    var processNewServer = function(_server) {
	      // Add the server handling code
	      if(_server.isConnected()) {
	        _server.once('error', errorHandler(self, state));
	        _server.once('close', closeHandler(self, state));
	        _server.once('timeout', timeoutHandler(self, state));
	        _server.once('parseError', timeoutHandler(self, state));
	      }

	      // Emit joined event
	      self.emit('joined', 'mongos', _server);

	      // Add to list connected servers
	      state.mongosState.connected(_server);

	      // Do we have a reconnect event
	      if('ha' == e && state.mongosState.connectedServers().length == 1) {
	        self.emit('reconnect', _server);
	      }

	      // Full setup
	      if(state.mongosState.disconnectedServers().length == 0 && 
	        state.mongosState.connectedServers().length > 0 &&
	        !state.fullsetup) {
	        state.fullsetup = true;
	        self.emit('fullsetup');
	      }

	      // all connected
	      if(state.mongosState.disconnectedServers().length == 0 && 
	        state.mongosState.connectedServers().length == state.seedlist.length &&
	        !state.all) {
	        state.all = true;
	        self.emit('all');
	      }

	      // Set connected
	      if(state.state == DISCONNECTED) {
	        state.state = CONNECTED;
	        self.emit('connect', self);
	      }
	    }

	    // Is there an authentication process ongoing
	    if(state.authInProgress) {
	      state.authInProgressServers.push(server);
	    }

	    // No credentials just process server
	    if(state.credentials.length == 0) return processNewServer(server);

	    // Do we have credentials, let's apply them all
	    var count = state.credentials.length;
	    // Apply the credentials
	    for(var i = 0; i < state.credentials.length; i++) {
	      server.auth.apply(server, state.credentials[i].concat([function(err, r) {        
	        count = count - 1;
	        if(count == 0) processNewServer(server);
	      }]));
	    }
	  }
	}

	//
	// Add server to the list if it does not exist
	var addToListIfNotExist = function(list, server) {
	  var found = false;

	  // Remove any non used handlers
	  ['error', 'close', 'timeout', 'connect'].forEach(function(e) {
	    server.removeAllListeners(e);
	  })

	  // Check if the server already exists
	  for(var i = 0; i < list.length; i++) {
	    if(list[i].equals(server)) found = true;
	  }

	  if(!found) {
	    list.push(server);
	  }
	}

	// Add the new credential for a db, removing the old
	// credential from the cache
	var addCredentials = function(state, db, argsWithoutCallback) {
	  // Remove any credentials for the db
	  clearCredentials(state, db + ".dummy");
	  // Add new credentials to list
	  state.credentials.push(argsWithoutCallback);
	}

	// Clear out credentials for a namespace
	var clearCredentials = function(state, ns) {
	  var db = ns.split('.')[0];
	  var filteredCredentials = [];

	  // Filter out all credentials for the db the user is logging out off
	  for(var i = 0; i < state.credentials.length; i++) {
	    if(state.credentials[i][1] != db) filteredCredentials.push(state.credentials[i]);
	  }

	  // Set new list of credentials
	  state.credentials = filteredCredentials;
	}

	var processReadPreference = function(cmd, options) {
	  options = options || {}
	  // No read preference specified
	  if(options.readPreference == null) return cmd;
	}

	//
	// Execute write operation
	var executeWriteOperation = function(state, op, ns, ops, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  var server = null;
	  // Ensure we have no options
	  options = options || {};
	  try {
	    // Get a primary   
	    server = state.mongosState.pickServer();
	  } catch(err) {
	    return callback(err);
	  }

	  // No server returned we had an error
	  if(server == null) return callback(new MongoError("no mongos found"));
	  // Execute the command
	  server[op](ns, ops, options, callback);          
	}

	/**
	 * A mongos connect event, used to verify that the connection is up and running
	 *
	 * @event Mongos#connect
	 * @type {Mongos}
	 */

	/**
	 * A server member left the mongos list
	 *
	 * @event Mongos#left
	 * @type {Mongos}
	 * @param {string} type The type of member that left (mongos)
	 * @param {Server} server The server object that left
	 */

	/**
	 * A server member joined the mongos list
	 *
	 * @event Mongos#joined
	 * @type {Mongos}
	 * @param {string} type The type of member that left (mongos)
	 * @param {Server} server The server object that joined
	 */

	module.exports = Mongos;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var EventEmitter = __webpack_require__(19).EventEmitter,
	  inherits = __webpack_require__(10).inherits;

	// Get prototypes
	var AggregationCursor = __webpack_require__(219),
	  CommandCursor = __webpack_require__(237),
	  OrderedBulkOperation = __webpack_require__(238).OrderedBulkOperation,
	  UnorderedBulkOperation = __webpack_require__(240).UnorderedBulkOperation,
	  GridStore = __webpack_require__(241),
	  Server = __webpack_require__(244),
	  ReplSet = __webpack_require__(246),
	  Mongos = __webpack_require__(247),
	  Cursor = __webpack_require__(233),
	  Collection = __webpack_require__(243),
	  Db = __webpack_require__(248),
	  Admin = __webpack_require__(249);

	var basicOperationIdGenerator = {
	  operationId: 1,

	  next: function() {
	    return this.operationId++;
	  }
	}

	var basicTimestampGenerator = {
	  current: function() {
	    return new Date().getTime();
	  },
	  
	  duration: function(start, end) {
	    return end - start;
	  }
	}

	var senstiveCommands = ['authenticate', 'saslStart', 'saslContinue', 'getnonce',
	  'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb'];

	var Instrumentation = function(core, options, callback) {
	  options = options || {};

	  // Optional id generators
	  var operationIdGenerator = options.operationIdGenerator || basicOperationIdGenerator;
	  // Optional timestamp generator
	  var timestampGenerator = options.timestampGenerator || basicTimestampGenerator;
	  // Extend with event emitter functionality
	  EventEmitter.call(this);

	  // Contains all the instrumentation overloads
	  this.overloads = [];

	  // ---------------------------------------------------------
	  //
	  // Instrument prototype
	  //
	  // ---------------------------------------------------------

	  var instrumentPrototype = function(callback) {
	    var instrumentations = []

	    // Classes to support
	    var classes = [GridStore, OrderedBulkOperation, UnorderedBulkOperation, 
	      CommandCursor, AggregationCursor, Cursor, Collection, Db];

	    // Add instrumentations to the available list
	    for(var i = 0; i < classes.length; i++) {
	      if(classes[i].define) {
	        instrumentations.push(classes[i].define.generate());
	      }
	    }

	    // Return the list of instrumentation points
	    callback(null, instrumentations);
	  }

	  // Did the user want to instrument the prototype
	  if(typeof callback == 'function') {
	    instrumentPrototype(callback);
	  }

	  // ---------------------------------------------------------
	  //
	  // Server
	  //
	  // ---------------------------------------------------------

	  // Reference
	  var self = this;
	  // Names of methods we need to wrap
	  var methods = ['command', 'insert', 'update', 'remove'];
	  // Prototype
	  var proto = core.Server.prototype;
	  // Core server method we are going to wrap
	  methods.forEach(function(x) {
	    var func = proto[x];

	    // Add to overloaded methods
	    self.overloads.push({proto: proto, name:x, func:func});

	    // The actual prototype
	    proto[x] = function() {
	      var requestId = core.Query.nextRequestId();
	      // Get the aruments
	      var args = Array.prototype.slice.call(arguments, 0);
	      var ns = args[0];
	      var commandObj = args[1];
	      var options = args[2] || {};
	      var keys = Object.keys(commandObj);
	      var commandName = keys[0];
	      var db = ns.split('.')[0];

	      // Do we have a legacy insert/update/remove command
	      if(x == 'insert' && !this.lastIsMaster().maxWireVersion) {
	        commandName = 'insert';
	        // Get the collection
	        var col = ns.split('.');
	        col.shift();
	        col = col.join('.');

	        // Re-write the command
	        commandObj = {
	          insert: col, documents: commandObj
	        }

	        if(options.writeConcern) commandObj.writeConcern = options.writeConcern;
	        commandObj.ordered = options.ordered != undefined ? options.ordered : true;
	      } else if(x == 'update' && !this.lastIsMaster().maxWireVersion) {
	        commandName = 'update';

	        // Get the collection
	        var col = ns.split('.');
	        col.shift();
	        col = col.join('.');

	        // Re-write the command
	        commandObj = {
	          update: col, updates: commandObj
	        }

	        if(options.writeConcern) commandObj.writeConcern = options.writeConcern;
	        commandObj.ordered = options.ordered != undefined ? options.ordered : true;
	      } else if(x == 'remove' && !this.lastIsMaster().maxWireVersion) {
	        commandName = 'delete';

	        // Get the collection
	        var col = ns.split('.');
	        col.shift();
	        col = col.join('.');

	        // Re-write the command
	        commandObj = {
	          delete: col, deletes: commandObj
	        }

	        if(options.writeConcern) commandObj.writeConcern = options.writeConcern;
	        commandObj.ordered = options.ordered != undefined ? options.ordered : true;
	      } else if(x == 'insert' || x == 'update' || x == 'remove' && this.lastIsMaster().maxWireVersion >= 2) {
	        // Skip the insert/update/remove commands as they are executed as actual write commands in 2.6 or higher
	        return func.apply(this, args);        
	      }

	      // Get the callback
	      var callback = args.pop();
	      // Set current callback operation id from the current context or create
	      // a new one
	      var ourOpId = callback.operationId || operationIdGenerator.next();

	      // Get a connection reference for this server instance
	      var connection = this.s.pool.get()
	      
	      // Emit the start event for the command
	      var command = {
	        // Returns the command.
	        command: commandObj,
	        // Returns the database name.
	        databaseName: db,
	        // Returns the command name.
	        commandName: commandName,
	        // Returns the driver generated request id.
	        requestId: requestId,
	        // Returns the driver generated operation id.
	        // This is used to link events together such as bulk write operations. OPTIONAL.
	        operationId: ourOpId,
	        // Returns the connection id for the command. For languages that do not have this,
	        // this MUST return the driver equivalent which MUST include the server address and port.
	        // The name of this field is flexible to match the object that is returned from the driver.
	        connectionId: connection
	      };

	      // Filter out any sensitive commands
	      if(senstiveCommands.indexOf(commandName.toLowerCase())) {
	        command.commandObj = {};
	        command.commandObj[commandName] = true;
	      }

	      // Emit the started event
	      self.emit('started', command)

	      // Start time
	      var startTime = timestampGenerator.current();

	      // Push our handler callback
	      args.push(function(err, r) {
	        var endTime = timestampGenerator.current();
	        var command = {
	          duration: timestampGenerator.duration(startTime, endTime),
	          commandName: commandName,
	          requestId: requestId,
	          operationId: ourOpId,
	          connectionId: connection
	        };

	        // If we have an error
	        if(err || (r.result.ok == 0)) {
	          command.failure = err || r.result.writeErrors || r.result;

	          // Filter out any sensitive commands
	          if(senstiveCommands.indexOf(commandName.toLowerCase())) {
	            command.failure = {};
	          }

	          self.emit('failed', command);
	        } else {
	          command.reply = r;

	          // Filter out any sensitive commands
	          if(senstiveCommands.indexOf(commandName.toLowerCase())) {
	            command.reply = {};
	          }

	          self.emit('succeeded', command);
	        }

	        // Return to caller
	        callback(err, r);
	      });

	      // Apply the call
	      func.apply(this, args);
	    }
	  });

	  // ---------------------------------------------------------
	  //
	  // Bulk Operations
	  //
	  // ---------------------------------------------------------

	  // Inject ourselves into the Bulk methods
	  var methods = ['execute'];
	  var prototypes = [
	    __webpack_require__(238).Bulk.prototype,
	    __webpack_require__(240).Bulk.prototype
	  ]

	  prototypes.forEach(function(proto) {
	    // Core server method we are going to wrap
	    methods.forEach(function(x) {
	      var func = proto[x];

	      // Add to overloaded methods
	      self.overloads.push({proto: proto, name:x, func:func});

	      // The actual prototype
	      proto[x] = function() {
	        var bulk = this;
	        // Get the aruments
	        var args = Array.prototype.slice.call(arguments, 0);
	        // Set an operation Id on the bulk object
	        this.operationId = operationIdGenerator.next();

	        // Get the callback
	        var callback = args.pop();
	        // If we have a callback use this
	        if(typeof callback == 'function') {
	          args.push(function(err, r) {
	            // Return to caller
	            callback(err, r);
	          });

	          // Apply the call
	          func.apply(this, args);
	        } else {
	          return func.apply(this, args);
	        }
	      }
	    });
	  });

	  // ---------------------------------------------------------
	  //
	  // Cursor
	  //
	  // ---------------------------------------------------------

	  // Inject ourselves into the Cursor methods
	  var methods = ['_find', '_getmore', '_killcursor'];
	  var prototypes = [
	    __webpack_require__(233).prototype,
	    __webpack_require__(237).prototype,
	    __webpack_require__(219).prototype
	  ]

	  // Command name translation
	  var commandTranslation = {
	    '_find': 'find', '_getmore': 'getMore', '_killcursor': 'killCursors', '_explain': 'explain'
	  }

	  prototypes.forEach(function(proto) {

	    // Core server method we are going to wrap
	    methods.forEach(function(x) {
	      var func = proto[x];

	      // Add to overloaded methods
	      self.overloads.push({proto: proto, name:x, func:func});

	      // The actual prototype
	      proto[x] = function() {
	        var cursor = this;
	        var requestId = core.Query.nextRequestId();
	        var ourOpId = operationIdGenerator.next();
	        var parts = this.ns.split('.');
	        var db = parts[0];

	        // Get the collection
	        parts.shift();
	        var collection = parts.join('.');

	        // Set the command
	        var command = this.query;
	        var cmd = this.s.cmd;

	        // If we have a find method, set the operationId on the cursor
	        if(x == '_find') {
	          cursor.operationId = ourOpId;
	        }

	        // Do we have a find command rewrite it
	        if(cmd.find) {
	          command = {
	            find: collection, filter: cmd.query
	          }

	          if(cmd.sort) command.sort = cmd.sort;
	          if(cmd.fields) command.projection = cmd.fields;
	          if(cmd.limit && cmd.limit < 0) {
	            command.limit = Math.abs(cmd.limit);
	            command.singleBatch = true;
	          } else if(cmd.limit) {
	            command.limit = Math.abs(cmd.limit);
	          }

	          // Options
	          if(cmd.skip) command.skip = cmd.skip;
	          if(cmd.hint) command.hint = cmd.hint;
	          if(cmd.batchSize) command.batchSize = cmd.batchSize;
	          if(cmd.returnKey) command.returnKey = cmd.returnKey;
	          if(cmd.comment) command.comment = cmd.comment;
	          if(cmd.min) command.min = cmd.min;
	          if(cmd.max) command.max = cmd.max;
	          if(cmd.maxScan) command.maxScan = cmd.maxScan;
	          if(cmd.readPreference) command['$readPreference'] = cmd.readPreference;
	          if(cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;

	          // Flags
	          if(cmd.awaitData) command.awaitData = cmd.awaitData;
	          if(cmd.snapshot) command.snapshot = cmd.snapshot;
	          if(cmd.tailable) command.tailable = cmd.tailable;
	          if(cmd.oplogReplay) command.oplogReplay = cmd.oplogReplay;
	          if(cmd.noCursorTimeout) command.noCursorTimeout = cmd.noCursorTimeout;
	          if(cmd.partial) command.partial = cmd.partial;
	          if(cmd.showDiskLoc) command.showRecordId = cmd.showDiskLoc;

	          // Read Concern
	          if(cmd.readConcern) command.readConcern = cmd.readConcern;

	          // Override method
	          if(cmd.explain) command.explain = cmd.explain;
	          if(cmd.exhaust) command.exhaust = cmd.exhaust;

	          // If we have a explain flag
	          if(cmd.explain) {
	            // Create fake explain command
	            command = {
	              explain: command,
	              verbosity: 'allPlansExecution'
	            }

	            // Set readConcern on the command if available
	            if(cmd.readConcern) command.readConcern = cmd.readConcern

	            // Set up the _explain name for the command
	            x = '_explain';
	          }
	        } else if(x == '_getmore') {
	          command = {
	            getMore: this.cursorState.cursorId,
	            collection: collection,
	            batchSize: cmd.batchSize
	          }

	          if(cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;
	        } else if(x == '_killcursors') {
	          command = {
	            killCursors: collection,
	            cursors: [this.cursorState.cursorId]
	          }
	        } else {
	          command = cmd;
	        }

	        // Set up the connection
	        var connectionId = null;
	        
	        // Set local connection
	        if(this.connection) connectionId = this.connection;
	        if(!connectionId && this.server && this.server.getConnection) connectionId = this.server.getConnection();

	        // Get the command Name
	        var commandName = x == '_find' ? Object.keys(command)[0] : commandTranslation[x];

	        // Emit the start event for the command
	        var command = {
	          // Returns the command.
	          command: command,
	          // Returns the database name.
	          databaseName: db,
	          // Returns the command name.
	          commandName: commandName,
	          // Returns the driver generated request id.
	          requestId: requestId,
	          // Returns the driver generated operation id.
	          // This is used to link events together such as bulk write operations. OPTIONAL.
	          operationId: this.operationId,
	          // Returns the connection id for the command. For languages that do not have this,
	          // this MUST return the driver equivalent which MUST include the server address and port.
	          // The name of this field is flexible to match the object that is returned from the driver.
	          connectionId: connectionId
	        };

	        // Get the aruments
	        var args = Array.prototype.slice.call(arguments, 0);

	        // Get the callback
	        var callback = args.pop();

	        // We do not have a callback but a Promise
	        if(typeof callback == 'function' || command.commandName == 'killCursors') {
	          var startTime = timestampGenerator.current();
	          // Emit the started event
	          self.emit('started', command)

	          // Emit succeeded event with killcursor if we have a legacy protocol
	          if(command.commandName == 'killCursors' 
	            && this.server.lastIsMaster() 
	            && this.server.lastIsMaster().maxWireVersion < 4) {
	            // Emit the succeeded command
	            var command = {
	              duration: timestampGenerator.duration(startTime, timestampGenerator.current()),
	              commandName: commandName,
	              requestId: requestId,
	              operationId: cursor.operationId,
	              connectionId: cursor.server.getConnection(),
	              reply: [{ok:1}]
	            };

	            // Emit the command
	            return self.emit('succeeded', command)
	          }

	          // Add our callback handler
	          args.push(function(err, r) {

	            if(err) {
	              // Command
	              var command = {
	                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),
	                commandName: commandName,
	                requestId: requestId,
	                operationId: ourOpId,
	                connectionId: cursor.server.getConnection(),
	                failure: err };

	              // Emit the command
	              self.emit('failed', command)
	            } else {
	              // cursor id is zero, we can issue success command
	              var command = {
	                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),
	                commandName: commandName,
	                requestId: requestId,
	                operationId: cursor.operationId,
	                connectionId: cursor.server.getConnection(),
	                reply: cursor.cursorState.documents
	              };

	              // Emit the command
	              self.emit('succeeded', command)
	            }

	            // Return
	            if(!callback) return;
	            
	            // Return to caller
	            callback(err, r);
	          });

	          // Apply the call
	          func.apply(this, args);
	        } else {
	          // Assume promise, push back the missing value
	          args.push(callback);
	          // Get the promise
	          var promise = func.apply(this, args);
	          // Return a new promise
	          return new cursor.s.promiseLibrary(function(resolve, reject) {
	            var startTime = timestampGenerator.current();
	            // Emit the started event
	            self.emit('started', command)
	            // Execute the function
	            promise.then(function(r) {
	              // cursor id is zero, we can issue success command
	              var command = {
	                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),
	                commandName: commandName,
	                requestId: requestId,
	                operationId: cursor.operationId,
	                connectionId: cursor.server.getConnection(),
	                reply: cursor.cursorState.documents
	              };

	              // Emit the command
	              self.emit('succeeded', command)
	            }).catch(function(err) {
	              // Command
	              var command = {
	                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),
	                commandName: commandName,
	                requestId: requestId,
	                operationId: ourOpId,
	                connectionId: cursor.server.getConnection(),
	                failure: err };

	              // Emit the command
	              self.emit('failed', command)
	              // reject the promise
	              reject(err);
	            });
	          });
	        }
	      }
	    });
	  });
	}

	inherits(Instrumentation, EventEmitter);

	Instrumentation.prototype.uninstrument = function() {
	  for(var i = 0; i < this.overloads.length; i++) {
	    var obj = this.overloads[i];
	    obj.proto[obj.name] = obj.func;
	  }

	  // Remove all listeners
	  this.removeAllListeners('started');
	  this.removeAllListeners('succeeded');
	  this.removeAllListeners('failed');
	}

	module.exports = Instrumentation;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , toError = __webpack_require__(220).toError
	  , getSingleProperty = __webpack_require__(220).getSingleProperty
	  , formattedOrderClause = __webpack_require__(220).formattedOrderClause
	  , handleCallback = __webpack_require__(220).handleCallback
	  , Logger = __webpack_require__(167).Logger
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , ReadPreference = __webpack_require__(221)
	  , MongoError = __webpack_require__(167).MongoError
	  , Readable = __webpack_require__(21).Readable || __webpack_require__(222).Readable
	  , Define = __webpack_require__(232)
	  , CoreCursor = __webpack_require__(233)
	  , Query = __webpack_require__(167).Query
	  , CoreReadPreference = __webpack_require__(167).ReadPreference;

	/**
	 * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB
	 * allowing for iteration over the results returned from the underlying query. It supports
	 * one by one document iteration, conversion to an array or can be iterated as a Node 0.10.X
	 * or higher stream
	 *
	 * **AGGREGATIONCURSOR Cannot directly be instantiated**
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   test = require('assert');
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   // Create a collection we want to drop later
	 *   var col = db.collection('createIndexExample1');
	 *   // Insert a bunch of documents
	 *   col.insert([{a:1, b:1}
	 *     , {a:2, b:2}, {a:3, b:3}
	 *     , {a:4, b:4}], {w:1}, function(err, result) {
	 *     test.equal(null, err);
	 *     // Show that duplicate records got dropped
	 *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {
	 *       test.equal(null, err);
	 *       test.equal(4, items.length);
	 *       db.close();
	 *     });
	 *   });
	 * });
	 */

	/**
	 * Namespace provided by the browser.
	 * @external Readable
	 */

	/**
	 * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)
	 * @class AggregationCursor
	 * @extends external:Readable
	 * @fires AggregationCursor#data
	 * @fires AggregationCursor#end
	 * @fires AggregationCursor#close
	 * @fires AggregationCursor#readable
	 * @return {AggregationCursor} an AggregationCursor instance.
	 */
	var AggregationCursor = function(bson, ns, cmd, options, topology, topologyOptions) {
	  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));
	  var self = this;
	  var state = AggregationCursor.INIT;
	  var streamOptions = {};

	  // MaxTimeMS
	  var maxTimeMS = null;

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Set up
	  Readable.call(this, {objectMode: true});

	  // Internal state
	  this.s = {
	    // MaxTimeMS
	      maxTimeMS: maxTimeMS
	    // State
	    , state: state
	    // Stream options
	    , streamOptions: streamOptions
	    // BSON
	    , bson: bson
	    // Namespae
	    , ns: ns
	    // Command
	    , cmd: cmd
	    // Options
	    , options: options
	    // Topology
	    , topology: topology
	    // Topology Options
	    , topologyOptions: topologyOptions
	    // Promise library
	    , promiseLibrary: promiseLibrary
	  }
	}

	/**
	 * AggregationCursor stream data event, fired for each document in the cursor.
	 *
	 * @event AggregationCursor#data
	 * @type {object}
	 */

	/**
	 * AggregationCursor stream end event
	 *
	 * @event AggregationCursor#end
	 * @type {null}
	 */

	/**
	 * AggregationCursor stream close event
	 *
	 * @event AggregationCursor#close
	 * @type {null}
	 */

	/**
	 * AggregationCursor stream readable event
	 *
	 * @event AggregationCursor#readable
	 * @type {null}
	 */

	// Inherit from Readable
	inherits(AggregationCursor, Readable);

	// Set the methods to inherit from prototype
	var methodsToInherit = ['_next', 'next', 'each', 'forEach', 'toArray'
	  , 'rewind', 'bufferedCount', 'readBufferedDocuments', 'close', 'isClosed', 'kill'
	  , '_find', '_getmore', '_killcursor', 'isDead', 'explain', 'isNotified'];

	// Extend the Cursor
	for(var name in CoreCursor.prototype) {
	  AggregationCursor.prototype[name] = CoreCursor.prototype[name];
	}

	var define = AggregationCursor.define = new Define('AggregationCursor', AggregationCursor, true);

	/**
	 * Set the batch size for the cursor.
	 * @method
	 * @param {number} value The batchSize for the cursor.
	 * @throws {MongoError}
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.batchSize = function(value) {
	  if(this.s.state == AggregationCursor.CLOSED || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true });
	  if(typeof value != 'number') throw MongoError.create({message: "batchSize requires an integer", drvier:true });
	  if(this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;
	  this.setCursorBatchSize(value);
	  return this;
	}

	define.classMethod('batchSize', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a geoNear stage to the aggregation pipeline
	 * @method
	 * @param {object} document The geoNear stage document.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.geoNear = function(document) {
	  this.s.cmd.pipeline.push({$geoNear: document});
	  return this;
	}

	define.classMethod('geoNear', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a group stage to the aggregation pipeline
	 * @method
	 * @param {object} document The group stage document.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.group = function(document) {
	  this.s.cmd.pipeline.push({$group: document});
	  return this;
	}

	define.classMethod('group', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a limit stage to the aggregation pipeline
	 * @method
	 * @param {number} value The state limit value.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.limit = function(value) {
	  this.s.cmd.pipeline.push({$limit: value});
	  return this;
	}

	define.classMethod('limit', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a match stage to the aggregation pipeline
	 * @method
	 * @param {object} document The match stage document.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.match = function(document) {
	  this.s.cmd.pipeline.push({$match: document});
	  return this;
	}

	define.classMethod('match', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a maxTimeMS stage to the aggregation pipeline
	 * @method
	 * @param {number} value The state maxTimeMS value.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.maxTimeMS = function(value) {
	  if(this.s.topology.lastIsMaster().minWireVersion > 2) {
	    this.s.cmd.maxTimeMS = value;
	  }
	  return this;
	}

	define.classMethod('maxTimeMS', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a out stage to the aggregation pipeline
	 * @method
	 * @param {number} destination The destination name.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.out = function(destination) {
	  this.s.cmd.pipeline.push({$out: destination});
	  return this;
	}

	define.classMethod('out', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a project stage to the aggregation pipeline
	 * @method
	 * @param {object} document The project stage document.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.project = function(document) {
	  this.s.cmd.pipeline.push({$project: document});
	  return this;
	}

	define.classMethod('project', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a redact stage to the aggregation pipeline
	 * @method
	 * @param {object} document The redact stage document.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.redact = function(document) {
	  this.s.cmd.pipeline.push({$redact: document});
	  return this;
	}

	define.classMethod('redact', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a skip stage to the aggregation pipeline
	 * @method
	 * @param {number} value The state skip value.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.skip = function(value) {
	  this.s.cmd.pipeline.push({$skip: value});
	  return this;
	}

	define.classMethod('skip', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a sort stage to the aggregation pipeline
	 * @method
	 * @param {object} document The sort stage document.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.sort = function(document) {
	  this.s.cmd.pipeline.push({$sort: document});
	  return this;
	}

	define.classMethod('sort', {callback: false, promise:false, returns: [AggregationCursor]});

	/**
	 * Add a unwind stage to the aggregation pipeline
	 * @method
	 * @param {number} field The unwind field name.
	 * @return {AggregationCursor}
	 */
	AggregationCursor.prototype.unwind = function(field) {
	  this.s.cmd.pipeline.push({$unwind: field});
	  return this;
	}

	define.classMethod('unwind', {callback: false, promise:false, returns: [AggregationCursor]});

	AggregationCursor.prototype.get = AggregationCursor.prototype.toArray;

	// Inherited methods
	define.classMethod('toArray', {callback: true, promise:true});
	define.classMethod('each', {callback: true, promise:false});
	define.classMethod('forEach', {callback: true, promise:false});
	define.classMethod('next', {callback: true, promise:true});
	define.classMethod('close', {callback: true, promise:true});
	define.classMethod('isClosed', {callback: false, promise:false, returns: [Boolean]});
	define.classMethod('rewind', {callback: false, promise:false});
	define.classMethod('bufferedCount', {callback: false, promise:false, returns: [Number]});
	define.classMethod('readBufferedDocuments', {callback: false, promise:false, returns: [Array]});

	/**
	 * Get the next available document from the cursor, returns null if no more documents are available.
	 * @function AggregationCursor.prototype.next
	 * @param {AggregationCursor~resultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */

	/**
	 * Set the new batchSize of the cursor
	 * @function AggregationCursor.prototype.setBatchSize
	 * @param {number} value The new batchSize for the cursor
	 * @return {null}
	 */

	/**
	 * Get the batchSize of the cursor
	 * @function AggregationCursor.prototype.batchSize
	 * @param {number} value The current batchSize for the cursor
	 * @return {null}
	 */

	/**
	 * The callback format for results
	 * @callback AggregationCursor~toArrayResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {object[]} documents All the documents the satisfy the cursor.
	 */

	/**
	 * Returns an array of documents. The caller is responsible for making sure that there
	 * is enough memory to store the results. Note that the array only contain partial
	 * results when this cursor had been previouly accessed. In that case,
	 * cursor.rewind() can be used to reset the cursor.
	 * @method AggregationCursor.prototype.toArray
	 * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */

	/**
	 * The callback format for results
	 * @callback AggregationCursor~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {(object|null)} result The result object if the command was executed successfully.
	 */

	/**
	 * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
	 * not all of the elements will be iterated if this cursor had been previouly accessed.
	 * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
	 * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
	 * at any given time if batch size is specified. Otherwise, the caller is responsible
	 * for making sure that the entire result can fit the memory.
	 * @method AggregationCursor.prototype.each
	 * @param {AggregationCursor~resultCallback} callback The result callback.
	 * @throws {MongoError}
	 * @return {null}
	 */

	/**
	 * Close the cursor, sending a AggregationCursor command and emitting close.
	 * @method AggregationCursor.prototype.close
	 * @param {AggregationCursor~resultCallback} [callback] The result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */

	/**
	 * Is the cursor closed
	 * @method AggregationCursor.prototype.isClosed
	 * @return {boolean}
	 */

	/**
	 * Execute the explain for the cursor
	 * @method AggregationCursor.prototype.explain
	 * @param {AggregationCursor~resultCallback} [callback] The result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */

	/**
	 * Clone the cursor
	 * @function AggregationCursor.prototype.clone
	 * @return {AggregationCursor}
	 */

	/**
	 * Resets the cursor
	 * @function AggregationCursor.prototype.rewind
	 * @return {AggregationCursor}
	 */

	/**
	 * The callback format for the forEach iterator method
	 * @callback AggregationCursor~iteratorCallback
	 * @param {Object} doc An emitted document for the iterator
	 */

	/**
	 * The callback error format for the forEach iterator method
	 * @callback AggregationCursor~endCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 */

	/*
	 * Iterates over all the documents for this cursor using the iterator, callback pattern.
	 * @method AggregationCursor.prototype.forEach
	 * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.
	 * @param {AggregationCursor~endCallback} callback The end callback.
	 * @throws {MongoError}
	 * @return {null}
	 */

	AggregationCursor.INIT = 0;
	AggregationCursor.OPEN = 1;
	AggregationCursor.CLOSED = 2;

	module.exports = AggregationCursor;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var MongoError = __webpack_require__(167).MongoError,
	  f = __webpack_require__(10).format;

	var shallowClone = function(obj) {
	  var copy = {};
	  for(var name in obj) copy[name] = obj[name];
	  return copy;
	}

	// Set simple property
	var getSingleProperty = function(obj, name, value) {
	  Object.defineProperty(obj, name, {
	    enumerable:true,
	    get: function() {
	      return value
	    }
	  });
	}

	var formatSortValue = exports.formatSortValue = function(sortDirection) {
	  var value = ("" + sortDirection).toLowerCase();

	  switch (value) {
	    case 'ascending':
	    case 'asc':
	    case '1':
	      return 1;
	    case 'descending':
	    case 'desc':
	    case '-1':
	      return -1;
	    default:
	      throw new Error("Illegal sort clause, must be of the form "
	                    + "[['field1', '(ascending|descending)'], "
	                    + "['field2', '(ascending|descending)']]");
	  }
	};

	var formattedOrderClause = exports.formattedOrderClause = function(sortValue) {
	  var orderBy = {};
	  if(sortValue == null) return null;
	  if (Array.isArray(sortValue)) {
	    if(sortValue.length === 0) {
	      return null;
	    }

	    for(var i = 0; i < sortValue.length; i++) {
	      if(sortValue[i].constructor == String) {
	        orderBy[sortValue[i]] = 1;
	      } else {
	        orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);
	      }
	    }
	  } else if(sortValue != null && typeof sortValue == 'object') {
	    orderBy = sortValue;
	  } else if (typeof sortValue == 'string') {
	    orderBy[sortValue] = 1;
	  } else {
	    throw new Error("Illegal sort clause, must be of the form " +
	      "[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]");
	  }

	  return orderBy;
	};

	var checkCollectionName = function checkCollectionName (collectionName) {
	  if('string' !== typeof collectionName) {
	    throw Error("collection name must be a String");
	  }

	  if(!collectionName || collectionName.indexOf('..') != -1) {
	    throw Error("collection names cannot be empty");
	  }

	  if(collectionName.indexOf('$') != -1 &&
	      collectionName.match(/((^\$cmd)|(oplog\.\$main))/) == null) {
	    throw Error("collection names must not contain '$'");
	  }

	  if(collectionName.match(/^\.|\.$/) != null) {
	    throw Error("collection names must not start or end with '.'");
	  }

	  // Validate that we are not passing 0x00 in the colletion name
	  if(!!~collectionName.indexOf("\x00")) {
	    throw new Error("collection names cannot contain a null character");
	  }
	};

	var handleCallback = function(callback, err, value1, value2) {
	  try {
	    if(callback == null) return;
	    if(value2) return callback(err, value1, value2);
	    return callback(err, value1);
	  } catch(err) {
	    process.nextTick(function() { throw err; });
	    return false;
	  }

	  return true;
	}

	/**
	 * Wrap a Mongo error document in an Error instance
	 * @ignore
	 * @api private
	 */
	var toError = function(error) {
	  if (error instanceof Error) return error;

	  var msg = error.err || error.errmsg || error.errMessage || error;
	  var e = MongoError.create({message: msg, driver:true});

	  // Get all object keys
	  var keys = typeof error == 'object'
	    ? Object.keys(error)
	    : [];

	  for(var i = 0; i < keys.length; i++) {
	    e[keys[i]] = error[keys[i]];
	  }

	  return e;
	}

	/**
	 * @ignore
	 */
	var normalizeHintField = function normalizeHintField(hint) {
	  var finalHint = null;

	  if(typeof hint == 'string') {
	    finalHint = hint;
	  } else if(Array.isArray(hint)) {
	    finalHint = {};

	    hint.forEach(function(param) {
	      finalHint[param] = 1;
	    });
	  } else if(hint != null && typeof hint == 'object') {
	    finalHint = {};
	    for (var name in hint) {
	      finalHint[name] = hint[name];
	    }
	  }

	  return finalHint;
	};

	/**
	 * Create index name based on field spec
	 *
	 * @ignore
	 * @api private
	 */
	var parseIndexOptions = function(fieldOrSpec) {
	  var fieldHash = {};
	  var indexes = [];
	  var keys;

	  // Get all the fields accordingly
	  if('string' == typeof fieldOrSpec) {
	    // 'type'
	    indexes.push(fieldOrSpec + '_' + 1);
	    fieldHash[fieldOrSpec] = 1;
	  } else if(Array.isArray(fieldOrSpec)) {
	    fieldOrSpec.forEach(function(f) {
	      if('string' == typeof f) {
	        // [{location:'2d'}, 'type']
	        indexes.push(f + '_' + 1);
	        fieldHash[f] = 1;
	      } else if(Array.isArray(f)) {
	        // [['location', '2d'],['type', 1]]
	        indexes.push(f[0] + '_' + (f[1] || 1));
	        fieldHash[f[0]] = f[1] || 1;
	      } else if(isObject(f)) {
	        // [{location:'2d'}, {type:1}]
	        keys = Object.keys(f);
	        keys.forEach(function(k) {
	          indexes.push(k + '_' + f[k]);
	          fieldHash[k] = f[k];
	        });
	      } else {
	        // undefined (ignore)
	      }
	    });
	  } else if(isObject(fieldOrSpec)) {
	    // {location:'2d', type:1}
	    keys = Object.keys(fieldOrSpec);
	    keys.forEach(function(key) {
	      indexes.push(key + '_' + fieldOrSpec[key]);
	      fieldHash[key] = fieldOrSpec[key];
	    });
	  }

	  return {
	    name: indexes.join("_"), keys: keys, fieldHash: fieldHash
	  }
	}

	var isObject = exports.isObject = function (arg) {
	  return '[object Object]' == toString.call(arg)
	}

	var debugOptions = function(debugFields, options) {
	  var finaloptions = {};
	  debugFields.forEach(function(n) {
	    finaloptions[n] = options[n];
	  });

	  return finaloptions;
	}

	var decorateCommand = function(command, options, exclude) {
	  for(var name in options) {
	    if(exclude[name] == null) command[name] = options[name];
	  }

	  return command;
	}

	exports.shallowClone = shallowClone;
	exports.getSingleProperty = getSingleProperty;
	exports.checkCollectionName = checkCollectionName;
	exports.toError = toError;
	exports.formattedOrderClause = formattedOrderClause;
	exports.parseIndexOptions = parseIndexOptions;
	exports.normalizeHintField = normalizeHintField;
	exports.handleCallback = handleCallback;
	exports.decorateCommand = decorateCommand;
	exports.isObject = isObject;
	exports.debugOptions = debugOptions;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 221 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @fileOverview The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is
	 * used to construct connections.
	 * 
	 * @example
	 * var Db = require('mongodb').Db,
	 *   ReplSet = require('mongodb').ReplSet,
	 *   Server = require('mongodb').Server,
	 *   ReadPreference = require('mongodb').ReadPreference,
	 *   test = require('assert');
	 * // Connect using ReplSet
	 * var server = new Server('localhost', 27017);
	 * var db = new Db('test', new ReplSet([server]));
	 * db.open(function(err, db) {
	 *   test.equal(null, err);
	 *   // Perform a read
	 *   var cursor = db.collection('t').find({});
	 *   cursor.setReadPreference(ReadPreference.PRIMARY);
	 *   cursor.toArray(function(err, docs) {
	 *     test.equal(null, err);
	 *     db.close();
	 *   });
	 * });
	 */

	/**
	 * Creates a new ReadPreference instance
	 * 
	 * Read Preferences
	 *  - **ReadPreference.PRIMARY**, Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).
	 *  - **ReadPreference.PRIMARY_PREFERRED**, Read from primary if available, otherwise a secondary.
	 *  - **ReadPreference.SECONDARY**, Read from secondary if available, otherwise error.
	 *  - **ReadPreference.SECONDARY_PREFERRED**, Read from a secondary if available, otherwise read from the primary.
	 *  - **ReadPreference.NEAREST**, All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.
	 *
	 * @class
	 * @param {string} mode The ReadPreference mode as listed above.
	 * @param {object} tags An object representing read preference tags.
	 * @property {string} mode The ReadPreference mode.
	 * @property {object} tags The ReadPreference tags.
	 * @return {ReadPreference} a ReadPreference instance.
	 */ 
	var ReadPreference = function(mode, tags) {
	  if(!(this instanceof ReadPreference))
	    return new ReadPreference(mode, tags);
	  this._type = 'ReadPreference';
	  this.mode = mode;
	  this.tags = tags;
	}

	/**
	 * Validate if a mode is legal
	 *
	 * @method
	 * @param {string} mode The string representing the read preference mode.
	 * @return {boolean}
	 */  
	ReadPreference.isValid = function(_mode) {
	  return (_mode == ReadPreference.PRIMARY || _mode == ReadPreference.PRIMARY_PREFERRED
	    || _mode == ReadPreference.SECONDARY || _mode == ReadPreference.SECONDARY_PREFERRED
	    || _mode == ReadPreference.NEAREST
	    || _mode == true || _mode == false || _mode == null);
	}

	/**
	 * Validate if a mode is legal
	 *
	 * @method
	 * @param {string} mode The string representing the read preference mode.
	 * @return {boolean}
	 */  
	ReadPreference.prototype.isValid = function(mode) {
	  var _mode = typeof mode == 'string' ? mode : this.mode;
	  return ReadPreference.isValid(_mode);
	}

	/**
	 * @ignore
	 */
	ReadPreference.prototype.toObject = function() {
	  var object = {mode:this.mode};

	  if(this.tags != null) {
	    object['tags'] = this.tags;
	  }

	  return object;
	}

	/**
	 * @ignore
	 */
	ReadPreference.PRIMARY = 'primary';
	ReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';
	ReadPreference.SECONDARY = 'secondary';
	ReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';
	ReadPreference.NEAREST = 'nearest'

	/**
	 * @ignore
	 */
	module.exports = ReadPreference;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(223);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(228);
	exports.Duplex = __webpack_require__(229);
	exports.Transform = __webpack_require__(230);
	exports.PassThrough = __webpack_require__(231);


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(224);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(5).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(19).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(21);

	/*<replacement>*/
	var util = __webpack_require__(225);
	util.inherits = __webpack_require__(226);
	/*</replacement>*/

	var StringDecoder;

	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = false;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // In streams that never have any data, and do push(null) right away,
	  // the consumer can miss the 'end' event if they do some I/O before
	  // consuming the stream.  So, we don't emit('end') until some reading
	  // happens.
	  this.calledRead = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(227).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (typeof chunk === 'string' && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null || chunk === undefined) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      // update the buffer info.
	      state.length += state.objectMode ? 1 : chunk.length;
	      if (addToFront) {
	        state.buffer.unshift(chunk);
	      } else {
	        state.reading = false;
	        state.buffer.push(chunk);
	      }

	      if (state.needReadable)
	        emitReadable(stream);

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(227).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (n === null || isNaN(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  var state = this._readableState;
	  state.calledRead = true;
	  var nOrig = n;
	  var ret;

	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    ret = null;

	    // In cases where the decoder did not receive enough data
	    // to produce a full chunk, then immediately received an
	    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
	    // howMuchToRead will see this and coerce the amount to
	    // read to zero (because it's looking at the length of the
	    // first <Buffer > in state.buffer), and we'll end up here.
	    //
	    // This can only happen via state.decoder -- no other venue
	    // exists for pushing a zero-length chunk into state.buffer
	    // and triggering this behavior. In this case, we return our
	    // remaining data and end the stream, if appropriate.
	    if (state.length > 0 && state.decoder) {
	      ret = fromList(n, state);
	      state.length -= ret.length;
	    }

	    if (state.length === 0)
	      endReadable(this);

	    return ret;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length - n <= state.highWaterMark)
	    doRead = true;

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading)
	    doRead = false;

	  if (doRead) {
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read called its callback synchronously, then `reading`
	  // will be false, and we need to re-evaluate how much data we
	  // can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we happened to read() exactly the remaining amount in the
	  // buffer, and the EOF has been seen at this point, then make sure
	  // that we emit 'end' on the very next tick.
	  if (state.ended && !state.endEmitted && state.length === 0)
	    endReadable(this);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // if we've ended and we have some data left, then emit
	  // 'readable' now to make sure it gets picked up.
	  if (state.length > 0)
	    emitReadable(stream);
	  else
	    endReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (state.emittedReadable)
	    return;

	  state.emittedReadable = true;
	  if (state.sync)
	    process.nextTick(function() {
	      emitReadable_(stream);
	    });
	  else
	    emitReadable_(stream);
	}

	function emitReadable_(stream) {
	  stream.emit('readable');
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    if (readable !== src) return;
	    cleanup();
	  }

	  function onend() {
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (!dest._writableState || dest._writableState.needDrain)
	      ondrain();
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    // the handler that waits for readable events after all
	    // the data gets sucked out in flow.
	    // This would be easier to follow with a .once() handler
	    // in flow(), but that is too slow.
	    this.on('readable', pipeOnReadable);

	    state.flowing = true;
	    process.nextTick(function() {
	      flow(src);
	    });
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var dest = this;
	    var state = src._readableState;
	    state.awaitDrain--;
	    if (state.awaitDrain === 0)
	      flow(src);
	  };
	}

	function flow(src) {
	  var state = src._readableState;
	  var chunk;
	  state.awaitDrain = 0;

	  function write(dest, i, list) {
	    var written = dest.write(chunk);
	    if (false === written) {
	      state.awaitDrain++;
	    }
	  }

	  while (state.pipesCount && null !== (chunk = src.read())) {

	    if (state.pipesCount === 1)
	      write(state.pipes, 0, null);
	    else
	      forEach(state.pipes, write);

	    src.emit('data', chunk);

	    // if anyone needs a drain, then we have to wait for that.
	    if (state.awaitDrain > 0)
	      return;
	  }

	  // if every destination was unpiped, either before entering this
	  // function, or in the while loop, then stop flowing.
	  //
	  // NB: This is a pretty rare edge case.
	  if (state.pipesCount === 0) {
	    state.flowing = false;

	    // if there were data event listeners added, then switch to old mode.
	    if (EE.listenerCount(src, 'data') > 0)
	      emitDataEvents(src);
	    return;
	  }

	  // at this point, no one needed a drain, so we just ran out of data
	  // on the next readable event, start it over again.
	  state.ranOut = true;
	}

	function pipeOnReadable() {
	  if (this._readableState.ranOut) {
	    this._readableState.ranOut = false;
	    flow(this);
	  }
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data' && !this._readableState.flowing)
	    emitDataEvents(this);

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        this.read(0);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  emitDataEvents(this);
	  this.read(0);
	  this.emit('resume');
	};

	Readable.prototype.pause = function() {
	  emitDataEvents(this, true);
	  this.emit('pause');
	};

	function emitDataEvents(stream, startPaused) {
	  var state = stream._readableState;

	  if (state.flowing) {
	    // https://github.com/isaacs/readable-stream/issues/16
	    throw new Error('Cannot switch to old mode now.');
	  }

	  var paused = startPaused || false;
	  var readable = false;

	  // convert to an old-style stream.
	  stream.readable = true;
	  stream.pipe = Stream.prototype.pipe;
	  stream.on = stream.addListener = Stream.prototype.on;

	  stream.on('readable', function() {
	    readable = true;

	    var c;
	    while (!paused && (null !== (c = stream.read())))
	      stream.emit('data', c);

	    if (c === null) {
	      readable = false;
	      stream._readableState.needReadable = true;
	    }
	  });

	  stream.pause = function() {
	    paused = true;
	    this.emit('pause');
	  };

	  stream.resume = function() {
	    paused = false;
	    if (readable)
	      process.nextTick(function() {
	        stream.emit('readable');
	      });
	    else
	      this.read(0);
	    this.emit('resume');
	  };

	  // now make it start, just in case it hadn't already.
	  stream.emit('readable');
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    //if (state.objectMode && util.isNullOrUndefined(chunk))
	    if (state.objectMode && (chunk === null || chunk === undefined))
	      return;
	    else if (!state.objectMode && (!chunk || !chunk.length))
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (typeof stream[i] === 'function' &&
	        typeof this[i] === 'undefined') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted && state.calledRead) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 224 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 226 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(5).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(5).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(225);
	util.inherits = __webpack_require__(226);
	/*</replacement>*/

	var Stream = __webpack_require__(21);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(229);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (typeof cb !== 'function')
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb))
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);

	  return ret;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      cb(er);
	    });
	  else
	    cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished && !state.bufferProcessing && state.buffer.length)
	      clearBuffer(stream, state);

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  cb();
	  if (finished)
	    finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  for (var c = 0; c < state.buffer.length; c++) {
	    var entry = state.buffer[c];
	    var chunk = entry.chunk;
	    var encoding = entry.encoding;
	    var cb = entry.callback;
	    var len = state.objectMode ? 1 : chunk.length;

	    doWrite(stream, state, len, chunk, encoding, cb);

	    // if we didn't call the onwrite immediately, then
	    // it means that we need to wait until it does.
	    // also, that means that the chunk and cb are currently
	    // being processed, so move the buffer counter past them.
	    if (state.writing) {
	      c++;
	      break;
	    }
	  }

	  state.bufferProcessing = false;
	  if (c < state.buffer.length)
	    state.buffer = state.buffer.slice(c);
	  else
	    state.buffer.length = 0;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (typeof chunk !== 'undefined' && chunk !== null)
	    this.write(chunk, encoding);

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    state.finished = true;
	    stream.emit('finish');
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(225);
	util.inherits = __webpack_require__(226);
	/*</replacement>*/

	var Readable = __webpack_require__(223);
	var Writable = __webpack_require__(228);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(229);

	/*<replacement>*/
	var util = __webpack_require__(225);
	util.inherits = __webpack_require__(226);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined)
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  var ts = this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('finish', function() {
	    if ('function' === typeof this._flush)
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var rs = stream._readableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(230);

	/*<replacement>*/
	var util = __webpack_require__(225);
	util.inherits = __webpack_require__(226);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var f = __webpack_require__(10).format;

	var Define = function(name, object, stream) {
	  this.name = name;
	  this.object = object;
	  this.stream = typeof stream == 'boolean' ? stream : false;
	  this.instrumentations = {};
	}

	Define.prototype.classMethod = function(name, options) {
	  var keys = Object.keys(options).sort();
	  var key = generateKey(keys, options);

	  // Add a list of instrumentations
	  if(this.instrumentations[key] == null) {
	    this.instrumentations[key] = {
	      methods: [], options: options
	    }
	  }

	  // Push to list of method for this instrumentation
	  this.instrumentations[key].methods.push(name);
	}

	var generateKey = function(keys, options) {
	  var parts = [];
	  for(var i = 0; i < keys.length; i++) {
	    parts.push(f('%s=%s', keys[i], options[keys[i]]));
	  }

	  return parts.join();
	}

	Define.prototype.staticMethod = function(name, options) {
	  options.static = true;
	  var keys = Object.keys(options).sort();
	  var key = generateKey(keys, options);

	  // Add a list of instrumentations
	  if(this.instrumentations[key] == null) {
	    this.instrumentations[key] = {
	      methods: [], options: options
	    }
	  }

	  // Push to list of method for this instrumentation
	  this.instrumentations[key].methods.push(name);
	}

	Define.prototype.generate = function(keys, options) {
	  // Generate the return object
	  var object = {
	    name: this.name, obj: this.object, stream: this.stream,
	    instrumentations: []
	  }

	  for(var name in this.instrumentations) {
	    object.instrumentations.push(this.instrumentations[name]);
	  }

	  return object;
	}

	module.exports = Define;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , toError = __webpack_require__(220).toError
	  , getSingleProperty = __webpack_require__(220).getSingleProperty
	  , formattedOrderClause = __webpack_require__(220).formattedOrderClause
	  , handleCallback = __webpack_require__(220).handleCallback
	  , Logger = __webpack_require__(167).Logger
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , ReadPreference = __webpack_require__(221)
	  , MongoError = __webpack_require__(167).MongoError
	  , Readable = __webpack_require__(21).Readable || __webpack_require__(222).Readable
	  , Define = __webpack_require__(232)
	  , CoreCursor = __webpack_require__(167).Cursor
	  , Query = __webpack_require__(167).Query
	  , CoreReadPreference = __webpack_require__(167).ReadPreference;

	/**
	 * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB
	 * allowing for iteration over the results returned from the underlying query. It supports
	 * one by one document iteration, conversion to an array or can be iterated as a Node 0.10.X
	 * or higher stream
	 *
	 * **CURSORS Cannot directly be instantiated**
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   test = require('assert');
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   // Create a collection we want to drop later
	 *   var col = db.collection('createIndexExample1');
	 *   // Insert a bunch of documents
	 *   col.insert([{a:1, b:1}
	 *     , {a:2, b:2}, {a:3, b:3}
	 *     , {a:4, b:4}], {w:1}, function(err, result) {
	 *     test.equal(null, err);
	 *
	 *     // Show that duplicate records got dropped
	 *     col.find({}).toArray(function(err, items) {
	 *       test.equal(null, err);
	 *       test.equal(4, items.length);
	 *       db.close();
	 *     });
	 *   });
	 * });
	 */

	/**
	 * Namespace provided by the mongodb-core and node.js
	 * @external CoreCursor
	 * @external Readable
	 */

	// Flags allowed for cursor
	var flags = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];
	var fields = ['numberOfRetries', 'tailableRetryInterval'];

	/**
	 * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly)
	 * @class Cursor
	 * @extends external:CoreCursor
	 * @extends external:Readable
	 * @property {string} sortValue Cursor query sort setting.
	 * @property {boolean} timeout Is Cursor able to time out.
	 * @property {ReadPreference} readPreference Get cursor ReadPreference.
	 * @fires Cursor#data
	 * @fires Cursor#end
	 * @fires Cursor#close
	 * @fires Cursor#readable
	 * @return {Cursor} a Cursor instance.
	 * @example
	 * Some example
	 */
	var Cursor = function(bson, ns, cmd, options, topology, topologyOptions) {
	  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));
	  var self = this;
	  var state = Cursor.INIT;
	  var streamOptions = {};

	  // Tailable cursor options
	  var numberOfRetries = options.numberOfRetries || 5;
	  var tailableRetryInterval = options.tailableRetryInterval || 500;
	  var currentNumberOfRetries = numberOfRetries;

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Set up
	  Readable.call(this, {objectMode: true});

	  // Internal cursor state
	  this.s = {
	    // Tailable cursor options
	      numberOfRetries: numberOfRetries
	    , tailableRetryInterval: tailableRetryInterval
	    , currentNumberOfRetries: currentNumberOfRetries
	    // State
	    , state: state
	    // Stream options
	    , streamOptions: streamOptions
	    // BSON
	    , bson: bson
	    // Namespace
	    , ns: ns
	    // Command
	    , cmd: cmd
	    // Options
	    , options: options
	    // Topology
	    , topology: topology
	    // Topology options
	    , topologyOptions: topologyOptions
	    // Promise library
	    , promiseLibrary: promiseLibrary
	    // Current doc
	    , currentDoc: null
	  }

	  // Legacy fields
	  this.timeout = self.s.options.noCursorTimeout == true;
	  this.sortValue = self.s.cmd.sort;
	  this.readPreference = self.s.options.readPreference;
	}

	/**
	 * Cursor stream data event, fired for each document in the cursor.
	 *
	 * @event Cursor#data
	 * @type {object}
	 */

	/**
	 * Cursor stream end event
	 *
	 * @event Cursor#end
	 * @type {null}
	 */

	/**
	 * Cursor stream close event
	 *
	 * @event Cursor#close
	 * @type {null}
	 */

	/**
	 * Cursor stream readable event
	 *
	 * @event Cursor#readable
	 * @type {null}
	 */

	// Inherit from Readable
	inherits(Cursor, Readable);

	// Map core cursor _next method so we can apply mapping
	CoreCursor.prototype._next = CoreCursor.prototype.next;

	for(var name in CoreCursor.prototype) {
	  Cursor.prototype[name] = CoreCursor.prototype[name];
	}

	var define = Cursor.define = new Define('Cursor', Cursor, true);

	/**
	 * Check if there is any document still available in the cursor
	 * @method
	 * @param {Cursor~resultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.hasNext = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') {
	    if(self.s.currentDoc){
	      return callback(null, true);
	    } else {
	      return nextObject(self, function(err, doc) {
	        if(!doc) return callback(null, false);
	        self.s.currentDoc = doc;
	        callback(null, true);
	      });
	    }
	  }

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    if(self.s.currentDoc){
	      resolve(true);
	    } else {
	      nextObject(self, function(err, doc) {
	        if(self.s.state == Cursor.CLOSED || self.isDead()) return resolve(false);
	        if(err) return reject(err);
	        if(!doc) return resolve(false);
	        self.s.currentDoc = doc;
	        resolve(true);
	      });
	    }
	  });
	}

	define.classMethod('hasNext', {callback: true, promise:true});

	/**
	 * Get the next available document from the cursor, returns null if no more documents are available.
	 * @method
	 * @param {Cursor~resultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.next = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') {
	    // Return the currentDoc if someone called hasNext first
	    if(self.s.currentDoc) {
	      var doc = self.s.currentDoc;
	      self.s.currentDoc = null;
	      return callback(null, doc);
	    }

	    // Return the next object
	    return nextObject(self, callback)
	  };

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    // Return the currentDoc if someone called hasNext first
	    if(self.s.currentDoc) {
	      var doc = self.s.currentDoc;
	      self.s.currentDoc = null;
	      return resolve(doc);
	    }

	    nextObject(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('next', {callback: true, promise:true});

	/**
	 * Set the cursor query
	 * @method
	 * @param {object} filter The filter object used for the cursor.
	 * @return {Cursor}
	 */
	Cursor.prototype.filter = function(filter) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.query = filter;
	  return this;
	}

	define.classMethod('filter', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the cursor maxScan
	 * @method
	 * @param {object} maxScan Constrains the query to only scan the specified number of documents when fulfilling the query
	 * @return {Cursor}
	 */
	Cursor.prototype.maxScan = function(maxScan) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.maxScan = maxScan;
	  return this;
	}

	define.classMethod('maxScan', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the cursor hint
	 * @method
	 * @param {object} hint If specified, then the query system will only consider plans using the hinted index.
	 * @return {Cursor}
	 */
	Cursor.prototype.hint = function(hint) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.hint = hint;
	  return this;
	}

	define.classMethod('hint', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the cursor min
	 * @method
	 * @param {object} min Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.
	 * @return {Cursor}
	 */
	Cursor.prototype.min = function(min) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.min = min;
	  return this;
	}

	define.classMethod('min', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the cursor max
	 * @method
	 * @param {object} max Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.
	 * @return {Cursor}
	 */
	Cursor.prototype.max = function(max) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.max = max;
	  return this;
	}

	define.classMethod('max', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the cursor returnKey
	 * @method
	 * @param {object} returnKey Only return the index field or fields for the results of the query. If $returnKey is set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields. Use one of the following forms:
	 * @return {Cursor}
	 */
	Cursor.prototype.returnKey = function(value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.returnKey = value;
	  return this;
	}

	define.classMethod('returnKey', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the cursor showRecordId
	 * @method
	 * @param {object} showRecordId The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.
	 * @return {Cursor}
	 */
	Cursor.prototype.showRecordId = function(value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.showDiskLoc = value;
	  return this;
	}

	define.classMethod('showRecordId', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the cursor snapshot
	 * @method
	 * @param {object} snapshot The $snapshot operator prevents the cursor from returning a document more than once because an intervening write operation results in a move of the document.
	 * @return {Cursor}
	 */
	Cursor.prototype.snapshot = function(value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.snapshot = value;
	  return this;
	}

	define.classMethod('snapshot', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set a node.js specific cursor option
	 * @method
	 * @param {string} field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].
	 * @param {object} value The field value.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.setCursorOption = function(field, value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  if(fields.indexOf(field) == -1) throw MongoError.create({message: f("option %s not a supported option %s", field, fields), driver:true });
	  this.s[field] = value;
	  if(field == 'numberOfRetries')
	    this.s.currentNumberOfRetries = value;
	  return this;
	}

	define.classMethod('setCursorOption', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Add a cursor flag to the cursor
	 * @method
	 * @param {string} flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'].
	 * @param {boolean} value The flag boolean value.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.addCursorFlag = function(flag, value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  if(flags.indexOf(flag) == -1) throw MongoError.create({message: f("flag %s not a supported flag %s", flag, flags), driver:true });
	  if(typeof value != 'boolean') throw MongoError.create({message: f("flag %s must be a boolean value", flag), driver:true});
	  this.s.cmd[flag] = value;
	  return this;
	}

	define.classMethod('addCursorFlag', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Add a query modifier to the cursor query
	 * @method
	 * @param {string} name The query modifier (must start with $, such as $orderby etc)
	 * @param {boolean} value The flag boolean value.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.addQueryModifier = function(name, value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  if(name[0] != '$') throw MongoError.create({message: f("%s is not a valid query modifier"), driver:true});
	  // Strip of the $
	  var field = name.substr(1);
	  // Set on the command
	  this.s.cmd[field] = value;
	  // Deal with the special case for sort
	  if(field == 'orderby') this.s.cmd.sort = this.s.cmd[field];
	  return this;
	}

	define.classMethod('addQueryModifier', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Add a comment to the cursor query allowing for tracking the comment in the log.
	 * @method
	 * @param {string} value The comment attached to this query.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.comment = function(value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.comment = value;
	  return this;
	}

	define.classMethod('comment', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)
	 * @method
	 * @param {number} value Number of milliseconds to wait before aborting the query.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.maxTimeMS = function(value) {
	  if(typeof value != 'number') throw MongoError.create({message: "maxTimeMS must be a number", driver:true});
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.maxTimeMS = value;
	  return this;
	}

	define.classMethod('maxTimeMS', {callback: false, promise:false, returns: [Cursor]});

	Cursor.prototype.maxTimeMs = Cursor.prototype.maxTimeMS;

	define.classMethod('maxTimeMs', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Sets a field projection for the query.
	 * @method
	 * @param {object} value The field projection object.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.project = function(value) {
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  this.s.cmd.fields = value;
	  return this;
	}

	define.classMethod('project', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Sets the sort order of the cursor query.
	 * @method
	 * @param {(string|array|object)} keyOrList The key or keys set for the sort.
	 * @param {number} [direction] The direction of the sorting (1 or -1).
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.sort = function(keyOrList, direction) {
	  if(this.s.options.tailable) throw MongoError.create({message: "Tailable cursor doesn't support sorting", driver:true});
	  if(this.s.state == Cursor.CLOSED || this.s.state == Cursor.OPEN || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  var order = keyOrList;

	  if(direction != null) {
	    order = [[keyOrList, direction]];
	  }

	  this.s.cmd.sort = order;
	  this.sortValue = order;
	  return this;
	}

	define.classMethod('sort', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the batch size for the cursor.
	 * @method
	 * @param {number} value The batchSize for the cursor.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.batchSize = function(value) {
	  if(this.s.options.tailable) throw MongoError.create({message: "Tailable cursor doesn't support batchSize", driver:true});
	  if(this.s.state == Cursor.CLOSED || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  if(typeof value != 'number') throw MongoError.create({message: "batchSize requires an integer", driver:true});
	  this.s.cmd.batchSize = value;
	  this.setCursorBatchSize(value);
	  return this;
	}

	define.classMethod('batchSize', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the limit for the cursor.
	 * @method
	 * @param {number} value The limit for the cursor query.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.limit = function(value) {
	  if(this.s.options.tailable) throw MongoError.create({message: "Tailable cursor doesn't support limit", driver:true});
	  if(this.s.state == Cursor.OPEN || this.s.state == Cursor.CLOSED || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  if(typeof value != 'number') throw MongoError.create({message: "limit requires an integer", driver:true});
	  this.s.cmd.limit = value;
	  // this.cursorLimit = value;
	  this.setCursorLimit(value);
	  return this;
	}

	define.classMethod('limit', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Set the skip for the cursor.
	 * @method
	 * @param {number} value The skip for the cursor query.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.skip = function(value) {
	  if(this.s.options.tailable) throw MongoError.create({message: "Tailable cursor doesn't support skip", driver:true});
	  if(this.s.state == Cursor.OPEN || this.s.state == Cursor.CLOSED || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  if(typeof value != 'number') throw MongoError.create({message: "skip requires an integer", driver:true});
	  this.s.cmd.skip = value;
	  this.setCursorSkip(value);
	  return this;
	}

	define.classMethod('skip', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * The callback format for results
	 * @callback Cursor~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {(object|null|boolean)} result The result object if the command was executed successfully.
	 */

	/**
	 * Set the new batchSize of the cursor
	 * @function Cursor.prototype.setBatchSize
	 * @param {number} value The new batchSize for the cursor
	 * @return {null}
	 */

	/**
	 * Get the batchSize of the cursor
	 * @function Cursor.prototype.batchSize
	 * @param {number} value The current batchSize for the cursor
	 * @return {null}
	 */

	/**
	 * Set the new skip value of the cursor
	 * @function Cursor.prototype.setCursorSkip
	 * @param {number} value The new skip for the cursor
	 * @return {null}
	 */

	/**
	 * Get the skip value of the cursor
	 * @function Cursor.prototype.cursorSkip
	 * @param {number} value The current skip value for the cursor
	 * @return {null}
	 */

	/**
	 * Set the new limit value of the cursor
	 * @function Cursor.prototype.setCursorLimit
	 * @param {number} value The new limit for the cursor
	 * @return {null}
	 */

	/**
	 * Get the limit value of the cursor
	 * @function Cursor.prototype.cursorLimit
	 * @param {number} value The current limit value for the cursor
	 * @return {null}
	 */

	/**
	 * Clone the cursor
	 * @function external:CoreCursor#clone
	 * @return {Cursor}
	 */

	/**
	 * Resets the cursor
	 * @function external:CoreCursor#rewind
	 * @return {null}
	 */

	/**
	 * Get the next available document from the cursor, returns null if no more documents are available.
	 * @method
	 * @param {Cursor~resultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @deprecated
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.nextObject = Cursor.prototype.next;

	var nextObject = function(self, callback) {
	  if(self.s.state == Cursor.CLOSED || self.isDead()) return handleCallback(callback, MongoError.create({message: "Cursor is closed", driver:true}));
	  if(self.s.state == Cursor.INIT && self.s.cmd.sort) {
	    try {
	      self.s.cmd.sort = formattedOrderClause(self.s.cmd.sort);
	    } catch(err) {
	      return handleCallback(callback, err);
	    }
	  }

	  // Get the next object
	  self._next(function(err, doc) {
	    if(err && err.tailable && self.s.currentNumberOfRetries == 0) return callback(err);
	    if(err && err.tailable && self.s.currentNumberOfRetries > 0) {
	      self.s.currentNumberOfRetries = self.s.currentNumberOfRetries - 1;

	      return setTimeout(function() {
	        self.rewind();
	        self.nextObject(callback);
	      }, self.s.tailableRetryInterval);
	    }

	    self.s.state = Cursor.OPEN;
	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, null, doc);
	  });
	}

	define.classMethod('nextObject', {callback: true, promise:true});

	// Trampoline emptying the number of retrieved items
	// without incurring a nextTick operation
	var loop = function(self, callback) {
	  // No more items we are done
	  if(self.bufferedCount() == 0) return;
	  // Get the next document
	  self._next(callback);
	  // Loop
	  return loop;
	}

	/**
	 * Get the next available document from the cursor, returns null if no more documents are available.
	 * @method
	 * @param {Cursor~resultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @deprecated
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.next = Cursor.prototype.nextObject;

	define.classMethod('next', {callback: true, promise:true});

	/**
	 * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
	 * not all of the elements will be iterated if this cursor had been previouly accessed.
	 * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
	 * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
	 * at any given time if batch size is specified. Otherwise, the caller is responsible
	 * for making sure that the entire result can fit the memory.
	 * @method
	 * @deprecated
	 * @param {Cursor~resultCallback} callback The result callback.
	 * @throws {MongoError}
	 * @return {null}
	 */
	Cursor.prototype.each = function(callback) {
	  // Rewind cursor state
	  this.rewind();
	  // Set current cursor to INIT
	  this.s.state = Cursor.INIT;
	  // Run the query
	  _each(this, callback);
	};

	define.classMethod('each', {callback: true, promise:false});

	// Run the each loop
	var _each = function(self, callback) {
	  if(!callback) throw MongoError.create({message: 'callback is mandatory', driver:true});
	  if(self.isNotified()) return;
	  if(self.s.state == Cursor.CLOSED || self.isDead()) {
	    return handleCallback(callback, MongoError.create({message: "Cursor is closed", driver:true}));
	  }

	  if(self.s.state == Cursor.INIT) self.s.state = Cursor.OPEN;

	  // Define function to avoid global scope escape
	  var fn = null;
	  // Trampoline all the entries
	  if(self.bufferedCount() > 0) {
	    while(fn = loop(self, callback)) fn(self, callback);
	    _each(self, callback);
	  } else {
	    self.next(function(err, item) {
	      if(err) return handleCallback(callback, err);
	      if(item == null) {
	        self.s.state = Cursor.CLOSED;
	        return handleCallback(callback, null, null);
	      }

	      if(handleCallback(callback, null, item) == false) return;
	      _each(self, callback);
	    })
	  }
	}

	/**
	 * The callback format for the forEach iterator method
	 * @callback Cursor~iteratorCallback
	 * @param {Object} doc An emitted document for the iterator
	 */

	/**
	 * The callback error format for the forEach iterator method
	 * @callback Cursor~endCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 */

	/**
	 * Iterates over all the documents for this cursor using the iterator, callback pattern.
	 * @method
	 * @param {Cursor~iteratorCallback} iterator The iteration callback.
	 * @param {Cursor~endCallback} callback The end callback.
	 * @throws {MongoError}
	 * @return {null}
	 */
	Cursor.prototype.forEach = function(iterator, callback) {
	  this.each(function(err, doc){
	    if(err) { callback(err); return false; }
	    if(doc != null) { iterator(doc); return true; }
	    if(doc == null && callback) {
	      var internalCallback = callback;
	      callback = null;
	      internalCallback(null);
	      return false;
	    }
	  });
	}

	define.classMethod('forEach', {callback: true, promise:false});

	/**
	 * Set the ReadPreference for the cursor.
	 * @method
	 * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Cursor.prototype.setReadPreference = function(r) {
	  if(this.s.state != Cursor.INIT) throw MongoError.create({message: 'cannot change cursor readPreference after cursor has been accessed', driver:true});
	  if(r instanceof ReadPreference) {
	    this.s.options.readPreference = new CoreReadPreference(r.mode, r.tags);
	  } else {
	    this.s.options.readPreference = new CoreReadPreference(r);
	  }

	  return this;
	}

	define.classMethod('setReadPreference', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * The callback format for results
	 * @callback Cursor~toArrayResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {object[]} documents All the documents the satisfy the cursor.
	 */

	/**
	 * Returns an array of documents. The caller is responsible for making sure that there
	 * is enough memory to store the results. Note that the array only contain partial
	 * results when this cursor had been previouly accessed. In that case,
	 * cursor.rewind() can be used to reset the cursor.
	 * @method
	 * @param {Cursor~toArrayResultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.toArray = function(callback) {
	  var self = this;
	  if(self.s.options.tailable) throw MongoError.create({message: 'Tailable cursor cannot be converted to array', driver:true});

	  // Execute using callback
	  if(typeof callback == 'function') return toArray(self, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    toArray(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var toArray = function(self, callback) {
	  var items = [];

	  // Reset cursor
	  self.rewind();
	  self.s.state = Cursor.INIT;

	  // Fetch all the documents
	  var fetchDocs = function() {
	    self._next(function(err, doc) {
	      if(err) return handleCallback(callback, err);
	      if(doc == null) {
	        self.s.state = Cursor.CLOSED;
	        return handleCallback(callback, null, items);
	      }

	      // Add doc to items
	      items.push(doc)

	      // Get all buffered objects
	      if(self.bufferedCount() > 0) {
	        var docs = self.readBufferedDocuments(self.bufferedCount())

	        // Transform the doc if transform method added
	        if(self.s.transforms && typeof self.s.transforms.doc == 'function') {
	          docs = docs.map(self.s.transforms.doc);
	        }

	        items = items.concat(docs);
	      }

	      // Attempt a fetch
	      fetchDocs();
	    })
	  }

	  fetchDocs();
	}

	define.classMethod('toArray', {callback: true, promise:true});

	/**
	 * The callback format for results
	 * @callback Cursor~countResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {number} count The count of documents.
	 */

	/**
	 * Get the count of documents for this cursor
	 * @method
	 * @param {boolean} applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.
	 * @param {object} [options=null] Optional settings.
	 * @param {number} [options.skip=null] The number of documents to skip.
	 * @param {number} [options.limit=null] The maximum amounts to count before aborting.
	 * @param {number} [options.maxTimeMS=null] Number of miliseconds to wait before aborting the query.
	 * @param {string} [options.hint=null] An index name hint for the query.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {Cursor~countResultCallback} [callback] The result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.count = function(applySkipLimit, opts, callback) {
	  var self = this;
	  if(self.s.cmd.query == null) throw MongoError.create({message: "count can only be used with find command", driver:true});
	  if(typeof opts == 'function') callback = opts, opts = {};
	  opts = opts || {};

	  // Execute using callback
	  if(typeof callback == 'function') return count(self, applySkipLimit, opts, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    count(self, applySkipLimit, opts, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var count = function(self, applySkipLimit, opts, callback) {
	  if(typeof applySkipLimit == 'function') {
	    callback = applySkipLimit;
	    applySkipLimit = true;
	  }

	  if(applySkipLimit) {
	    if(typeof self.cursorSkip() == 'number') opts.skip = self.cursorSkip();
	    if(typeof self.cursorLimit() == 'number') opts.limit = self.cursorLimit();
	  }

	  // Command
	  var delimiter = self.s.ns.indexOf('.');

	  var command = {
	    'count': self.s.ns.substr(delimiter+1), 'query': self.s.cmd.query
	  }

	  if(typeof opts.maxTimeMS == 'number') {
	    command.maxTimeMS = opts.maxTimeMS;
	  } else if(typeof self.s.maxTimeMS == 'number') {
	    command.maxTimeMS = self.s.maxTimeMS;
	  }

	  // Get a server
	  var server = self.s.topology.getServer(opts);
	  // Get a connection
	  var connection = self.s.topology.getConnection(opts);
	  // Get the callbacks
	  var callbacks = server.getCallbacks();

	  // Merge in any options
	  if(opts.skip) command.skip = opts.skip;
	  if(opts.limit) command.limit = opts.limit;
	  if(self.s.options.hint) command.hint = self.s.options.hint;

	  // Build Query object
	  var query = new Query(self.s.bson, f("%s.$cmd", self.s.ns.substr(0, delimiter)), command, {
	      numberToSkip: 0, numberToReturn: -1
	    , checkKeys: false
	  });

	  // Set up callback
	  callbacks.register(query.requestId, function(err, result) {
	    if(err) return handleCallback(callback, err);
	    if(result.documents.length == 1
	      && (result.documents[0].errmsg
	      || result.documents[0].err
	      || result.documents[0]['$err'])) {
	      return handleCallback(callback, MongoError.create(result.documents[0]));
	    }
	    handleCallback(callback, null, result.documents[0].n);
	  });

	  // Write the initial command out
	  connection.write(query.toBin());
	}

	define.classMethod('count', {callback: true, promise:true});

	/**
	 * Close the cursor, sending a KillCursor command and emitting close.
	 * @method
	 * @param {Cursor~resultCallback} [callback] The result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.close = function(callback) {
	  this.s.state = Cursor.CLOSED;
	  // Kill the cursor
	  this.kill();
	  // Emit the close event for the cursor
	  this.emit('close');
	  // Callback if provided
	  if(typeof callback == 'function') return handleCallback(callback, null, this);
	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    resolve();
	  });
	}

	define.classMethod('close', {callback: true, promise:true});

	/**
	 * Map all documents using the provided function
	 * @method
	 * @param {function} [transform] The mapping transformation method.
	 * @return {null}
	 */
	Cursor.prototype.map = function(transform) {
	  this.cursorState.transforms = { doc: transform };
	  return this;
	}

	define.classMethod('map', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Is the cursor closed
	 * @method
	 * @return {boolean}
	 */
	Cursor.prototype.isClosed = function() {
	  return this.isDead();
	}

	define.classMethod('isClosed', {callback: false, promise:false, returns: [Boolean]});

	Cursor.prototype.destroy = function(err) {
	  this.pause();
	  this.close();
	  if(err) this.emit('error', err);
	}

	define.classMethod('destroy', {callback: false, promise:false});

	/**
	 * Return a modified Readable stream including a possible transform method.
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {function} [options.transform=null] A transformation method applied to each document emitted by the stream.
	 * @return {Cursor}
	 */
	Cursor.prototype.stream = function(options) {
	  this.s.streamOptions = options || {};
	  return this;
	}

	define.classMethod('stream', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Execute the explain for the cursor
	 * @method
	 * @param {Cursor~resultCallback} [callback] The result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Cursor.prototype.explain = function(callback) {
	  var self = this;
	  this.s.cmd.explain = true;

	  // Execute using callback
	  if(typeof callback == 'function') return this._next(callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self._next(function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('explain', {callback: true, promise:true});

	Cursor.prototype._read = function(n) {
	  var self = this;
	  if(self.s.state == Cursor.CLOSED || self.isDead()) {
	    return self.push(null);
	  }

	  // Get the next item
	  self.nextObject(function(err, result) {
	    if(err) {
	      if(!self.isDead()) self.close();
	      if(self.listeners('error') && self.listeners('error').length > 0) {
	        self.emit('error', err);
	      }

	      // Emit end event
	      self.emit('end');
	      return self.emit('finish');
	    }

	    // If we provided a transformation method
	    if(typeof self.s.streamOptions.transform == 'function' && result != null) {
	      return self.push(self.s.streamOptions.transform(result));
	    }

	    // If we provided a map function
	    if(self.cursorState.transforms && typeof self.cursorState.transforms.doc == 'function' && result != null) {
	      return self.push(self.cursorState.transforms.doc(result));
	    }

	    // Return the result
	    self.push(result);
	  });
	}

	Object.defineProperty(Cursor.prototype, 'namespace', {
	  enumerable: true,
	  get: function() {
	    if (!this || !this.s) {
	      return null;
	    }

	    // TODO: refactor this logic into core
	    var ns = this.s.ns || '';
	    var firstDot = ns.indexOf('.');
	    if (firstDot < 0) {
	      return {
	        database: this.s.ns,
	        collection: ''
	      };
	    }
	    return {
	      database: ns.substr(0, firstDot),
	      collection: ns.substr(firstDot + 1)
	    };
	  }
	});

	/**
	 * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.
	 * @function external:Readable#read
	 * @param {number} size Optional argument to specify how much data to read.
	 * @return {(String | Buffer | null)}
	 */

	/**
	 * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.
	 * @function external:Readable#setEncoding
	 * @param {string} encoding The encoding to use.
	 * @return {null}
	 */

	/**
	 * This method will cause the readable stream to resume emitting data events.
	 * @function external:Readable#resume
	 * @return {null}
	 */

	/**
	 * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.
	 * @function external:Readable#pause
	 * @return {null}
	 */

	/**
	 * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.
	 * @function external:Readable#pipe
	 * @param {Writable} destination The destination for writing data
	 * @param {object} [options] Pipe options
	 * @return {null}
	 */

	/**
	 * This method will remove the hooks set up for a previous pipe() call.
	 * @function external:Readable#unpipe
	 * @param {Writable} [destination] The destination for writing data
	 * @return {null}
	 */

	/**
	 * This is useful in certain cases where a stream is being consumed by a parser, which needs to "un-consume" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.
	 * @function external:Readable#unshift
	 * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.
	 * @return {null}
	 */

	/**
	 * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See "Compatibility" below for more information.)
	 * @function external:Readable#wrap
	 * @param {Stream} stream An "old style" readable stream.
	 * @return {null}
	 */

	Cursor.INIT = 0;
	Cursor.OPEN = 1;
	Cursor.CLOSED = 2;
	Cursor.GET_MORE = 3;

	module.exports = Cursor;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   2.1.1
	 */

	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }

	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }

	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }

	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }

	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$toString = {}.toString;
	    var lib$es6$promise$asap$$vertxNext;
	    function lib$es6$promise$asap$$asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        lib$es6$promise$asap$$scheduleFlush();
	      }
	    }

	    var lib$es6$promise$asap$$default = lib$es6$promise$asap$$asap;

	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';

	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      var nextTick = process.nextTick;
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // setImmediate should be used instead instead
	      var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
	      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
	        nextTick = setImmediate;
	      }
	      return function() {
	        nextTick(lib$es6$promise$asap$$flush);
	      };
	    }

	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }

	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });

	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }

	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }

	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }

	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];

	        callback(arg);

	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }

	      lib$es6$promise$asap$$len = 0;
	    }

	    function lib$es6$promise$asap$$attemptVertex() {
	      try {
	        var r = require;
	        var vertx = __webpack_require__(235);
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }

	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }

	    function lib$es6$promise$$internal$$noop() {}

	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;

	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$selfFullfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }

	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }

	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }

	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$default(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;

	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));

	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }

	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }

	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }

	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }

	      lib$es6$promise$$internal$$publish(promise);
	    }

	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;

	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publish, promise);
	      }
	    }

	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;

	      lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publishRejection, promise);
	    }

	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;

	      parent._onerror = null;

	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publish, parent);
	      }
	    }

	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;

	      if (subscribers.length === 0) { return; }

	      var child, callback, detail = promise._result;

	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];

	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }

	      promise._subscribers.length = 0;
	    }

	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }

	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;

	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }

	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }

	      } else {
	        value = detail;
	        succeeded = true;
	      }

	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }

	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      var enumerator = this;

	      enumerator._instanceConstructor = Constructor;
	      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (enumerator._validateInput(input)) {
	        enumerator._input     = input;
	        enumerator.length     = input.length;
	        enumerator._remaining = input.length;

	        enumerator._init();

	        if (enumerator.length === 0) {
	          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	        } else {
	          enumerator.length = enumerator.length || 0;
	          enumerator._enumerate();
	          if (enumerator._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
	      }
	    }

	    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return lib$es6$promise$utils$$isArray(input);
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };

	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var enumerator = this;

	      var length  = enumerator.length;
	      var promise = enumerator.promise;
	      var input   = enumerator._input;

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        enumerator._eachEntry(input[i], i);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var enumerator = this;
	      var c = enumerator._instanceConstructor;

	      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
	          entry._onerror = null;
	          enumerator._settledAt(entry._state, i, entry._result);
	        } else {
	          enumerator._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        enumerator._remaining--;
	        enumerator._result[i] = entry;
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var enumerator = this;
	      var promise = enumerator.promise;

	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        enumerator._remaining--;

	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          enumerator._result[i] = value;
	        }
	      }

	      if (enumerator._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;

	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }

	      var length = entries.length;

	      function onFulfillment(value) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      }

	      function onRejection(reason) {
	        lib$es6$promise$$internal$$reject(promise, reason);
	      }

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }

	      return promise;
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

	    var lib$es6$promise$promise$$counter = 0;

	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }

	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }

	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise’s eventual value or the reason
	      why the promise cannot be fulfilled.

	      Terminology
	      -----------

	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.

	      A promise can be in one of three states: pending, fulfilled, or rejected.

	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.

	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.


	      Basic Usage:
	      ------------

	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);

	        // on failure
	        reject(reason);
	      });

	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Advanced Usage:
	      ---------------

	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.

	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();

	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();

	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }

	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Unlike callbacks, promises are great composable primitives.

	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON

	        return values;
	      });
	      ```

	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this._id = lib$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];

	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        if (!lib$es6$promise$utils$$isFunction(resolver)) {
	          lib$es6$promise$promise$$needsResolver();
	        }

	        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
	          lib$es6$promise$promise$$needsNew();
	        }

	        lib$es6$promise$$internal$$initializePromise(this, resolver);
	      }
	    }

	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;

	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,

	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.

	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```

	      Chaining
	      --------

	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.

	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });

	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```

	      Assimilation
	      ------------

	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```

	      If the assimliated promise rejects, then the downstream promise will also reject.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```

	      Simple Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var result;

	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```

	      Advanced Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var author, books;

	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js

	      function foundBooks(books) {

	      }

	      function failure(reason) {

	      }

	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;

	        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
	          return this;
	        }

	        var child = new this.constructor(lib$es6$promise$$internal$$noop);
	        var result = parent._result;

	        if (state) {
	          var callback = arguments[state - 1];
	          lib$es6$promise$asap$$default(function(){
	            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }

	        return child;
	      },

	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.

	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }

	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }

	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;

	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }

	      var P = local.Promise;

	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }

	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };

	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(236)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }

	    lib$es6$promise$polyfill$$default();
	}).call(this);


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(172).setImmediate, (function() { return this; }()), __webpack_require__(43)(module)))

/***/ },
/* 235 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 236 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , toError = __webpack_require__(220).toError
	  , getSingleProperty = __webpack_require__(220).getSingleProperty
	  , formattedOrderClause = __webpack_require__(220).formattedOrderClause
	  , handleCallback = __webpack_require__(220).handleCallback
	  , Logger = __webpack_require__(167).Logger
	  , EventEmitter = __webpack_require__(19).EventEmitter
	  , ReadPreference = __webpack_require__(221)
	  , MongoError = __webpack_require__(167).MongoError
	  , Readable = __webpack_require__(21).Readable || __webpack_require__(222).Readable
	  , Define = __webpack_require__(232)
	  , CoreCursor = __webpack_require__(233)
	  , Query = __webpack_require__(167).Query
	  , CoreReadPreference = __webpack_require__(167).ReadPreference;

	/**
	 * @fileOverview The **CommandCursor** class is an internal class that embodies a
	 * generalized cursor based on a MongoDB command allowing for iteration over the
	 * results returned. It supports one by one document iteration, conversion to an
	 * array or can be iterated as a Node 0.10.X or higher stream
	 *
	 * **CommandCursor Cannot directly be instantiated**
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   test = require('assert');
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   // Create a collection we want to drop later
	 *   var col = db.collection('listCollectionsExample1');
	 *   // Insert a bunch of documents
	 *   col.insert([{a:1, b:1}
	 *     , {a:2, b:2}, {a:3, b:3}
	 *     , {a:4, b:4}], {w:1}, function(err, result) {
	 *     test.equal(null, err);
	 *
	 *     // List the database collections available
	 *     db.listCollections().toArray(function(err, items) {
	 *       test.equal(null, err);
	 *       db.close();
	 *     });
	 *   });
	 * });
	 */

	/**
	 * Namespace provided by the browser.
	 * @external Readable
	 */

	/**
	 * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)
	 * @class CommandCursor
	 * @extends external:Readable
	 * @fires CommandCursor#data
	 * @fires CommandCursor#end
	 * @fires CommandCursor#close
	 * @fires CommandCursor#readable
	 * @return {CommandCursor} an CommandCursor instance.
	 */
	var CommandCursor = function(bson, ns, cmd, options, topology, topologyOptions) {
	  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));
	  var self = this;
	  var state = CommandCursor.INIT;
	  var streamOptions = {};

	  // MaxTimeMS
	  var maxTimeMS = null;

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Set up
	  Readable.call(this, {objectMode: true});

	  // Internal state
	  this.s = {
	    // MaxTimeMS
	      maxTimeMS: maxTimeMS
	    // State
	    , state: state
	    // Stream options
	    , streamOptions: streamOptions
	    // BSON
	    , bson: bson
	    // Namespae
	    , ns: ns
	    // Command
	    , cmd: cmd
	    // Options
	    , options: options
	    // Topology
	    , topology: topology
	    // Topology Options
	    , topologyOptions: topologyOptions
	    // Promise library
	    , promiseLibrary: promiseLibrary
	  }
	}

	/**
	 * CommandCursor stream data event, fired for each document in the cursor.
	 *
	 * @event CommandCursor#data
	 * @type {object}
	 */

	/**
	 * CommandCursor stream end event
	 *
	 * @event CommandCursor#end
	 * @type {null}
	 */

	/**
	 * CommandCursor stream close event
	 *
	 * @event CommandCursor#close
	 * @type {null}
	 */

	/**
	 * CommandCursor stream readable event
	 *
	 * @event CommandCursor#readable
	 * @type {null}
	 */

	// Inherit from Readable
	inherits(CommandCursor, Readable);

	// Set the methods to inherit from prototype
	var methodsToInherit = ['_next', 'next', 'each', 'forEach', 'toArray'
	  , 'rewind', 'bufferedCount', 'readBufferedDocuments', 'close', 'isClosed', 'kill'
	  , '_find', '_getmore', '_killcursor', 'isDead', 'explain', 'isNotified', 'isKilled'];

	// Only inherit the types we need
	for(var i = 0; i < methodsToInherit.length; i++) {
	  CommandCursor.prototype[methodsToInherit[i]] = CoreCursor.prototype[methodsToInherit[i]];
	}

	var define = CommandCursor.define = new Define('CommandCursor', CommandCursor, true);

	/**
	 * Set the batch size for the cursor.
	 * @method
	 * @param {number} value The batchSize for the cursor.
	 * @throws {MongoError}
	 * @return {CommandCursor}
	 */
	CommandCursor.prototype.batchSize = function(value) {
	  if(this.s.state == CommandCursor.CLOSED || this.isDead()) throw MongoError.create({message: "Cursor is closed", driver:true});
	  if(typeof value != 'number') throw MongoError.create({message: "batchSize requires an integer", driver:true});
	  if(this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;
	  this.setCursorBatchSize(value);
	  return this;
	}

	define.classMethod('batchSize', {callback: false, promise:false, returns: [CommandCursor]});

	/**
	 * Add a maxTimeMS stage to the aggregation pipeline
	 * @method
	 * @param {number} value The state maxTimeMS value.
	 * @return {CommandCursor}
	 */
	CommandCursor.prototype.maxTimeMS = function(value) {
	  if(this.s.topology.lastIsMaster().minWireVersion > 2) {
	    this.s.cmd.maxTimeMS = value;
	  }
	  return this;
	}

	define.classMethod('maxTimeMS', {callback: false, promise:false, returns: [CommandCursor]});

	CommandCursor.prototype.get = CommandCursor.prototype.toArray;

	define.classMethod('get', {callback: true, promise:false});

	// Inherited methods
	define.classMethod('toArray', {callback: true, promise:true});
	define.classMethod('each', {callback: true, promise:false});
	define.classMethod('forEach', {callback: true, promise:false});
	define.classMethod('next', {callback: true, promise:true});
	define.classMethod('close', {callback: true, promise:true});
	define.classMethod('isClosed', {callback: false, promise:false, returns: [Boolean]});
	define.classMethod('rewind', {callback: false, promise:false});
	define.classMethod('bufferedCount', {callback: false, promise:false, returns: [Number]});
	define.classMethod('readBufferedDocuments', {callback: false, promise:false, returns: [Array]});

	/**
	 * Get the next available document from the cursor, returns null if no more documents are available.
	 * @function CommandCursor.prototype.next
	 * @param {CommandCursor~resultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */

	/**
	 * Set the new batchSize of the cursor
	 * @function CommandCursor.prototype.setBatchSize
	 * @param {number} value The new batchSize for the cursor
	 * @return {null}
	 */

	/**
	 * Get the batchSize of the cursor
	 * @function CommandCursor.prototype.batchSize
	 * @param {number} value The current batchSize for the cursor
	 * @return {null}
	 */

	/**
	 * The callback format for results
	 * @callback CommandCursor~toArrayResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {object[]} documents All the documents the satisfy the cursor.
	 */

	/**
	 * Returns an array of documents. The caller is responsible for making sure that there
	 * is enough memory to store the results. Note that the array only contain partial
	 * results when this cursor had been previouly accessed.
	 * @method CommandCursor.prototype.toArray
	 * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */

	/**
	 * The callback format for results
	 * @callback CommandCursor~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {(object|null)} result The result object if the command was executed successfully.
	 */

	/**
	 * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
	 * not all of the elements will be iterated if this cursor had been previouly accessed.
	 * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
	 * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
	 * at any given time if batch size is specified. Otherwise, the caller is responsible
	 * for making sure that the entire result can fit the memory.
	 * @method CommandCursor.prototype.each
	 * @param {CommandCursor~resultCallback} callback The result callback.
	 * @throws {MongoError}
	 * @return {null}
	 */

	/**
	 * Close the cursor, sending a KillCursor command and emitting close.
	 * @method CommandCursor.prototype.close
	 * @param {CommandCursor~resultCallback} [callback] The result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */

	/**
	 * Is the cursor closed
	 * @method CommandCursor.prototype.isClosed
	 * @return {boolean}
	 */

	/**
	 * Clone the cursor
	 * @function CommandCursor.prototype.clone
	 * @return {CommandCursor}
	 */

	/**
	 * Resets the cursor
	 * @function CommandCursor.prototype.rewind
	 * @return {CommandCursor}
	 */

	/**
	 * The callback format for the forEach iterator method
	 * @callback CommandCursor~iteratorCallback
	 * @param {Object} doc An emitted document for the iterator
	 */

	/**
	 * The callback error format for the forEach iterator method
	 * @callback CommandCursor~endCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 */

	/*
	 * Iterates over all the documents for this cursor using the iterator, callback pattern.
	 * @method CommandCursor.prototype.forEach
	 * @param {CommandCursor~iteratorCallback} iterator The iteration callback.
	 * @param {CommandCursor~endCallback} callback The end callback.
	 * @throws {MongoError}
	 * @return {null}
	 */

	CommandCursor.INIT = 0;
	CommandCursor.OPEN = 1;
	CommandCursor.CLOSED = 2;

	module.exports = CommandCursor;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var common = __webpack_require__(239)
		, utils = __webpack_require__(220)
	  , toError = __webpack_require__(220).toError
		, f = __webpack_require__(10).format
		, shallowClone = utils.shallowClone
	  , WriteError = common.WriteError
	  , BulkWriteResult = common.BulkWriteResult
	  , LegacyOp = common.LegacyOp
	  , ObjectID = __webpack_require__(167).BSON.ObjectID
	  , Define = __webpack_require__(232)
	  , Batch = common.Batch
	  , mergeBatchResults = common.mergeBatchResults;

	/**
	 * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly)
	 * @class
	 * @return {FindOperatorsOrdered} a FindOperatorsOrdered instance.
	 */
	var FindOperatorsOrdered = function(self) {
	  this.s = self.s;
	}

	/**
	 * Add a single update document to the bulk operation
	 *
	 * @method
	 * @param {object} doc update operations
	 * @throws {MongoError}
	 * @return {OrderedBulkOperation}
	 */
	FindOperatorsOrdered.prototype.update = function(updateDocument) {
	  // Perform upsert
	  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;

	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , u: updateDocument
	    , multi: true
	    , upsert: upsert
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the update document to the list
	  return addToOperationsList(this, common.UPDATE, document);
	}

	/**
	 * Add a single update one document to the bulk operation
	 *
	 * @method
	 * @param {object} doc update operations
	 * @throws {MongoError}
	 * @return {OrderedBulkOperation}
	 */
	FindOperatorsOrdered.prototype.updateOne = function(updateDocument) {
	  // Perform upsert
	  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;

	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , u: updateDocument
	    , multi: false
	    , upsert: upsert
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the update document to the list
	  return addToOperationsList(this, common.UPDATE, document);
	}

	/**
	 * Add a replace one operation to the bulk operation
	 *
	 * @method
	 * @param {object} doc the new document to replace the existing one with
	 * @throws {MongoError}
	 * @return {OrderedBulkOperation}
	 */
	FindOperatorsOrdered.prototype.replaceOne = function(updateDocument) {
	  this.updateOne(updateDocument);
	}

	/**
	 * Upsert modifier for update bulk operation
	 *
	 * @method
	 * @throws {MongoError}
	 * @return {FindOperatorsOrdered}
	 */
	FindOperatorsOrdered.prototype.upsert = function() {
	  this.s.currentOp.upsert = true;
	  return this;
	}

	/**
	 * Add a remove one operation to the bulk operation
	 *
	 * @method
	 * @throws {MongoError}
	 * @return {OrderedBulkOperation}
	 */
	FindOperatorsOrdered.prototype.deleteOne = function() {
	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , limit: 1
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the remove document to the list
	  return addToOperationsList(this, common.REMOVE, document);
	}

	// Backward compatibility
	FindOperatorsOrdered.prototype.removeOne = FindOperatorsOrdered.prototype.deleteOne;

	/**
	 * Add a remove operation to the bulk operation
	 *
	 * @method
	 * @throws {MongoError}
	 * @return {OrderedBulkOperation}
	 */
	FindOperatorsOrdered.prototype.delete = function() {
	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , limit: 0
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the remove document to the list
	  return addToOperationsList(this, common.REMOVE, document);
	}

	// Backward compatibility
	FindOperatorsOrdered.prototype.remove = FindOperatorsOrdered.prototype.delete;

	// Add to internal list of documents
	var addToOperationsList = function(_self, docType, document) {
	  // Get the bsonSize
	  var bsonSize = _self.s.bson.calculateObjectSize(document, false);

	  // Throw error if the doc is bigger than the max BSON size
	  if(bsonSize >= _self.s.maxBatchSizeBytes) throw toError("document is larger than the maximum size " + _self.s.maxBatchSizeBytes);
	  // Create a new batch object if we don't have a current one
	  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);

	  // Check if we need to create a new batch
	  if(((_self.s.currentBatchSize + 1) >= _self.s.maxWriteBatchSize)
	    || ((_self.s.currentBatchSizeBytes +  _self.s.currentBatchSizeBytes) >= _self.s.maxBatchSizeBytes)
	    || (_self.s.currentBatch.batchType != docType)) {
	    // Save the batch to the execution stack
	    _self.s.batches.push(_self.s.currentBatch);

	    // Create a new batch
	    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);

	    // Reset the current size trackers
	    _self.s.currentBatchSize = 0;
	    _self.s.currentBatchSizeBytes = 0;
	  } else {
	    // Update current batch size
	    _self.s.currentBatchSize = _self.s.currentBatchSize + 1;
	    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;
	  }

	  if(docType == common.INSERT) {
	    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});
	  }

	  // We have an array of documents
	  if(Array.isArray(document)) {
	    throw toError("operation passed in cannot be an Array");
	  } else {
	    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);
	    _self.s.currentBatch.operations.push(document)
	    _self.s.currentIndex = _self.s.currentIndex + 1;
	  }

	  // Return self
	  return _self;
	}

	/**
	 * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)
	 * @class
	 * @property {number} length Get the number of operations in the bulk.
	 * @return {OrderedBulkOperation} a OrderedBulkOperation instance.
	 */
	function OrderedBulkOperation(topology, collection, options) {
		options = options == null ? {} : options;
		// TODO Bring from driver information in isMaster
		var self = this;
		var executed = false;

		// Current item
		var currentOp = null;

		// Handle to the bson serializer, used to calculate running sizes
		var bson = topology.bson;

		// Namespace for the operation
	  var namespace = collection.collectionName;

	  // Set max byte size
		var maxBatchSizeBytes = topology.isMasterDoc.maxBsonObjectSize;
		var maxWriteBatchSize = topology.isMasterDoc.maxWriteBatchSize || 1000;

		// Get the capabilities
		var capabilities = topology.capabilities();

	  // Get the write concern
	  var writeConcern = common.writeConcern(shallowClone(options), collection, options);

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Current batch
	  var currentBatch = null;
	  var currentIndex = 0;
	  var currentBatchSize = 0;
	  var currentBatchSizeBytes = 0;
	  var batches = [];

	  // Final results
	  var bulkResult = {
	  	  ok: 1
	    , writeErrors: []
	    , writeConcernErrors: []
	    , insertedIds: []
	    , nInserted: 0
	    , nUpserted: 0
	    , nMatched: 0
	    , nModified: 0
	    , nRemoved: 0
	    , upserted: []
	  };

	  // Internal state
	  this.s = {
	    // Final result
	      bulkResult: bulkResult
	    // Current batch state
	    , currentBatch: null
	    , currentIndex: 0
	    , currentBatchSize: 0
	    , currentBatchSizeBytes: 0
	    , batches: []
	    // Write concern
	    , writeConcern: writeConcern
	    // Capabilities
	    , capabilities: capabilities
	    // Max batch size options
	    , maxBatchSizeBytes: maxBatchSizeBytes
	    , maxWriteBatchSize: maxWriteBatchSize
	    // Namespace
	    , namespace: namespace
	    // BSON
	    , bson: bson
	    // Topology
	    , topology: topology
	    // Options
	    , options: options
	    // Current operation
	    , currentOp: currentOp
	    // Executed
	    , executed: executed
	    // Collection
	    , collection: collection
	    // Promise Library
	    , promiseLibrary: promiseLibrary
			// Fundamental error
			, err: null
	    // Bypass validation
	    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false
	  }
	}

	var define = OrderedBulkOperation.define = new Define('OrderedBulkOperation', OrderedBulkOperation, false);

	OrderedBulkOperation.prototype.raw = function(op) {
	  var key = Object.keys(op)[0];

	  // Set up the force server object id
	  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'
	    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;

	  // Update operations
	  if((op.updateOne && op.updateOne.q)
	    || (op.updateMany && op.updateMany.q)
	    || (op.replaceOne && op.replaceOne.q)) {
	    op[key].multi = op.updateOne || op.replaceOne ? false : true;
	    return addToOperationsList(this, common.UPDATE, op[key]);
	  }

	  // Crud spec update format
	  if(op.updateOne || op.updateMany || op.replaceOne) {
	    var multi = op.updateOne || op.replaceOne ? false : true;
	    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}
	    if(op[key].upsert) operation.upsert = true;
	    return addToOperationsList(this, common.UPDATE, operation);
	  }

	  // Remove operations
	  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {
	    op[key].limit = op.removeOne ? 1 : 0;
	    return addToOperationsList(this, common.REMOVE, op[key]);
	  }

	  // Crud spec delete operations, less efficient
	  if(op.deleteOne || op.deleteMany) {
	    var limit = op.deleteOne ? 1 : 0;
	    var operation = {q: op[key].filter, limit: limit}
	    return addToOperationsList(this, common.REMOVE, operation);
	  }

	  // Insert operations
	  if(op.insertOne && op.insertOne.document == null) {
	    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();
	    return addToOperationsList(this, common.INSERT, op.insertOne);
	  } else if(op.insertOne && op.insertOne.document) {
	    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();
	    return addToOperationsList(this, common.INSERT, op.insertOne.document);
	  }

	  if(op.insertMany) {
	    for(var i = 0; i < op.insertMany.length; i++) {
	      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();
	      addToOperationsList(this, common.INSERT, op.insertMany[i]);
	    }

	    return;
	  }

	  // No valid type of operation
	  throw toError("bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany");
	}

	/**
	 * Add a single insert document to the bulk operation
	 *
	 * @param {object} doc the document to insert
	 * @throws {MongoError}
	 * @return {OrderedBulkOperation}
	 */
	OrderedBulkOperation.prototype.insert = function(document) {
	  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();
	  return addToOperationsList(this, common.INSERT, document);
	}

	/**
	 * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne
	 *
	 * @method
	 * @param {object} selector The selector for the bulk operation.
	 * @throws {MongoError}
	 * @return {FindOperatorsOrdered}
	 */
	OrderedBulkOperation.prototype.find = function(selector) {
	  if (!selector) {
	    throw toError("Bulk find operation must specify a selector");
	  }

	  // Save a current selector
	  this.s.currentOp = {
	    selector: selector
	  }

	  return new FindOperatorsOrdered(this);
	}

	Object.defineProperty(OrderedBulkOperation.prototype, 'length', {
	  enumerable: true,
	  get: function() {
	    return this.s.currentIndex;
	  }
	});

	//
	// Execute next write command in a chain
	var executeCommands = function(self, callback) {
	  if(self.s.batches.length == 0) {
	    return callback(null, new BulkWriteResult(self.s.bulkResult));
	  }

	  // Ordered execution of the command
	  var batch = self.s.batches.shift();

	  var resultHandler = function(err, result) {
			// Error is a driver related error not a bulk op error, terminate
			if(err && err.driver || err && err.message) {
				return callback(err);
			}

	    // If we have and error
	    if(err) err.ok = 0;
	    // Merge the results together
	    var mergeResult = mergeBatchResults(true, batch, self.s.bulkResult, err, result);
	    if(mergeResult != null) {
	      return callback(null, new BulkWriteResult(self.s.bulkResult));
	    }

	    // If we are ordered and have errors and they are
	    // not all replication errors terminate the operation
	    if(self.s.bulkResult.writeErrors.length > 0) {
	      return callback(toError(self.s.bulkResult.writeErrors[0]), new BulkWriteResult(self.s.bulkResult));
	    }

	    // Execute the next command in line
	    executeCommands(self, callback);
	  }

	  var finalOptions = {ordered: true}
	  if(self.s.writeConcern != null) {
	    finalOptions.writeConcern = self.s.writeConcern;
	  }

		// Set an operationIf if provided
		if(self.operationId) {
			resultHandler.operationId = self.operationId;
		}

		// Serialize functions
		if(self.s.options.serializeFunctions) {
			finalOptions.serializeFunctions = true
		}

	  // Serialize functions
	  if(self.s.options.ignoreUndefined) {
	    finalOptions.ignoreUndefined = true
	  }

	  // Is the bypassDocumentValidation options specific
	  if(self.s.bypassDocumentValidation == true) {
	    finalOptions.bypassDocumentValidation = true;
	  }

	  try {
	    if(batch.batchType == common.INSERT) {
	      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
	    } else if(batch.batchType == common.UPDATE) {
	      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
	    } else if(batch.batchType == common.REMOVE) {
	      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
	    }
	  } catch(err) {
	    // Force top level error
	    err.ok = 0;
	    // Merge top level error and return
	    callback(null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));
	  }
	}

	/**
	 * The callback format for results
	 * @callback OrderedBulkOperation~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {BulkWriteResult} result The bulk write result.
	 */

	/**
	 * Execute the ordered bulk operation
	 *
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.fsync=false] Specify a file sync write concern.
	 * @param {OrderedBulkOperation~resultCallback} [callback] The result callback
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */
	OrderedBulkOperation.prototype.execute = function(_writeConcern, callback) {
	  var self = this;
	  if(this.s.executed) throw new toError("batch cannot be re-executed");
	  if(typeof _writeConcern == 'function') {
	    callback = _writeConcern;
	  } else {
	    this.s.writeConcern = _writeConcern;
	  }

	  // If we have current batch
	  if(this.s.currentBatch) this.s.batches.push(this.s.currentBatch);

	  // If we have no operations in the bulk raise an error
	  if(this.s.batches.length == 0) {
	    throw toError("Invalid Operation, No operations in bulk");
	  }

	  // Execute using callback
	  if(typeof callback == 'function') {
			return executeCommands(this, callback);
		}

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    executeCommands(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('execute', {callback: true, promise:false});

	/**
	 * Returns an unordered batch object
	 * @ignore
	 */
	var initializeOrderedBulkOp = function(topology, collection, options) {
		return new OrderedBulkOperation(topology, collection, options);
	}

	initializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;
	module.exports = initializeOrderedBulkOp;
	module.exports.Bulk = OrderedBulkOperation;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var utils = __webpack_require__(220);

	// Error codes
	var UNKNOWN_ERROR = 8;
	var INVALID_BSON_ERROR = 22;
	var WRITE_CONCERN_ERROR = 64;
	var MULTIPLE_ERROR = 65;

	// Insert types
	var INSERT = 1;
	var UPDATE = 2;
	var REMOVE = 3


	// Get write concern
	var writeConcern = function(target, col, options) {
	  if(options.w != null || options.j != null || options.fsync != null) {
	    target.writeConcern = options;
	  } else if(col.writeConcern.w != null || col.writeConcern.j != null || col.writeConcern.fsync != null) {
	    target.writeConcern = col.writeConcern;
	  }

	  return target
	}

	/**
	 * Helper function to define properties
	 * @ignore
	 */
	var defineReadOnlyProperty = function(self, name, value) {
	  Object.defineProperty(self, name, {
	      enumerable: true
	    , get: function() {
	      return value;
	    }
	  });
	}

	/**
	 * Keeps the state of a unordered batch so we can rewrite the results
	 * correctly after command execution
	 * @ignore
	 */
	var Batch = function(batchType, originalZeroIndex) {
	  this.originalZeroIndex = originalZeroIndex;
	  this.currentIndex = 0;
	  this.originalIndexes = [];
	  this.batchType = batchType;
	  this.operations = [];
	  this.size = 0;
	  this.sizeBytes = 0;
	}

	/**
	 * Wraps a legacy operation so we can correctly rewrite it's error
	 * @ignore
	 */
	var LegacyOp = function(batchType, operation, index) {
	  this.batchType = batchType;
	  this.index = index;
	  this.operation = operation;
	}

	/**
	 * Create a new BulkWriteResult instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * @class
	 * @property {boolean} ok Did bulk operation correctly execute
	 * @property {number} nInserted number of inserted documents
	 * @property {number} nUpdated number of documents updated logically
	 * @property {number} nUpserted Number of upserted documents
	 * @property {number} nModified Number of documents updated physically on disk
	 * @property {number} nRemoved Number of removed documents
	 * @return {BulkWriteResult} a BulkWriteResult instance
	 */
	var BulkWriteResult = function(bulkResult) {
	  defineReadOnlyProperty(this, "ok", bulkResult.ok);
	  defineReadOnlyProperty(this, "nInserted", bulkResult.nInserted);
	  defineReadOnlyProperty(this, "nUpserted", bulkResult.nUpserted);
	  defineReadOnlyProperty(this, "nMatched", bulkResult.nMatched);
	  defineReadOnlyProperty(this, "nModified", bulkResult.nModified);
	  defineReadOnlyProperty(this, "nRemoved", bulkResult.nRemoved);

	  /**
	   * Return an array of inserted ids
	   *
	   * @return {object[]}
	   */
	  this.getInsertedIds = function() {
	    return bulkResult.insertedIds;
	  }

	  /**
	   * Return an array of upserted ids
	   *
	   * @return {object[]}
	   */
	  this.getUpsertedIds = function() {
	    return bulkResult.upserted;
	  }

	  /**
	   * Return the upserted id at position x
	   *
	   * @param {number} index the number of the upserted id to return, returns undefined if no result for passed in index
	   * @return {object}
	   */
	  this.getUpsertedIdAt = function(index) {
	    return bulkResult.upserted[index];
	  }

	  /**
	   * Return raw internal result
	   *
	   * @return {object}
	   */
	  this.getRawResponse = function() {
	    return bulkResult;
	  }

	  /**
	   * Returns true if the bulk operation contains a write error
	   *
	   * @return {boolean}
	   */
	  this.hasWriteErrors = function() {
	    return bulkResult.writeErrors.length > 0;
	  }

	  /**
	   * Returns the number of write errors off the bulk operation
	   *
	   * @return {number}
	   */
	  this.getWriteErrorCount = function() {
	    return bulkResult.writeErrors.length;
	  }

	  /**
	   * Returns a specific write error object
	   *
	   * @return {WriteError}
	   */
	  this.getWriteErrorAt = function(index) {
	    if(index < bulkResult.writeErrors.length) {
	      return bulkResult.writeErrors[index];
	    }
	    return null;
	  }

	  /**
	   * Retrieve all write errors
	   *
	   * @return {object[]}
	   */
	  this.getWriteErrors = function() {
	    return bulkResult.writeErrors;
	  }

	  /**
	   * Retrieve lastOp if available
	   *
	   * @return {object}
	   */
	  this.getLastOp = function() {
	    return bulkResult.lastOp;
	  }

	  /**
	   * Retrieve the write concern error if any
	   *
	   * @return {WriteConcernError}
	   */
	  this.getWriteConcernError = function() {
	    if(bulkResult.writeConcernErrors.length == 0) {
	      return null;
	    } else if(bulkResult.writeConcernErrors.length == 1) {
	      // Return the error
	      return bulkResult.writeConcernErrors[0];
	    } else {

	      // Combine the errors
	      var errmsg = "";
	      for(var i = 0; i < bulkResult.writeConcernErrors.length; i++) {
	        var err = bulkResult.writeConcernErrors[i];
	        errmsg = errmsg + err.errmsg;

	        // TODO: Something better
	        if(i == 0) errmsg = errmsg + " and ";
	      }

	      return new WriteConcernError({ errmsg : errmsg, code : WRITE_CONCERN_ERROR });
	    }
	  }

	  this.toJSON = function() {
	    return bulkResult;
	  }

	  this.toString = function() {
	    return "BulkWriteResult(" + this.toJSON(bulkResult) + ")";
	  }

	  this.isOk = function() {
	    return bulkResult.ok == 1;
	  }
	}

	/**
	 * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * @class
	 * @property {number} code Write concern error code.
	 * @property {string} errmsg Write concern error message.
	 * @return {WriteConcernError} a WriteConcernError instance
	 */
	var WriteConcernError = function(err) {
	  if(!(this instanceof WriteConcernError)) return new WriteConcernError(err);

	  // Define properties
	  defineReadOnlyProperty(this, "code", err.code);
	  defineReadOnlyProperty(this, "errmsg", err.errmsg);

	  this.toJSON = function() {
	    return {code: err.code, errmsg: err.errmsg};
	  }

	  this.toString = function() {
	    return "WriteConcernError(" + err.errmsg + ")";
	  }
	}

	/**
	 * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * @class
	 * @property {number} code Write concern error code.
	 * @property {number} index Write concern error original bulk operation index.
	 * @property {string} errmsg Write concern error message.
	 * @return {WriteConcernError} a WriteConcernError instance
	 */
	var WriteError = function(err) {
	  if(!(this instanceof WriteError)) return new WriteError(err);

	  // Define properties
	  defineReadOnlyProperty(this, "code", err.code);
	  defineReadOnlyProperty(this, "index", err.index);
	  defineReadOnlyProperty(this, "errmsg", err.errmsg);

	  //
	  // Define access methods
	  this.getOperation = function() {
	    return err.op;
	  }

	  this.toJSON = function() {
	    return {code: err.code, index: err.index, errmsg: err.errmsg, op: err.op};
	  }

	  this.toString = function() {
	    return "WriteError(" + JSON.stringify(this.toJSON()) + ")";
	  }
	}

	/**
	 * Merges results into shared data structure
	 * @ignore
	 */
	var mergeBatchResults = function(ordered, batch, bulkResult, err, result) {
	  // If we have an error set the result to be the err object
	  if(err) {
	    result = err;
	  } else if(result && result.result) {
	    result = result.result;
	  } else if(result == null) {
	    return;
	  }

	  // Do we have a top level error stop processing and return
	  if(result.ok == 0 && bulkResult.ok == 1) {
	    bulkResult.ok = 0;
	    // bulkResult.error = utils.toError(result);
	    var writeError = {
	        index: 0
	      , code: result.code || 0
	      , errmsg: result.message
	      , op: batch.operations[0]
	    };

	    bulkResult.writeErrors.push(new WriteError(writeError));
	    return;
	  } else if(result.ok == 0 && bulkResult.ok == 0) {
	    return;
	  }

	  // Add lastop if available
	  if(result.lastOp) {
	    bulkResult.lastOp = result.lastOp;
	  }

	  // If we have an insert Batch type
	  if(batch.batchType == INSERT && result.n) {
	    bulkResult.nInserted = bulkResult.nInserted + result.n;
	  }

	  // If we have an insert Batch type
	  if(batch.batchType == REMOVE && result.n) {
	    bulkResult.nRemoved = bulkResult.nRemoved + result.n;
	  }

	  var nUpserted = 0;

	  // We have an array of upserted values, we need to rewrite the indexes
	  if(Array.isArray(result.upserted)) {
	    nUpserted = result.upserted.length;

	    for(var i = 0; i < result.upserted.length; i++) {
	      bulkResult.upserted.push({
	          index: result.upserted[i].index + batch.originalZeroIndex
	        , _id: result.upserted[i]._id
	      });
	    }
	  } else if(result.upserted) {

	    nUpserted = 1;

	    bulkResult.upserted.push({
	        index: batch.originalZeroIndex
	      , _id: result.upserted
	    });
	  }

	  // If we have an update Batch type
	  if(batch.batchType == UPDATE && result.n) {
	    var nModified = result.nModified;
	    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;
	    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);

	    if(typeof nModified == 'number') {
	      bulkResult.nModified = bulkResult.nModified + nModified;
	    } else {
	      bulkResult.nModified = null;
	    }
	  }

	  if(Array.isArray(result.writeErrors)) {
	    for(var i = 0; i < result.writeErrors.length; i++) {

	      var writeError = {
	          index: batch.originalZeroIndex + result.writeErrors[i].index
	        , code: result.writeErrors[i].code
	        , errmsg: result.writeErrors[i].errmsg
	        , op: batch.operations[result.writeErrors[i].index]
	      };

	      bulkResult.writeErrors.push(new WriteError(writeError));
	    }
	  }

	  if(result.writeConcernError) {
	    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));
	  }
	}

	//
	// Clone the options
	var cloneOptions = function(options) {
	  var clone = {};
	  var keys = Object.keys(options);
	  for(var i = 0; i < keys.length; i++) {
	    clone[keys[i]] = options[keys[i]];
	  }

	  return clone;
	}

	// Exports symbols
	exports.BulkWriteResult = BulkWriteResult;
	exports.WriteError = WriteError;
	exports.Batch = Batch;
	exports.LegacyOp = LegacyOp;
	exports.mergeBatchResults = mergeBatchResults;
	exports.cloneOptions = cloneOptions;
	exports.writeConcern = writeConcern;
	exports.INVALID_BSON_ERROR = INVALID_BSON_ERROR;
	exports.WRITE_CONCERN_ERROR = WRITE_CONCERN_ERROR;
	exports.MULTIPLE_ERROR = MULTIPLE_ERROR;
	exports.UNKNOWN_ERROR = UNKNOWN_ERROR;
	exports.INSERT = INSERT;
	exports.UPDATE = UPDATE;
	exports.REMOVE = REMOVE;


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var common = __webpack_require__(239)
		, utils = __webpack_require__(220)
	  , toError = __webpack_require__(220).toError
	  , f = __webpack_require__(10).format
	  , shallowClone = utils.shallowClone
	  , WriteError = common.WriteError
	  , BulkWriteResult = common.BulkWriteResult
	  , LegacyOp = common.LegacyOp
	  , ObjectID = __webpack_require__(167).BSON.ObjectID
	  , Define = __webpack_require__(232)
	  , Batch = common.Batch
	  , mergeBatchResults = common.mergeBatchResults;

	/**
	 * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly)
	 * @class
	 * @property {number} length Get the number of operations in the bulk.
	 * @return {FindOperatorsUnordered} a FindOperatorsUnordered instance.
	 */
	var FindOperatorsUnordered = function(self) {
	  this.s = self.s;
	}

	/**
	 * Add a single update document to the bulk operation
	 *
	 * @method
	 * @param {object} doc update operations
	 * @throws {MongoError}
	 * @return {UnorderedBulkOperation}
	 */
	FindOperatorsUnordered.prototype.update = function(updateDocument) {
	  // Perform upsert
	  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;

	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , u: updateDocument
	    , multi: true
	    , upsert: upsert
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the update document to the list
	  return addToOperationsList(this, common.UPDATE, document);
	}

	/**
	 * Add a single update one document to the bulk operation
	 *
	 * @method
	 * @param {object} doc update operations
	 * @throws {MongoError}
	 * @return {UnorderedBulkOperation}
	 */
	FindOperatorsUnordered.prototype.updateOne = function(updateDocument) {
	  // Perform upsert
	  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;

	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , u: updateDocument
	    , multi: false
	    , upsert: upsert
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the update document to the list
	  return addToOperationsList(this, common.UPDATE, document);
	}

	/**
	 * Add a replace one operation to the bulk operation
	 *
	 * @method
	 * @param {object} doc the new document to replace the existing one with
	 * @throws {MongoError}
	 * @return {UnorderedBulkOperation}
	 */
	FindOperatorsUnordered.prototype.replaceOne = function(updateDocument) {
	  this.updateOne(updateDocument);
	}

	/**
	 * Upsert modifier for update bulk operation
	 *
	 * @method
	 * @throws {MongoError}
	 * @return {UnorderedBulkOperation}
	 */
	FindOperatorsUnordered.prototype.upsert = function() {
	  this.s.currentOp.upsert = true;
	  return this;
	}

	/**
	 * Add a remove one operation to the bulk operation
	 *
	 * @method
	 * @throws {MongoError}
	 * @return {UnorderedBulkOperation}
	 */
	FindOperatorsUnordered.prototype.removeOne = function() {
	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , limit: 1
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the remove document to the list
	  return addToOperationsList(this, common.REMOVE, document);
	}

	/**
	 * Add a remove operation to the bulk operation
	 *
	 * @method
	 * @throws {MongoError}
	 * @return {UnorderedBulkOperation}
	 */
	FindOperatorsUnordered.prototype.remove = function() {
	  // Establish the update command
	  var document = {
	      q: this.s.currentOp.selector
	    , limit: 0
	  }

	  // Clear out current Op
	  this.s.currentOp = null;
	  // Add the remove document to the list
	  return addToOperationsList(this, common.REMOVE, document);
	}

	//
	// Add to the operations list
	//
	var addToOperationsList = function(_self, docType, document) {
	  // Get the bsonSize
	  var bsonSize = _self.s.bson.calculateObjectSize(document, false);
	  // Throw error if the doc is bigger than the max BSON size
	  if(bsonSize >= _self.s.maxBatchSizeBytes) throw toError("document is larger than the maximum size " + _self.s.maxBatchSizeBytes);
	  // Holds the current batch
	  _self.s.currentBatch = null;
	  // Get the right type of batch
	  if(docType == common.INSERT) {
	    _self.s.currentBatch = _self.s.currentInsertBatch;
	  } else if(docType == common.UPDATE) {
	    _self.s.currentBatch = _self.s.currentUpdateBatch;
	  } else if(docType == common.REMOVE) {
	    _self.s.currentBatch = _self.s.currentRemoveBatch;
	  }

	  // Create a new batch object if we don't have a current one
	  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);

	  // Check if we need to create a new batch
	  if(((_self.s.currentBatch.size + 1) >= _self.s.maxWriteBatchSize)
	    || ((_self.s.currentBatch.sizeBytes + bsonSize) >= _self.s.maxBatchSizeBytes)
	    || (_self.s.currentBatch.batchType != docType)) {
	    // Save the batch to the execution stack
	    _self.s.batches.push(_self.s.currentBatch);

	    // Create a new batch
	    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);
	  }

	  // We have an array of documents
	  if(Array.isArray(document)) {
	    throw toError("operation passed in cannot be an Array");
	  } else {
	    _self.s.currentBatch.operations.push(document);
	    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);
	    _self.s.currentIndex = _self.s.currentIndex + 1;
	  }

	  // Save back the current Batch to the right type
	  if(docType == common.INSERT) {
	    _self.s.currentInsertBatch = _self.s.currentBatch;
	    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});
	  } else if(docType == common.UPDATE) {
	    _self.s.currentUpdateBatch = _self.s.currentBatch;
	  } else if(docType == common.REMOVE) {
	    _self.s.currentRemoveBatch = _self.s.currentBatch;
	  }

	  // Update current batch size
	  _self.s.currentBatch.size = _self.s.currentBatch.size + 1;
	  _self.s.currentBatch.sizeBytes = _self.s.currentBatch.sizeBytes + bsonSize;

	  // Return self
	  return _self;
	}

	/**
	 * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)
	 * @class
	 * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.
	 */
	var UnorderedBulkOperation = function(topology, collection, options) {
		options = options == null ? {} : options;

		// Contains reference to self
		var self = this;
		// Get the namesspace for the write operations
	  var namespace = collection.collectionName;
	  // Used to mark operation as executed
	  var executed = false;

		// Current item
	  // var currentBatch = null;
		var currentOp = null;
		var currentIndex = 0;
	  var batches = [];

	  // The current Batches for the different operations
	  var currentInsertBatch = null;
	  var currentUpdateBatch = null;
	  var currentRemoveBatch = null;

		// Handle to the bson serializer, used to calculate running sizes
		var bson = topology.bson;

	  // Get the capabilities
	  var capabilities = topology.capabilities();

	  // Set max byte size
		var maxBatchSizeBytes = topology.isMasterDoc.maxBsonObjectSize;
		var maxWriteBatchSize = topology.isMasterDoc.maxWriteBatchSize || 1000;

	  // Get the write concern
	  var writeConcern = common.writeConcern(shallowClone(options), collection, options);

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Final results
	  var bulkResult = {
	  	  ok: 1
	    , writeErrors: []
	    , writeConcernErrors: []
	    , insertedIds: []
	    , nInserted: 0
	    , nUpserted: 0
	    , nMatched: 0
	    , nModified: 0
	    , nRemoved: 0
	    , upserted: []
	  };

	  // Internal state
	  this.s = {
	    // Final result
	      bulkResult: bulkResult
	    // Current batch state
	    , currentInsertBatch: null
	    , currentUpdateBatch: null
	    , currentRemoveBatch: null
	    , currentBatch: null
	    , currentIndex: 0
	    , batches: []
	    // Write concern
	    , writeConcern: writeConcern
	    // Capabilities
	    , capabilities: capabilities
	    // Max batch size options
	    , maxBatchSizeBytes: maxBatchSizeBytes
	    , maxWriteBatchSize: maxWriteBatchSize
	    // Namespace
	    , namespace: namespace
	    // BSON
	    , bson: bson
	    // Topology
	    , topology: topology
	    // Options
	    , options: options
	    // Current operation
	    , currentOp: currentOp
	    // Executed
	    , executed: executed
	    // Collection
	    , collection: collection
	    // Promise Library
	    , promiseLibrary: promiseLibrary
	    // Bypass validation
	    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false
	  }
	}

	var define = UnorderedBulkOperation.define = new Define('UnorderedBulkOperation', UnorderedBulkOperation, false);

	/**
	 * Add a single insert document to the bulk operation
	 *
	 * @param {object} doc the document to insert
	 * @throws {MongoError}
	 * @return {UnorderedBulkOperation}
	 */
	UnorderedBulkOperation.prototype.insert = function(document) {
	  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();
	  return addToOperationsList(this, common.INSERT, document);
	}

	/**
	 * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne
	 *
	 * @method
	 * @param {object} selector The selector for the bulk operation.
	 * @throws {MongoError}
	 * @return {FindOperatorsUnordered}
	 */
	UnorderedBulkOperation.prototype.find = function(selector) {
	  if (!selector) {
	    throw toError("Bulk find operation must specify a selector");
	  }

	  // Save a current selector
	  this.s.currentOp = {
	    selector: selector
	  }

	  return new FindOperatorsUnordered(this);
	}

	Object.defineProperty(UnorderedBulkOperation.prototype, 'length', {
	  enumerable: true,
	  get: function() {
	    return this.s.currentIndex;
	  }
	});

	UnorderedBulkOperation.prototype.raw = function(op) {
	  var key = Object.keys(op)[0];

	  // Set up the force server object id
	  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'
	    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;

	  // Update operations
	  if((op.updateOne && op.updateOne.q)
	    || (op.updateMany && op.updateMany.q)
	    || (op.replaceOne && op.replaceOne.q)) {
	    op[key].multi = op.updateOne || op.replaceOne ? false : true;
	    return addToOperationsList(this, common.UPDATE, op[key]);
	  }

	  // Crud spec update format
	  if(op.updateOne || op.updateMany || op.replaceOne) {
	    var multi = op.updateOne || op.replaceOne ? false : true;
	    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}
	    if(op[key].upsert) operation.upsert = true;
	    return addToOperationsList(this, common.UPDATE, operation);
	  }

	  // Remove operations
	  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {
	    op[key].limit = op.removeOne ? 1 : 0;
	    return addToOperationsList(this, common.REMOVE, op[key]);
	  }

	  // Crud spec delete operations, less efficient
	  if(op.deleteOne || op.deleteMany) {
	    var limit = op.deleteOne ? 1 : 0;
	    var operation = {q: op[key].filter, limit: limit}
	    return addToOperationsList(this, common.REMOVE, operation);
	  }

	  // Insert operations
	  if(op.insertOne && op.insertOne.document == null) {
	    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();
	    return addToOperationsList(this, common.INSERT, op.insertOne);
	  } else if(op.insertOne && op.insertOne.document) {
	    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();
	    return addToOperationsList(this, common.INSERT, op.insertOne.document);
	  }

	  if(op.insertMany) {
	    for(var i = 0; i < op.insertMany.length; i++) {
	      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();
	      addToOperationsList(this, common.INSERT, op.insertMany[i]);
	    }

	    return;
	  }

	  // No valid type of operation
	  throw toError("bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany");
	}

	//
	// Execute the command
	var executeBatch = function(self, batch, callback) {
	  var finalOptions = {ordered: false}
	  if(self.s.writeConcern != null) {
	    finalOptions.writeConcern = self.s.writeConcern;
	  }

	  var resultHandler = function(err, result) {
			// Error is a driver related error not a bulk op error, terminate
			if(err && err.driver || err && err.message) {
				return callback(err);
			}

	    // If we have and error
	    if(err) err.ok = 0;
	    callback(null, mergeBatchResults(false, batch, self.s.bulkResult, err, result));
	  }

		// Set an operationIf if provided
		if(self.operationId) {
			resultHandler.operationId = self.operationId;
		}

		// Serialize functions
		if(self.s.options.serializeFunctions) {
			finalOptions.serializeFunctions = true
		}

	  // Is the bypassDocumentValidation options specific
	  if(self.s.bypassDocumentValidation == true) {
	    finalOptions.bypassDocumentValidation = true;
	  }

	  try {
	    if(batch.batchType == common.INSERT) {
	      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
	    } else if(batch.batchType == common.UPDATE) {
	      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
	    } else if(batch.batchType == common.REMOVE) {
	      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
	    }
	  } catch(err) {
	    // Force top level error
	    err.ok = 0;
	    // Merge top level error and return
	    callback(null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));
	  }
	}

	//
	// Execute all the commands
	var executeBatches = function(self, callback) {
	  var numberOfCommandsToExecute = self.s.batches.length;
		var error = null;
	  // Execute over all the batches
	  for(var i = 0; i < self.s.batches.length; i++) {
	    executeBatch(self, self.s.batches[i], function(err, result) {
				// Driver layer error capture it
				if(err) error = err;
				// Count down the number of commands left to execute
	      numberOfCommandsToExecute = numberOfCommandsToExecute - 1;

	      // Execute
	      if(numberOfCommandsToExecute == 0) {
					// Driver level error
					if(error) return callback(error);
					// Treat write errors
	        var error = self.s.bulkResult.writeErrors.length > 0 ? toError(self.s.bulkResult.writeErrors[0]) : null;
	        callback(error, new BulkWriteResult(self.s.bulkResult));
	      }
	    });
	  }
	}

	/**
	 * The callback format for results
	 * @callback UnorderedBulkOperation~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {BulkWriteResult} result The bulk write result.
	 */

	/**
	 * Execute the ordered bulk operation
	 *
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.fsync=false] Specify a file sync write concern.
	 * @param {UnorderedBulkOperation~resultCallback} [callback] The result callback
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */
	UnorderedBulkOperation.prototype.execute = function(_writeConcern, callback) {
	  var self = this;
	  if(this.s.executed) throw toError("batch cannot be re-executed");
	  if(typeof _writeConcern == 'function') {
	    callback = _writeConcern;
	  } else {
	    this.s.writeConcern = _writeConcern;
	  }

	  // If we have current batch
	  if(this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);
	  if(this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);
	  if(this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);

	  // If we have no operations in the bulk raise an error
	  if(this.s.batches.length == 0) {
	    throw toError("Invalid Operation, No operations in bulk");
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return executeBatches(this, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    executeBatches(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('execute', {callback: true, promise:false});

	/**
	 * Returns an unordered batch object
	 * @ignore
	 */
	var initializeUnorderedBulkOp = function(topology, collection, options) {
		return new UnorderedBulkOperation(topology, collection, options);
	}

	initializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;
	module.exports = initializeUnorderedBulkOp;
	module.exports.Bulk = UnorderedBulkOperation;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";

	/**
	 * @fileOverview GridFS is a tool for MongoDB to store files to the database.
	 * Because of the restrictions of the object size the database can hold, a
	 * facility to split a file into several chunks is needed. The {@link GridStore}
	 * class offers a simplified api to interact with files while managing the
	 * chunks of split files behind the scenes. More information about GridFS can be
	 * found <a href="http://www.mongodb.org/display/DOCS/GridFS">here</a>.
	 *
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   GridStore = require('mongodb').GridStore,
	 *   ObjectID = require('mongodb').ObjectID,
	 *   test = require('assert');
	 *
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   var gridStore = new GridStore(db, null, "w");
	 *   gridStore.open(function(err, gridStore) {
	 *     gridStore.write("hello world!", function(err, gridStore) {
	 *       gridStore.close(function(err, result) {
	 *
	 *         // Let's read the file using object Id
	 *         GridStore.read(db, result._id, function(err, data) {
	 *           test.equal('hello world!', data);
	 *           db.close();
	 *           test.done();
	 *         });
	 *       });
	 *     });
	 *   });
	 * });
	 */
	var Chunk = __webpack_require__(242),
	  ObjectID = __webpack_require__(167).BSON.ObjectID,
	  ReadPreference = __webpack_require__(221),
	  Buffer = __webpack_require__(5).Buffer,
	  Collection = __webpack_require__(243),
	  fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  timers = __webpack_require__(172),
	  f = __webpack_require__(10).format,
	  util = __webpack_require__(10),
	  Define = __webpack_require__(232),
	  MongoError = __webpack_require__(167).MongoError,
	  inherits = util.inherits,
	  Duplex = __webpack_require__(21).Duplex || __webpack_require__(222).Duplex;

	var REFERENCE_BY_FILENAME = 0,
	  REFERENCE_BY_ID = 1;

	/**
	 * Namespace provided by the mongodb-core and node.js
	 * @external Duplex
	 */

	/**
	 * Create a new GridStore instance
	 *
	 * Modes
	 *  - **"r"** - read only. This is the default mode.
	 *  - **"w"** - write in truncate mode. Existing data will be overwriten.
	 *
	 * @class
	 * @param {Db} db A database instance to interact with.
	 * @param {object} [id] optional unique id for this file
	 * @param {string} [filename] optional filename for this file, no unique constrain on the field
	 * @param {string} mode set the mode for this file.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.fsync=false] Specify a file sync write concern.
	 * @param {string} [options.root=null] Root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 * @param {string} [options.content_type=null] MIME type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.
	 * @param {number} [options.chunk_size=261120] Size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.
	 * @param {object} [options.metadata=null] Arbitrary data the user wants to store.
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @property {number} chunkSize Get the gridstore chunk size.
	 * @property {number} md5 The md5 checksum for this file.
	 * @property {number} chunkNumber The current chunk number the gridstore has materialized into memory
	 * @return {GridStore} a GridStore instance.
	 */
	var GridStore = function GridStore(db, id, filename, mode, options) {
	  if(!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);
	  var self = this;
	  this.db = db;

	  // Handle options
	  if(typeof options === 'undefined') options = {};
	  // Handle mode
	  if(typeof mode === 'undefined') {
	    mode = filename;
	    filename = undefined;
	  } else if(typeof mode == 'object') {
	    options = mode;
	    mode = filename;
	    filename = undefined;
	  }

	  if(id instanceof ObjectID) {
	    this.referenceBy = REFERENCE_BY_ID;
	    this.fileId = id;
	    this.filename = filename;
	  } else if(typeof filename == 'undefined') {
	    this.referenceBy = REFERENCE_BY_FILENAME;
	    this.filename = id;
	    if (mode.indexOf('w') != null) {
	      this.fileId = new ObjectID();
	    }
	  } else {
	    this.referenceBy = REFERENCE_BY_ID;
	    this.fileId = id;
	    this.filename = filename;
	  }

	  // Set up the rest
	  this.mode = mode == null ? "r" : mode;
	  this.options = options || {};

	  // Opened
	  this.isOpen = false;

	  // Set the root if overridden
	  this.root = this.options['root'] == null ? GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];
	  this.position = 0;
	  this.readPreference = this.options.readPreference || db.options.readPreference || ReadPreference.PRIMARY;
	  this.writeConcern = _getWriteConcern(db, this.options);
	  // Set default chunk size
	  this.internalChunkSize = this.options['chunkSize'] == null ? Chunk.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];

	  // Get the promiseLibrary
	  var promiseLibrary = this.options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Set the promiseLibrary
	  this.promiseLibrary = promiseLibrary;

	  Object.defineProperty(this, "chunkSize", { enumerable: true
	   , get: function () {
	       return this.internalChunkSize;
	     }
	   , set: function(value) {
	       if(!(this.mode[0] == "w" && this.position == 0 && this.uploadDate == null)) {
	         this.internalChunkSize = this.internalChunkSize;
	       } else {
	         this.internalChunkSize = value;
	       }
	     }
	  });

	  Object.defineProperty(this, "md5", { enumerable: true
	   , get: function () {
	       return this.internalMd5;
	     }
	  });

	  Object.defineProperty(this, "chunkNumber", { enumerable: true
	   , get: function () {
	       return this.currentChunk && this.currentChunk.chunkNumber ? this.currentChunk.chunkNumber : null;
	     }
	  });
	}

	var define = GridStore.define = new Define('Gridstore', GridStore, true);

	/**
	 * The callback format for the Gridstore.open method
	 * @callback GridStore~openCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {GridStore} gridStore The GridStore instance if the open method was successful.
	 */

	/**
	 * Opens the file from the database and initialize this object. Also creates a
	 * new one if file does not exist.
	 *
	 * @method
	 * @param {GridStore~openCallback} [callback] this will be called after executing this method
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.open = function(callback) {
	  var self = this;
	  if( this.mode != "w" && this.mode != "w+" && this.mode != "r"){
	    throw MongoError.create({message: "Illegal mode " + this.mode, driver:true});
	  }

	  // We provided a callback leg
	  if(typeof callback == 'function') return open(self, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    open(self, function(err, store) {
	      if(err) return reject(err);
	      resolve(store);
	    })
	  });
	};

	var open = function(self, callback) {
	  // Get the write concern
	  var writeConcern = _getWriteConcern(self.db, self.options);

	  // If we are writing we need to ensure we have the right indexes for md5's
	  if((self.mode == "w" || self.mode == "w+")) {
	    // Get files collection
	    var collection = self.collection();
	    // Put index on filename
	    collection.ensureIndex([['filename', 1]], writeConcern, function(err, index) {
	      // Get chunk collection
	      var chunkCollection = self.chunkCollection();
	      // Ensure index on chunk collection
	      chunkCollection.ensureIndex([['files_id', 1], ['n', 1]], writeConcern, function(err, index) {
	        // Open the connection
	        _open(self, writeConcern, function(err, r) {
	          if(err) return callback(err);
	          self.isOpen = true;
	          callback(err, r);
	        });
	      });
	    });
	  } else {
	    // Open the gridstore
	    _open(self, writeConcern, function(err, r) {
	      if(err) return callback(err);
	      self.isOpen = true;
	      callback(err, r);
	    });
	  }
	}

	// Push the definition for open
	define.classMethod('open', {callback: true, promise:true});

	/**
	 * Verify if the file is at EOF.
	 *
	 * @method
	 * @return {boolean} true if the read/write head is at the end of this file.
	 */
	GridStore.prototype.eof = function() {
	  return this.position == this.length ? true : false;
	}

	define.classMethod('eof', {callback: false, promise:false, returns: [Boolean]});

	/**
	 * The callback result format.
	 * @callback GridStore~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {object} result The result from the callback.
	 */

	/**
	 * Retrieves a single character from this file.
	 *
	 * @method
	 * @param {GridStore~resultCallback} [callback] this gets called after this method is executed. Passes null to the first parameter and the character read to the second or null to the second if the read/write head is at the end of the file.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.getc = function(callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return eof(self, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    eof(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	}

	var eof = function(self, callback) {
	  if(self.eof()) {
	    callback(null, null);
	  } else if(self.currentChunk.eof()) {
	    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
	      self.currentChunk = chunk;
	      self.position = self.position + 1;
	      callback(err, self.currentChunk.getc());
	    });
	  } else {
	    self.position = self.position + 1;
	    callback(null, self.currentChunk.getc());
	  }
	}

	define.classMethod('getc', {callback: true, promise:true});

	/**
	 * Writes a string to the file with a newline character appended at the end if
	 * the given string does not have one.
	 *
	 * @method
	 * @param {string} string the string to write.
	 * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.puts = function(string, callback) {
	  var self = this;
	  var finalString = string.match(/\n$/) == null ? string + "\n" : string;
	  // We provided a callback leg
	  if(typeof callback == 'function') return this.write(finalString, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    self.write(finalString, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	}

	define.classMethod('puts', {callback: true, promise:true});

	/**
	 * Return a modified Readable stream including a possible transform method.
	 *
	 * @method
	 * @return {GridStoreStream}
	 */
	GridStore.prototype.stream = function() {
	  return new GridStoreStream(this);
	}

	define.classMethod('stream', {callback: false, promise:false, returns: [GridStoreStream]});

	/**
	 * Writes some data. This method will work properly only if initialized with mode "w" or "w+".
	 *
	 * @method
	 * @param {(string|Buffer)} data the data to write.
	 * @param {boolean} [close] closes this file after writing if set to true.
	 * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.write = function write(data, close, callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return _writeNormal(this, data, close, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    _writeNormal(self, data, close, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	}

	define.classMethod('write', {callback: true, promise:true});

	/**
	 * Handles the destroy part of a stream
	 *
	 * @method
	 * @result {null}
	 */
	GridStore.prototype.destroy = function destroy() {
	  // close and do not emit any more events. queued data is not sent.
	  if(!this.writable) return;
	  this.readable = false;
	  if(this.writable) {
	    this.writable = false;
	    this._q.length = 0;
	    this.emit('close');
	  }
	}

	define.classMethod('destroy', {callback: false, promise:false});

	/**
	 * Stores a file from the file system to the GridFS database.
	 *
	 * @method
	 * @param {(string|Buffer|FileHandle)} file the file to store.
	 * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.writeFile = function (file, callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return writeFile(self, file, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    writeFile(self, file, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var writeFile = function(self, file, callback) {
	  if (typeof file === 'string') {
	    fs.open(file, 'r', function (err, fd) {
	      if(err) return callback(err);
	      self.writeFile(fd, callback);
	    });
	    return;
	  }

	  self.open(function (err, self) {
	    if(err) return callback(err, self);

	    fs.fstat(file, function (err, stats) {
	      if(err) return callback(err, self);

	      var offset = 0;
	      var index = 0;
	      var numberOfChunksLeft = Math.min(stats.size / self.chunkSize);

	      // Write a chunk
	      var writeChunk = function() {
	        fs.read(file, self.chunkSize, offset, 'binary', function(err, data, bytesRead) {
	          if(err) return callback(err, self);

	          offset = offset + bytesRead;

	          // Create a new chunk for the data
	          var chunk = new Chunk(self, {n:index++}, self.writeConcern);
	          chunk.write(data, function(err, chunk) {
	            if(err) return callback(err, self);

	            chunk.save({}, function(err, result) {
	              if(err) return callback(err, self);

	              self.position = self.position + data.length;

	              // Point to current chunk
	              self.currentChunk = chunk;

	              if(offset >= stats.size) {
	                fs.close(file);
	                self.close(function(err, result) {
	                  if(err) return callback(err, self);
	                  return callback(null, self);
	                });
	              } else {
	                return process.nextTick(writeChunk);
	              }
	            });
	          });
	        });
	      }

	      // Process the first write
	      process.nextTick(writeChunk);
	    });
	  });
	}

	define.classMethod('writeFile', {callback: true, promise:true});

	/**
	 * Saves this file to the database. This will overwrite the old entry if it
	 * already exists. This will work properly only if mode was initialized to
	 * "w" or "w+".
	 *
	 * @method
	 * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.close = function(callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return close(self, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    close(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var close = function(self, callback) {
	  if(self.mode[0] == "w") {
	    // Set up options
	    var options = self.writeConcern;

	    if(self.currentChunk != null && self.currentChunk.position > 0) {
	      self.currentChunk.save({}, function(err, chunk) {
	        if(err && typeof callback == 'function') return callback(err);

	        self.collection(function(err, files) {
	          if(err && typeof callback == 'function') return callback(err);

	          // Build the mongo object
	          if(self.uploadDate != null) {
	            files.remove({'_id':self.fileId}, self.writeConcern, function(err, collection) {
	              if(err && typeof callback == 'function') return callback(err);

	              buildMongoObject(self, function(err, mongoObject) {
	                if(err) {
	                  if(typeof callback == 'function') return callback(err); else throw err;
	                }

	                files.save(mongoObject, options, function(err) {
	                  if(typeof callback == 'function')
	                    callback(err, mongoObject);
	                });
	              });
	            });
	          } else {
	            self.uploadDate = new Date();
	            buildMongoObject(self, function(err, mongoObject) {
	              if(err) {
	                if(typeof callback == 'function') return callback(err); else throw err;
	              }

	              files.save(mongoObject, options, function(err) {
	                if(typeof callback == 'function')
	                  callback(err, mongoObject);
	              });
	            });
	          }
	        });
	      });
	    } else {
	      self.collection(function(err, files) {
	        if(err && typeof callback == 'function') return callback(err);

	        self.uploadDate = new Date();
	        buildMongoObject(self, function(err, mongoObject) {
	          if(err) {
	            if(typeof callback == 'function') return callback(err); else throw err;
	          }

	          files.save(mongoObject, options, function(err) {
	            if(typeof callback == 'function')
	              callback(err, mongoObject);
	          });
	        });
	      });
	    }
	  } else if(self.mode[0] == "r") {
	    if(typeof callback == 'function')
	      callback(null, null);
	  } else {
	    if(typeof callback == 'function')
	      callback(MongoError.create({message: f("Illegal mode %s", self.mode), driver:true}));
	  }
	}

	define.classMethod('close', {callback: true, promise:true});

	/**
	 * The collection callback format.
	 * @callback GridStore~collectionCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection} collection The collection from the command execution.
	 */

	/**
	 * Retrieve this file's chunks collection.
	 *
	 * @method
	 * @param {GridStore~collectionCallback} callback the command callback.
	 * @return {Collection}
	 */
	GridStore.prototype.chunkCollection = function(callback) {
	  if(typeof callback == 'function')
	    return this.db.collection((this.root + ".chunks"), callback);
	  return this.db.collection((this.root + ".chunks"));
	};

	define.classMethod('chunkCollection', {callback: true, promise:false, returns: [Collection]});

	/**
	 * Deletes all the chunks of this file in the database.
	 *
	 * @method
	 * @param {GridStore~resultCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.unlink = function(callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return unlink(self, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    unlink(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var unlink = function(self, callback) {
	  deleteChunks(self, function(err) {
	    if(err!==null) {
	      err.message = "at deleteChunks: " + err.message;
	      return callback(err);
	    }

	    self.collection(function(err, collection) {
	      if(err!==null) {
	        err.message = "at collection: " + err.message;
	        return callback(err);
	      }

	      collection.remove({'_id':self.fileId}, self.writeConcern, function(err) {
	        callback(err, self);
	      });
	    });
	  });
	}

	define.classMethod('unlink', {callback: true, promise:true});

	/**
	 * Retrieves the file collection associated with this object.
	 *
	 * @method
	 * @param {GridStore~collectionCallback} callback the command callback.
	 * @return {Collection}
	 */
	GridStore.prototype.collection = function(callback) {
	  if(typeof callback == 'function')
	    this.db.collection(this.root + ".files", callback);
	  return this.db.collection(this.root + ".files");
	};

	define.classMethod('collection', {callback: true, promise:false, returns: [Collection]});

	/**
	 * The readlines callback format.
	 * @callback GridStore~readlinesCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {string[]} strings The array of strings returned.
	 */

	/**
	 * Read the entire file as a list of strings splitting by the provided separator.
	 *
	 * @method
	 * @param {string} [separator] The character to be recognized as the newline separator.
	 * @param {GridStore~readlinesCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.readlines = function(separator, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  separator = args.length ? args.shift() : "\n";
	  separator = separator || "\n";

	  // We provided a callback leg
	  if(typeof callback == 'function') return readlines(self, separator, callback);

	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    readlines(self, separator, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var readlines = function(self, separator, callback) {
	  self.read(function(err, data) {
	    if(err) return callback(err);

	    var items = data.toString().split(separator);
	    items = items.length > 0 ? items.splice(0, items.length - 1) : [];
	    for(var i = 0; i < items.length; i++) {
	      items[i] = items[i] + separator;
	    }

	    callback(null, items);
	  });
	}

	define.classMethod('readlines', {callback: true, promise:true});

	/**
	 * Deletes all the chunks of this file in the database if mode was set to "w" or
	 * "w+" and resets the read/write head to the initial position.
	 *
	 * @method
	 * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.rewind = function(callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return rewind(self, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    rewind(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var rewind = function(self, callback) {
	  if(self.currentChunk.chunkNumber != 0) {
	    if(self.mode[0] == "w") {
	      deleteChunks(self, function(err, gridStore) {
	        if(err) return callback(err);
	        self.currentChunk = new Chunk(self, {'n': 0}, self.writeConcern);
	        self.position = 0;
	        callback(null, self);
	      });
	    } else {
	      self.currentChunk(0, function(err, chunk) {
	        if(err) return callback(err);
	        self.currentChunk = chunk;
	        self.currentChunk.rewind();
	        self.position = 0;
	        callback(null, self);
	      });
	    }
	  } else {
	    self.currentChunk.rewind();
	    self.position = 0;
	    callback(null, self);
	  }
	}

	define.classMethod('rewind', {callback: true, promise:true});

	/**
	 * The read callback format.
	 * @callback GridStore~readCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Buffer} data The data read from the GridStore object
	 */

	/**
	 * Retrieves the contents of this file and advances the read/write head. Works with Buffers only.
	 *
	 * There are 3 signatures for this method:
	 *
	 * (callback)
	 * (length, callback)
	 * (length, buffer, callback)
	 *
	 * @method
	 * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.
	 * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.
	 * @param {GridStore~readCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.read = function(length, buffer, callback) {
	  var self = this;

	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  length = args.length ? args.shift() : null;
	  buffer = args.length ? args.shift() : null;
	  // We provided a callback leg
	  if(typeof callback == 'function') return read(self, length, buffer, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    read(self, length, buffer, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	}

	var read = function(self, length, buffer, callback) {
	  // The data is a c-terminated string and thus the length - 1
	  var finalLength = length == null ? self.length - self.position : length;
	  var finalBuffer = buffer == null ? new Buffer(finalLength) : buffer;
	  // Add a index to buffer to keep track of writing position or apply current index
	  finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;

	  if((self.currentChunk.length() - self.currentChunk.position + finalBuffer._index) >= finalLength) {
	    var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);
	    // Copy content to final buffer
	    slice.copy(finalBuffer, finalBuffer._index);
	    // Update internal position
	    self.position = self.position + finalBuffer.length;
	    // Check if we don't have a file at all
	    if(finalLength == 0 && finalBuffer.length == 0) return callback(MongoError.create({message: "File does not exist", driver:true}), null);
	    // Else return data
	    return callback(null, finalBuffer);
	  }

	  // Read the next chunk
	  var slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);
	  // Copy content to final buffer
	  slice.copy(finalBuffer, finalBuffer._index);
	  // Update index position
	  finalBuffer._index += slice.length;

	  // Load next chunk and read more
	  nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
	    if(err) return callback(err);

	    if(chunk.length() > 0) {
	      self.currentChunk = chunk;
	      self.read(length, finalBuffer, callback);
	    } else {
	      if(finalBuffer._index > 0) {
	        callback(null, finalBuffer)
	      } else {
	        callback(MongoError.create({message: "no chunks found for file, possibly corrupt", driver:true}), null);
	      }
	    }
	  });
	}

	define.classMethod('read', {callback: true, promise:true});

	/**
	 * The tell callback format.
	 * @callback GridStore~tellCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {number} position The current read position in the GridStore.
	 */

	/**
	 * Retrieves the position of the read/write head of this file.
	 *
	 * @method
	 * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.
	 * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.
	 * @param {GridStore~tellCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.tell = function(callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return callback(null, this.position);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    resolve(self.position);
	  });
	};

	define.classMethod('tell', {callback: true, promise:true});

	/**
	 * The tell callback format.
	 * @callback GridStore~gridStoreCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {GridStore} gridStore The gridStore.
	 */

	/**
	 * Moves the read/write head to a new location.
	 *
	 * There are 3 signatures for this method
	 *
	 * Seek Location Modes
	 *  - **GridStore.IO_SEEK_SET**, **(default)** set the position from the start of the file.
	 *  - **GridStore.IO_SEEK_CUR**, set the position from the current position in the file.
	 *  - **GridStore.IO_SEEK_END**, set the position from the end of the file.
	 *
	 * @method
	 * @param {number} [position] the position to seek to
	 * @param {number} [seekLocation] seek mode. Use one of the Seek Location modes.
	 * @param {GridStore~gridStoreCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.prototype.seek = function(position, seekLocation, callback) {
	  var self = this;

	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  seekLocation = args.length ? args.shift() : null;

	  // We provided a callback leg
	  if(typeof callback == 'function') return seek(self, position, seekLocation, callback);
	  // Return promise
	  return new self.promiseLibrary(function(resolve, reject) {
	    seek(self, position, seekLocation, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	}

	var seek = function(self, position, seekLocation, callback) {
	  // Seek only supports read mode
	  if(self.mode != 'r') {
	    return callback(MongoError.create({message: "seek is only supported for mode r", driver:true}))
	  }

	  var seekLocationFinal = seekLocation == null ? GridStore.IO_SEEK_SET : seekLocation;
	  var finalPosition = position;
	  var targetPosition = 0;

	  // Calculate the position
	  if(seekLocationFinal == GridStore.IO_SEEK_CUR) {
	    targetPosition = self.position + finalPosition;
	  } else if(seekLocationFinal == GridStore.IO_SEEK_END) {
	    targetPosition = self.length + finalPosition;
	  } else {
	    targetPosition = finalPosition;
	  }

	  // Get the chunk
	  var newChunkNumber = Math.floor(targetPosition/self.chunkSize);
	  var seekChunk = function() {
	    nthChunk(self, newChunkNumber, function(err, chunk) {
	      self.currentChunk = chunk;
	      self.position = targetPosition;
	      self.currentChunk.position = (self.position % self.chunkSize);
	      callback(err, self);
	    });
	  };

	  seekChunk();
	}

	define.classMethod('seek', {callback: true, promise:true});

	/**
	 * @ignore
	 */
	var _open = function(self, options, callback) {
	  var collection = self.collection();
	  // Create the query
	  var query = self.referenceBy == REFERENCE_BY_ID ? {_id:self.fileId} : {filename:self.filename};
	  query = null == self.fileId && self.filename == null ? null : query;
	  options.readPreference = self.readPreference;

	  // Fetch the chunks
	  if(query != null) {
	    collection.findOne(query, options, function(err, doc) {
	      if(err) return error(err);

	      // Check if the collection for the files exists otherwise prepare the new one
	      if(doc != null) {
	        self.fileId = doc._id;
	        // Prefer a new filename over the existing one if this is a write
	        self.filename = ((self.mode == 'r') || (self.filename == undefined)) ? doc.filename : self.filename;
	        self.contentType = doc.contentType;
	        self.internalChunkSize = doc.chunkSize;
	        self.uploadDate = doc.uploadDate;
	        self.aliases = doc.aliases;
	        self.length = doc.length;
	        self.metadata = doc.metadata;
	        self.internalMd5 = doc.md5;
	      } else if (self.mode != 'r') {
	        self.fileId = self.fileId == null ? new ObjectID() : self.fileId;
	        self.contentType = GridStore.DEFAULT_CONTENT_TYPE;
	        self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
	        self.length = 0;
	      } else {
	         self.length = 0;
	         var txtId = self.fileId instanceof ObjectID ? self.fileId.toHexString() : self.fileId;
	         return error(MongoError.create({message: f("file with id %s not opened for writing", (self.referenceBy == REFERENCE_BY_ID ? txtId : self.filename)), driver:true}), self);
	      }

	      // Process the mode of the object
	      if(self.mode == "r") {
	        nthChunk(self, 0, options, function(err, chunk) {
	          if(err) return error(err);
	          self.currentChunk = chunk;
	          self.position = 0;
	          callback(null, self);
	        });
	      } else if(self.mode == "w") {
	        // Delete any existing chunks
	        deleteChunks(self, options, function(err, result) {
	          if(err) return error(err);
	          self.currentChunk = new Chunk(self, {'n':0}, self.writeConcern);
	          self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];
	          self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
	          self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	          self.position = 0;
	          callback(null, self);
	        });
	      } else if(self.mode == "w+") {
	        nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {
	          if(err) return error(err);
	          // Set the current chunk
	          self.currentChunk = chunk == null ? new Chunk(self, {'n':0}, self.writeConcern) : chunk;
	          self.currentChunk.position = self.currentChunk.data.length();
	          self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	          self.position = self.length;
	          callback(null, self);
	        });
	      }
	    });
	  } else {
	    // Write only mode
	    self.fileId = null == self.fileId ? new ObjectID() : self.fileId;
	    self.contentType = GridStore.DEFAULT_CONTENT_TYPE;
	    self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
	    self.length = 0;

	    var collection2 = self.chunkCollection();
	    // No file exists set up write mode
	    if(self.mode == "w") {
	      // Delete any existing chunks
	      deleteChunks(self, options, function(err, result) {
	        if(err) return error(err);
	        self.currentChunk = new Chunk(self, {'n':0}, self.writeConcern);
	        self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];
	        self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
	        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	        self.position = 0;
	        callback(null, self);
	      });
	    } else if(self.mode == "w+") {
	      nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {
	        if(err) return error(err);
	        // Set the current chunk
	        self.currentChunk = chunk == null ? new Chunk(self, {'n':0}, self.writeConcern) : chunk;
	        self.currentChunk.position = self.currentChunk.data.length();
	        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
	        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
	        self.position = self.length;
	        callback(null, self);
	      });
	    }
	  }

	  // only pass error to callback once
	  function error (err) {
	    if(error.err) return;
	    callback(error.err = err);
	  }
	};

	/**
	 * @ignore
	 */
	var writeBuffer = function(self, buffer, close, callback) {
	  if(typeof close === "function") { callback = close; close = null; }
	  var finalClose = typeof close == 'boolean' ? close : false;

	  if(self.mode != "w") {
	    callback(MongoError.create({message: f("file with id %s not opened for writing", (self.referenceBy == REFERENCE_BY_ID ? self.referenceBy : self.filename)), driver:true}), null);
	  } else {
	    if(self.currentChunk.position + buffer.length >= self.chunkSize) {
	      // Write out the current Chunk and then keep writing until we have less data left than a chunkSize left
	      // to a new chunk (recursively)
	      var previousChunkNumber = self.currentChunk.chunkNumber;
	      var leftOverDataSize = self.chunkSize - self.currentChunk.position;
	      var firstChunkData = buffer.slice(0, leftOverDataSize);
	      var leftOverData = buffer.slice(leftOverDataSize);
	      // A list of chunks to write out
	      var chunksToWrite = [self.currentChunk.write(firstChunkData)];
	      // If we have more data left than the chunk size let's keep writing new chunks
	      while(leftOverData.length >= self.chunkSize) {
	        // Create a new chunk and write to it
	        var newChunk = new Chunk(self, {'n': (previousChunkNumber + 1)}, self.writeConcern);
	        var firstChunkData = leftOverData.slice(0, self.chunkSize);
	        leftOverData = leftOverData.slice(self.chunkSize);
	        // Update chunk number
	        previousChunkNumber = previousChunkNumber + 1;
	        // Write data
	        newChunk.write(firstChunkData);
	        // Push chunk to save list
	        chunksToWrite.push(newChunk);
	      }

	      // Set current chunk with remaining data
	      self.currentChunk = new Chunk(self, {'n': (previousChunkNumber + 1)}, self.writeConcern);
	      // If we have left over data write it
	      if(leftOverData.length > 0) self.currentChunk.write(leftOverData);

	      // Update the position for the gridstore
	      self.position = self.position + buffer.length;
	      // Total number of chunks to write
	      var numberOfChunksToWrite = chunksToWrite.length;

	      for(var i = 0; i < chunksToWrite.length; i++) {
	        chunksToWrite[i].save({}, function(err, result) {
	          if(err) return callback(err);

	          numberOfChunksToWrite = numberOfChunksToWrite - 1;

	          if(numberOfChunksToWrite <= 0) {
	            // We care closing the file before returning
	            if(finalClose) {
	              return self.close(function(err, result) {
	                callback(err, self);
	              });
	            }

	            // Return normally
	            return callback(null, self);
	          }
	        });
	      }
	    } else {
	      // Update the position for the gridstore
	      self.position = self.position + buffer.length;
	      // We have less data than the chunk size just write it and callback
	      self.currentChunk.write(buffer);
	      // We care closing the file before returning
	      if(finalClose) {
	        return self.close(function(err, result) {
	          callback(err, self);
	        });
	      }
	      // Return normally
	      return callback(null, self);
	    }
	  }
	};

	/**
	 * Creates a mongoDB object representation of this object.
	 *
	 *        <pre><code>
	 *        {
	 *          '_id' : , // {number} id for this file
	 *          'filename' : , // {string} name for this file
	 *          'contentType' : , // {string} mime type for this file
	 *          'length' : , // {number} size of this file?
	 *          'chunksize' : , // {number} chunk size used by this file
	 *          'uploadDate' : , // {Date}
	 *          'aliases' : , // {array of string}
	 *          'metadata' : , // {string}
	 *        }
	 *        </code></pre>
	 *
	 * @ignore
	 */
	var buildMongoObject = function(self, callback) {
	  // Calcuate the length
	  var mongoObject = {
	    '_id': self.fileId,
	    'filename': self.filename,
	    'contentType': self.contentType,
	    'length': self.position ? self.position : 0,
	    'chunkSize': self.chunkSize,
	    'uploadDate': self.uploadDate,
	    'aliases': self.aliases,
	    'metadata': self.metadata
	  };

	  var md5Command = {filemd5:self.fileId, root:self.root};
	  self.db.command(md5Command, function(err, results) {
	    if(err) return callback(err);

	    mongoObject.md5 = results.md5;
	    callback(null, mongoObject);
	  });
	};

	/**
	 * Gets the nth chunk of this file.
	 * @ignore
	 */
	var nthChunk = function(self, chunkNumber, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  options = options || self.writeConcern;
	  options.readPreference = self.readPreference;
	  // Get the nth chunk
	  self.chunkCollection().findOne({'files_id':self.fileId, 'n':chunkNumber}, options, function(err, chunk) {
	    if(err) return callback(err);

	    var finalChunk = chunk == null ? {} : chunk;
	    callback(null, new Chunk(self, finalChunk, self.writeConcern));
	  });
	};

	/**
	 * @ignore
	 */
	var lastChunkNumber = function(self) {
	  return Math.floor((self.length ? self.length - 1 : 0)/self.chunkSize);
	};

	/**
	 * Deletes all the chunks of this file in the database.
	 *
	 * @ignore
	 */
	var deleteChunks = function(self, options, callback) {
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  options = options || self.writeConcern;

	  if(self.fileId != null) {
	    self.chunkCollection().remove({'files_id':self.fileId}, options, function(err, result) {
	      if(err) return callback(err, false);
	      callback(null, true);
	    });
	  } else {
	    callback(null, true);
	  }
	};

	/**
	* The collection to be used for holding the files and chunks collection.
	*
	* @classconstant DEFAULT_ROOT_COLLECTION
	**/
	GridStore.DEFAULT_ROOT_COLLECTION = 'fs';

	/**
	* Default file mime type
	*
	* @classconstant DEFAULT_CONTENT_TYPE
	**/
	GridStore.DEFAULT_CONTENT_TYPE = 'binary/octet-stream';

	/**
	* Seek mode where the given length is absolute.
	*
	* @classconstant IO_SEEK_SET
	**/
	GridStore.IO_SEEK_SET = 0;

	/**
	* Seek mode where the given length is an offset to the current read/write head.
	*
	* @classconstant IO_SEEK_CUR
	**/
	GridStore.IO_SEEK_CUR = 1;

	/**
	* Seek mode where the given length is an offset to the end of the file.
	*
	* @classconstant IO_SEEK_END
	**/
	GridStore.IO_SEEK_END = 2;

	/**
	 * Checks if a file exists in the database.
	 *
	 * @method
	 * @static
	 * @param {Db} db the database to query.
	 * @param {string} name The name of the file to look for.
	 * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {GridStore~resultCallback} [callback] result from exists.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.exist = function(db, fileIdObject, rootCollection, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  rootCollection = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : {};
	  options = options || {};

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // We provided a callback leg
	  if(typeof callback == 'function') return exists(db, fileIdObject, rootCollection, options, callback);
	  // Return promise
	  return new promiseLibrary(function(resolve, reject) {
	    exists(db, fileIdObject, rootCollection, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var exists = function(db, fileIdObject, rootCollection, options, callback) {
	  // Establish read preference
	  var readPreference = options.readPreference || ReadPreference.PRIMARY;
	  // Fetch collection
	  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
	  db.collection(rootCollectionFinal + ".files", function(err, collection) {
	    if(err) return callback(err);

	    // Build query
	    var query = (typeof fileIdObject == 'string' || Object.prototype.toString.call(fileIdObject) == '[object RegExp]' )
	      ? {'filename':fileIdObject}
	      : {'_id':fileIdObject};    // Attempt to locate file

	    // We have a specific query
	    if(fileIdObject != null
	      && typeof fileIdObject == 'object'
	      && Object.prototype.toString.call(fileIdObject) != '[object RegExp]') {
	      query = fileIdObject;
	    }

	    // Check if the entry exists
	    collection.findOne(query, {readPreference:readPreference}, function(err, item) {
	      if(err) return callback(err);
	      callback(null, item == null ? false : true);
	    });
	  });
	}

	define.staticMethod('exist', {callback: true, promise:true});

	/**
	 * Gets the list of files stored in the GridFS.
	 *
	 * @method
	 * @static
	 * @param {Db} db the database to query.
	 * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {GridStore~resultCallback} [callback] result from exists.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.list = function(db, rootCollection, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  rootCollection = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : {};
	  options = options || {};

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // We provided a callback leg
	  if(typeof callback == 'function') return list(db, rootCollection, options, callback);
	  // Return promise
	  return new promiseLibrary(function(resolve, reject) {
	    list(db, rootCollection, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var list = function(db, rootCollection, options, callback) {
	  // Ensure we have correct values
	  if(rootCollection != null && typeof rootCollection == 'object') {
	    options = rootCollection;
	    rootCollection = null;
	  }

	  // Establish read preference
	  var readPreference = options.readPreference || ReadPreference.PRIMARY;
	  // Check if we are returning by id not filename
	  var byId = options['id'] != null ? options['id'] : false;
	  // Fetch item
	  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
	  var items = [];
	  db.collection((rootCollectionFinal + ".files"), function(err, collection) {
	    if(err) return callback(err);

	    collection.find({}, {readPreference:readPreference}, function(err, cursor) {
	      if(err) return callback(err);

	      cursor.each(function(err, item) {
	        if(item != null) {
	          items.push(byId ? item._id : item.filename);
	        } else {
	          callback(err, items);
	        }
	      });
	    });
	  });
	}

	define.staticMethod('list', {callback: true, promise:true});

	/**
	 * Reads the contents of a file.
	 *
	 * This method has the following signatures
	 *
	 * (db, name, callback)
	 * (db, name, length, callback)
	 * (db, name, length, offset, callback)
	 * (db, name, length, offset, options, callback)
	 *
	 * @method
	 * @static
	 * @param {Db} db the database to query.
	 * @param {string} name The name of the file.
	 * @param {number} [length] The size of data to read.
	 * @param {number} [offset] The offset from the head of the file of which to start reading from.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {GridStore~readCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */

	GridStore.read = function(db, name, length, offset, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  length = args.length ? args.shift() : null;
	  offset = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : null;
	  options = options || {};

	  // Get the promiseLibrary
	  var promiseLibrary = options ? options.promiseLibrary : null;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // We provided a callback leg
	  if(typeof callback == 'function') return readStatic(db, name, length, offset, options, callback);
	  // Return promise
	  return new promiseLibrary(function(resolve, reject) {
	    readStatic(db, name, length, offset, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var readStatic = function(db, name, length, offset, options, callback) {
	  new GridStore(db, name, "r", options).open(function(err, gridStore) {
	    if(err) return callback(err);
	    // Make sure we are not reading out of bounds
	    if(offset && offset >= gridStore.length) return callback("offset larger than size of file", null);
	    if(length && length > gridStore.length) return callback("length is larger than the size of the file", null);
	    if(offset && length && (offset + length) > gridStore.length) return callback("offset and length is larger than the size of the file", null);

	    if(offset != null) {
	      gridStore.seek(offset, function(err, gridStore) {
	        if(err) return callback(err);
	        gridStore.read(length, callback);
	      });
	    } else {
	      gridStore.read(length, callback);
	    }
	  });
	}

	define.staticMethod('read', {callback: true, promise:true});

	/**
	 * Read the entire file as a list of strings splitting by the provided separator.
	 *
	 * @method
	 * @static
	 * @param {Db} db the database to query.
	 * @param {(String|object)} name the name of the file.
	 * @param {string} [separator] The character to be recognized as the newline separator.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {GridStore~readlinesCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.readlines = function(db, name, separator, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  separator = args.length ? args.shift() : null;
	  options = args.length ? args.shift() : null;
	  options = options || {};

	  // Get the promiseLibrary
	  var promiseLibrary = options ? options.promiseLibrary : null;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // We provided a callback leg
	  if(typeof callback == 'function') return readlinesStatic(db, name, separator, options, callback);
	  // Return promise
	  return new promiseLibrary(function(resolve, reject) {
	    readlinesStatic(db, name, separator, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var readlinesStatic = function(db, name, separator, options, callback) {
	  var finalSeperator = separator == null ? "\n" : separator;
	  new GridStore(db, name, "r", options).open(function(err, gridStore) {
	    if(err) return callback(err);
	    gridStore.readlines(finalSeperator, callback);
	  });
	}

	define.staticMethod('readlines', {callback: true, promise:true});

	/**
	 * Deletes the chunks and metadata information of a file from GridFS.
	 *
	 * @method
	 * @static
	 * @param {Db} db The database to query.
	 * @param {(string|array)} names The name/names of the files to delete.
	 * @param {object} [options=null] Optional settings.
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {GridStore~resultCallback} [callback] the command callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	GridStore.unlink = function(db, names, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() : {};
	  options = options || {};

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // We provided a callback leg
	  if(typeof callback == 'function') return unlinkStatic(self, db, names, options, callback);

	  // Return promise
	  return new promiseLibrary(function(resolve, reject) {
	    unlinkStatic(self, db, names, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    })
	  });
	};

	var unlinkStatic = function(self, db, names, options, callback) {
	  // Get the write concern
	  var writeConcern = _getWriteConcern(db, options);

	  // List of names
	  if(names.constructor == Array) {
	    var tc = 0;
	    for(var i = 0; i < names.length; i++) {
	      ++tc;
	      GridStore.unlink(db, names[i], options, function(result) {
	        if(--tc == 0) {
	            callback(null, self);
	        }
	      });
	    }
	  } else {
	    new GridStore(db, names, "w", options).open(function(err, gridStore) {
	      if(err) return callback(err);
	      deleteChunks(gridStore, function(err, result) {
	        if(err) return callback(err);
	        gridStore.collection(function(err, collection) {
	          if(err) return callback(err);
	          collection.remove({'_id':gridStore.fileId}, writeConcern, function(err, result) {
	            callback(err, self);
	          });
	        });
	      });
	    });
	  }
	}

	define.staticMethod('unlink', {callback: true, promise:true});

	/**
	 *  @ignore
	 */
	var _writeNormal = function(self, data, close, callback) {
	  // If we have a buffer write it using the writeBuffer method
	  if(Buffer.isBuffer(data)) {
	    return writeBuffer(self, data, close, callback);
	  } else {
	    return writeBuffer(self, new Buffer(data, 'binary'), close, callback);
	  }
	}

	/**
	 * @ignore
	 */
	var _setWriteConcernHash = function(options) {
	  var finalOptions = {};
	  if(options.w != null) finalOptions.w = options.w;
	  if(options.journal == true) finalOptions.j = options.journal;
	  if(options.j == true) finalOptions.j = options.j;
	  if(options.fsync == true) finalOptions.fsync = options.fsync;
	  if(options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;
	  return finalOptions;
	}

	/**
	 * @ignore
	 */
	var _getWriteConcern = function(self, options) {
	  // Final options
	  var finalOptions = {w:1};
	  options = options || {};

	  // Local options verification
	  if(options.w != null || typeof options.j == 'boolean' || typeof options.journal == 'boolean' || typeof options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(options);
	  } else if(options.safe != null && typeof options.safe == 'object') {
	    finalOptions = _setWriteConcernHash(options.safe);
	  } else if(typeof options.safe == "boolean") {
	    finalOptions = {w: (options.safe ? 1 : 0)};
	  } else if(self.options.w != null || typeof self.options.j == 'boolean' || typeof self.options.journal == 'boolean' || typeof self.options.fsync == 'boolean') {
	    finalOptions = _setWriteConcernHash(self.options);
	  } else if(self.safe && (self.safe.w != null || typeof self.safe.j == 'boolean' || typeof self.safe.journal == 'boolean' || typeof self.safe.fsync == 'boolean')) {
	    finalOptions = _setWriteConcernHash(self.safe);
	  } else if(typeof self.safe == "boolean") {
	    finalOptions = {w: (self.safe ? 1 : 0)};
	  }

	  // Ensure we don't have an invalid combination of write concerns
	  if(finalOptions.w < 1
	    && (finalOptions.journal == true || finalOptions.j == true || finalOptions.fsync == true)) throw MongoError.create({message: "No acknowledgement using w < 1 cannot be combined with journal:true or fsync:true", driver:true});

	  // Return the options
	  return finalOptions;
	}

	/**
	 * Create a new GridStoreStream instance (INTERNAL TYPE, do not instantiate directly)
	 *
	 * @class
	 * @extends external:Duplex
	 * @return {GridStoreStream} a GridStoreStream instance.
	 */
	var GridStoreStream = function(gs) {
	  var self = this;
	  // Initialize the duplex stream
	  Duplex.call(this);

	  // Get the gridstore
	  this.gs = gs;

	  // End called
	  this.endCalled = false;

	  // If we have a seek
	  this.totalBytesToRead = this.gs.length - this.gs.position;
	  this.seekPosition = this.gs.position;
	}

	//
	// Inherit duplex
	inherits(GridStoreStream, Duplex);

	GridStoreStream.prototype._pipe = GridStoreStream.prototype.pipe;

	// Set up override
	GridStoreStream.prototype.pipe = function(destination) {
	  var self = this;

	  // Only open gridstore if not already open
	  if(!self.gs.isOpen) {
	    self.gs.open(function(err) {
	      if(err) return self.emit('error', err);
	      self.totalBytesToRead = self.gs.length - self.gs.position;
	      self._pipe.apply(self, [destination]);
	    });
	  } else {
	    self.totalBytesToRead = self.gs.length - self.gs.position;
	    self._pipe.apply(self, [destination]);
	  }
	}

	// Called by stream
	GridStoreStream.prototype._read = function(n) {
	  var self = this;

	  var read = function() {
	    // Read data
	    self.gs.read(length, function(err, buffer) {
	      if(err && !self.endCalled) return self.emit('error', err);

	      // Stream is closed
	      if(self.endCalled || buffer == null) return self.push(null);
	      // Remove bytes read
	      if(buffer.length <= self.totalBytesToRead) {
	        self.totalBytesToRead = self.totalBytesToRead - buffer.length;
	        self.push(buffer);
	      } else if(buffer.length > self.totalBytesToRead) {
	        self.totalBytesToRead = self.totalBytesToRead - buffer._index;
	        self.push(buffer.slice(0, buffer._index));
	      }

	      // Finished reading
	      if(self.totalBytesToRead <= 0) {
	        self.endCalled = true;
	      }
	    });
	  }

	  // Set read length
	  var length = self.gs.length < self.gs.chunkSize ? self.gs.length - self.seekPosition : self.gs.chunkSize;
	  if(!self.gs.isOpen) {
	    self.gs.open(function(err, gs) {
	      self.totalBytesToRead = self.gs.length - self.gs.position;
	      if(err) return self.emit('error', err);
	      read();
	    });
	  } else {
	    read();
	  }
	}

	GridStoreStream.prototype.destroy = function() {
	  this.pause();
	  this.endCalled = true;
	  this.gs.close();
	  this.emit('end');
	}

	GridStoreStream.prototype.write = function(chunk, encoding, callback) {
	  var self = this;
	  if(self.endCalled) return self.emit('error', MongoError.create({message: 'attempting to write to stream after end called', driver:true}))
	  // Do we have to open the gridstore
	  if(!self.gs.isOpen) {
	    self.gs.open(function() {
	      self.gs.isOpen = true;
	      self.gs.write(chunk, function() {
	        process.nextTick(function() {
	          self.emit('drain');
	        });
	      });
	    });
	    return false;
	  } else {
	    self.gs.write(chunk, function() {
	      self.emit('drain');
	    });
	    return true;
	  }
	}

	GridStoreStream.prototype.end = function(chunk, encoding, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  chunk = args.length ? args.shift() : null;
	  encoding = args.length ? args.shift() : null;
	  self.endCalled = true;

	  if(chunk) {
	    self.gs.write(chunk, function() {
	      self.gs.close(function() {
	        if(typeof callback == 'function') callback();
	        self.emit('end')
	      });
	    });
	  }

	  self.gs.close(function() {
	    if(typeof callback == 'function') callback();
	    self.emit('end')
	  });
	}

	/**
	 * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.
	 * @function external:Duplex#read
	 * @param {number} size Optional argument to specify how much data to read.
	 * @return {(String | Buffer | null)}
	 */

	/**
	 * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.
	 * @function external:Duplex#setEncoding
	 * @param {string} encoding The encoding to use.
	 * @return {null}
	 */

	/**
	 * This method will cause the readable stream to resume emitting data events.
	 * @function external:Duplex#resume
	 * @return {null}
	 */

	/**
	 * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.
	 * @function external:Duplex#pause
	 * @return {null}
	 */

	/**
	 * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.
	 * @function external:Duplex#pipe
	 * @param {Writable} destination The destination for writing data
	 * @param {object} [options] Pipe options
	 * @return {null}
	 */

	/**
	 * This method will remove the hooks set up for a previous pipe() call.
	 * @function external:Duplex#unpipe
	 * @param {Writable} [destination] The destination for writing data
	 * @return {null}
	 */

	/**
	 * This is useful in certain cases where a stream is being consumed by a parser, which needs to "un-consume" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.
	 * @function external:Duplex#unshift
	 * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.
	 * @return {null}
	 */

	/**
	 * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See "Compatibility" below for more information.)
	 * @function external:Duplex#wrap
	 * @param {Stream} stream An "old style" readable stream.
	 * @return {null}
	 */

	/**
	 * This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled.
	 * @function external:Duplex#write
	 * @param {(string|Buffer)} chunk The data to write
	 * @param {string} encoding The encoding, if chunk is a String
	 * @param {function} callback Callback for when this chunk of data is flushed
	 * @return {boolean}
	 */

	/**
	 * Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the finish event.
	 * @function external:Duplex#end
	 * @param {(string|Buffer)} chunk The data to write
	 * @param {string} encoding The encoding, if chunk is a String
	 * @param {function} callback Callback for when this chunk of data is flushed
	 * @return {null}
	 */

	/**
	 * GridStoreStream stream data event, fired for each document in the cursor.
	 *
	 * @event GridStoreStream#data
	 * @type {object}
	 */

	/**
	 * GridStoreStream stream end event
	 *
	 * @event GridStoreStream#end
	 * @type {null}
	 */

	/**
	 * GridStoreStream stream close event
	 *
	 * @event GridStoreStream#close
	 * @type {null}
	 */

	/**
	 * GridStoreStream stream readable event
	 *
	 * @event GridStoreStream#readable
	 * @type {null}
	 */

	/**
	 * GridStoreStream stream drain event
	 *
	 * @event GridStoreStream#drain
	 * @type {null}
	 */

	/**
	 * GridStoreStream stream finish event
	 *
	 * @event GridStoreStream#finish
	 * @type {null}
	 */

	/**
	 * GridStoreStream stream pipe event
	 *
	 * @event GridStoreStream#pipe
	 * @type {null}
	 */

	/**
	 * GridStoreStream stream unpipe event
	 *
	 * @event GridStoreStream#unpipe
	 * @type {null}
	 */

	/**
	 * GridStoreStream stream error event
	 *
	 * @event GridStoreStream#error
	 * @type {null}
	 */

	/**
	 * @ignore
	 */
	module.exports = GridStore;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	var Binary = __webpack_require__(167).BSON.Binary,
	  ObjectID = __webpack_require__(167).BSON.ObjectID;

	/**
	 * Class for representing a single chunk in GridFS.
	 *
	 * @class
	 *
	 * @param file {GridStore} The {@link GridStore} object holding this chunk.
	 * @param mongoObject {object} The mongo object representation of this chunk.
	 *
	 * @throws Error when the type of data field for {@link mongoObject} is not
	 *     supported. Currently supported types for data field are instances of
	 *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}
	 *     from the bson module
	 *
	 * @see Chunk#buildMongoObject
	 */
	var Chunk = function(file, mongoObject, writeConcern) {
	  if(!(this instanceof Chunk)) return new Chunk(file, mongoObject);

	  this.file = file;
	  var self = this;
	  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;
	  this.writeConcern = writeConcern || {w:1};
	  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;
	  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;
	  this.data = new Binary();

	  if(mongoObjectFinal.data == null) {
	  } else if(typeof mongoObjectFinal.data == "string") {
	    var buffer = new Buffer(mongoObjectFinal.data.length);
	    buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');
	    this.data = new Binary(buffer);
	  } else if(Array.isArray(mongoObjectFinal.data)) {
	    var buffer = new Buffer(mongoObjectFinal.data.length);
	    var data = mongoObjectFinal.data.join('');
	    buffer.write(data, 0, data.length, 'binary');
	    this.data = new Binary(buffer);
	  } else if(mongoObjectFinal.data._bsontype === 'Binary') {
	    this.data = mongoObjectFinal.data;
	  } else if(Buffer.isBuffer(mongoObjectFinal.data)) {
	  } else {
	    throw Error("Illegal chunk format");
	  }

	  // Update position
	  this.internalPosition = 0;
	};

	/**
	 * Writes a data to this object and advance the read/write head.
	 *
	 * @param data {string} the data to write
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 */
	Chunk.prototype.write = function(data, callback) {
	  this.data.write(data, this.internalPosition, data.length, 'binary');
	  this.internalPosition = this.data.length();
	  if(callback != null) return callback(null, this);
	  return this;
	};

	/**
	 * Reads data and advances the read/write head.
	 *
	 * @param length {number} The length of data to read.
	 *
	 * @return {string} The data read if the given length will not exceed the end of
	 *     the chunk. Returns an empty String otherwise.
	 */
	Chunk.prototype.read = function(length) {
	  // Default to full read if no index defined
	  length = length == null || length == 0 ? this.length() : length;

	  if(this.length() - this.internalPosition + 1 >= length) {
	    var data = this.data.read(this.internalPosition, length);
	    this.internalPosition = this.internalPosition + length;
	    return data;
	  } else {
	    return '';
	  }
	};

	Chunk.prototype.readSlice = function(length) {
	  if ((this.length() - this.internalPosition) >= length) {
	    var data = null;
	    if (this.data.buffer != null) { //Pure BSON
	      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);
	    } else { //Native BSON
	      data = new Buffer(length);
	      length = this.data.readInto(data, this.internalPosition);
	    }
	    this.internalPosition = this.internalPosition + length;
	    return data;
	  } else {
	    return null;
	  }
	};

	/**
	 * Checks if the read/write head is at the end.
	 *
	 * @return {boolean} Whether the read/write head has reached the end of this
	 *     chunk.
	 */
	Chunk.prototype.eof = function() {
	  return this.internalPosition == this.length() ? true : false;
	};

	/**
	 * Reads one character from the data of this chunk and advances the read/write
	 * head.
	 *
	 * @return {string} a single character data read if the the read/write head is
	 *     not at the end of the chunk. Returns an empty String otherwise.
	 */
	Chunk.prototype.getc = function() {
	  return this.read(1);
	};

	/**
	 * Clears the contents of the data in this chunk and resets the read/write head
	 * to the initial position.
	 */
	Chunk.prototype.rewind = function() {
	  this.internalPosition = 0;
	  this.data = new Binary();
	};

	/**
	 * Saves this chunk to the database. Also overwrites existing entries having the
	 * same id as this chunk.
	 *
	 * @param callback {function(*, GridStore)} This will be called after executing
	 *     this method. The first parameter will contain null and the second one
	 *     will contain a reference to this object.
	 */
	Chunk.prototype.save = function(options, callback) {
	  var self = this;
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  self.file.chunkCollection(function(err, collection) {
	    if(err) return callback(err);

	    // Merge the options
	    var writeOptions = {};
	    for(var name in options) writeOptions[name] = options[name];
	    for(var name in self.writeConcern) writeOptions[name] = self.writeConcern[name];

	    // collection.remove({'_id':self.objectId}, self.writeConcern, function(err, result) {
	    collection.remove({'_id':self.objectId}, writeOptions, function(err, result) {
	      if(err) return callback(err);

	      if(self.data.length() > 0) {
	        self.buildMongoObject(function(mongoObject) {
	          var options = {forceServerObjectId:true};
	          for(var name in self.writeConcern) {
	            options[name] = self.writeConcern[name];
	          }

	          collection.insert(mongoObject, writeOptions, function(err, collection) {
	            callback(err, self);
	          });
	        });
	      } else {
	        callback(null, self);
	      }
	    });
	  });
	};

	/**
	 * Creates a mongoDB object representation of this chunk.
	 *
	 * @param callback {function(Object)} This will be called after executing this
	 *     method. The object will be passed to the first parameter and will have
	 *     the structure:
	 *
	 *        <pre><code>
	 *        {
	 *          '_id' : , // {number} id for this chunk
	 *          'files_id' : , // {number} foreign key to the file collection
	 *          'n' : , // {number} chunk number
	 *          'data' : , // {bson#Binary} the chunk data itself
	 *        }
	 *        </code></pre>
	 *
	 * @see <a href="http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}">MongoDB GridFS Chunk Object Structure</a>
	 */
	Chunk.prototype.buildMongoObject = function(callback) {
	  var mongoObject = {
	    'files_id': this.file.fileId,
	    'n': this.chunkNumber,
	    'data': this.data};
	  // If we are saving using a specific ObjectId
	  if(this.objectId != null) mongoObject._id = this.objectId;

	  callback(mongoObject);
	};

	/**
	 * @return {number} the length of the data
	 */
	Chunk.prototype.length = function() {
	  return this.data.length();
	};

	/**
	 * The position of the read/write head
	 * @name position
	 * @lends Chunk#
	 * @field
	 */
	Object.defineProperty(Chunk.prototype, "position", { enumerable: true
	  , get: function () {
	      return this.internalPosition;
	    }
	  , set: function(value) {
	      this.internalPosition = value;
	    }
	});

	/**
	 * The default chunk size
	 * @constant
	 */
	Chunk.DEFAULT_CHUNK_SIZE = 1024 * 255;

	module.exports = Chunk;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {"use strict";

	var checkCollectionName = __webpack_require__(220).checkCollectionName
	  , ObjectID = __webpack_require__(167).BSON.ObjectID
	  , Long = __webpack_require__(167).BSON.Long
	  , Code = __webpack_require__(167).BSON.Code
	  , f = __webpack_require__(10).format
	  , AggregationCursor = __webpack_require__(219)
	  , MongoError = __webpack_require__(167).MongoError
	  , shallowClone = __webpack_require__(220).shallowClone
	  , isObject = __webpack_require__(220).isObject
	  , toError = __webpack_require__(220).toError
	  , normalizeHintField = __webpack_require__(220).normalizeHintField
	  , handleCallback = __webpack_require__(220).handleCallback
	  , decorateCommand = __webpack_require__(220).decorateCommand
	  , formattedOrderClause = __webpack_require__(220).formattedOrderClause
	  , ReadPreference = __webpack_require__(221)
	  , CoreReadPreference = __webpack_require__(167).ReadPreference
	  , CommandCursor = __webpack_require__(237)
	  , Define = __webpack_require__(232)
	  , Cursor = __webpack_require__(233)
	  , unordered = __webpack_require__(240)
	  , ordered = __webpack_require__(238);

	/**
	 * @fileOverview The **Collection** class is an internal class that embodies a MongoDB collection
	 * allowing for insert/update/remove/find and other command operation on that MongoDB collection.
	 *
	 * **COLLECTION Cannot directly be instantiated**
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   test = require('assert');
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   // Create a collection we want to drop later
	 *   var col = db.collection('createIndexExample1');
	 *   // Show that duplicate records got dropped
	 *   col.find({}).toArray(function(err, items) {
	 *     test.equal(null, err);
	 *     test.equal(4, items.length);
	 *     db.close();
	 *   });
	 * });
	 */

	/**
	 * Create a new Collection instance (INTERNAL TYPE, do not instantiate directly)
	 * @class
	 * @property {string} collectionName Get the collection name.
	 * @property {string} namespace Get the full collection namespace.
	 * @property {object} writeConcern The current write concern values.
	 * @property {object} readConcern The current read concern values.
	 * @property {object} hint Get current index hint for collection.
	 * @return {Collection} a Collection instance.
	 */
	var Collection = function(db, topology, dbName, name, pkFactory, options) {
	  checkCollectionName(name);
	  var self = this;
	  // Unpack variables
	  var internalHint = null;
	  var opts = options != null && ('object' === typeof options) ? options : {};
	  var slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;
	  var serializeFunctions = options == null || options.serializeFunctions == null ? db.serializeFunctions : options.serializeFunctions;
	  var raw = options == null || options.raw == null ? db.raw : options.raw;
	  var readPreference = null;
	  var collectionHint = null;
	  var namespace = f("%s.%s", dbName, name);

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Assign the right collection level readPreference
	  if(options && options.readPreference) {
	    readPreference = options.readPreference;
	  } else if(db.options.readPreference) {
	    readPreference = db.options.readPreference;
	  }

	  // Set custom primary key factory if provided
	  pkFactory = pkFactory == null
	    ? ObjectID
	    : pkFactory;

	  // Internal state
	  this.s = {
	    // Set custom primary key factory if provided
	      pkFactory: pkFactory
	    // Db
	    , db: db
	    // Topology
	    , topology: topology
	    // dbName
	    , dbName: dbName
	    // Options
	    , options: options
	    // Namespace
	    , namespace: namespace
	    // Read preference
	    , readPreference: readPreference
	    // Raw
	    , raw: raw
	    // SlaveOK
	    , slaveOk: slaveOk
	    // Serialize functions
	    , serializeFunctions: serializeFunctions
	    // internalHint
	    , internalHint: internalHint
	    // collectionHint
	    , collectionHint: collectionHint
	    // Name
	    , name: name
	    // Promise library
	    , promiseLibrary: promiseLibrary
	    // Read Concern
	    , readConcern: options.readConcern
	  }
	}

	var define = Collection.define = new Define('Collection', Collection, false);

	Object.defineProperty(Collection.prototype, 'collectionName', {
	  enumerable: true, get: function() { return this.s.name; }
	});

	Object.defineProperty(Collection.prototype, 'namespace', {
	  enumerable: true, get: function() { return this.s.namespace; }
	});

	Object.defineProperty(Collection.prototype, 'readConcern', {
	  enumerable: true, get: function() { return this.s.readConcern || {level: 'local'}; }
	});

	Object.defineProperty(Collection.prototype, 'writeConcern', {
	  enumerable:true,
	  get: function() {
	    var ops = {};
	    if(this.s.options.w != null) ops.w = this.s.options.w;
	    if(this.s.options.j != null) ops.j = this.s.options.j;
	    if(this.s.options.fsync != null) ops.fsync = this.s.options.fsync;
	    if(this.s.options.wtimeout != null) ops.wtimeout = this.s.options.wtimeout;
	    return ops;
	  }
	});

	/**
	 * @ignore
	 */
	Object.defineProperty(Collection.prototype, "hint", {
	    enumerable: true
	  , get: function () { return this.s.collectionHint; }
	  , set: function (v) { this.s.collectionHint = normalizeHintField(v); }
	});

	/**
	 * Creates a cursor for a query that can be used to iterate over results from MongoDB
	 * @method
	 * @param {object} query The cursor query object.
	 * @throws {MongoError}
	 * @return {Cursor}
	 */
	Collection.prototype.find = function() {
	  var options
	    , args = Array.prototype.slice.call(arguments, 0)
	    , has_callback = typeof args[args.length - 1] === 'function'
	    , has_weird_callback = typeof args[0] === 'function'
	    , callback = has_callback ? args.pop() : (has_weird_callback ? args.shift() : null)
	    , len = args.length
	    , selector = len >= 1 ? args[0] : {}
	    , fields = len >= 2 ? args[1] : undefined;

	  if(len === 1 && has_weird_callback) {
	    // backwards compat for callback?, options case
	    selector = {};
	    options = args[0];
	  }

	  if(len === 2 && fields !== undefined && !Array.isArray(fields)) {
	    var fieldKeys = Object.keys(fields);
	    var is_option = false;

	    for(var i = 0; i < fieldKeys.length; i++) {
	      if(testForFields[fieldKeys[i]] != null) {
	        is_option = true;
	        break;
	      }
	    }

	    if(is_option) {
	      options = fields;
	      fields = undefined;
	    } else {
	      options = {};
	    }
	  } else if(len === 2 && Array.isArray(fields) && !Array.isArray(fields[0])) {
	    var newFields = {};
	    // Rewrite the array
	    for(var i = 0; i < fields.length; i++) {
	      newFields[fields[i]] = 1;
	    }
	    // Set the fields
	    fields = newFields;
	  }

	  if(3 === len) {
	    options = args[2];
	  }

	  // Ensure selector is not null
	  selector = selector == null ? {} : selector;
	  // Validate correctness off the selector
	  var object = selector;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length)  {
	      var error = new Error("query selector raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  // Validate correctness of the field selector
	  var object = fields;
	  if(Buffer.isBuffer(object)) {
	    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;
	    if(object_size != object.length)  {
	      var error = new Error("query fields raw message size does not match message header size [" + object.length + "] != [" + object_size + "]");
	      error.name = 'MongoError';
	      throw error;
	    }
	  }

	  // Check special case where we are using an objectId
	  if(selector instanceof ObjectID || (selector != null && selector._bsontype == 'ObjectID')) {
	    selector = {_id:selector};
	  }

	  // If it's a serialized fields field we need to just let it through
	  // user be warned it better be good
	  if(options && options.fields && !(Buffer.isBuffer(options.fields))) {
	    fields = {};

	    if(Array.isArray(options.fields)) {
	      if(!options.fields.length) {
	        fields['_id'] = 1;
	      } else {
	        for (var i = 0, l = options.fields.length; i < l; i++) {
	          fields[options.fields[i]] = 1;
	        }
	      }
	    } else {
	      fields = options.fields;
	    }
	  }

	  if (!options) options = {};

	  var newOptions = {};
	  // Make a shallow copy of options
	  for (var key in options) {
	    newOptions[key] = options[key];
	  }

	  // Unpack options
	  newOptions.skip = len > 3 ? args[2] : options.skip ? options.skip : 0;
	  newOptions.limit = len > 3 ? args[3] : options.limit ? options.limit : 0;
	  newOptions.raw = options.raw != null && typeof options.raw === 'boolean' ? options.raw : this.s.raw;
	  newOptions.hint = options.hint != null ? normalizeHintField(options.hint) : this.s.collectionHint;
	  newOptions.timeout = len == 5 ? args[4] : typeof options.timeout === 'undefined' ? undefined : options.timeout;
	  // // If we have overridden slaveOk otherwise use the default db setting
	  newOptions.slaveOk = options.slaveOk != null ? options.slaveOk : this.s.db.slaveOk;

	  // Add read preference if needed
	  newOptions = getReadPreference(this, newOptions, this.s.db, this);
	  // Set slave ok to true if read preference different from primary
	  if(newOptions.readPreference != null
	    && (newOptions.readPreference != 'primary' || newOptions.readPreference.mode != 'primary')) {
	    newOptions.slaveOk = true;
	  }

	  // Ensure the query is an object
	  if(selector != null && typeof selector != 'object') {
	    throw MongoError.create({message: "query selector must be an object", driver:true });
	  }

	  // Build the find command
	  var findCommand = {
	      find: this.s.namespace
	    , limit: newOptions.limit
	    , skip: newOptions.skip
	    , query: selector
	  }

	  // Ensure we use the right await data option
	  if(typeof newOptions.awaitdata == 'boolean')  {
	    newOptions.awaitData = newOptions.awaitdata
	  };

	  // Translate to new command option noCursorTimeout
	  if(typeof newOptions.timeout == 'boolean') newOptions.noCursorTimeout = newOptions.timeout;

	  // Merge in options to command
	  for(var name in newOptions) {
	    if(newOptions[name] != null) findCommand[name] = newOptions[name];
	  }

	  // Format the fields
	  var formatFields = function(fields) {
	    var object = {};
	    if(Array.isArray(fields)) {
	      for(var i = 0; i < fields.length; i++) {
	        if(Array.isArray(fields[i])) {
	          object[fields[i][0]] = fields[i][1];
	        } else {
	          object[fields[i][0]] = 1;
	        }
	      }
	    } else {
	      object = fields;
	    }

	    return object;
	  }

	  // Special treatment for the fields selector
	  if(fields) findCommand.fields = formatFields(fields);

	  // Add db object to the new options
	  newOptions.db = this.s.db;

	  // Add the promise library
	  newOptions.promiseLibrary = this.s.promiseLibrary;

	  // Set raw if available at collection level
	  if(newOptions.raw == null && this.s.raw) newOptions.raw = this.s.raw;

	  // Sort options
	  if(findCommand.sort)
	    findCommand.sort = formattedOrderClause(findCommand.sort);

	  // Set the readConcern
	  if(this.s.readConcern) {
	    findCommand.readConcern = this.s.readConcern; 
	  }

	  // Create the cursor
	  if(typeof callback == 'function') return handleCallback(callback, null, this.s.topology.cursor(this.s.namespace, findCommand, newOptions));
	  return this.s.topology.cursor(this.s.namespace, findCommand, newOptions);
	}

	define.classMethod('find', {callback: false, promise:false, returns: [Cursor]});

	/**
	 * Inserts a single document into MongoDB.
	 * @method
	 * @param {object} doc Document to insert.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
	 * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~insertOneWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.insertOne = function(doc, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};
	  if(Array.isArray(doc)) return callback(MongoError.create({message: 'doc parameter must be an object', driver:true }));

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return insertOne(self, doc, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    insertOne(self, doc, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var insertOne = function(self, doc, options, callback) {
	  insertDocuments(self, [doc], options, function(err, r) {
	    if(callback == null) return;
	    if(err && callback) return callback(err);
	    // Workaround for pre 2.6 servers
	    if(r == null) return callback(null, {result: {ok:1}});
	    // Add values to top level to ensure crud spec compatibility
	    r.insertedCount = r.result.n;
	    r.insertedId = doc._id;
	    if(callback) callback(null, r);
	  });
	}

	var mapInserManyResults = function(docs, r) {
	  var ids = r.getInsertedIds();
	  var keys = Object.keys(ids);
	  var finalIds = new Array(keys);

	  for(var i = 0; i < keys.length; i++) {
	    if(ids[keys[i]]._id) {
	      finalIds[ids[keys[i]].index] = ids[keys[i]]._id;
	    }
	  }

	  return {
	    result: {ok: 1, n: r.insertedCount},
	    ops: docs,
	    insertedCount: r.insertedCount,
	    insertedIds: finalIds
	  }
	}

	define.classMethod('insertOne', {callback: true, promise:true});

	/**
	 * Inserts an array of documents into MongoDB.
	 * @method
	 * @param {object[]} docs Documents to insert.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
	 * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
	 * @param {Collection~insertWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.insertMany = function(docs, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {ordered:true};
	  if(!Array.isArray(docs)) return callback(MongoError.create({message: 'docs parameter must be an array of documents', driver:true }));

	  // Get the write concern options
	  if(typeof options.checkKeys != 'boolean') {
	    options.checkKeys = true;
	  }

	  // If keep going set unordered
	  options['serializeFunctions'] = options['serializeFunctions'] || self.s.serializeFunctions;

	  // Set up the force server object id
	  var forceServerObjectId = typeof options.forceServerObjectId == 'boolean'
	    ? options.forceServerObjectId : self.s.db.options.forceServerObjectId;

	  // Do we want to force the server to assign the _id key
	  if(forceServerObjectId !== true) {
	    // Add _id if not specified
	    for(var i = 0; i < docs.length; i++) {
	      if(docs[i]._id == null) docs[i]._id = self.s.pkFactory.createPk();
	    }
	  }

	  // Generate the bulk write operations
	  var operations = [{
	    insertMany: docs
	  }];

	  // Execute using callback
	  if(typeof callback == 'function') return bulkWrite(self, operations, options, function(err, r) {
	    if(err) return callback(err, r);
	    callback(null, mapInserManyResults(docs, r));
	  });

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    bulkWrite(self, operations, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(mapInserManyResults(docs, r));
	    });
	  });
	}

	define.classMethod('insertMany', {callback: true, promise:true});

	/**
	 * @typedef {Object} Collection~BulkWriteOpResult
	 * @property {number} insertedCount Number of documents inserted.
	 * @property {number} matchedCount Number of documents matched for update.
	 * @property {number} modifiedCount Number of documents modified.
	 * @property {number} deletedCount Number of documents deleted.
	 * @property {number} upsertedCount Number of documents upserted.
	 * @property {object} insertedIds Inserted document generated Id's, hash key is the index of the originating operation
	 * @property {object} upsertedIds Upserted document generated Id's, hash key is the index of the originating operation
	 * @property {object} result The command result object.
	 */

	/**
	 * The callback format for inserts
	 * @callback Collection~bulkWriteOpCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection~BulkWriteOpResult} result The result object if the command was executed successfully.
	 */

	/**
	 * Perform a bulkWrite operation without a fluent API
	 *
	 * Legal operation types are
	 *
	 *  { insertOne: { document: { a: 1 } } }
	 *
	 *  { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
	 *
	 *  { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
	 *
	 *  { deleteOne: { filter: {c:1} } }
	 *
	 *  { deleteMany: { filter: {c:1} } }
	 *
	 *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true}}
	 *
	 * @method
	 * @param {object[]} operations Bulk operations to perform.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
	 * @param {boolean} [options.ordered=true] Execute write operation in ordered or unordered fashion.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~bulkWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.bulkWrite = function(operations, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {ordered:true};

	  if(!Array.isArray(operations)) {
	    throw MongoError.create({message: "operations must be an array of documents", driver:true });
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return bulkWrite(self, operations, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    bulkWrite(self, operations, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var bulkWrite = function(self, operations, options, callback) {
	  // Add ignoreUndfined
	  if(self.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = self.s.options.ignoreUndefined;
	  }

	  // Create the bulk operation
	  var bulk = options.ordered == true || options.ordered == null ? self.initializeOrderedBulkOp(options) : self.initializeUnorderedBulkOp(options);

	  // for each op go through and add to the bulk
	  for(var i = 0; i < operations.length; i++) {
	    bulk.raw(operations[i]);
	  }

	  // Final options for write concern
	  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);
	  var writeCon = finalOptions.writeConcern ? finalOptions.writeConcern : {};

	  // Execute the bulk
	  bulk.execute(writeCon, function(err, r) {
	    // We have connection level error
	    if(!r && err) return callback(err, null);
	    // We have single error
	    if(r && r.hasWriteErrors() && r.getWriteErrorCount() == 1) {
	      return callback(toError(r.getWriteErrorAt(0)), r);
	    }

	    // if(err) return callback(err);
	    r.insertedCount = r.nInserted;
	    r.matchedCount = r.nMatched;
	    r.modifiedCount = r.nModified || 0;
	    r.deletedCount = r.nRemoved;
	    r.upsertedCount = r.getUpsertedIds().length;
	    r.upsertedIds = {};
	    r.insertedIds = {};

	    // Update the n
	    r.n = r.insertedCount;

	    // Inserted documents
	    var inserted = r.getInsertedIds();
	    // Map inserted ids
	    for(var i = 0; i < inserted.length; i++) {
	      r.insertedIds[inserted[i].index] = inserted[i]._id;
	    }

	    // Upserted documents
	    var upserted = r.getUpsertedIds();
	    // Map upserted ids
	    for(var i = 0; i < upserted.length; i++) {
	      r.upsertedIds[upserted[i].index] = upserted[i]._id;
	    }

	    // Check if we have write errors
	    if(r.hasWriteErrors()) {
	      // Get all the errors
	      var errors = r.getWriteErrors();
	      // Return the MongoError object
	      return callback(toError({
	        message: 'write operation failed', code: errors[0].code, writeErrors: errors
	      }), r);
	    }

	    // Check if we have a writeConcern error
	    if(r.getWriteConcernError()) {
	      // Return the MongoError object
	      return callback(toError(r.getWriteConcernError()), r);      
	    }

	    // Return the results
	    callback(null, r);
	  });
	}

	var insertDocuments = function(self, docs, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};
	  // Ensure we are operating on an array op docs
	  docs = Array.isArray(docs) ? docs : [docs];

	  // Get the write concern options
	  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);
	  if(typeof finalOptions.checkKeys != 'boolean') finalOptions.checkKeys = true;

	  // If keep going set unordered
	  if(finalOptions.keepGoing == true) finalOptions.ordered = false;
	  finalOptions['serializeFunctions'] = options['serializeFunctions'] || self.s.serializeFunctions;

	  // Set up the force server object id
	  var forceServerObjectId = typeof options.forceServerObjectId == 'boolean'
	    ? options.forceServerObjectId : self.s.db.options.forceServerObjectId;

	  // Add _id if not specified
	  if(forceServerObjectId !== true){
	    for(var i = 0; i < docs.length; i++) {
	      if(docs[i]._id == null) docs[i]._id = self.s.pkFactory.createPk();
	    }
	  }

	  // File inserts
	  self.s.topology.insert(self.s.namespace, docs, finalOptions, function(err, result) {
	    if(callback == null) return;
	    if(err) return handleCallback(callback, err);
	    if(result == null) return handleCallback(callback, null, null);
	    if(result.result.code) return handleCallback(callback, toError(result.result));
	    if(result.result.writeErrors) return handleCallback(callback, toError(result.result.writeErrors[0]));
	    // Add docs to the list
	    result.ops = docs;
	    // Return the results
	    handleCallback(callback, null, result);
	  });
	}

	define.classMethod('bulkWrite', {callback: true, promise:true});

	/**
	 * @typedef {Object} Collection~WriteOpResult
	 * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany
	 * @property {object} connection The connection object used for the operation.
	 * @property {object} result The command result object.
	 */

	/**
	 * The callback format for inserts
	 * @callback Collection~writeOpCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection~WriteOpResult} result The result object if the command was executed successfully.
	 */

	/**
	 * @typedef {Object} Collection~insertWriteOpResult
	 * @property {Number} insertedCount The total amount of documents inserted.
	 * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany
	 * @property {ObjectId[]} insertedIds All the generated _id's for the inserted documents.
	 * @property {object} connection The connection object used for the operation.
	 * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).
	 * @property {Number} result.ok Is 1 if the command executed correctly.
	 * @property {Number} result.n The total count of documents inserted.
	 */

	/**
	 * @typedef {Object} Collection~insertOneWriteOpResult
	 * @property {Number} insertedCount The total amount of documents inserted.
	 * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany
	 * @property {ObjectId} insertedId The driver generated ObjectId for the insert operation.
	 * @property {object} connection The connection object used for the operation.
	 * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).
	 * @property {Number} result.ok Is 1 if the command executed correctly.
	 * @property {Number} result.n The total count of documents inserted.
	 */

	/**
	 * The callback format for inserts
	 * @callback Collection~insertWriteOpCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection~insertWriteOpResult} result The result object if the command was executed successfully.
	 */

	/**
	 * The callback format for inserts
	 * @callback Collection~insertOneWriteOpCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection~insertOneWriteOpResult} result The result object if the command was executed successfully.
	 */

	/**
	 * Inserts a single document or a an array of documents into MongoDB.
	 * @method
	 * @param {(object|object[])} docs Documents to insert.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
	 * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~insertWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 * @deprecated Use insertOne, insertMany or bulkWrite
	 */
	Collection.prototype.insert = function(docs, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {ordered:false};
	  docs = !Array.isArray(docs) ? [docs] : docs;

	  if(options.keepGoing == true) {
	    options.ordered = false;
	  }

	  return this.insertMany(docs, options, callback);
	}

	define.classMethod('insert', {callback: true, promise:true});

	/**
	 * @typedef {Object} Collection~updateWriteOpResult
	 * @property {Object} result The raw result returned from MongoDB, field will vary depending on server version.
	 * @property {Number} result.ok Is 1 if the command executed correctly.
	 * @property {Number} result.n The total count of documents scanned.
	 * @property {Number} result.nModified The total count of documents modified.
	 * @property {Object} connection The connection object used for the operation.
	 * @property {Number} matchedCount The number of documents that matched the filter.
	 * @property {Number} modifiedCount The number of documents that were modified.
	 * @property {Number} upsertedCount The number of documents upserted.
	 * @property {Object} upsertedId The upserted id.
	 * @property {ObjectId} upsertedId._id The upserted _id returned from the server.
	 */

	/**
	 * The callback format for inserts
	 * @callback Collection~updateWriteOpCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection~updateWriteOpResult} result The result object if the command was executed successfully.
	 */

	/**
	 * Update a single document on MongoDB
	 * @method
	 * @param {object} filter The Filter used to select the document to update
	 * @param {object} update The update operations to be applied to the document
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.upsert=false] Update operation is an upsert.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~updateWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.updateOne = function(filter, update, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = shallowClone(options)

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return updateOne(self, filter, update, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    updateOne(self, filter, update, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var updateOne = function(self, filter, update, options, callback) {
	  // Set single document update
	  options.multi = false;
	  // Execute update
	  updateDocuments(self, filter, update, options, function(err, r) {
	    if(callback == null) return;
	    if(err && callback) return callback(err);
	    if(r == null) return callback(null, {result: {ok:1}});
	    r.matchedCount = r.result.n;
	    r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;
	    r.upsertedId = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? r.result.upserted[0] : null;
	    r.upsertedCount = Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;
	    if(callback) callback(null, r);
	  });
	}

	define.classMethod('updateOne', {callback: true, promise:true});

	/**
	 * Replace a document on MongoDB
	 * @method
	 * @param {object} filter The Filter used to select the document to update
	 * @param {object} doc The Document that replaces the matching document
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.upsert=false] Update operation is an upsert.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~updateWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.replaceOne = function(filter, update, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = shallowClone(options)

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return replaceOne(self, filter, update, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    replaceOne(self, filter, update, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var replaceOne = function(self, filter, update, options, callback) {
	  // Set single document update
	  options.multi = false;
	  // Execute update
	  updateDocuments(self, filter, update, options, function(err, r) {
	    if(callback == null) return;
	    if(err && callback) return callback(err);
	    if(r == null) return callback(null, {result: {ok:1}});
	    r.matchedCount = r.result.n;
	    r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;
	    r.upsertedId = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? r.result.upserted[0] : null;
	    r.upsertedCount = Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;
	    r.ops = [update];
	    if(callback) callback(null, r);
	  });
	}

	define.classMethod('replaceOne', {callback: true, promise:true});

	/**
	 * Update multiple documents on MongoDB
	 * @method
	 * @param {object} filter The Filter used to select the document to update
	 * @param {object} update The update operations to be applied to the document
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.upsert=false] Update operation is an upsert.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {Collection~updateWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.updateMany = function(filter, update, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = shallowClone(options)

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return updateMany(self, filter, update, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    updateMany(self, filter, update, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var updateMany = function(self, filter, update, options, callback) {
	  // Set single document update
	  options.multi = true;
	  // Execute update
	  updateDocuments(self, filter, update, options, function(err, r) {
	    if(callback == null) return;
	    if(err && callback) return callback(err);
	    if(r == null) return callback(null, {result: {ok:1}});
	    r.matchedCount = r.result.n;
	    r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;
	    r.upsertedId = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? r.result.upserted[0] : null;
	    r.upsertedCount = Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;
	    if(callback) callback(null, r);
	  });
	}

	define.classMethod('updateMany', {callback: true, promise:true});

	var updateDocuments = function(self, selector, document, options, callback) {
	  if('function' === typeof options) callback = options, options = null;
	  if(options == null) options = {};
	  if(!('function' === typeof callback)) callback = null;

	  // If we are not providing a selector or document throw
	  if(selector == null || typeof selector != 'object') return callback(toError("selector must be a valid JavaScript object"));
	  if(document == null || typeof document != 'object') return callback(toError("document must be a valid JavaScript object"));

	  // Get the write concern options
	  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);

	  // Do we return the actual result document
	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  finalOptions['serializeFunctions'] = options['serializeFunctions'] || self.s.serializeFunctions;

	  // Execute the operation
	  var op = {q: selector, u: document};
	  if(options.upsert) op.upsert = true;
	  if(options.multi) op.multi = true;

	  // Update options
	  self.s.topology.update(self.s.namespace, [op], finalOptions, function(err, result) {
	    if(callback == null) return;
	    if(err) return handleCallback(callback, err, null);
	    if(result == null) return handleCallback(callback, null, null);
	    if(result.result.code) return handleCallback(callback, toError(result.result));
	    if(result.result.writeErrors) return handleCallback(callback, toError(result.result.writeErrors[0]));
	    // Return the results
	    handleCallback(callback, null, result);
	  });
	}

	/**
	 * Updates documents.
	 * @method
	 * @param {object} selector The selector for the update operation.
	 * @param {object} document The update document.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.upsert=false] Update operation is an upsert.
	 * @param {boolean} [options.multi=false] Update one/all documents with operation.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~writeOpCallback} [callback] The command result callback
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 * @deprecated use updateOne, updateMany or bulkWrite
	 */
	Collection.prototype.update = function(selector, document, options, callback) {
	  var self = this;

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return updateDocuments(self, selector, document, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    updateDocuments(self, selector, document, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('update', {callback: true, promise:true});

	/**
	 * @typedef {Object} Collection~deleteWriteOpResult
	 * @property {Object} result The raw result returned from MongoDB, field will vary depending on server version.
	 * @property {Number} result.ok Is 1 if the command executed correctly.
	 * @property {Number} result.n The total count of documents deleted.
	 * @property {Object} connection The connection object used for the operation.
	 * @property {Number} deletedCount The number of documents deleted.
	 */

	/**
	 * The callback format for inserts
	 * @callback Collection~deleteWriteOpCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection~deleteWriteOpResult} result The result object if the command was executed successfully.
	 */

	/**
	 * Delete a document on MongoDB
	 * @method
	 * @param {object} filter The Filter used to select the document to remove
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~deleteWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.deleteOne = function(filter, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  var options = shallowClone(options);

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return deleteOne(self, filter, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    deleteOne(self, filter, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var deleteOne = function(self, filter, options, callback) {
	  options.single = true;
	  removeDocuments(self, filter, options, function(err, r) {
	    if(callback == null) return;
	    if(err && callback) return callback(err);
	    if(r == null) return callback(null, {result: {ok:1}});
	    r.deletedCount = r.result.n;
	    if(callback) callback(null, r);
	  });
	}

	define.classMethod('deleteOne', {callback: true, promise:true});

	Collection.prototype.removeOne = Collection.prototype.deleteOne;

	define.classMethod('removeOne', {callback: true, promise:true});

	/**
	 * Delete multiple documents on MongoDB
	 * @method
	 * @param {object} filter The Filter used to select the documents to remove
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {Collection~deleteWriteOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.deleteMany = function(filter, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  var options = shallowClone(options);

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return deleteMany(self, filter, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    deleteMany(self, filter, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var deleteMany = function(self, filter, options, callback) {
	  options.single = false;
	  removeDocuments(self, filter, options, function(err, r) {
	    if(callback == null) return;
	    if(err && callback) return callback(err);
	    if(r == null) return callback(null, {result: {ok:1}});
	    r.deletedCount = r.result.n;
	    if(callback) callback(null, r);
	  });
	}

	var removeDocuments = function(self, selector, options, callback) {
	  if(typeof options == 'function') {
	    callback = options, options = {};
	  } else if (typeof selector === 'function') {
	    callback = selector;
	    options = {};
	    selector = {};
	  }

	  // Create an empty options object if the provided one is null
	  options = options || {};

	  // Get the write concern options
	  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);

	  // If selector is null set empty
	  if(selector == null) selector = {};

	  // Build the op
	  var op = {q: selector, limit: 0};
	  if(options.single) op.limit = 1;

	  // Execute the remove
	  self.s.topology.remove(self.s.namespace, [op], finalOptions, function(err, result) {
	    if(callback == null) return;
	    if(err) return handleCallback(callback, err, null);
	    if(result == null) return handleCallback(callback, null, null);
	    if(result.result.code) return handleCallback(callback, toError(result.result));
	    if(result.result.writeErrors) return handleCallback(callback, toError(result.result.writeErrors[0]));
	    // Return the results
	    handleCallback(callback, null, result);
	  });
	}

	define.classMethod('deleteMany', {callback: true, promise:true});

	Collection.prototype.removeMany = Collection.prototype.deleteMany;

	define.classMethod('removeMany', {callback: true, promise:true});

	/**
	 * Remove documents.
	 * @method
	 * @param {object} selector The selector for the update operation.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.single=false] Removes the first document found.
	 * @param {Collection~writeOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 * @deprecated use deleteOne, deleteMany or bulkWrite
	 */
	Collection.prototype.remove = function(selector, options, callback) {
	  var self = this;

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return removeDocuments(self, selector, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    removeDocuments(self, selector, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('remove', {callback: true, promise:true});

	/**
	 * Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic
	 * operators and update instead for more efficient operations.
	 * @method
	 * @param {object} doc Document to save
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {Collection~writeOpCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 * @deprecated use insertOne, insertMany, updateOne or updateMany
	 */
	Collection.prototype.save = function(doc, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // Add ignoreUndfined
	  if(this.s.options.ignoreUndefined) {
	    options = shallowClone(options);
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return save(self, doc, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    save(self, doc, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var save = function(self, doc, options, callback) {
	  // Get the write concern options
	  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);
	  // Establish if we need to perform an insert or update
	  if(doc._id != null) {
	    finalOptions.upsert = true;
	    return updateDocuments(self, {_id: doc._id}, doc, finalOptions, callback);
	  }

	  // Insert the document
	  insertDocuments(self, [doc], options, function(err, r) {
	    if(callback == null) return;
	    if(doc == null) return handleCallback(callback, null, null);
	    if(err) return handleCallback(callback, err, null);
	    handleCallback(callback, null, r);
	  });
	}

	define.classMethod('save', {callback: true, promise:true});

	/**
	 * The callback format for results
	 * @callback Collection~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {object} result The result object if the command was executed successfully.
	 */

	/**
	 * Fetches the first document that matches the query
	 * @method
	 * @param {object} query Query for find Operation
	 * @param {object} [options=null] Optional settings.
	 * @param {number} [options.limit=0] Sets the limit of documents returned in the query.
	 * @param {(array|object)} [options.sort=null] Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
	 * @param {object} [options.fields=null] The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}
	 * @param {number} [options.skip=0] Set to skip N documents ahead in your query (useful for pagination).
	 * @param {Object} [options.hint=null] Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
	 * @param {boolean} [options.explain=false] Explain the query instead of returning the data.
	 * @param {boolean} [options.snapshot=false] Snapshot query.
	 * @param {boolean} [options.timeout=false] Specify if the cursor can timeout.
	 * @param {boolean} [options.tailable=false] Specify if the cursor is tailable.
	 * @param {number} [options.batchSize=0] Set the batchSize for the getMoreCommand when iterating over the query results.
	 * @param {boolean} [options.returnKey=false] Only return the index key.
	 * @param {number} [options.maxScan=null] Limit the number of items to scan.
	 * @param {number} [options.min=null] Set index bounds.
	 * @param {number} [options.max=null] Set index bounds.
	 * @param {boolean} [options.showDiskLoc=false] Show disk location of results.
	 * @param {string} [options.comment=null] You can put a $comment field on a query to make looking in the profiler logs simpler.
	 * @param {boolean} [options.raw=false] Return all BSON documents as Raw Buffer documents.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {boolean} [options.partial=false] Specify if the cursor should return partial results when querying against a sharded system
	 * @param {number} [options.maxTimeMS=null] Number of miliseconds to wait before aborting the query.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.findOne = function() {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  var callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);

	  // Execute using callback
	  if(typeof callback == 'function') return findOne(self, args, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    findOne(self, args, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var findOne = function(self, args, callback) {
	  var cursor = self.find.apply(self, args).limit(-1).batchSize(1);
	  // Return the item
	  cursor.next(function(err, item) {
	    if(err != null) return handleCallback(callback, toError(err), null);
	    handleCallback(callback, null, item);
	  });
	}

	define.classMethod('findOne', {callback: true, promise:true});

	/**
	 * The callback format for the collection method, must be used if strict is specified
	 * @callback Collection~collectionResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection} collection The collection instance.
	 */

	/**
	 * Rename the collection.
	 *
	 * @method
	 * @param {string} newName New name of of the collection.
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.
	 * @param {Collection~collectionResultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.rename = function(newName, opt, callback) {
	  var self = this;
	  if(typeof opt == 'function') callback = opt, opt = {};
	  opt = opt || {};

	  // Execute using callback
	  if(typeof callback == 'function') return rename(self, newName, opt, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    rename(self, newName, opt, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var rename = function(self, newName, opt, callback) {
	  // Check the collection name
	  checkCollectionName(newName);
	  // Build the command
	  var renameCollection = f("%s.%s", self.s.dbName, self.s.name);
	  var toCollection =  f("%s.%s", self.s.dbName, newName);
	  var dropTarget = typeof opt.dropTarget == 'boolean' ? opt.dropTarget : false;
	  var cmd = {'renameCollection':renameCollection, 'to':toCollection, 'dropTarget':dropTarget};

	  // Execute against admin
	  self.s.db.admin().command(cmd, opt, function(err, doc) {
	    if(err) return handleCallback(callback, err, null);
	    // We have an error
	    if(doc.errmsg) return handleCallback(callback, toError(doc), null);
	    try {
	      return handleCallback(callback, null, new Collection(self.s.db, self.s.topology, self.s.dbName, newName, self.s.pkFactory, self.s.options));
	    } catch(err) {
	      return handleCallback(callback, toError(err), null);
	    }
	  });
	}

	define.classMethod('rename', {callback: true, promise:true});

	/**
	 * Drop the collection from the database, removing it permanently. New accesses will create a new collection.
	 *
	 * @method
	 * @param {Collection~resultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.drop = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return self.s.db.dropCollection(self.s.name, callback);
	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.dropCollection(self.s.name, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('drop', {callback: true, promise:true});

	/**
	 * Returns the options of the collection.
	 *
	 * @method
	 * @param {Collection~resultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.options = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return options(self, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    options(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var options = function(self, callback) {
	  self.s.db.listCollections({name: self.s.name}).toArray(function(err, collections) {
	    if(err) return handleCallback(callback, err);
	    if(collections.length == 0) {
	      return handleCallback(callback, MongoError.create({message: f("collection %s not found", self.s.namespace), driver:true }));
	    }

	    handleCallback(callback, err, collections[0].options || null);
	  });
	}

	define.classMethod('options', {callback: true, promise:true});

	/**
	 * Returns if the collection is a capped collection
	 *
	 * @method
	 * @param {Collection~resultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.isCapped = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return isCapped(self, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    isCapped(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var isCapped = function(self, callback) {
	  self.options(function(err, document) {
	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, null, document && document.capped);
	  });
	}

	define.classMethod('isCapped', {callback: true, promise:true});

	/**
	 * Creates an index on the db and collection collection.
	 * @method
	 * @param {(string|object)} fieldOrSpec Defines the index.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.unique=false] Creates an unique index.
	 * @param {boolean} [options.sparse=false] Creates a sparse index.
	 * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
	 * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.
	 * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.
	 * @param {number} [options.v=null] Specify the format version of the indexes.
	 * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 * @param {number} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.createIndex = function(fieldOrSpec, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() || {} : {};
	  options = typeof callback === 'function' ? options : callback;
	  options = options == null ? {} : options;

	  // Execute using callback
	  if(typeof callback == 'function') return createIndex(self, fieldOrSpec, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    createIndex(self, fieldOrSpec, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var createIndex = function(self, fieldOrSpec, options, callback) {
	  self.s.db.createIndex(self.s.name, fieldOrSpec, options, callback);
	}

	define.classMethod('createIndex', {callback: true, promise:true});

	/**
	 * Creates multiple indexes in the collection, this method is only supported for
	 * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported
	 * error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.
	 * @method
	 * @param {array} indexSpecs An array of index specifications to be created
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.createIndexes = function(indexSpecs, callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return createIndexes(self, indexSpecs, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    createIndexes(self, indexSpecs, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var createIndexes = function(self, indexSpecs, callback) {
	  // Ensure we generate the correct name if the parameter is not set
	  for(var i = 0; i < indexSpecs.length; i++) {
	    if(indexSpecs[i].name == null) {
	      var keys = [];

	      for(var name in indexSpecs[i].key) {
	        keys.push(f('%s_%s', name, indexSpecs[i].key[name]));
	      }

	      // Set the name
	      indexSpecs[i].name = keys.join('_');
	    }
	  }

	  // Execute the index
	  self.s.db.command({
	    createIndexes: self.s.name, indexes: indexSpecs
	  }, callback);
	}

	define.classMethod('createIndexes', {callback: true, promise:true});

	/**
	 * Drops an index from this collection.
	 * @method
	 * @param {string} indexName Name of the index to drop.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.dropIndex = function(indexName, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() || {} : {};
	  // Run only against primary
	  options.readPreference = ReadPreference.PRIMARY;

	  // Execute using callback
	  if(typeof callback == 'function') return dropIndex(self, indexName, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    dropIndex(self, indexName, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var dropIndex = function(self, indexName, options, callback) {
	  // Delete index command
	  var cmd = {'deleteIndexes':self.s.name, 'index':indexName};

	  // Execute command
	  self.s.db.command(cmd, options, function(err, result) {
	    if(typeof callback != 'function') return;
	    if(err) return handleCallback(callback, err, null);
	    handleCallback(callback, null, result);
	  });
	}

	define.classMethod('dropIndex', {callback: true, promise:true});

	/**
	 * Drops all indexes from this collection.
	 * @method
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.dropIndexes = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return dropIndexes(self, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    dropIndexes(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var dropIndexes = function(self, callback) {
	  self.dropIndex('*', function (err, result) {
	    if(err) return handleCallback(callback, err, false);
	    handleCallback(callback, null, true);
	  });
	}

	define.classMethod('dropIndexes', {callback: true, promise:true});

	/**
	 * Drops all indexes from this collection.
	 * @method
	 * @deprecated use dropIndexes
	 * @param {Collection~resultCallback} callback The command result callback
	 * @return {Promise} returns Promise if no [callback] passed
	 */
	Collection.prototype.dropAllIndexes = Collection.prototype.dropIndexes;

	define.classMethod('dropAllIndexes', {callback: true, promise:true});

	/**
	 * Reindex all indexes on the collection
	 * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
	 * @method
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.reIndex = function(options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // Execute using callback
	  if(typeof callback == 'function') return reIndex(self, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    reIndex(self, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var reIndex = function(self, options, callback) {
	  // Reindex
	  var cmd = {'reIndex':self.s.name};

	  // Execute the command
	  self.s.db.command(cmd, options, function(err, result) {
	    if(callback == null) return;
	    if(err) return handleCallback(callback, err, null);
	    handleCallback(callback, null, result.ok ? true : false);
	  });
	}

	define.classMethod('reIndex', {callback: true, promise:true});

	/**
	 * Get the list of all indexes information for the collection.
	 *
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {number} [options.batchSize=null] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection
	 * @return {CommandCursor}
	 */
	Collection.prototype.listIndexes = function(options) {
	  options = options || {};
	  // Clone the options
	  options = shallowClone(options);
	  // Set the CommandCursor constructor
	  options.cursorFactory = CommandCursor;
	  // Set the promiseLibrary
	  options.promiseLibrary = this.s.promiseLibrary;

	  // We have a list collections command
	  if(this.s.db.serverConfig.capabilities().hasListIndexesCommand) {
	    // Cursor options
	    var cursor = options.batchSize ? {batchSize: options.batchSize} : {}
	    // Build the command
	    var command = { listIndexes: this.s.name, cursor: cursor };
	    // Execute the cursor
	    return this.s.topology.cursor(f('%s.$cmd', this.s.dbName), command, options);
	  }

	  // Get the namespace
	  var ns = f('%s.system.indexes', this.s.dbName);
	  // Get the query
	  return this.s.topology.cursor(ns, {find: ns, query: {ns: this.s.namespace}}, options);
	};

	define.classMethod('listIndexes', {callback: false, promise:false, returns: [CommandCursor]});

	/**
	 * Ensures that an index exists, if it does not it creates it
	 * @method
	 * @deprecated use createIndexes instead
	 * @param {(string|object)} fieldOrSpec Defines the index.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.unique=false] Creates an unique index.
	 * @param {boolean} [options.sparse=false] Creates a sparse index.
	 * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
	 * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.
	 * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.
	 * @param {number} [options.v=null] Specify the format version of the indexes.
	 * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 * @param {number} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.ensureIndex = function(fieldOrSpec, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // Execute using callback
	  if(typeof callback == 'function') return ensureIndex(self, fieldOrSpec, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    ensureIndex(self, fieldOrSpec, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var ensureIndex = function(self, fieldOrSpec, options, callback) {
	  self.s.db.ensureIndex(self.s.name, fieldOrSpec, options, callback);
	}

	define.classMethod('ensureIndex', {callback: true, promise:true});

	/**
	 * Checks if one or more indexes exist on the collection, fails on first non-existing index
	 * @method
	 * @param {(string|array)} indexes One or more index names to check.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.indexExists = function(indexes, callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return indexExists(self, indexes, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    indexExists(self, indexes, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var indexExists = function(self, indexes, callback) {
	  self.indexInformation(function(err, indexInformation) {
	    // If we have an error return
	    if(err != null) return handleCallback(callback, err, null);
	    // Let's check for the index names
	    if(!Array.isArray(indexes)) return handleCallback(callback, null, indexInformation[indexes] != null);
	    // Check in list of indexes
	    for(var i = 0; i < indexes.length; i++) {
	      if(indexInformation[indexes[i]] == null) {
	        return handleCallback(callback, null, false);
	      }
	    }

	    // All keys found return true
	    return handleCallback(callback, null, true);
	  });
	}

	define.classMethod('indexExists', {callback: true, promise:true});

	/**
	 * Retrieves this collections index info.
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.full=false] Returns the full raw index information.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.indexInformation = function(options, callback) {
	  var self = this;
	  // Unpack calls
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() || {} : {};

	  // Execute using callback
	  if(typeof callback == 'function') return indexInformation(self, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    indexInformation(self, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var indexInformation = function(self, options, callback) {
	  self.s.db.indexInformation(self.s.name, options, callback);
	}

	define.classMethod('indexInformation', {callback: true, promise:true});

	/**
	 * The callback format for results
	 * @callback Collection~countCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {number} result The count of documents that matched the query.
	 */

	/**
	 * Count number of matching documents in the db to a query.
	 * @method
	 * @param {object} query The query for the count.
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.limit=null] The limit of documents to count.
	 * @param {boolean} [options.skip=null] The number of documents to skip for the count.
	 * @param {string} [options.hint=null] An index name hint for the query.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {Collection~countCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.count = function(query, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  var queryOption = args.length ? args.shift() || {} : {};
	  var optionsOption = args.length ? args.shift() || {} : {};

	  // Execute using callback
	  if(typeof callback == 'function') return count(self, queryOption, optionsOption, callback);

	  // Check if query is empty
	  query = query || {};
	  options = options || {};

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    count(self, query, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var count = function(self, query, options, callback) {
	  var skip = options.skip;
	  var limit = options.limit;
	  var hint = options.hint;
	  var maxTimeMS = options.maxTimeMS;

	  // Final query
	  var cmd = {
	      'count': self.s.name, 'query': query
	    , 'fields': null
	  };

	  // Add limit and skip if defined
	  if(typeof skip == 'number') cmd.skip = skip;
	  if(typeof limit == 'number') cmd.limit = limit;
	  if(hint) options.hint = hint;

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(self, options, self.s.db, self);

	  // Do we have a readConcern specified
	  if(self.s.readConcern) {
	    cmd.readConcern = self.s.readConcern;
	  }

	  // Execute command
	  self.s.db.command(cmd, options, function(err, result) {
	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, null, result.n);
	  });
	}

	define.classMethod('count', {callback: true, promise:true});

	/**
	 * The distinct command returns returns a list of distinct values for the given key across a collection.
	 * @method
	 * @param {string} key Field of the document to find distinct values for.
	 * @param {object} query The query for filtering the set of documents to which we apply the distinct filter.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.distinct = function(key, query, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  var queryOption = args.length ? args.shift() || {} : {};
	  var optionsOption = args.length ? args.shift() || {} : {};

	  // Execute using callback
	  if(typeof callback == 'function') return distinct(self, key, queryOption, optionsOption, callback);

	  // Ensure the query and options are set
	  query = query || {};
	  options = options || {};

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    distinct(self, key, query, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var distinct = function(self, key, query, options, callback) {
	  // maxTimeMS option
	  var maxTimeMS = options.maxTimeMS;

	  // Distinct command
	  var cmd = {
	    'distinct': self.s.name, 'key': key, 'query': query
	  };

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(self, options, self.s.db, self);

	  // Do we have a readConcern specified
	  if(self.s.readConcern) {
	    cmd.readConcern = self.s.readConcern;
	  }

	  // Execute the command
	  self.s.db.command(cmd, options, function(err, result) {
	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, null, result.values);
	  });
	}

	define.classMethod('distinct', {callback: true, promise:true});

	/**
	 * Retrieve all the indexes on the collection.
	 * @method
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.indexes = function(callback) {
	  var self = this;
	  // Execute using callback
	  if(typeof callback == 'function') return indexes(self, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    indexes(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var indexes = function(self, callback) {
	  self.s.db.indexInformation(self.s.name, {full:true}, callback);
	}

	define.classMethod('indexes', {callback: true, promise:true});

	/**
	 * Get all the collection statistics.
	 *
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {number} [options.scale=null] Divide the returned sizes by scale value.
	 * @param {Collection~resultCallback} [callback] The collection result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.stats = function(options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};

	  // Execute using callback
	  if(typeof callback == 'function') return stats(self, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    stats(self, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var stats = function(self, options, callback) {
	  // Build command object
	  var commandObject = {
	    collStats:self.s.name
	  }

	  // Check if we have the scale value
	  if(options['scale'] != null) commandObject['scale'] = options['scale'];

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(self, options, self.s.db, self);

	  // Execute the command
	  self.s.db.command(commandObject, options, callback);
	}

	define.classMethod('stats', {callback: true, promise:true});

	/**
	 * @typedef {Object} Collection~findAndModifyWriteOpResult
	 * @property {object} value Document returned from findAndModify command.
	 * @property {object} lastErrorObject The raw lastErrorObject returned from the command.
	 * @property {Number} ok Is 1 if the command executed correctly.
	 */

	/**
	 * The callback format for inserts
	 * @callback Collection~findAndModifyCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection~findAndModifyWriteOpResult} result The result object if the command was executed successfully.
	 */

	/**
	 * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.
	 *
	 * @method
	 * @param {object} filter Document selection filter.
	 * @param {object} [options=null] Optional settings.
	 * @param {object} [options.projection=null] Limits the fields to return for all matching documents.
	 * @param {object} [options.sort=null] Determines which document the operation modifies if the query selects multiple documents.
	 * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.
	 * @param {Collection~findAndModifyCallback} [callback] The collection result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.findOneAndDelete = function(filter, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // Execute using callback
	  if(typeof callback == 'function') return findOneAndDelete(self, filter, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    options = options || {};

	    findOneAndDelete(self, filter, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var findOneAndDelete = function(self, filter, options, callback) {
	  // Final options
	  var finalOptions = shallowClone(options);
	  finalOptions['fields'] = options.projection;
	  finalOptions['remove'] = true;
	  // Execute find and Modify
	  self.findAndModify(
	      filter
	    , options.sort
	    , null
	    , finalOptions
	    , callback
	  );
	}

	define.classMethod('findOneAndDelete', {callback: true, promise:true});

	/**
	 * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.
	 *
	 * @method
	 * @param {object} filter Document selection filter.
	 * @param {object} replacement Document replacing the matching document.
	 * @param {object} [options=null] Optional settings.
	 * @param {object} [options.projection=null] Limits the fields to return for all matching documents.
	 * @param {object} [options.sort=null] Determines which document the operation modifies if the query selects multiple documents.
	 * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.
	 * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.
	 * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.
	 * @param {Collection~findAndModifyCallback} [callback] The collection result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.findOneAndReplace = function(filter, replacement, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // Execute using callback
	  if(typeof callback == 'function') return findOneAndReplace(self, filter, replacement, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    options = options || {};

	    findOneAndReplace(self, filter, replacement, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var findOneAndReplace = function(self, filter, replacement, options, callback) {
	  // Final options
	  var finalOptions = shallowClone(options);
	  finalOptions['fields'] = options.projection;
	  finalOptions['update'] = true;
	  finalOptions['new'] = typeof options.returnOriginal == 'boolean' ? !options.returnOriginal : false;
	  finalOptions['upsert'] = typeof options.upsert == 'boolean' ? options.upsert : false;

	  // Execute findAndModify
	  self.findAndModify(
	      filter
	    , options.sort
	    , replacement
	    , finalOptions
	    , callback
	  );
	}

	define.classMethod('findOneAndReplace', {callback: true, promise:true});

	/**
	 * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.
	 *
	 * @method
	 * @param {object} filter Document selection filter.
	 * @param {object} update Update operations to be performed on the document
	 * @param {object} [options=null] Optional settings.
	 * @param {object} [options.projection=null] Limits the fields to return for all matching documents.
	 * @param {object} [options.sort=null] Determines which document the operation modifies if the query selects multiple documents.
	 * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.
	 * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.
	 * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.
	 * @param {Collection~findAndModifyCallback} [callback] The collection result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.findOneAndUpdate = function(filter, update, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // Execute using callback
	  if(typeof callback == 'function') return findOneAndUpdate(self, filter, update, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    options = options || {};

	    findOneAndUpdate(self, filter, update, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var findOneAndUpdate = function(self, filter, update, options, callback) {
	  // Final options
	  var finalOptions = shallowClone(options);
	  finalOptions['fields'] = options.projection;
	  finalOptions['update'] = true;
	  finalOptions['new'] = typeof options.returnOriginal == 'boolean' ? !options.returnOriginal : false;
	  finalOptions['upsert'] = typeof options.upsert == 'boolean' ? options.upsert : false;

	  // Execute findAndModify
	  self.findAndModify(
	      filter
	    , options.sort
	    , update
	    , finalOptions
	    , callback
	  );
	}

	define.classMethod('findOneAndUpdate', {callback: true, promise:true});

	/**
	 * Find and update a document.
	 * @method
	 * @param {object} query Query object to locate the object to modify.
	 * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.
	 * @param {object} doc The fields/vals to be updated.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.remove=false] Set to true to remove the object before returning.
	 * @param {boolean} [options.upsert=false] Perform an upsert operation.
	 * @param {boolean} [options.new=false] Set to true if you want to return the modified object rather than the original. Ignored for remove.
	 * @param {object} [options.fields=null] Object containing the field projection for the result returned from the operation.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 * @deprecated use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead
	 */
	Collection.prototype.findAndModify = function(query, sort, doc, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  sort = args.length ? args.shift() || [] : [];
	  doc = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};

	  // Clone options
	  var options = shallowClone(options);
	  // Force read preference primary
	  options.readPreference = ReadPreference.PRIMARY;

	  // Execute using callback
	  if(typeof callback == 'function') return findAndModify(self, query, sort, doc, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    options = options || {};

	    findAndModify(self, query, sort, doc, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var findAndModify = function(self, query, sort, doc, options, callback) {
	  // Create findAndModify command object
	  var queryObject = {
	     'findandmodify': self.s.name
	   , 'query': query
	  };

	  sort = formattedOrderClause(sort);
	  if(sort) {
	    queryObject.sort = sort;
	  }

	  queryObject.new = options.new ? true : false;
	  queryObject.remove = options.remove ? true : false;
	  queryObject.upsert = options.upsert ? true : false;

	  if(options.fields) {
	    queryObject.fields = options.fields;
	  }

	  if(doc && !options.remove) {
	    queryObject.update = doc;
	  }

	  // Either use override on the function, or go back to default on either the collection
	  // level or db
	  if(options['serializeFunctions'] != null) {
	    options['serializeFunctions'] = options['serializeFunctions'];
	  } else {
	    options['serializeFunctions'] = self.s.serializeFunctions;
	  }

	  // No check on the documents
	  options.checkKeys = false;

	  // Get the write concern settings
	  var finalOptions = writeConcern(options, self.s.db, self, options);

	  // Decorate the findAndModify command with the write Concern
	  if(finalOptions.writeConcern) {
	    queryObject.writeConcern = finalOptions.writeConcern;
	  }

	  // Have we specified bypassDocumentValidation
	  if(typeof finalOptions.bypassDocumentValidation == 'boolean') {
	    queryObject.bypassDocumentValidation = finalOptions.bypassDocumentValidation;
	  }

	  // Execute the command
	  self.s.db.command(queryObject
	    , options, function(err, result) {
	      if(err) return handleCallback(callback, err, null);
	      return handleCallback(callback, null, result);
	  });
	}

	define.classMethod('findAndModify', {callback: true, promise:true});

	/**
	 * Find and remove a document.
	 * @method
	 * @param {object} query Query object to locate the object to modify.
	 * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 * @deprecated use findOneAndDelete instead
	 */
	Collection.prototype.findAndRemove = function(query, sort, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  sort = args.length ? args.shift() || [] : [];
	  options = args.length ? args.shift() || {} : {};

	  // Execute using callback
	  if(typeof callback == 'function') return findAndRemove(self, query, sort, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    findAndRemove(self, query, sort, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var findAndRemove = function(self, query, sort, options, callback) {
	  // Add the remove option
	  options['remove'] = true;
	  // Execute the callback
	  self.findAndModify(query, sort, null, options, callback);
	}

	define.classMethod('findAndRemove', {callback: true, promise:true});

	/**
	 * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2
	 * @method
	 * @param {object} pipeline Array containing all the aggregation framework commands for the execution.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {object} [options.cursor=null] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.
	 * @param {number} [options.cursor.batchSize=null] The batchSize for the cursor
	 * @param {boolean} [options.explain=false] Explain returns the aggregation execution plan (requires mongodb 2.6 >).
	 * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).
	 * @param {number} [options.maxTimeMS=null] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~resultCallback} callback The command result callback
	 * @return {(null|AggregationCursor)}
	 */
	Collection.prototype.aggregate = function(pipeline, options, callback) {
	  var self = this;
	  if(Array.isArray(pipeline)) {
	    // Set up callback if one is provided
	    if(typeof options == 'function') {
	      callback = options;
	      options = {};
	    }

	    // If we have no options or callback we are doing
	    // a cursor based aggregation
	    if(options == null && callback == null) {
	      options = {};
	    }
	  } else {
	    // Aggregation pipeline passed as arguments on the method
	    var args = Array.prototype.slice.call(arguments, 0);
	    // Get the callback
	    callback = args.pop();
	    // Get the possible options object
	    var opts = args[args.length - 1];
	    // If it contains any of the admissible options pop it of the args
	    options = opts && (opts.readPreference
	      || opts.explain || opts.cursor || opts.out
	      || opts.maxTimeMS || opts.allowDiskUse) ? args.pop() : {};
	      // Left over arguments is the pipeline
	    pipeline = args;
	  }

	  // If out was specified
	  if(typeof options.out == 'string') {
	    pipeline.push({$out: options.out});
	  }

	  // Build the command
	  var command = { aggregate : this.s.name, pipeline : pipeline};

	  // If we have bypassDocumentValidation set
	  if(typeof options.bypassDocumentValidation == 'boolean') {
	    command.bypassDocumentValidation = options.bypassDocumentValidation;
	  }

	  // Do we have a readConcern specified
	  if(this.s.readConcern) {
	    command.readConcern = this.s.readConcern;
	  }

	  // If we have allowDiskUse defined
	  if(options.allowDiskUse) command.allowDiskUse = options.allowDiskUse;
	  if(typeof options.maxTimeMS == 'number') command.maxTimeMS = options.maxTimeMS;

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(this, options, this.s.db, this);

	  // If explain has been specified add it
	  if(options.explain) command.explain = options.explain;

	  // Validate that cursor options is valid
	  if(options.cursor != null && typeof options.cursor != 'object') {
	    throw toError('cursor options must be an object');
	  }

	  // promiseLibrary
	  options.promiseLibrary = this.s.promiseLibrary;

	  // Set the AggregationCursor constructor
	  options.cursorFactory = AggregationCursor;
	  if(typeof callback != 'function') {
	    if(this.s.topology.capabilities().hasAggregationCursor) {
	      options.cursor = options.cursor || { batchSize : 1000 };
	      command.cursor = options.cursor;
	    }

	    // Allow disk usage command
	    if(typeof options.allowDiskUse == 'boolean') command.allowDiskUse = options.allowDiskUse;
	    if(typeof options.maxTimeMS == 'number') command.maxTimeMS = options.maxTimeMS;

	    // Execute the cursor
	    return this.s.topology.cursor(this.s.namespace, command, options);
	  }

	  var cursor = null;
	  // We do not allow cursor
	  if(options.cursor) {
	    return this.s.topology.cursor(this.s.namespace, command, options);
	  }

	  // Execute the command
	  this.s.db.command(command, options, function(err, result) {
	    if(err) {
	      handleCallback(callback, err);
	    } else if(result['err'] || result['errmsg']) {
	      handleCallback(callback, toError(result));
	    } else if(typeof result == 'object' && result['serverPipeline']) {
	      handleCallback(callback, null, result['serverPipeline']);
	    } else if(typeof result == 'object' && result['stages']) {
	      handleCallback(callback, null, result['stages']);
	    } else {
	      handleCallback(callback, null, result.result);
	    }
	  });
	}

	define.classMethod('aggregate', {callback: true, promise:false});

	/**
	 * The callback format for results
	 * @callback Collection~parallelCollectionScanCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Cursor[]} cursors A list of cursors returned allowing for parallel reading of collection.
	 */

	/**
	 * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are
	 * no ordering guarantees for returned results.
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {number} [options.batchSize=null] Set the batchSize for the getMoreCommand when iterating over the query results.
	 * @param {number} [options.numCursors=1] The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors)
	 * @param {boolean} [options.raw=false] Return all BSON documents as Raw Buffer documents.
	 * @param {Collection~parallelCollectionScanCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.parallelCollectionScan = function(options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {numCursors: 1};
	  // Set number of cursors to 1
	  options.numCursors = options.numCursors || 1;
	  options.batchSize = options.batchSize || 1000;

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(this, options, this.s.db, this);

	  // Add a promiseLibrary
	  options.promiseLibrary = this.s.promiseLibrary;

	  // Execute using callback
	  if(typeof callback == 'function') return parallelCollectionScan(self, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    parallelCollectionScan(self, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var parallelCollectionScan = function(self, options, callback) {
	  // Create command object
	  var commandObject = {
	      parallelCollectionScan: self.s.name
	    , numCursors: options.numCursors
	  }

	  // Do we have a readConcern specified
	  if(self.s.readConcern) {
	    commandObject.readConcern = self.s.readConcern;
	  }

	  // Execute the command
	  self.s.db.command(commandObject, options, function(err, result) {
	    if(err) return handleCallback(callback, err, null);
	    if(result == null) return handleCallback(callback, new Error("no result returned for parallelCollectionScan"), null);

	    var cursors = [];
	    // Create command cursors for each item
	    for(var i = 0; i < result.cursors.length; i++) {
	      var rawId = result.cursors[i].cursor.id
	      // Convert cursorId to Long if needed
	      var cursorId = typeof rawId == 'number' ? Long.fromNumber(rawId) : rawId;

	      // Command cursor options
	      var cmd = {
	          batchSize: options.batchSize
	        , cursorId: cursorId
	        , items: result.cursors[i].cursor.firstBatch
	      }

	      // Add a command cursor
	      cursors.push(self.s.topology.cursor(self.s.namespace, cursorId, options));
	    }

	    handleCallback(callback, null, cursors);
	  });
	}

	define.classMethod('parallelCollectionScan', {callback: true, promise:true});

	/**
	 * Execute the geoNear command to search for items in the collection
	 *
	 * @method
	 * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.
	 * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {number} [options.num=null] Max number of results to return.
	 * @param {number} [options.minDistance=null] Include results starting at minDistance from a point (2.6 or higher)
	 * @param {number} [options.maxDistance=null] Include results up to maxDistance from the point.
	 * @param {number} [options.distanceMultiplier=null] Include a value to multiply the distances with allowing for range conversions.
	 * @param {object} [options.query=null] Filter the results by a query.
	 * @param {boolean} [options.spherical=false] Perform query using a spherical model.
	 * @param {boolean} [options.uniqueDocs=false] The closest location in a document to the center of the search region will always be returned MongoDB > 2.X.
	 * @param {boolean} [options.includeLocs=false] Include the location data fields in the top level of the results MongoDB > 2.X.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.geoNear = function(x, y, options, callback) {
	  var self = this;
	  var point = typeof(x) == 'object' && x
	    , args = Array.prototype.slice.call(arguments, point?1:2);

	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};

	  // Execute using callback
	  if(typeof callback == 'function') return geoNear(self, x, y, point, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    geoNear(self, x, y, point, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var geoNear = function(self, x, y, point, options, callback) {
	  // Build command object
	  var commandObject = {
	    geoNear:self.s.name,
	    near: point || [x, y]
	  }

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(self, options, self.s.db, self);

	  // Exclude readPreference and existing options to prevent user from
	  // shooting themselves in the foot
	  var exclude = {
	    readPreference: true,
	    geoNear: true,
	    near: true
	  };

	  // Filter out any excluded objects
	  commandObject = decorateCommand(commandObject, options, exclude);

	  // Do we have a readConcern specified
	  if(self.s.readConcern) {
	    commandObject.readConcern = self.s.readConcern;
	  }

	  // Execute the command
	  self.s.db.command(commandObject, options, function (err, res) {
	    if(err) return handleCallback(callback, err);
	    if(res.err || res.errmsg) return handleCallback(callback, toError(res));
	    // should we only be returning res.results here? Not sure if the user
	    // should see the other return information
	    handleCallback(callback, null, res);
	  });
	}

	define.classMethod('geoNear', {callback: true, promise:true});

	/**
	 * Execute a geo search using a geo haystack index on a collection.
	 *
	 * @method
	 * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.
	 * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {number} [options.maxDistance=null] Include results up to maxDistance from the point.
	 * @param {object} [options.search=null] Filter the results by a query.
	 * @param {number} [options.limit=false] Max number of results to return.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.geoHaystackSearch = function(x, y, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  // Fetch all commands
	  options = args.length ? args.shift() || {} : {};

	  // Execute using callback
	  if(typeof callback == 'function') return geoHaystackSearch(self, x, y, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    geoHaystackSearch(self, x, y, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var geoHaystackSearch = function(self, x, y, options, callback) {
	  // Build command object
	  var commandObject = {
	    geoSearch: self.s.name,
	    near: [x, y]
	  }

	  // Remove read preference from hash if it exists
	  commandObject = decorateCommand(commandObject, options, {readPreference: true});

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(self, options, self.s.db, self);

	  // Do we have a readConcern specified
	  if(self.s.readConcern) {
	    commandObject.readConcern = self.s.readConcern;
	  }

	  // Execute the command
	  self.s.db.command(commandObject, options, function (err, res) {
	    if(err) return handleCallback(callback, err);
	    if(res.err || res.errmsg) handleCallback(callback, utils.toError(res));
	    // should we only be returning res.results here? Not sure if the user
	    // should see the other return information
	    handleCallback(callback, null, res);
	  });
	}

	define.classMethod('geoHaystackSearch', {callback: true, promise:true});

	/**
	 * Group function helper
	 * @ignore
	 */
	var groupFunction = function () {
	  var c = db[ns].find(condition);
	  var map = new Map();
	  var reduce_function = reduce;

	  while (c.hasNext()) {
	    var obj = c.next();
	    var key = {};

	    for (var i = 0, len = keys.length; i < len; ++i) {
	      var k = keys[i];
	      key[k] = obj[k];
	    }

	    var aggObj = map.get(key);

	    if (aggObj == null) {
	      var newObj = Object.extend({}, key);
	      aggObj = Object.extend(newObj, initial);
	      map.put(key, aggObj);
	    }

	    reduce_function(obj, aggObj);
	  }

	  return { "result": map.values() };
	}.toString();

	/**
	 * Run a group command across a collection
	 *
	 * @method
	 * @param {(object|array|function|code)} keys An object, array or function expressing the keys to group by.
	 * @param {object} condition An optional condition that must be true for a row to be considered.
	 * @param {object} initial Initial value of the aggregation counter object.
	 * @param {(function|Code)} reduce The reduce function aggregates (reduces) the objects iterated
	 * @param {(function|Code)} finalize An optional function to be run on each item in the result set just before the item is returned.
	 * @param {boolean} command Specify if you wish to run using the internal group command or using eval, default is true.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.group = function(keys, condition, initial, reduce, finalize, command, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 3);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  // Fetch all commands
	  reduce = args.length ? args.shift() : null;
	  finalize = args.length ? args.shift() : null;
	  command = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};

	  // Make sure we are backward compatible
	  if(!(typeof finalize == 'function')) {
	    command = finalize;
	    finalize = null;
	  }

	  if (!Array.isArray(keys) && keys instanceof Object && typeof(keys) !== 'function' && !(keys instanceof Code)) {
	    keys = Object.keys(keys);
	  }

	  if(typeof reduce === 'function') {
	    reduce = reduce.toString();
	  }

	  if(typeof finalize === 'function') {
	    finalize = finalize.toString();
	  }

	  // Set up the command as default
	  command = command == null ? true : command;

	  // Execute using callback
	  if(typeof callback == 'function') return group(self, keys, condition, initial, reduce, finalize, command, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    group(self, keys, condition, initial, reduce, finalize, command, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	var group = function(self, keys, condition, initial, reduce, finalize, command, options, callback) {
	  // Execute using the command
	  if(command) {
	    var reduceFunction = reduce instanceof Code
	        ? reduce
	        : new Code(reduce);

	    var selector = {
	      group: {
	          'ns': self.s.name
	        , '$reduce': reduceFunction
	        , 'cond': condition
	        , 'initial': initial
	        , 'out': "inline"
	      }
	    };

	    // if finalize is defined
	    if(finalize != null) selector.group['finalize'] = finalize;
	    // Set up group selector
	    if ('function' === typeof keys || keys instanceof Code) {
	      selector.group.$keyf = keys instanceof Code
	        ? keys
	        : new Code(keys);
	    } else {
	      var hash = {};
	      keys.forEach(function (key) {
	        hash[key] = 1;
	      });
	      selector.group.key = hash;
	    }

	    // Ensure we have the right read preference inheritance
	    options = getReadPreference(self, options, self.s.db, self);
	    
	    // Do we have a readConcern specified
	    if(self.s.readConcern) {
	      selector.readConcern = self.s.readConcern;
	    }

	    // Execute command
	    self.s.db.command(selector, options, function(err, result) {
	      if(err) return handleCallback(callback, err, null);
	      handleCallback(callback, null, result.retval);
	    });
	  } else {
	    // Create execution scope
	    var scope = reduce != null && reduce instanceof Code
	      ? reduce.scope
	      : {};

	    scope.ns = self.s.name;
	    scope.keys = keys;
	    scope.condition = condition;
	    scope.initial = initial;

	    // Pass in the function text to execute within mongodb.
	    var groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');

	    self.s.db.eval(new Code(groupfn, scope), function (err, results) {
	      if (err) return handleCallback(callback, err, null);
	      handleCallback(callback, null, results.result || results);
	    });
	  }
	}

	define.classMethod('group', {callback: true, promise:true});

	/**
	 * Functions that are passed as scope args must
	 * be converted to Code instances.
	 * @ignore
	 */
	function processScope (scope) {
	  if(!isObject(scope)) {
	    return scope;
	  }

	  var keys = Object.keys(scope);
	  var i = keys.length;
	  var key;
	  var new_scope = {};

	  while (i--) {
	    key = keys[i];
	    if ('function' == typeof scope[key]) {
	      new_scope[key] = new Code(String(scope[key]));
	    } else {
	      new_scope[key] = processScope(scope[key]);
	    }
	  }

	  return new_scope;
	}

	/**
	 * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.
	 *
	 * @method
	 * @param {(function|string)} map The mapping function.
	 * @param {(function|string)} reduce The reduce function.
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {object} [options.out=null] Sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*
	 * @param {object} [options.query=null] Query filter object.
	 * @param {object} [options.sort=null] Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.
	 * @param {number} [options.limit=null] Number of objects to return from collection.
	 * @param {boolean} [options.keeptemp=false] Keep temporary data.
	 * @param {(function|string)} [options.finalize=null] Finalize function.
	 * @param {object} [options.scope=null] Can pass in variables that can be access from map/reduce/finalize.
	 * @param {boolean} [options.jsMode=false] It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.
	 * @param {boolean} [options.verbose=false] Provide statistics on job execution time.
	 * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
	 * @param {Collection~resultCallback} [callback] The command result callback
	 * @throws {MongoError}
	 * @return {Promise} returns Promise if no callback passed
	 */
	Collection.prototype.mapReduce = function(map, reduce, options, callback) {
	  var self = this;
	  if('function' === typeof options) callback = options, options = {};
	  // Out must allways be defined (make sure we don't break weirdly on pre 1.8+ servers)
	  if(null == options.out) {
	    throw new Error("the out option parameter must be defined, see mongodb docs for possible values");
	  }

	  if('function' === typeof map) {
	    map = map.toString();
	  }

	  if('function' === typeof reduce) {
	    reduce = reduce.toString();
	  }

	  if('function' === typeof options.finalize) {
	    options.finalize = options.finalize.toString();
	  }

	  // Execute using callback
	  if(typeof callback == 'function') return mapReduce(self, map, reduce, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    mapReduce(self, map, reduce, options, function(err, r, r1) {
	      if(err) return reject(err);
	      if(r instanceof Collection) return resolve(r);
	      resolve({results: r, stats: r1});
	    });
	  });
	}

	var mapReduce = function(self, map, reduce, options, callback) {
	  var mapCommandHash = {
	      mapreduce: self.s.name
	    , map: map
	    , reduce: reduce
	  };

	  // Add any other options passed in
	  for(var n in options) {
	    if('scope' == n) {
	      mapCommandHash[n] = processScope(options[n]);
	    } else {
	      mapCommandHash[n] = options[n];
	    }
	  }

	  // Ensure we have the right read preference inheritance
	  options = getReadPreference(self, options, self.s.db, self);

	  // If we have a read preference and inline is not set as output fail hard
	  if((options.readPreference != false && options.readPreference != 'primary')
	    && options['out'] && (options['out'].inline != 1 && options['out'] != 'inline')) {
	      options.readPreference = 'primary';
	  }

	  // Is bypassDocumentValidation specified
	  if(typeof options.bypassDocumentValidation == 'boolean') {
	    mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;
	  }

	  // Do we have a readConcern specified
	  if(self.s.readConcern) {
	    mapCommandHash.readConcern = self.s.readConcern;
	  }

	  // Execute command
	  self.s.db.command(mapCommandHash, {readPreference:options.readPreference}, function (err, result) {
	    if(err) return handleCallback(callback, err);
	    // Check if we have an error
	    if(1 != result.ok || result.err || result.errmsg) {
	      return handleCallback(callback, toError(result));
	    }

	    // Create statistics value
	    var stats = {};
	    if(result.timeMillis) stats['processtime'] = result.timeMillis;
	    if(result.counts) stats['counts'] = result.counts;
	    if(result.timing) stats['timing'] = result.timing;

	    // invoked with inline?
	    if(result.results) {
	      // If we wish for no verbosity
	      if(options['verbose'] == null || !options['verbose']) {
	        return handleCallback(callback, null, result.results);
	      }

	      return handleCallback(callback, null, result.results, stats);
	    }

	    // The returned collection
	    var collection = null;

	    // If we have an object it's a different db
	    if(result.result != null && typeof result.result == 'object') {
	      var doc = result.result;
	      collection = self.s.db.db(doc.db).collection(doc.collection);
	    } else {
	      // Create a collection object that wraps the result collection
	      collection = self.s.db.collection(result.result)
	    }

	    // If we wish for no verbosity
	    if(options['verbose'] == null || !options['verbose']) {
	      return handleCallback(callback, err, collection);
	    }

	    // Return stats as third set of values
	    handleCallback(callback, err, collection, stats);
	  });
	}

	define.classMethod('mapReduce', {callback: true, promise:true});

	/**
	 * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.
	 *
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @return {UnorderedBulkOperation}
	 */
	Collection.prototype.initializeUnorderedBulkOp = function(options) {
	  options = options || {};
	  options.promiseLibrary = this.s.promiseLibrary;
	  return unordered(this.s.topology, this, options);
	}

	define.classMethod('initializeUnorderedBulkOp', {callback: false, promise:false, returns: [ordered.UnorderedBulkOperation]});

	/**
	 * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.
	 *
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {OrderedBulkOperation} callback The command result callback
	 * @return {null}
	 */
	Collection.prototype.initializeOrderedBulkOp = function(options) {
	  options = options || {};
	  options.promiseLibrary = this.s.promiseLibrary;
	  return ordered(this.s.topology, this, options);
	}

	define.classMethod('initializeOrderedBulkOp', {callback: false, promise:false, returns: [ordered.OrderedBulkOperation]});

	// Get write concern
	var writeConcern = function(target, db, col, options) {
	  if(options.w != null || options.j != null || options.fsync != null) {
	    var opts = {};
	    if(options.w != null) opts.w = options.w;
	    if(options.wtimeout != null) opts.wtimeout = options.wtimeout;
	    if(options.j != null) opts.j = options.j;
	    if(options.fsync != null) opts.fsync = options.fsync;
	    target.writeConcern = opts;
	  } else if(col.writeConcern.w != null || col.writeConcern.j != null || col.writeConcern.fsync != null) {
	    target.writeConcern = col.writeConcern;
	  } else if(db.writeConcern.w != null || db.writeConcern.j != null || db.writeConcern.fsync != null) {
	    target.writeConcern = db.writeConcern;
	  }

	  return target
	}

	// Figure out the read preference
	var getReadPreference = function(self, options, db, coll) {
	  var r = null
	  if(options.readPreference) {
	    r = options.readPreference
	  } else if(self.s.readPreference) {
	    r = self.s.readPreference
	  } else if(db.readPreference) {
	    r = db.readPreference;
	  }

	  if(r instanceof ReadPreference) {
	    options.readPreference = new CoreReadPreference(r.mode, r.tags);
	  } else if(typeof r == 'string') {
	    options.readPreference = new CoreReadPreference(r);
	  }

	  return options;
	}

	var testForFields = {
	    limit: 1, sort: 1, fields:1, skip: 1, hint: 1, explain: 1, snapshot: 1, timeout: 1, tailable: 1, tailableRetryInterval: 1
	  , numberOfRetries: 1, awaitdata: 1, awaitData: 1, exhaust: 1, batchSize: 1, returnKey: 1, maxScan: 1, min: 1, max: 1, showDiskLoc: 1
	  , comment: 1, raw: 1, readPreference: 1, partial: 1, read: 1, dbName: 1, oplogReplay: 1, connection: 1, maxTimeMS: 1, transforms: 1
	}

	module.exports = Collection;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5).Buffer))

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var EventEmitter = __webpack_require__(19).EventEmitter
	  , inherits = __webpack_require__(10).inherits
	  , CServer = __webpack_require__(167).Server
	  , Cursor = __webpack_require__(233)
	  , AggregationCursor = __webpack_require__(219)
	  , CommandCursor = __webpack_require__(237)
	  , f = __webpack_require__(10).format
	  , ServerCapabilities = __webpack_require__(245).ServerCapabilities
	  , Store = __webpack_require__(245).Store
	  , Define = __webpack_require__(232)
	  , MongoError = __webpack_require__(167).MongoError
	  , shallowClone = __webpack_require__(220).shallowClone;

	/**
	 * @fileOverview The **Server** class is a class that represents a single server topology and is
	 * used to construct connections.
	 *
	 * **Server Should not be used, use MongoClient.connect**
	 * @example
	 * var Db = require('mongodb').Db,
	 *   Server = require('mongodb').Server,
	 *   test = require('assert');
	 * // Connect using single Server
	 * var db = new Db('test', new Server('localhost', 27017););
	 * db.open(function(err, db) {
	 *   // Get an additional db
	 *   db.close();
	 * });
	 */

	/**
	 * Creates a new Server instance
	 * @class
	 * @deprecated
	 * @param {string} host The host for the server, can be either an IP4, IP6 or domain socket style host.
	 * @param {number} [port] The server port if IP4.
	 * @param {object} [options=null] Optional settings.
	 * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
	 * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)
	 * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {object} [options.socketOptions=null] Socket options
	 * @param {boolean} [options.socketOptions.autoReconnect=false] Reconnect on error.
	 * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.
	 * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.
	 * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting
	 * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting
	 * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times
	 * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries
	 * @fires Server#connect
	 * @fires Server#close
	 * @fires Server#error
	 * @fires Server#timeout
	 * @fires Server#parseError
	 * @fires Server#reconnect
	 * @return {Server} a Server instance.
	 */
	var Server = function(host, port, options) {
	  options = options || {};
	  if(!(this instanceof Server)) return new Server(host, port, options);
	  EventEmitter.call(this);
	  var self = this;

	  // Store option defaults
	  var storeOptions = {
	      force: false
	    , bufferMaxEntries: -1
	  }

	  // Shared global store
	  var store = options.store || new Store(self, storeOptions);

	  // Detect if we have a socket connection
	  if(host.indexOf('\/') != -1) {
	    if(port != null && typeof port == 'object') {
	      options = port;
	      port = null;
	    }
	  } else if(port == null) {
	    throw MongoError.create({message: 'port must be specified', driver:true});
	  }

	  // Clone options
	  var clonedOptions = shallowClone(options);
	  clonedOptions.host = host;
	  clonedOptions.port = port;

	  // Reconnect
	  var reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;
	  reconnect = typeof options.autoReconnect == 'boolean' ? options.autoReconnect : reconnect;
	  var emitError = typeof options.emitError == 'boolean' ? options.emitError : true;
	  var poolSize = typeof options.poolSize == 'number' ? options.poolSize : 5;

	  // Socket options passed down
	  if(options.socketOptions) {
	    if(options.socketOptions.connectTimeoutMS) {
	      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;
	      clonedOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;
	    }

	    if(options.socketOptions.socketTimeoutMS) {
	      clonedOptions.socketTimeout = options.socketOptions.socketTimeoutMS;
	    }

	    if(typeof options.socketOptions.keepAlive == 'number') {
	      clonedOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;
	      clonedOptions.keepAlive = true;
	    }

	    if(typeof options.socketOptions.noDelay == 'boolean') {
	      clonedOptions.noDelay = options.socketOptions.noDelay;
	    }
	  }

	  // Add the cursor factory function
	  clonedOptions.cursorFactory = Cursor;
	  clonedOptions.reconnect = reconnect;
	  clonedOptions.emitError = emitError;
	  clonedOptions.size = poolSize;

	  // Translate the options
	  if(clonedOptions.sslCA) clonedOptions.ca = clonedOptions.sslCA;
	  if(typeof clonedOptions.sslValidate == 'boolean') clonedOptions.rejectUnauthorized = clonedOptions.sslValidate;
	  if(clonedOptions.sslKey) clonedOptions.key = clonedOptions.sslKey;
	  if(clonedOptions.sslCert) clonedOptions.cert = clonedOptions.sslCert;
	  if(clonedOptions.sslPass) clonedOptions.passphrase = clonedOptions.sslPass;

	  // Add the non connection store
	  clonedOptions.disconnectHandler = store;

	  // Create an instance of a server instance from mongodb-core
	  var server = new CServer(clonedOptions);
	  // Server capabilities
	  var sCapabilities = null;

	  // Define the internal properties
	  this.s = {
	    // Create an instance of a server instance from mongodb-core
	      server: server
	    // Server capabilities
	    , sCapabilities: null
	    // Cloned options
	    , clonedOptions: clonedOptions
	    // Reconnect
	    , reconnect: reconnect
	    // Emit error
	    , emitError: emitError
	    // Pool size
	    , poolSize: poolSize
	    // Store Options
	    , storeOptions: storeOptions
	    // Store
	    , store: store
	    // Host
	    , host: host
	    // Port
	    , port: port
	    // Options
	    , options: options
	  }

	  // BSON property
	  Object.defineProperty(this, 'bson', {
	    enumerable: true, get: function() {
	      return self.s.server.bson;
	    }
	  });

	  // Last ismaster
	  Object.defineProperty(this, 'isMasterDoc', {
	    enumerable:true, get: function() {
	      return self.s.server.lastIsMaster();
	    }
	  });

	  // Last ismaster
	  Object.defineProperty(this, 'poolSize', {
	    enumerable:true, get: function() { return self.s.server.connections().length; }
	  });

	  Object.defineProperty(this, 'autoReconnect', {
	    enumerable:true, get: function() { return self.s.reconnect; }
	  });

	  Object.defineProperty(this, 'host', {
	    enumerable:true, get: function() { return self.s.host; }
	  });

	  Object.defineProperty(this, 'port', {
	    enumerable:true, get: function() { return self.s.port; }
	  });
	}

	inherits(Server, EventEmitter);

	var define = Server.define = new Define('Server', Server, false);

	Server.prototype.parserType = function() {
	  return this.s.server.parserType();
	}

	define.classMethod('parserType', {callback: false, promise:false, returns: [String]});

	// Connect
	Server.prototype.connect = function(db, _options, callback) {
	  var self = this;
	  if('function' === typeof _options) callback = _options, _options = {};
	  if(_options == null) _options = {};
	  if(!('function' === typeof callback)) callback = null;
	  self.s.options = _options;

	  // Update bufferMaxEntries
	  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;

	  // Error handler
	  var connectErrorHandler = function(event) {
	    return function(err) {
	      // Remove all event handlers
	      var events = ['timeout', 'error', 'close'];
	      events.forEach(function(e) {
	        self.s.server.removeListener(e, connectHandlers[e]);
	      });

	      self.s.server.removeListener('connect', connectErrorHandler);

	      // Try to callback
	      try {
	        callback(err);
	      } catch(err) {
	        process.nextTick(function() { throw err; })
	      }
	    }
	  }

	  // Actual handler
	  var errorHandler = function(event) {
	    return function(err) {
	      if(event != 'error') {
	        self.emit(event, err);
	      }
	    }
	  }

	  // Error handler
	  var reconnectHandler = function(err) {
	    self.emit('reconnect', self);
	    self.s.store.execute();
	  }

	  // Destroy called on topology, perform cleanup
	  var destroyHandler = function() {
	    self.s.store.flush();
	  }

	  // Connect handler
	  var connectHandler = function() {
	    // Clear out all the current handlers left over
	    ["timeout", "error", "close"].forEach(function(e) {
	      self.s.server.removeAllListeners(e);
	    });

	    // Set up listeners
	    self.s.server.once('timeout', errorHandler('timeout'));
	    self.s.server.once('error', errorHandler('error'));
	    self.s.server.on('close', errorHandler('close'));
	    // Only called on destroy
	    self.s.server.once('destroy', destroyHandler);

	    // Emit open event
	    self.emit('open', null, self);

	    // Return correctly
	    try {
	      callback(null, self);
	    } catch(err) {
	      console.log(err.stack)
	      process.nextTick(function() { throw err; })
	    }
	  }

	  // Set up listeners
	  var connectHandlers = {
	    timeout: connectErrorHandler('timeout'),
	    error: connectErrorHandler('error'),
	    close: connectErrorHandler('close')
	  };

	  // Add the event handlers
	  self.s.server.once('timeout', connectHandlers.timeout);
	  self.s.server.once('error', connectHandlers.error);
	  self.s.server.once('close', connectHandlers.close);
	  self.s.server.once('connect', connectHandler);
	  // Reconnect server
	  self.s.server.on('reconnect', reconnectHandler);

	  // Start connection
	  self.s.server.connect(_options);
	}

	// Server capabilities
	Server.prototype.capabilities = function() {
	  if(this.s.sCapabilities) return this.s.sCapabilities;
	  if(this.s.server.lastIsMaster() == null) throw MongoError.create({message: 'cannot establish topology capabilities as driver is still in process of connecting', driver:true});
	  this.s.sCapabilities = new ServerCapabilities(this.s.server.lastIsMaster());
	  return this.s.sCapabilities;
	}

	define.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});

	// Command
	Server.prototype.command = function(ns, cmd, options, callback) {
	  this.s.server.command(ns, cmd, options, callback);
	}

	define.classMethod('command', {callback: true, promise:false});

	// Insert
	Server.prototype.insert = function(ns, ops, options, callback) {
	  this.s.server.insert(ns, ops, options, callback);
	}

	define.classMethod('insert', {callback: true, promise:false});

	// Update
	Server.prototype.update = function(ns, ops, options, callback) {
	  this.s.server.update(ns, ops, options, callback);
	}

	define.classMethod('update', {callback: true, promise:false});

	// Remove
	Server.prototype.remove = function(ns, ops, options, callback) {
	  this.s.server.remove(ns, ops, options, callback);
	}

	define.classMethod('remove', {callback: true, promise:false});

	// IsConnected
	Server.prototype.isConnected = function() {
	  return this.s.server.isConnected();
	}

	define.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});

	// Insert
	Server.prototype.cursor = function(ns, cmd, options) {
	  options.disconnectHandler = this.s.store;
	  return this.s.server.cursor(ns, cmd, options);
	}

	define.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});

	Server.prototype.setBSONParserType = function(type) {
	  return this.s.server.setBSONParserType(type);
	}

	Server.prototype.lastIsMaster = function() {
	  return this.s.server.lastIsMaster();
	}

	Server.prototype.close = function(forceClosed) {
	  this.s.server.destroy();
	  // We need to wash out all stored processes
	  if(forceClosed == true) {
	    this.s.storeOptions.force = forceClosed;
	    this.s.store.flush();
	  }
	}

	define.classMethod('close', {callback: false, promise:false});

	Server.prototype.auth = function() {
	  var args = Array.prototype.slice.call(arguments, 0);
	  this.s.server.auth.apply(this.s.server, args);
	}

	define.classMethod('auth', {callback: true, promise:false});

	/**
	 * All raw connections
	 * @method
	 * @return {array}
	 */
	Server.prototype.connections = function() {
	  return this.s.server.connections();
	}

	define.classMethod('connections', {callback: false, promise:false, returns:[Array]});

	/**
	 * Server connect event
	 *
	 * @event Server#connect
	 * @type {object}
	 */

	/**
	 * Server close event
	 *
	 * @event Server#close
	 * @type {object}
	 */

	/**
	 * Server reconnect event
	 *
	 * @event Server#reconnect
	 * @type {object}
	 */

	/**
	 * Server error event
	 *
	 * @event Server#error
	 * @type {MongoError}
	 */

	/**
	 * Server timeout event
	 *
	 * @event Server#timeout
	 * @type {object}
	 */

	/**
	 * Server parseError event
	 *
	 * @event Server#parseError
	 * @type {object}
	 */

	module.exports = Server;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var MongoError = __webpack_require__(167).MongoError
	  , f = __webpack_require__(10).format;

	// The store of ops
	var Store = function(topology, storeOptions) {
	  var self = this;
	  var storedOps = [];
	  storeOptions = storeOptions || {force:false, bufferMaxEntries: -1}

	  // Internal state
	  this.s = {
	      storedOps: storedOps
	    , storeOptions: storeOptions
	    , topology: topology
	  }

	  Object.defineProperty(this, 'length', {
	    enumerable:true, get: function() { return self.s.storedOps.length; }
	  });
	}

	Store.prototype.add = function(opType, ns, ops, options, callback) {
	  if(this.s.storeOptions.force) {
	    return callback(MongoError.create({message: "db closed by application", driver:true}));
	  }

	  if(this.s.storeOptions.bufferMaxEntries == 0) {
	    return callback(MongoError.create({message: f("no connection available for operation and number of stored operation > %s", this.s.storeOptions.bufferMaxEntries), driver:true }));
	  }

	  if(this.s.storeOptions.bufferMaxEntries > 0 && this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries) {
	    while(this.s.storedOps.length > 0) {
	      var op = this.s.storedOps.shift();
	      op.c(MongoError.create({message: f("no connection available for operation and number of stored operation > %s", this.s.storeOptions.bufferMaxEntries), driver:true }));
	    }

	    return;
	  }

	  this.s.storedOps.push({t: opType, n: ns, o: ops, op: options, c: callback})
	}

	Store.prototype.addObjectAndMethod = function(opType, object, method, params, callback) {
	  if(this.s.storeOptions.force) {
	    return callback(MongoError.create({message: "db closed by application", driver:true }));
	  }

	  if(this.s.storeOptions.bufferMaxEntries == 0) {
	    return callback(MongoError.create({message: f("no connection available for operation and number of stored operation > %s", this.s.storeOptions.bufferMaxEntries), driver:true }));
	  }

	  if(this.s.storeOptions.bufferMaxEntries > 0 && this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries) {
	    while(this.s.storedOps.length > 0) {
	      var op = this.s.storedOps.shift();
	      op.c(MongoError.create({message: f("no connection available for operation and number of stored operation > %s", this.s.storeOptions.bufferMaxEntries), driver:true }));
	    }

	    return;
	  }

	  this.s.storedOps.push({t: opType, m: method, o: object, p: params, c: callback})
	}

	Store.prototype.flush = function() {
	  while(this.s.storedOps.length > 0) {
	    this.s.storedOps.shift().c(MongoError.create({message: f("no connection available for operation"), driver:true }));
	  }
	}

	Store.prototype.execute = function() {
	  // Get current ops
	  var ops = this.s.storedOps;
	  // Reset the ops
	  this.s.storedOps = [];

	  // Execute all the stored ops
	  while(ops.length > 0) {
	    var op = ops.shift();

	    if(op.t == 'cursor') {
	      op.o[op.m].apply(op.o, op.p);
	    } else {
	      this.s.topology[op.t](op.n, op.o, op.op, op.c);
	    }
	  }
	}

	Store.prototype.all = function() {
	  return this.s.storedOps;
	}

	// Server capabilities
	var ServerCapabilities = function(ismaster) {
	  var setup_get_property = function(object, name, value) {
	    Object.defineProperty(object, name, {
	        enumerable: true
	      , get: function () { return value; }
	    });
	  }

	  // Capabilities
	  var aggregationCursor = false;
	  var writeCommands = false;
	  var textSearch = false;
	  var authCommands = false;
	  var listCollections = false;
	  var listIndexes = false;
	  var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;

	  if(ismaster.minWireVersion >= 0) {
	    textSearch = true;
	  }

	  if(ismaster.maxWireVersion >= 1) {
	    aggregationCursor = true;
	    authCommands = true;
	  }

	  if(ismaster.maxWireVersion >= 2) {
	    writeCommands = true;
	  }

	  if(ismaster.maxWireVersion >= 3) {
	    listCollections = true;
	    listIndexes = true;
	  }

	  // If no min or max wire version set to 0
	  if(ismaster.minWireVersion == null) {
	    ismaster.minWireVersion = 0;
	  }

	  if(ismaster.maxWireVersion == null) {
	    ismaster.maxWireVersion = 0;
	  }

	  // Map up read only parameters
	  setup_get_property(this, "hasAggregationCursor", aggregationCursor);
	  setup_get_property(this, "hasWriteCommands", writeCommands);
	  setup_get_property(this, "hasTextSearch", textSearch);
	  setup_get_property(this, "hasAuthCommands", authCommands);
	  setup_get_property(this, "hasListCollectionsCommand", listCollections);
	  setup_get_property(this, "hasListIndexesCommand", listIndexes);
	  setup_get_property(this, "minWireVersion", ismaster.minWireVersion);
	  setup_get_property(this, "maxWireVersion", ismaster.maxWireVersion);
	  setup_get_property(this, "maxNumberOfDocsInBatch", maxNumberOfDocsInBatch);
	}

	exports.Store = Store;
	exports.ServerCapabilities = ServerCapabilities;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var EventEmitter = __webpack_require__(19).EventEmitter
	  , inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , Server = __webpack_require__(244)
	  , Mongos = __webpack_require__(247)
	  , Cursor = __webpack_require__(233)
	  , AggregationCursor = __webpack_require__(219)
	  , CommandCursor = __webpack_require__(237)
	  , ReadPreference = __webpack_require__(221)
	  , MongoCR = __webpack_require__(167).MongoCR
	  , MongoError = __webpack_require__(167).MongoError
	  , ServerCapabilities = __webpack_require__(245).ServerCapabilities
	  , Store = __webpack_require__(245).Store
	  , Define = __webpack_require__(232)
	  , CServer = __webpack_require__(167).Server
	  , CReplSet = __webpack_require__(167).ReplSet
	  , CoreReadPreference = __webpack_require__(167).ReadPreference
	  , shallowClone = __webpack_require__(220).shallowClone;

	/**
	 * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is
	 * used to construct connections.
	 *
	 * **ReplSet Should not be used, use MongoClient.connect**
	 * @example
	 * var Db = require('mongodb').Db,
	 *   ReplSet = require('mongodb').ReplSet,
	 *   Server = require('mongodb').Server,
	 *   test = require('assert');
	 * // Connect using ReplSet
	 * var server = new Server('localhost', 27017);
	 * var db = new Db('test', new ReplSet([server]));
	 * db.open(function(err, db) {
	 *   // Get an additional db
	 *   db.close();
	 * });
	 */

	/**
	 * Creates a new ReplSet instance
	 * @class
	 * @deprecated
	 * @param {Server[]} servers A seedlist of servers participating in the replicaset.
	 * @param {object} [options=null] Optional settings.
	 * @param {booelan} [options.ha=true] Turn on high availability monitoring.
	 * @param {number} [options.haInterval=5000] Time between each replicaset status check.
	 * @param {string} options.replicaSet The name of the replicaset to connect to.
	 * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)
	 * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available
	 * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
	 * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)
	 * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {object} [options.socketOptions=null] Socket options
	 * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.
	 * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.
	 * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting
	 * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting
	 * @fires ReplSet#connect
	 * @fires ReplSet#ha
	 * @fires ReplSet#joined
	 * @fires ReplSet#left
	 * @fires ReplSet#fullsetup
	 * @fires ReplSet#open
	 * @fires ReplSet#close
	 * @fires ReplSet#error
	 * @fires ReplSet#timeout
	 * @fires ReplSet#parseError
	 * @return {ReplSet} a ReplSet instance.
	 */
	var ReplSet = function(servers, options) {
	  if(!(this instanceof ReplSet)) return new ReplSet(servers, options);
	  options = options || {};
	  var self = this;

	  // Ensure all the instances are Server
	  for(var i = 0; i < servers.length; i++) {
	    if(!(servers[i] instanceof Server)) {
	      throw MongoError.create({message: "all seed list instances must be of the Server type", driver:true});
	    }
	  }

	  // Store option defaults
	  var storeOptions = {
	      force: false
	    , bufferMaxEntries: -1
	  }

	  // Shared global store
	  var store = options.store || new Store(self, storeOptions);

	  // Set up event emitter
	  EventEmitter.call(this);

	  // Debug tag
	  var tag = options.tag;

	  // Build seed list
	  var seedlist = servers.map(function(x) {
	    return {host: x.host, port: x.port}
	  });

	  // Final options
	  var finalOptions = shallowClone(options);

	  // Default values
	  finalOptions.size = typeof options.poolSize == 'number' ? options.poolSize : 5;
	  finalOptions.reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;
	  finalOptions.emitError = typeof options.emitError == 'boolean' ? options.emitError : true;
	  finalOptions.cursorFactory = Cursor;

	  // Add the store
	  finalOptions.disconnectHandler = store;

	  // Socket options passed down
	  if(options.socketOptions) {
	    if(options.socketOptions.connectTimeoutMS) {
	      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;
	      finalOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;
	    }

	    if(options.socketOptions.socketTimeoutMS) {
	      finalOptions.socketTimeout = options.socketOptions.socketTimeoutMS;
	    }
	  }

	  // Get the name
	  var replicaSet = options.replicaSet || options.rs_name;

	  // Set up options
	  finalOptions.setName = replicaSet;

	  // Are we running in debug mode
	  var debug = typeof options.debug == 'boolean' ? options.debug : false;
	  if(debug) {
	    finalOptions.debug = debug;
	  }

	  // Map keep alive setting
	  if(options.socketOptions && typeof options.socketOptions.keepAlive == 'number') {
	    finalOptions.keepAlive = true;
	    if(typeof options.socketOptions.keepAlive == 'number') {
	      finalOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;
	    }
	  }

	  // Connection timeout
	  if(options.socketOptions && typeof options.socketOptions.connectionTimeout == 'number') {
	    finalOptions.connectionTimeout = options.socketOptions.connectionTimeout;
	  }

	  // Socket timeout
	  if(options.socketOptions && typeof options.socketOptions.socketTimeout == 'number') {
	    finalOptions.socketTimeout = options.socketOptions.socketTimeout;
	  }

	  // noDelay
	  if(options.socketOptions && typeof options.socketOptions.noDelay == 'boolean') {
	    finalOptions.noDelay = options.socketOptions.noDelay;
	  }

	  if(typeof options.secondaryAcceptableLatencyMS == 'number') {
	    finalOptions.acceptableLatency = options.secondaryAcceptableLatencyMS;
	  }

	  if(options.connectWithNoPrimary == true) {
	    finalOptions.secondaryOnlyConnectionAllowed = true;
	  }

	  // Add the non connection store
	  finalOptions.disconnectHandler = store;

	  // Translate the options
	  if(options.sslCA) finalOptions.ca = options.sslCA;
	  if(typeof options.sslValidate == 'boolean') finalOptions.rejectUnauthorized = options.sslValidate;
	  if(options.sslKey) finalOptions.key = options.sslKey;
	  if(options.sslCert) finalOptions.cert = options.sslCert;
	  if(options.sslPass) finalOptions.passphrase = options.sslPass;

	  // Create the ReplSet
	  var replset = new CReplSet(seedlist, finalOptions)
	  // Server capabilities
	  var sCapabilities = null;
	  // Add auth prbufferMaxEntriesoviders
	  replset.addAuthProvider('mongocr', new MongoCR());

	  // Listen to reconnect event
	  replset.on('reconnect', function() {
	    self.emit('reconnect');
	    store.execute();
	  });

	  // Internal state
	  this.s = {
	    // Replicaset
	    replset: replset
	    // Server capabilities
	    , sCapabilities: null
	    // Debug tag
	    , tag: options.tag
	    // Store options
	    , storeOptions: storeOptions
	    // Cloned options
	    , clonedOptions: finalOptions
	    // Store
	    , store: store
	    // Options
	    , options: options
	  }

	  // Debug
	  if(debug) {
	    // Last ismaster
	    Object.defineProperty(this, 'replset', {
	      enumerable:true, get: function() { return replset; }
	    });
	  }

	  // Last ismaster
	  Object.defineProperty(this, 'isMasterDoc', {
	    enumerable:true, get: function() { return replset.lastIsMaster(); }
	  });

	  // BSON property
	  Object.defineProperty(this, 'bson', {
	    enumerable: true, get: function() {
	      return replset.bson;
	    }
	  });

	  Object.defineProperty(this, 'haInterval', {
	    enumerable:true, get: function() { return replset.haInterval; }
	  });
	}

	/**
	 * @ignore
	 */
	inherits(ReplSet, EventEmitter);

	var define = ReplSet.define = new Define('ReplSet', ReplSet, false);

	// Ensure the right read Preference object
	var translateReadPreference = function(options) {
	  if(typeof options.readPreference == 'string') {
	    options.readPreference = new CoreReadPreference(options.readPreference);
	  } else if(options.readPreference instanceof ReadPreference) {
	    options.readPreference = new CoreReadPreference(options.readPreference.mode
	      , options.readPreference.tags);
	  }

	  return options;
	}

	ReplSet.prototype.parserType = function() {
	  return this.s.replset.parserType();
	}

	define.classMethod('parserType', {callback: false, promise:false, returns: [String]});

	// Connect method
	ReplSet.prototype.connect = function(db, _options, callback) {
	  var self = this;
	  if('function' === typeof _options) callback = _options, _options = {};
	  if(_options == null) _options = {};
	  if(!('function' === typeof callback)) callback = null;
	  self.s.options = _options;

	  // Update bufferMaxEntries
	  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;

	  // Actual handler
	  var errorHandler = function(event) {
	    return function(err) {
	      if(event != 'error') {
	        self.emit(event, err);
	      }
	    }
	  }

	  // Connect handler
	  var connectHandler = function() {
	    // Clear out all the current handlers left over
	    ["timeout", "error", "close"].forEach(function(e) {
	      self.s.replset.removeAllListeners(e);
	    });

	    // Set up listeners
	    self.s.replset.once('timeout', errorHandler('timeout'));
	    self.s.replset.once('error', errorHandler('error'));
	    self.s.replset.once('close', errorHandler('close'));

	    // relay the event
	    var relay = function(event) {
	      return function(t, server) {
	        self.emit(event, t, server);
	      }
	    }

	    // Replset events relay
	    var replsetRelay = function(event) {
	      return function(t, server) {
	        self.emit(event, t, server.lastIsMaster(), server);
	      }
	    }

	    // Relay ha
	    var relayHa = function(t, state) {
	      self.emit('ha', t, state);

	      if(t == 'start') {
	        self.emit('ha_connect', t, state);
	      } else if(t == 'end') {
	        self.emit('ha_ismaster', t, state);
	      }
	    }

	    // Set up serverConfig listeners
	    self.s.replset.on('joined', replsetRelay('joined'));
	    self.s.replset.on('left', relay('left'));
	    self.s.replset.on('ping', relay('ping'));
	    self.s.replset.on('ha', relayHa);

	    self.s.replset.on('fullsetup', function(topology) {
	      self.emit('fullsetup', null, self);
	    });

	    self.s.replset.on('all', function(topology) {
	      self.emit('all', null, self);
	    });

	    // Emit open event
	    self.emit('open', null, self);

	    // Return correctly
	    try {
	      callback(null, self);
	    } catch(err) {
	      process.nextTick(function() { throw err; })
	    }
	  }

	  // Error handler
	  var connectErrorHandler = function(event) {
	    return function(err) {
	      ['timeout', 'error', 'close'].forEach(function(e) {
	        self.s.replset.removeListener(e, connectErrorHandler);
	      });

	      self.s.replset.removeListener('connect', connectErrorHandler);
	      // Destroy the replset
	      self.s.replset.destroy();

	      // Try to callback
	      try {
	        callback(err);
	      } catch(err) {
	        if(!self.s.replset.isConnected())
	          process.nextTick(function() { throw err; })
	      }
	    }
	  }

	  // Set up listeners
	  self.s.replset.once('timeout', connectErrorHandler('timeout'));
	  self.s.replset.once('error', connectErrorHandler('error'));
	  self.s.replset.once('close', connectErrorHandler('close'));
	  self.s.replset.once('connect', connectHandler);

	  // Start connection
	  self.s.replset.connect(_options);
	}

	// Server capabilities
	ReplSet.prototype.capabilities = function() {
	  if(this.s.sCapabilities) return this.s.sCapabilities;
	  if(this.s.replset.lastIsMaster() == null) throw MongoError.create({message: 'cannot establish topology capabilities as driver is still in process of connecting', driver:true});
	  this.s.sCapabilities = new ServerCapabilities(this.s.replset.lastIsMaster());
	  return this.s.sCapabilities;
	}

	define.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});

	// Command
	ReplSet.prototype.command = function(ns, cmd, options, callback) {
	  options = translateReadPreference(options);
	  this.s.replset.command(ns, cmd, options, callback);
	}

	define.classMethod('command', {callback: true, promise:false});

	// Insert
	ReplSet.prototype.insert = function(ns, ops, options, callback) {
	  this.s.replset.insert(ns, ops, options, callback);
	}

	define.classMethod('insert', {callback: true, promise:false});

	// Update
	ReplSet.prototype.update = function(ns, ops, options, callback) {
	  this.s.replset.update(ns, ops, options, callback);
	}

	define.classMethod('update', {callback: true, promise:false});

	// Remove
	ReplSet.prototype.remove = function(ns, ops, options, callback) {
	  this.s.replset.remove(ns, ops, options, callback);
	}

	define.classMethod('remove', {callback: true, promise:false});

	// IsConnected
	ReplSet.prototype.isConnected = function() {
	  return this.s.replset.isConnected();
	}

	define.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});

	ReplSet.prototype.setBSONParserType = function(type) {
	  return this.s.replset.setBSONParserType(type);
	}

	// Insert
	ReplSet.prototype.cursor = function(ns, cmd, options) {
	  options = translateReadPreference(options);
	  options.disconnectHandler = this.s.store;
	  return this.s.replset.cursor(ns, cmd, options);
	}

	define.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});

	ReplSet.prototype.lastIsMaster = function() {
	  return this.s.replset.lastIsMaster();
	}

	ReplSet.prototype.close = function(forceClosed) {
	  var self = this;
	  this.s.replset.destroy();
	  // We need to wash out all stored processes
	  if(forceClosed == true) {
	    this.s.storeOptions.force = forceClosed;
	    this.s.store.flush();
	  }

	  var events = ['timeout', 'error', 'close', 'joined', 'left'];
	  events.forEach(function(e) {
	    self.removeAllListeners(e);
	  });
	}

	define.classMethod('close', {callback: false, promise:false});

	ReplSet.prototype.auth = function() {
	  var args = Array.prototype.slice.call(arguments, 0);
	  this.s.replset.auth.apply(this.s.replset, args);
	}

	define.classMethod('auth', {callback: true, promise:false});

	/**
	 * All raw connections
	 * @method
	 * @return {array}
	 */
	ReplSet.prototype.connections = function() {
	  return this.s.replset.connections();
	}

	define.classMethod('connections', {callback: false, promise:false, returns:[Array]});

	/**
	 * A replset connect event, used to verify that the connection is up and running
	 *
	 * @event ReplSet#connect
	 * @type {ReplSet}
	 */

	/**
	 * The replset high availability event
	 *
	 * @event ReplSet#ha
	 * @type {function}
	 * @param {string} type The stage in the high availability event (start|end)
	 * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only
	 * @param {number} data.id The id for this high availability request
	 * @param {object} data.state An object containing the information about the current replicaset
	 */

	/**
	 * A server member left the replicaset
	 *
	 * @event ReplSet#left
	 * @type {function}
	 * @param {string} type The type of member that left (primary|secondary|arbiter)
	 * @param {Server} server The server object that left
	 */

	/**
	 * A server member joined the replicaset
	 *
	 * @event ReplSet#joined
	 * @type {function}
	 * @param {string} type The type of member that joined (primary|secondary|arbiter)
	 * @param {Server} server The server object that joined
	 */

	/**
	 * ReplSet open event, emitted when replicaset can start processing commands.
	 *
	 * @event ReplSet#open
	 * @type {Replset}
	 */

	/**
	 * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.
	 *
	 * @event ReplSet#fullsetup
	 * @type {Replset}
	 */

	/**
	 * ReplSet close event
	 *
	 * @event ReplSet#close
	 * @type {object}
	 */

	/**
	 * ReplSet error event, emitted if there is an error listener.
	 *
	 * @event ReplSet#error
	 * @type {MongoError}
	 */

	/**
	 * ReplSet timeout event
	 *
	 * @event ReplSet#timeout
	 * @type {object}
	 */

	/**
	 * ReplSet parseError event
	 *
	 * @event ReplSet#parseError
	 * @type {object}
	 */

	module.exports = ReplSet;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var EventEmitter = __webpack_require__(19).EventEmitter
	  , inherits = __webpack_require__(10).inherits
	  , f = __webpack_require__(10).format
	  , ServerCapabilities = __webpack_require__(245).ServerCapabilities
	  , MongoCR = __webpack_require__(167).MongoCR
	  , CMongos = __webpack_require__(167).Mongos
	  , Cursor = __webpack_require__(233)
	  , AggregationCursor = __webpack_require__(219)
	  , CommandCursor = __webpack_require__(237)
	  , Define = __webpack_require__(232)
	  , Server = __webpack_require__(244)
	  , Store = __webpack_require__(245).Store
	  , shallowClone = __webpack_require__(220).shallowClone;

	/**
	 * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is
	 * used to construct connections.
	 *
	 * **Mongos Should not be used, use MongoClient.connect**
	 * @example
	 * var Db = require('mongodb').Db,
	 *   Mongos = require('mongodb').Mongos,
	 *   Server = require('mongodb').Server,
	 *   test = require('assert');
	 * // Connect using Mongos
	 * var server = new Server('localhost', 27017);
	 * var db = new Db('test', new Mongos([server]));
	 * db.open(function(err, db) {
	 *   // Get an additional db
	 *   db.close();
	 * });
	 */

	/**
	 * Creates a new Mongos instance
	 * @class
	 * @deprecated
	 * @param {Server[]} servers A seedlist of servers participating in the replicaset.
	 * @param {object} [options=null] Optional settings.
	 * @param {booelan} [options.ha=true] Turn on high availability monitoring.
	 * @param {number} [options.haInterval=5000] Time between each replicaset status check.
	 * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
	 * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)
	 * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
	 * @param {object} [options.socketOptions=null] Socket options
	 * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.
	 * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.
	 * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting
	 * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting
	 * @fires Mongos#connect
	 * @fires Mongos#ha
	 * @fires Mongos#joined
	 * @fires Mongos#left
	 * @fires Mongos#fullsetup
	 * @fires Mongos#open
	 * @fires Mongos#close
	 * @fires Mongos#error
	 * @fires Mongos#timeout
	 * @fires Mongos#parseError
	 * @return {Mongos} a Mongos instance.
	 */
	var Mongos = function(servers, options) {
	  if(!(this instanceof Mongos)) return new Mongos(servers, options);
	  options = options || {};
	  var self = this;

	  // Ensure all the instances are Server
	  for(var i = 0; i < servers.length; i++) {
	    if(!(servers[i] instanceof Server)) {
	      throw MongoError.create({message: "all seed list instances must be of the Server type", driver:true});
	    }
	  }

	  // Store option defaults
	  var storeOptions = {
	      force: false
	    , bufferMaxEntries: -1
	  }

	  // Shared global store
	  var store = options.store || new Store(self, storeOptions);

	  // Set up event emitter
	  EventEmitter.call(this);

	  // Debug tag
	  var tag = options.tag;

	  // Build seed list
	  var seedlist = servers.map(function(x) {
	    return {host: x.host, port: x.port}
	  });

	  // Final options
	  var finalOptions = shallowClone(options);

	  // Default values
	  finalOptions.size = typeof options.poolSize == 'number' ? options.poolSize : 5;
	  finalOptions.reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;
	  finalOptions.emitError = typeof options.emitError == 'boolean' ? options.emitError : true;
	  finalOptions.cursorFactory = Cursor;

	  // Add the store
	  finalOptions.disconnectHandler = store;

	  // Ensure we change the sslCA option to ca if available
	  if(options.sslCA) finalOptions.ca = options.sslCA;
	  if(typeof options.sslValidate == 'boolean') finalOptions.rejectUnauthorized = options.sslValidate;
	  if(options.sslKey) finalOptions.key = options.sslKey;
	  if(options.sslCert) finalOptions.cert = options.sslCert;
	  if(options.sslPass) finalOptions.passphrase = options.sslPass;

	  // Socket options passed down
	  if(options.socketOptions) {
	    if(options.socketOptions.connectTimeoutMS) {
	      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;
	      finalOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;
	    }
	    if(options.socketOptions.socketTimeoutMS)
	      finalOptions.socketTimeout = options.socketOptions.socketTimeoutMS;
	  }

	  // Are we running in debug mode
	  var debug = typeof options.debug == 'boolean' ? options.debug : false;
	  if(debug) {
	    finalOptions.debug = debug;
	  }

	  // Map keep alive setting
	  if(options.socketOptions && typeof options.socketOptions.keepAlive == 'number') {
	    finalOptions.keepAlive = true;
	    if(typeof options.socketOptions.keepAlive == 'number') {
	      finalOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;
	    }
	  }

	  // Connection timeout
	  if(options.socketOptions && typeof options.socketOptions.connectionTimeout == 'number') {
	    finalOptions.connectionTimeout = options.socketOptions.connectionTimeout;
	  }

	  // Socket timeout
	  if(options.socketOptions && typeof options.socketOptions.socketTimeout == 'number') {
	    finalOptions.socketTimeout = options.socketOptions.socketTimeout;
	  }

	  // noDelay
	  if(options.socketOptions && typeof options.socketOptions.noDelay == 'boolean') {
	    finalOptions.noDelay = options.socketOptions.noDelay;
	  }

	  if(typeof options.secondaryAcceptableLatencyMS == 'number') {
	    finalOptions.acceptableLatency = options.secondaryAcceptableLatencyMS;
	  }

	  // Add the non connection store
	  finalOptions.disconnectHandler = store;

	  // Create the Mongos
	  var mongos = new CMongos(seedlist, finalOptions)
	  // Server capabilities
	  var sCapabilities = null;
	  // Add auth prbufferMaxEntriesoviders
	  mongos.addAuthProvider('mongocr', new MongoCR());

	  // Internal state
	  this.s = {
	    // Create the Mongos
	      mongos: mongos
	    // Server capabilities
	    , sCapabilities: sCapabilities
	    // Debug turned on
	    , debug: debug
	    // Store option defaults
	    , storeOptions: storeOptions
	    // Cloned options
	    , clonedOptions: finalOptions
	    // Actual store of callbacks
	    , store: store
	    // Options
	    , options: options
	  }


	  // Last ismaster
	  Object.defineProperty(this, 'isMasterDoc', {
	    enumerable:true, get: function() { return self.s.mongos.lastIsMaster(); }
	  });

	  // Last ismaster
	  Object.defineProperty(this, 'numberOfConnectedServers', {
	    enumerable:true, get: function() { 
	      return self.s.mongos.s.mongosState.connectedServers().length; 
	    }
	  });

	  // BSON property
	  Object.defineProperty(this, 'bson', {
	    enumerable: true, get: function() {
	      return self.s.mongos.bson;
	    }
	  });

	  Object.defineProperty(this, 'haInterval', {
	    enumerable:true, get: function() { return self.s.mongos.haInterval; }
	  });
	}

	/**
	 * @ignore
	 */
	inherits(Mongos, EventEmitter);

	var define = Mongos.define = new Define('Mongos', Mongos, false);

	// Connect
	Mongos.prototype.connect = function(db, _options, callback) {
	  var self = this;
	  if('function' === typeof _options) callback = _options, _options = {};
	  if(_options == null) _options = {};
	  if(!('function' === typeof callback)) callback = null;
	  self.s.options = _options;

	  // Update bufferMaxEntries
	  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;

	  // Error handler
	  var connectErrorHandler = function(event) {
	    return function(err) {
	      // Remove all event handlers
	      var events = ['timeout', 'error', 'close'];
	      events.forEach(function(e) {
	        self.removeListener(e, connectErrorHandler);
	      });

	      self.s.mongos.removeListener('connect', connectErrorHandler);

	      // Try to callback
	      try {
	        callback(err);
	      } catch(err) {
	        process.nextTick(function() { throw err; })
	      }
	    }
	  }

	  // Actual handler
	  var errorHandler = function(event) {
	    return function(err) {
	      if(event != 'error') {
	        self.emit(event, err);
	      }
	    }
	  }

	  // Error handler
	  var reconnectHandler = function(err) {
	    self.emit('reconnect');
	    self.s.store.execute();
	  }

	  // Connect handler
	  var connectHandler = function() {
	    // Clear out all the current handlers left over
	    ["timeout", "error", "close"].forEach(function(e) {
	      self.s.mongos.removeAllListeners(e);
	    });

	    // Set up listeners
	    self.s.mongos.once('timeout', errorHandler('timeout'));
	    self.s.mongos.once('error', errorHandler('error'));
	    self.s.mongos.once('close', errorHandler('close'));

	    // relay the event
	    var relay = function(event) {
	      return function(t, server) {
	        self.emit(event, t, server);
	      }
	    }

	    // Set up serverConfig listeners
	    self.s.mongos.on('joined', relay('joined'));
	    self.s.mongos.on('left', relay('left'));
	    self.s.mongos.on('fullsetup', relay('fullsetup'));

	    // Emit open event
	    self.emit('open', null, self);

	    // Return correctly
	    try {
	      callback(null, self);
	    } catch(err) {
	      process.nextTick(function() { throw err; })
	    }
	  }

	  // Set up listeners
	  self.s.mongos.once('timeout', connectErrorHandler('timeout'));
	  self.s.mongos.once('error', connectErrorHandler('error'));
	  self.s.mongos.once('close', connectErrorHandler('close'));
	  self.s.mongos.once('connect', connectHandler);
	  // Reconnect server
	  self.s.mongos.on('reconnect', reconnectHandler);

	  // Start connection
	  self.s.mongos.connect(_options);
	}

	Mongos.prototype.parserType = function() {
	  return this.s.mongos.parserType();
	}

	define.classMethod('parserType', {callback: false, promise:false, returns: [String]});

	// Server capabilities
	Mongos.prototype.capabilities = function() {
	  if(this.s.sCapabilities) return this.s.sCapabilities;
	  if(this.s.mongos.lastIsMaster() == null) throw MongoError.create({message: 'cannot establish topology capabilities as driver is still in process of connecting', driver:true});
	  this.s.sCapabilities = new ServerCapabilities(this.s.mongos.lastIsMaster());
	  return this.s.sCapabilities;
	}

	define.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});

	// Command
	Mongos.prototype.command = function(ns, cmd, options, callback) {
	  this.s.mongos.command(ns, cmd, options, callback);
	}

	define.classMethod('command', {callback: true, promise:false});

	// Insert
	Mongos.prototype.insert = function(ns, ops, options, callback) {
	  this.s.mongos.insert(ns, ops, options, function(e, m) {
	    callback(e, m)
	  });
	}

	define.classMethod('insert', {callback: true, promise:false});

	// Update
	Mongos.prototype.update = function(ns, ops, options, callback) {
	  this.s.mongos.update(ns, ops, options, callback);
	}

	define.classMethod('update', {callback: true, promise:false});

	// Remove
	Mongos.prototype.remove = function(ns, ops, options, callback) {
	  this.s.mongos.remove(ns, ops, options, callback);
	}

	define.classMethod('remove', {callback: true, promise:false});

	// IsConnected
	Mongos.prototype.isConnected = function() {
	  return this.s.mongos.isConnected();
	}

	define.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});

	// Insert
	Mongos.prototype.cursor = function(ns, cmd, options) {
	  options.disconnectHandler = this.s.store;
	  return this.s.mongos.cursor(ns, cmd, options);
	}

	define.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});

	Mongos.prototype.setBSONParserType = function(type) {
	  return this.s.mongos.setBSONParserType(type);
	}

	Mongos.prototype.lastIsMaster = function() {
	  return this.s.mongos.lastIsMaster();
	}

	Mongos.prototype.close = function(forceClosed) {
	  this.s.mongos.destroy();
	  // We need to wash out all stored processes
	  if(forceClosed == true) {
	    this.s.storeOptions.force = forceClosed;
	    this.s.store.flush();
	  }
	}

	define.classMethod('close', {callback: false, promise:false});

	Mongos.prototype.auth = function() {
	  var args = Array.prototype.slice.call(arguments, 0);
	  this.s.mongos.auth.apply(this.s.mongos, args);
	}

	define.classMethod('auth', {callback: true, promise:false});

	/**
	 * All raw connections
	 * @method
	 * @return {array}
	 */
	Mongos.prototype.connections = function() {
	  return this.s.mongos.connections();
	}

	define.classMethod('connections', {callback: false, promise:false, returns:[Array]});

	/**
	 * A mongos connect event, used to verify that the connection is up and running
	 *
	 * @event Mongos#connect
	 * @type {Mongos}
	 */

	/**
	 * The mongos high availability event
	 *
	 * @event Mongos#ha
	 * @type {function}
	 * @param {string} type The stage in the high availability event (start|end)
	 * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only
	 * @param {number} data.id The id for this high availability request
	 * @param {object} data.state An object containing the information about the current replicaset
	 */

	/**
	 * A server member left the mongos set
	 *
	 * @event Mongos#left
	 * @type {function}
	 * @param {string} type The type of member that left (primary|secondary|arbiter)
	 * @param {Server} server The server object that left
	 */

	/**
	 * A server member joined the mongos set
	 *
	 * @event Mongos#joined
	 * @type {function}
	 * @param {string} type The type of member that joined (primary|secondary|arbiter)
	 * @param {Server} server The server object that joined
	 */

	/**
	 * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.
	 *
	 * @event Mongos#fullsetup
	 * @type {Mongos}
	 */

	/**
	 * Mongos open event, emitted when mongos can start processing commands.
	 *
	 * @event Mongos#open
	 * @type {Mongos}
	 */

	/**
	 * Mongos close event
	 *
	 * @event Mongos#close
	 * @type {object}
	 */

	/**
	 * Mongos error event, emitted if there is an error listener.
	 *
	 * @event Mongos#error
	 * @type {MongoError}
	 */

	/**
	 * Mongos timeout event
	 *
	 * @event Mongos#timeout
	 * @type {object}
	 */

	/**
	 * Mongos parseError event
	 *
	 * @event Mongos#parseError
	 * @type {object}
	 */

	module.exports = Mongos;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";

	var EventEmitter = __webpack_require__(19).EventEmitter
	  , inherits = __webpack_require__(10).inherits
	  , getSingleProperty = __webpack_require__(220).getSingleProperty
	  , shallowClone = __webpack_require__(220).shallowClone
	  , parseIndexOptions = __webpack_require__(220).parseIndexOptions
	  , debugOptions = __webpack_require__(220).debugOptions
	  , CommandCursor = __webpack_require__(237)
	  , handleCallback = __webpack_require__(220).handleCallback
	  , toError = __webpack_require__(220).toError
	  , ReadPreference = __webpack_require__(221)
	  , f = __webpack_require__(10).format
	  , Admin = __webpack_require__(249)
	  , Code = __webpack_require__(167).BSON.Code
	  , CoreReadPreference = __webpack_require__(167).ReadPreference
	  , MongoError = __webpack_require__(167).MongoError
	  , ObjectID = __webpack_require__(167).ObjectID
	  , Define = __webpack_require__(232)
	  , Logger = __webpack_require__(167).Logger
	  , Collection = __webpack_require__(243)
	  , crypto = __webpack_require__(52);

	var debugFields = ['authSource', 'w', 'wtimeout', 'j', 'native_parser', 'forceServerObjectId'
	  , 'serializeFunctions', 'raw', 'promoteLongs', 'bufferMaxEntries', 'numberOfRetries', 'retryMiliSeconds'
	  , 'readPreference', 'pkFactory'];

	/**
	 * @fileOverview The **Db** class is a class that represents a MongoDB Database.
	 *
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   test = require('assert');
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   // Get an additional db
	 *   var testDb = db.db('test');
	 *   db.close();
	 * });
	 */

	/**
	 * Creates a new Db instance
	 * @class
	 * @param {string} databaseName The name of the database this instance represents.
	 * @param {(Server|ReplSet|Mongos)} topology The server topology for the database.
	 * @param {object} [options=null] Optional settings.
	 * @param {string} [options.authSource=null] If the database authentication is dependent on another databaseName.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.native_parser=true] Select C++ bson parser instead of JavaScript parser.
	 * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
	 * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
	 * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
	 * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
	 * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.
	 * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.
	 * @param {number} [options.numberOfRetries=5] Number of times a tailable cursor will re-poll when it gets nothing back.
	 * @param {number} [options.retryMiliSeconds=500] Number of milliseconds between retries.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {object} [options.readConcern=null] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)
	 * @param {object} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)
	 * @property {(Server|ReplSet|Mongos)} serverConfig Get the current db topology.
	 * @property {number} bufferMaxEntries Current bufferMaxEntries value for the database
	 * @property {string} databaseName The name of the database this instance represents.
	 * @property {object} options The options associated with the db instance.
	 * @property {boolean} native_parser The current value of the parameter native_parser.
	 * @property {boolean} slaveOk The current slaveOk value for the db instance.
	 * @property {object} writeConcern The current write concern values.
	 * @fires Db#close
	 * @fires Db#authenticated
	 * @fires Db#reconnect
	 * @fires Db#error
	 * @fires Db#timeout
	 * @fires Db#parseError
	 * @fires Db#fullsetup
	 * @return {Db} a Db instance.
	 */
	var Db = function(databaseName, topology, options) {
	  options = options || {};
	  if(!(this instanceof Db)) return new Db(databaseName, topology, options);
	  EventEmitter.call(this);
	  var self = this;

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Ensure we put the promiseLib in the options
	  options.promiseLibrary = promiseLibrary;

	  // var self = this;  // Internal state of the db object
	  this.s = {
	    // Database name
	      databaseName: databaseName
	    // DbCache
	    , dbCache: {}
	    // Children db's
	    , children: []
	    // Topology
	    , topology: topology
	    // Options
	    , options: options
	    // Logger instance
	    , logger: Logger('Db', options)
	    // Get the bson parser
	    , bson: topology ? topology.bson : null
	    // Authsource if any
	    , authSource: options.authSource
	    // Unpack read preference
	    , readPreference: options.readPreference
	    // Set buffermaxEntries
	    , bufferMaxEntries: typeof options.bufferMaxEntries == 'number' ? options.bufferMaxEntries : -1
	    // Parent db (if chained)
	    , parentDb: options.parentDb || null
	    // Set up the primary key factory or fallback to ObjectID
	    , pkFactory: options.pkFactory || ObjectID
	    // Get native parser
	    , nativeParser: options.nativeParser || options.native_parser
	    // Promise library
	    , promiseLibrary: promiseLibrary
	    // No listener
	    , noListener: typeof options.noListener == 'boolean' ? options.noListener : false
	    // ReadConcern
	    , readConcern: options.readConcern
	  }

	  // Ensure we have a valid db name
	  validateDatabaseName(self.s.databaseName);

	  // If we have specified the type of parser
	  if(typeof self.s.nativeParser == 'boolean') {
	    if(self.s.nativeParser) {
	      topology.setBSONParserType("c++");
	    } else {
	      topology.setBSONParserType("js");
	    }
	  }

	  // Add a read Only property
	  getSingleProperty(this, 'serverConfig', self.s.topology);
	  getSingleProperty(this, 'bufferMaxEntries', self.s.bufferMaxEntries);
	  getSingleProperty(this, 'databaseName', self.s.databaseName);

	  // Last ismaster
	  Object.defineProperty(this, 'options', {
	    enumerable:true,
	    get: function() { return self.s.options; }
	  });

	  // Last ismaster
	  Object.defineProperty(this, 'native_parser', {
	    enumerable:true,
	    get: function() { return self.s.topology.parserType() == 'c++'; }
	  });

	  // Last ismaster
	  Object.defineProperty(this, 'slaveOk', {
	    enumerable:true,
	    get: function() {
	      if(self.s.options.readPreference != null
	        && (self.s.options.readPreference != 'primary' || self.s.options.readPreference.mode != 'primary')) {
	        return true;
	      }
	      return false;
	    }
	  });

	  Object.defineProperty(this, 'writeConcern', {
	    enumerable:true,
	    get: function() {
	      var ops = {};
	      if(self.s.options.w != null) ops.w = self.s.options.w;
	      if(self.s.options.j != null) ops.j = self.s.options.j;
	      if(self.s.options.fsync != null) ops.fsync = self.s.options.fsync;
	      if(self.s.options.wtimeout != null) ops.wtimeout = self.s.options.wtimeout;
	      return ops;
	    }
	  });

	  // This is a child db, do not register any listeners
	  if(options.parentDb) return;
	  if(this.s.noListener) return;

	  // Add listeners
	  topology.on('error', createListener(self, 'error', self));
	  topology.on('timeout', createListener(self, 'timeout', self));
	  topology.on('close', createListener(self, 'close', self));
	  topology.on('parseError', createListener(self, 'parseError', self));
	  topology.once('open', createListener(self, 'open', self));
	  topology.once('fullsetup', createListener(self, 'fullsetup', self));
	  topology.once('all', createListener(self, 'all', self));
	  topology.on('reconnect', createListener(self, 'reconnect', self));
	}

	inherits(Db, EventEmitter);

	var define = Db.define = new Define('Db', Db, false);

	/**
	 * The callback format for the Db.open method
	 * @callback Db~openCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Db} db The Db instance if the open method was successful.
	 */

	// Internal method
	var open = function(self, callback) {
	  self.s.topology.connect(self, self.s.options, function(err, topology) {
	    if(callback == null) return;
	    var internalCallback = callback;
	    callback == null;

	    if(err) {
	      self.close();
	      return internalCallback(err);
	    }

	    internalCallback(null, self);
	  });
	}

	/**
	 * Open the database
	 * @method
	 * @param {Db~openCallback} [callback] Callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.open = function(callback) {
	  var self = this;
	  // We provided a callback leg
	  if(typeof callback == 'function') return open(self, callback);
	  // Return promise
	  return new self.s.promiseLibrary(function(resolve, reject) {
	    open(self, function(err, db) {
	      if(err) return reject(err);
	      resolve(db);
	    })
	  });
	}

	define.classMethod('open', {callback: true, promise:true});

	/**
	 * The callback format for results
	 * @callback Db~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {object} result The result object if the command was executed successfully.
	 */

	var executeCommand = function(self, command, options, callback) {
	  var dbName = options.dbName || options.authdb || self.s.databaseName;
	  // If we have a readPreference set
	  if(options.readPreference == null && self.s.readPreference) {
	    options.readPreference = self.s.readPreference;
	  }

	  // Convert the readPreference
	  if(options.readPreference && typeof options.readPreference == 'string') {
	    options.readPreference = new CoreReadPreference(options.readPreference);
	  } else if(options.readPreference instanceof ReadPreference) {
	    options.readPreference = new CoreReadPreference(options.readPreference.mode
	      , options.readPreference.tags);
	  }

	  // Debug information
	  if(self.s.logger.isDebug()) self.s.logger.debug(f('executing command %s against %s with options [%s]'
	    , JSON.stringify(command), f('%s.$cmd', dbName), JSON.stringify(debugOptions(debugFields, options))));

	  // Execute command
	  self.s.topology.command(f('%s.$cmd', dbName), command, options, function(err, result) {
	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, null, result.result);
	  });
	}

	/**
	 * Execute a command
	 * @method
	 * @param {object} command The command hash
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {number} [options.maxTimeMS=null] Number of milliseconds to wait before aborting the query.
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.command = function(command, options, callback) {
	  var self = this;
	  // Change the callback
	  if(typeof options == 'function') callback = options, options = {};
	  // Clone the options
	  options = shallowClone(options);

	  // Do we have a callback
	  if(typeof callback == 'function') return executeCommand(self, command, options, callback);
	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    executeCommand(self, command, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('command', {callback: true, promise:true});

	/**
	 * The callback format for results
	 * @callback Db~noResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {null} result Is not set to a value
	 */

	/**
	 * Close the db and it's underlying connections
	 * @method
	 * @param {boolean} force Force close, emitting no events
	 * @param {Db~noResultCallback} [callback] The result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.close = function(force, callback) {
	  if(typeof force == 'function') callback = force, force = false;
	  this.s.topology.close(force);
	  var self = this;

	  // Fire close event if any listeners
	  if(this.listeners('close').length > 0) {
	    this.emit('close');

	    // If it's the top level db emit close on all children
	    if(this.parentDb == null) {
	      // Fire close on all children
	      for(var i = 0; i < this.s.children.length; i++) {
	        this.s.children[i].emit('close');
	      }
	    }

	    // Remove listeners after emit
	    self.removeAllListeners('close');
	  }

	  // Close parent db if set
	  if(this.s.parentDb) this.s.parentDb.close();
	  // Callback after next event loop tick
	  if(typeof callback == 'function') return process.nextTick(function() {
	    handleCallback(callback, null);
	  })

	  // Return dummy promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    resolve();
	  });
	}

	define.classMethod('close', {callback: true, promise:true});

	/**
	 * Return the Admin db instance
	 * @method
	 * @return {Admin} return the new Admin db instance
	 */
	Db.prototype.admin = function() {
	  return new Admin(this, this.s.topology, this.s.promiseLibrary);
	};

	define.classMethod('admin', {callback: false, promise:false, returns: [Admin]});

	/**
	 * The callback format for the collection method, must be used if strict is specified
	 * @callback Db~collectionResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection} collection The collection instance.
	 */

	/**
	 * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can
	 * can use it without a callback in the following way. var collection = db.collection('mycollection');
	 *
	 * @method
	 * @param {string} name the collection name we wish to access.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
	 * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
	 * @param {boolean} [options.strict=false] Returns an error if the collection does not exist
	 * @param {object} [options.readConcern=null] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)
	 * @param {object} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)
	 * @param {Db~collectionResultCallback} callback The collection result callback
	 * @return {Collection} return the new Collection instance if not in strict mode
	 */
	Db.prototype.collection = function(name, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};
	  options = shallowClone(options);
	  // Set the promise library
	  options.promiseLibrary = this.s.promiseLibrary;

	  // If we have not set a collection level readConcern set the db level one
	  options.readConcern = options.readConcern || this.s.readConcern;

	  // Do we have ignoreUndefined set
	  if(this.s.options.ignoreUndefined) {
	    options.ignoreUndefined = this.s.options.ignoreUndefined;
	  }

	  // Execute
	  if(options == null || !options.strict) {
	    try {
	      var collection = new Collection(this, this.s.topology, this.s.databaseName, name, this.s.pkFactory, options);
	      if(callback) callback(null, collection);
	      return collection;
	    } catch(err) {
	      if(callback) return callback(err);
	      throw err;
	    }
	  }

	  // Strict mode
	  if(typeof callback != 'function') {
	    throw toError(f("A callback is required in strict mode. While getting collection %s.", name));
	  }

	  // Strict mode
	  this.listCollections({name:name}).toArray(function(err, collections) {
	    if(err != null) return handleCallback(callback, err, null);
	    if(collections.length == 0) return handleCallback(callback, toError(f("Collection %s does not exist. Currently in strict mode.", name)), null);

	    try {
	      return handleCallback(callback, null, new Collection(self, self.s.topology, self.s.databaseName, name, self.s.pkFactory, options));
	    } catch(err) {
	      return handleCallback(callback, err, null);
	    }
	  });
	}

	define.classMethod('collection', {callback: true, promise:false, returns: [Collection]});

	var createCollection = function(self, name, options, callback) {
	  // Get the write concern options
	  var finalOptions = writeConcern(shallowClone(options), self, options);

	  // Check if we have the name
	  self.listCollections({name: name}).toArray(function(err, collections) {
	    if(err != null) return handleCallback(callback, err, null);
	    if(collections.length > 0 && finalOptions.strict) {
	      return handleCallback(callback, MongoError.create({message: f("Collection %s already exists. Currently in strict mode.", name), driver:true}), null);
	    } else if (collections.length > 0) {
	      try { return handleCallback(callback, null, new Collection(self, self.s.topology, self.s.databaseName, name, self.s.pkFactory, options)); }
	      catch(err) { return handleCallback(callback, err); }
	    }

	    // Create collection command
	    var cmd = {'create':name};

	    // Add all optional parameters
	    for(var n in options) {
	      if(options[n] != null && typeof options[n] != 'function')
	        cmd[n] = options[n];
	    }

	    // Execute command
	    self.command(cmd, finalOptions, function(err, result) {
	      if(err) return handleCallback(callback, err);
	      handleCallback(callback, null, new Collection(self, self.s.topology, self.s.databaseName, name, self.s.pkFactory, options));
	    });
	  });
	}

	/**
	 * Creates a collection on a server pre-allocating space, need to create f.ex capped collections.
	 *
	 * @method
	 * @param {string} name the collection name we wish to access.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
	 * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
	 * @param {boolean} [options.strict=false] Returns an error if the collection does not exist
	 * @param {boolean} [options.capped=false] Create a capped collection.
	 * @param {number} [options.size=null] The size of the capped collection in bytes.
	 * @param {number} [options.max=null] The maximum number of documents in the capped collection.
	 * @param {boolean} [options.autoIndexId=true] Create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.
	 * @param {Db~collectionResultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.createCollection = function(name, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  name = args.length ? args.shift() : null;
	  options = args.length ? args.shift() || {} : {};

	  // Do we have a promisesLibrary
	  options.promiseLibrary = options.promiseLibrary || this.s.promiseLibrary;

	  // Check if the callback is in fact a string
	  if(typeof callback == 'string') name = callback;

	  // Execute the fallback callback
	  if(typeof callback == 'function') return createCollection(self, name, options, callback);
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    createCollection(self, name, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('createCollection', {callback: true, promise:true});

	/**
	 * Get all the db statistics.
	 *
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {number} [options.scale=null] Divide the returned sizes by scale value.
	 * @param {Db~resultCallback} [callback] The collection result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.stats = function(options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};
	  // Build command object
	  var commandObject = { dbStats:true };
	  // Check if we have the scale value
	  if(options['scale'] != null) commandObject['scale'] = options['scale'];
	  // Execute the command
	  return this.command(commandObject, options, callback);
	}

	define.classMethod('stats', {callback: true, promise:true});

	// Transformation methods for cursor results
	var listCollectionsTranforms = function(databaseName) {
	  var matching = f('%s.', databaseName);

	  return {
	    doc: function(doc) {
	      var index = doc.name.indexOf(matching);
	      // Remove database name if available
	      if(doc.name && index == 0) {
	        doc.name = doc.name.substr(index + matching.length);
	      }

	      return doc;
	    }
	  }
	}

	/**
	 * Get the list of all collection information for the specified db.
	 *
	 * @method
	 * @param {object} filter Query to filter collections by
	 * @param {object} [options=null] Optional settings.
	 * @param {number} [options.batchSize=null] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection
	 * @return {CommandCursor}
	 */
	Db.prototype.listCollections = function(filter, options) {
	  filter = filter || {};
	  options = options || {};

	  // Shallow clone the object
	  options = shallowClone(options);
	  // Set the promise library
	  options.promiseLibrary = this.s.promiseLibrary;

	  // We have a list collections command
	  if(this.serverConfig.capabilities().hasListCollectionsCommand) {
	    // Cursor options
	    var cursor = options.batchSize ? {batchSize: options.batchSize} : {}
	    // Build the command
	    var command = { listCollections : true, filter: filter, cursor: cursor };
	    // Set the AggregationCursor constructor
	    options.cursorFactory = CommandCursor;
	    // Filter out the correct field values
	    options.transforms = listCollectionsTranforms(this.s.databaseName);
	    // Execute the cursor
	    return this.s.topology.cursor(f('%s.$cmd', this.s.databaseName), command, options);
	  }

	  // We cannot use the listCollectionsCommand
	  if(!this.serverConfig.capabilities().hasListCollectionsCommand) {
	    // If we have legacy mode and have not provided a full db name filter it
	    if(typeof filter.name == 'string' && !(new RegExp('^' + this.databaseName + '\\.').test(filter.name))) {
	      filter = shallowClone(filter);
	      filter.name = f('%s.%s', this.s.databaseName, filter.name);
	    }
	  }

	  // No filter, filter by current database
	  if(filter == null) {
	    filter.name = f('/%s/', this.s.databaseName);
	  }

	  // Rewrite the filter to use $and to filter out indexes
	  if(filter.name) {
	    filter = {$and: [{name: filter.name}, {name:/^((?!\$).)*$/}]};
	  } else {
	    filter = {name:/^((?!\$).)*$/};
	  }

	  // Return options
	  var options = {transforms: listCollectionsTranforms(this.s.databaseName)}
	  // Get the cursor
	  var cursor = this.collection(Db.SYSTEM_NAMESPACE_COLLECTION).find(filter, options);
	  // Set the passed in batch size if one was provided
	  if(options.batchSize) cursor = cursor.batchSize(options.batchSize);
	  // We have a fallback mode using legacy systems collections
	  return cursor;
	};

	define.classMethod('listCollections', {callback: false, promise:false, returns: [CommandCursor]});

	var evaluate = function(self, code, parameters, options, callback) {
	  var finalCode = code;
	  var finalParameters = [];

	  // If not a code object translate to one
	  if(!(finalCode instanceof Code)) finalCode = new Code(finalCode);
	  // Ensure the parameters are correct
	  if(parameters != null && !Array.isArray(parameters) && typeof parameters !== 'function') {
	    finalParameters = [parameters];
	  } else if(parameters != null && Array.isArray(parameters) && typeof parameters !== 'function') {
	    finalParameters = parameters;
	  }

	  // Create execution selector
	  var cmd = {'$eval':finalCode, 'args':finalParameters};
	  // Check if the nolock parameter is passed in
	  if(options['nolock']) {
	    cmd['nolock'] = options['nolock'];
	  }

	  // Set primary read preference
	  options.readPreference = new CoreReadPreference(ReadPreference.PRIMARY);

	  // Execute the command
	  self.command(cmd, options, function(err, result) {
	    if(err) return handleCallback(callback, err, null);
	    if(result && result.ok == 1) return handleCallback(callback, null, result.retval);
	    if(result) return handleCallback(callback, MongoError.create({message: f("eval failed: %s", result.errmsg), driver:true}), null);
	    handleCallback(callback, err, result);
	  });
	}

	/**
	 * Evaluate JavaScript on the server
	 *
	 * @method
	 * @param {Code} code JavaScript to execute on server.
	 * @param {(object|array)} parameters The parameters for the call.
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.nolock=false] Tell MongoDB not to block on the evaulation of the javascript.
	 * @param {Db~resultCallback} [callback] The results callback
	 * @deprecated Eval is deprecated on MongoDB 3.2 and forward
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.eval = function(code, parameters, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  parameters = args.length ? args.shift() : parameters;
	  options = args.length ? args.shift() || {} : {};

	  // Check if the callback is in fact a string
	  if(typeof callback == 'function') return evaluate(self, code, parameters, options, callback);
	  // Execute the command
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    evaluate(self, code, parameters, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	define.classMethod('eval', {callback: true, promise:true});

	/**
	 * Rename a collection.
	 *
	 * @method
	 * @param {string} fromCollection Name of current collection to rename.
	 * @param {string} toCollection New name of of the collection.
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.
	 * @param {Db~collectionResultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};
	  // Add return new collection
	  options.new_collection = true;

	  // Check if the callback is in fact a string
	  if(typeof callback == 'function') {
	    return this.collection(fromCollection).rename(toCollection, options, callback);
	  }

	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.collection(fromCollection).rename(toCollection, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	define.classMethod('renameCollection', {callback: true, promise:true});

	/**
	 * Drop a collection from the database, removing it permanently. New accesses will create a new collection.
	 *
	 * @method
	 * @param {string} name Name of collection to drop
	 * @param {Db~resultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.dropCollection = function(name, callback) {
	  var self = this;

	  // Command to execute
	  var cmd = {'drop':name}

	  // Check if the callback is in fact a string
	  if(typeof callback == 'function') return this.command(cmd, this.s.options, function(err, result) {
	    if(err) return handleCallback(callback, err);
	    if(result.ok) return handleCallback(callback, null, true);
	    handleCallback(callback, null, false);
	  });

	  // Execute the command
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    // Execute command
	    self.command(cmd, self.s.options, function(err, result) {
	      if(err) return reject(err);
	      if(result.ok) return resolve(true);
	      resolve(false);
	    });
	  });
	};

	define.classMethod('dropCollection', {callback: true, promise:true});

	/**
	 * Drop a database.
	 *
	 * @method
	 * @param {Db~resultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.dropDatabase = function(callback) {
	  var self = this;
	  // Drop database command
	  var cmd = {'dropDatabase':1};

	  // Check if the callback is in fact a string
	  if(typeof callback == 'function') return this.command(cmd, this.s.options, function(err, result) {
	    if(callback == null) return;
	    if(err) return handleCallback(callback, err, null);
	    handleCallback(callback, null, result.ok ? true : false);
	  });

	  // Execute the command
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    // Execute command
	    self.command(cmd, self.s.options, function(err, result) {
	      if(err) return reject(err);
	      if(result.ok) return resolve(true);
	      resolve(false);
	    });
	  });
	}

	define.classMethod('dropDatabase', {callback: true, promise:true});

	/**
	 * The callback format for the collections method.
	 * @callback Db~collectionsResultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {Collection[]} collections An array of all the collections objects for the db instance.
	 */
	var collections = function(self, callback) {
	  // Let's get the collection names
	  self.listCollections().toArray(function(err, documents) {
	    if(err != null) return handleCallback(callback, err, null);
	    // Filter collections removing any illegal ones
	    documents = documents.filter(function(doc) {
	      return doc.name.indexOf('$') == -1;
	    });

	    // Return the collection objects
	    handleCallback(callback, null, documents.map(function(d) {
	      return new Collection(self, self.s.topology, self.s.databaseName, d.name.replace(self.s.databaseName + ".", ''), self.s.pkFactory, self.s.options);
	    }));
	  });
	}

	/**
	 * Fetch all collections for the current db.
	 *
	 * @method
	 * @param {Db~collectionsResultCallback} [callback] The results callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.collections = function(callback) {
	  var self = this;

	  // Return the callback
	  if(typeof callback == 'function') return collections(self, callback);
	  // Return the promise
	  return new self.s.promiseLibrary(function(resolve, reject) {
	    collections(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	define.classMethod('collections', {callback: true, promise:true});

	/**
	 * Runs a command on the database as admin.
	 * @method
	 * @param {object} command The command hash
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {number} [options.maxTimeMS=null] Number of milliseconds to wait before aborting the query.
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.executeDbAdminCommand = function(selector, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  if(options.readPreference) {
	    options.readPreference = options.readPreference;
	  }

	  // Return the callback
	  if(typeof callback == 'function') return self.s.topology.command('admin.$cmd', selector, options, function(err, result) {
	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, null, result.result);
	  });

	  // Return promise
	  return new self.s.promiseLibrary(function(resolve, reject) {
	    self.s.topology.command('admin.$cmd', selector, options, function(err, result) {
	      if(err) return reject(err);
	      resolve(result.result);
	    });
	  });
	};

	define.classMethod('executeDbAdminCommand', {callback: true, promise:true});

	/**
	 * Creates an index on the db and collection collection.
	 * @method
	 * @param {string} name Name of the collection to create the index on.
	 * @param {(string|object)} fieldOrSpec Defines the index.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.unique=false] Creates an unique index.
	 * @param {boolean} [options.sparse=false] Creates a sparse index.
	 * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
	 * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.
	 * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.
	 * @param {number} [options.v=null] Specify the format version of the indexes.
	 * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 * @param {number} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.createIndex = function(name, fieldOrSpec, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() || {} : {};
	  options = typeof callback === 'function' ? options : callback;
	  options = options == null ? {} : options;
	  // Shallow clone the options
	  options = shallowClone(options);
	  // Run only against primary
	  options.readPreference = ReadPreference.PRIMARY;

	  // If we have a callback fallback
	  if(typeof callback == 'function') return createIndex(self, name, fieldOrSpec, options, callback);
	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    createIndex(self, name, fieldOrSpec, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var createIndex = function(self, name, fieldOrSpec, options, callback) {
	  // Get the write concern options
	  var finalOptions = writeConcern({}, self, options);
	  // Ensure we have a callback
	  if(finalOptions.writeConcern && typeof callback != 'function') {
	    throw MongoError.create({message: "Cannot use a writeConcern without a provided callback", driver:true});
	  }

	  // Attempt to run using createIndexes command
	  createIndexUsingCreateIndexes(self, name, fieldOrSpec, options, function(err, result) {
	    if(err == null) return handleCallback(callback, err, result);
	    // Create command
	    var doc = createCreateIndexCommand(self, name, fieldOrSpec, options);
	    // Set no key checking
	    finalOptions.checkKeys = false;
	    // Insert document
	    self.s.topology.insert(f("%s.%s", self.s.databaseName, Db.SYSTEM_INDEX_COLLECTION), doc, finalOptions, function(err, result) {
	      if(callback == null) return;
	      if(err) return handleCallback(callback, err);
	      if(result == null) return handleCallback(callback, null, null);
	      if(result.result.writeErrors) return handleCallback(callback, MongoError.create(result.result.writeErrors[0]), null);
	      handleCallback(callback, null, doc.name);
	    });
	  });
	}

	define.classMethod('createIndex', {callback: true, promise:true});

	/**
	 * Ensures that an index exists, if it does not it creates it
	 * @method
	 * @deprecated since version 2.0
	 * @param {string} name The index name
	 * @param {(string|object)} fieldOrSpec Defines the index.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.unique=false] Creates an unique index.
	 * @param {boolean} [options.sparse=false] Creates a sparse index.
	 * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
	 * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
	 * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.
	 * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.
	 * @param {number} [options.v=null] Specify the format version of the indexes.
	 * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
	 * @param {number} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.ensureIndex = function(name, fieldOrSpec, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // If we have a callback fallback
	  if(typeof callback == 'function') return ensureIndex(self, name, fieldOrSpec, options, callback);

	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    ensureIndex(self, name, fieldOrSpec, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var ensureIndex = function(self, name, fieldOrSpec, options, callback) {
	  // Get the write concern options
	  var finalOptions = writeConcern({}, self, options);
	  // Create command
	  var selector = createCreateIndexCommand(self, name, fieldOrSpec, options);
	  var index_name = selector.name;

	  // Default command options
	  var commandOptions = {};
	  // Check if the index allready exists
	  self.indexInformation(name, finalOptions, function(err, indexInformation) {
	    if(err != null && err.code != 26) return handleCallback(callback, err, null);
	    // If the index does not exist, create it
	    if(indexInformation == null || !indexInformation[index_name])  {
	      self.createIndex(name, fieldOrSpec, options, callback);
	    } else {
	      if(typeof callback === 'function') return handleCallback(callback, null, index_name);
	    }
	  });
	}

	define.classMethod('ensureIndex', {callback: true, promise:true});

	Db.prototype.addChild = function(db) {
	  if(this.s.parentDb) return this.s.parentDb.addChild(db);
	  this.s.children.push(db);
	}

	/**
	 * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are
	 * related in a parent-child relationship to the original instance so that events are correctly emitted on child
	 * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.
	 * You can control these behaviors with the options noListener and returnNonCachedInstance.
	 *
	 * @method
	 * @param {string} name The name of the database we want to use.
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.
	 * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created
	 * @return {Db}
	 */
	Db.prototype.db = function(dbName, options) {
	  options = options || {};
	  // Copy the options and add out internal override of the not shared flag
	  for(var key in this.options) {
	    options[key] = this.options[key];
	  }

	  // Do we have the db in the cache already
	  if(this.s.dbCache[dbName] && options.returnNonCachedInstance !== true) {
	    return this.s.dbCache[dbName];
	  }

	  // Add current db as parentDb
	  if(options.noListener == null || options.noListener == false) {
	    options.parentDb = this;
	  }

	  // Add promiseLibrary
	  options.promiseLibrary = this.s.promiseLibrary;

	  // Return the db object
	  var db = new Db(dbName, this.s.topology, options)

	  // Add as child
	  if(options.noListener == null || options.noListener == false) {
	    this.addChild(db);
	  }

	  // Add the db to the cache
	  this.s.dbCache[dbName] = db;
	  // Return the database
	  return db;
	};

	define.classMethod('db', {callback: false, promise:false, returns: [Db]});

	var _executeAuthCreateUserCommand = function(self, username, password, options, callback) {
	  // Special case where there is no password ($external users)
	  if(typeof username == 'string'
	    && password != null && typeof password == 'object') {
	    options = password;
	    password = null;
	  }

	  // Unpack all options
	  if(typeof options == 'function') {
	    callback = options;
	    options = {};
	  }

	  // Error out if we digestPassword set
	  if(options.digestPassword != null) {
	    throw toError("The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.");
	  }

	  // Get additional values
	  var customData = options.customData != null ? options.customData : {};
	  var roles = Array.isArray(options.roles) ? options.roles : [];
	  var maxTimeMS = typeof options.maxTimeMS == 'number' ? options.maxTimeMS : null;

	  // If not roles defined print deprecated message
	  if(roles.length == 0) {
	    console.log("Creating a user without roles is deprecated in MongoDB >= 2.6");
	  }

	  // Get the error options
	  var commandOptions = {writeCommand:true};
	  if(options['dbName']) commandOptions.dbName = options['dbName'];

	  // Add maxTimeMS to options if set
	  if(maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;

	  // Check the db name and add roles if needed
	  if((self.databaseName.toLowerCase() == 'admin' || options.dbName == 'admin') && !Array.isArray(options.roles)) {
	    roles = ['root']
	  } else if(!Array.isArray(options.roles)) {
	    roles = ['dbOwner']
	  }

	  // Build the command to execute
	  var command = {
	      createUser: username
	    , customData: customData
	    , roles: roles
	    , digestPassword:false
	  }

	  // Apply write concern to command
	  command = writeConcern(command, self, options);

	  // Use node md5 generator
	  var md5 = crypto.createHash('md5');
	  // Generate keys used for authentication
	  md5.update(username + ":mongo:" + password);
	  var userPassword = md5.digest('hex');

	  // No password
	  if(typeof password == 'string') {
	    command.pwd = userPassword;
	  }

	  // Force write using primary
	  commandOptions.readPreference = CoreReadPreference.primary;

	  // Execute the command
	  self.command(command, commandOptions, function(err, result) {
	    if(err && err.ok == 0 && err.code == undefined) return handleCallback(callback, {code: -5000}, null);
	    if(err) return handleCallback(callback, err, null);
	    handleCallback(callback, !result.ok ? toError(result) : null
	      , result.ok ? [{user: username, pwd: ''}] : null);
	  })
	}

	var addUser = function(self, username, password, options, callback) {
	  // Attempt to execute auth command
	  _executeAuthCreateUserCommand(self, username, password, options, function(err, r) {
	    // We need to perform the backward compatible insert operation
	    if(err && err.code == -5000) {
	      var finalOptions = writeConcern(shallowClone(options), self, options);
	      // Use node md5 generator
	      var md5 = crypto.createHash('md5');
	      // Generate keys used for authentication
	      md5.update(username + ":mongo:" + password);
	      var userPassword = md5.digest('hex');

	      // If we have another db set
	      var db = options.dbName ? self.db(options.dbName) : self;

	      // Fetch a user collection
	      var collection = db.collection(Db.SYSTEM_USER_COLLECTION);

	      // Check if we are inserting the first user
	      collection.count({}, function(err, count) {
	        // We got an error (f.ex not authorized)
	        if(err != null) return handleCallback(callback, err, null);
	        // Check if the user exists and update i
	        collection.find({user: username}, {dbName: options['dbName']}).toArray(function(err, documents) {
	          // We got an error (f.ex not authorized)
	          if(err != null) return handleCallback(callback, err, null);
	          // Add command keys
	          finalOptions.upsert = true;

	          // We have a user, let's update the password or upsert if not
	          collection.update({user: username},{$set: {user: username, pwd: userPassword}}, finalOptions, function(err, results, full) {
	            if(count == 0 && err) return handleCallback(callback, null, [{user:username, pwd:userPassword}]);
	            if(err) return handleCallback(callback, err, null)
	            handleCallback(callback, null, [{user:username, pwd:userPassword}]);
	          });
	        });
	      });

	      return;
	    }

	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, err, r);
	  });
	}

	/**
	 * Add a user to the database.
	 * @method
	 * @param {string} username The username.
	 * @param {string} password The password.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {object} [options.customData=null] Custom data associated with the user (only Mongodb 2.6 or higher)
	 * @param {object[]} [options.roles=null] Roles associated with the created user (only Mongodb 2.6 or higher)
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.addUser = function(username, password, options, callback) {
	  // Unpack the parameters
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() || {} : {};

	  // If we have a callback fallback
	  if(typeof callback == 'function') return addUser(self, username, password, options, callback);

	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    addUser(self, username, password, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	define.classMethod('addUser', {callback: true, promise:true});

	var _executeAuthRemoveUserCommand = function(self, username, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  // Get the error options
	  var commandOptions = {writeCommand:true};
	  if(options['dbName']) commandOptions.dbName = options['dbName'];

	  // Get additional values
	  var maxTimeMS = typeof options.maxTimeMS == 'number' ? options.maxTimeMS : null;

	  // Add maxTimeMS to options if set
	  if(maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;

	  // Build the command to execute
	  var command = {
	    dropUser: username
	  }

	  // Apply write concern to command
	  command = writeConcern(command, self, options);

	  // Force write using primary
	  commandOptions.readPreference = CoreReadPreference.primary;

	  // Execute the command
	  self.command(command, commandOptions, function(err, result) {
	    if(err && !err.ok && err.code == undefined) return handleCallback(callback, {code: -5000});
	    if(err) return handleCallback(callback, err, null);
	    handleCallback(callback, null, result.ok ? true : false);
	  })
	}

	var removeUser = function(self, username, options, callback) {
	  // Attempt to execute command
	  _executeAuthRemoveUserCommand(self, username, options, function(err, result) {
	    if(err && err.code == -5000) {
	      var finalOptions = writeConcern(shallowClone(options), self, options);
	      // If we have another db set
	      var db = options.dbName ? self.db(options.dbName) : self;

	      // Fetch a user collection
	      var collection = db.collection(Db.SYSTEM_USER_COLLECTION);

	      // Locate the user
	      collection.findOne({user: username}, {}, function(err, user) {
	        if(user == null) return handleCallback(callback, err, false);
	        collection.remove({user: username}, finalOptions, function(err, result) {
	          handleCallback(callback, err, true);
	        });
	      });

	      return;
	    }

	    if(err) return handleCallback(callback, err);
	    handleCallback(callback, err, result);
	  });
	}

	define.classMethod('removeUser', {callback: true, promise:true});

	/**
	 * Remove a user from a database
	 * @method
	 * @param {string} username The username.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.removeUser = function(username, options, callback) {
	  // Unpack the parameters
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() || {} : {};

	  // If we have a callback fallback
	  if(typeof callback == 'function') return removeUser(self, username, options, callback);

	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    removeUser(self, username, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var authenticate = function(self, username, password, options, callback) {
	  // the default db to authenticate against is 'self'
	  // if authententicate is called from a retry context, it may be another one, like admin
	  var authdb = options.authdb ? options.authdb : options.dbName;
	  authdb = options.authSource ? options.authSource : authdb;
	  authdb = authdb ? authdb : self.databaseName;

	  // Callback
	  var _callback = function(err, result) {
	    if(self.listeners('authenticated').length > 0) {
	      self.emit('authenticated', err, result);
	    }

	    // Return to caller
	    handleCallback(callback, err, result);
	  }

	  // authMechanism
	  var authMechanism = options.authMechanism || '';
	  authMechanism = authMechanism.toUpperCase();

	  // If classic auth delegate to auth command
	  if(authMechanism == 'MONGODB-CR') {
	    self.s.topology.auth('mongocr', authdb, username, password, function(err, result) {
	      if(err) return handleCallback(callback, err, false);
	      _callback(null, true);
	    });
	  } else if(authMechanism == 'PLAIN') {
	    self.s.topology.auth('plain', authdb, username, password, function(err, result) {
	      if(err) return handleCallback(callback, err, false);
	      _callback(null, true);
	    });
	  } else if(authMechanism == 'MONGODB-X509') {
	    self.s.topology.auth('x509', authdb, username, password, function(err, result) {
	      if(err) return handleCallback(callback, err, false);
	      _callback(null, true);
	    });
	  } else if(authMechanism == 'SCRAM-SHA-1') {
	    self.s.topology.auth('scram-sha-1', authdb, username, password, function(err, result) {
	      if(err) return handleCallback(callback, err, false);
	      _callback(null, true);
	    });
	  } else if(authMechanism == 'GSSAPI') {
	    if(process.platform == 'win32') {
	      self.s.topology.auth('sspi', authdb, username, password, options, function(err, result) {
	        if(err) return handleCallback(callback, err, false);
	        _callback(null, true);
	      });
	    } else {
	      self.s.topology.auth('gssapi', authdb, username, password, options, function(err, result) {
	        if(err) return handleCallback(callback, err, false);
	        _callback(null, true);
	      });
	    }
	  } else if(authMechanism == 'DEFAULT') {
	    self.s.topology.auth('default', authdb, username, password, function(err, result) {
	      if(err) return handleCallback(callback, err, false);
	      _callback(null, true);
	    });
	  } else {
	    handleCallback(callback, MongoError.create({message: f("authentication mechanism %s not supported", options.authMechanism), driver:true}));
	  }
	}

	/**
	 * Authenticate a user against the server.
	 * @method
	 * @param {string} username The username.
	 * @param {string} [password] The password.
	 * @param {object} [options=null] Optional settings.
	 * @param {string} [options.authMechanism=MONGODB-CR] The authentication mechanism to use, GSSAPI, MONGODB-CR, MONGODB-X509, PLAIN
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.authenticate = function(username, password, options, callback) {
	  if(typeof options == 'function') callback = options, options = {};
	  var self = this;
	  // Shallow copy the options
	  options = shallowClone(options);

	  // Set default mechanism
	  if(!options.authMechanism) {
	    options.authMechanism = 'DEFAULT';
	  } else if(options.authMechanism != 'GSSAPI'
	    && options.authMechanism != 'MONGODB-CR'
	    && options.authMechanism != 'MONGODB-X509'
	    && options.authMechanism != 'SCRAM-SHA-1'
	    && options.authMechanism != 'PLAIN') {
	      return handleCallback(callback, MongoError.create({message: "only GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism", driver:true}));
	  }

	  // If we have a callback fallback
	  if(typeof callback == 'function') return authenticate(self, username, password, options, function(err, r) {
	    // Support failed auth method
	    if(err && err.message && err.message.indexOf('saslStart') != -1) err.code = 59;
	    // Reject error
	    if(err) return callback(err, r);
	    callback(null, r);
	  });

	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    authenticate(self, username, password, options, function(err, r) {
	      // Support failed auth method
	      if(err && err.message && err.message.indexOf('saslStart') != -1) err.code = 59;
	      // Reject error
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	define.classMethod('authenticate', {callback: true, promise:true});

	/**
	 * Logout user from server, fire off on all connections and remove all auth info
	 * @method
	 * @param {object} [options=null] Optional settings.
	 * @param {string} [options.dbName=null] Logout against different database than current.
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.logout = function(options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() || {} : {};

	  // logout command
	  var cmd = {'logout':1};

	  // Add onAll to login to ensure all connection are logged out
	  options.onAll = true;

	  // We authenticated against a different db use that
	  if(this.s.authSource) options.dbName = this.s.authSource;

	  // Execute the command
	  if(typeof callback == 'function') return this.command(cmd, options, function(err, result) {
	    if(err) return handleCallback(callback, err, false);
	    handleCallback(callback, null, true)
	  });

	  // Return promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.command(cmd, options, function(err, result) {
	      if(err) return reject(err);
	      resolve(true);
	    });
	  });
	}

	define.classMethod('logout', {callback: true, promise:true});

	// Figure out the read preference
	var getReadPreference = function(options, db) {
	  if(options.readPreference) return options;
	  if(db.readPreference) options.readPreference = db.readPreference;
	  return options;
	}

	/**
	 * Retrieves this collections index info.
	 * @method
	 * @param {string} name The name of the collection.
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.full=false] Returns the full raw index information.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {Db~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Db.prototype.indexInformation = function(name, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = options || {};

	  // If we have a callback fallback
	  if(typeof callback == 'function') return indexInformation(self, name, options, callback);

	  // Return a promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    indexInformation(self, name, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var indexInformation = function(self, name, options, callback) {
	    // If we specified full information
	  var full = options['full'] == null ? false : options['full'];

	  // Process all the results from the index command and collection
	  var processResults = function(indexes) {
	    // Contains all the information
	    var info = {};
	    // Process all the indexes
	    for(var i = 0; i < indexes.length; i++) {
	      var index = indexes[i];
	      // Let's unpack the object
	      info[index.name] = [];
	      for(var name in index.key) {
	        info[index.name].push([name, index.key[name]]);
	      }
	    }

	    return info;
	  }

	  // Get the list of indexes of the specified collection
	  self.collection(name).listIndexes().toArray(function(err, indexes) {
	    if(err) return callback(toError(err));
	    if(!Array.isArray(indexes)) return handleCallback(callback, null, []);
	    if(full) return handleCallback(callback, null, indexes);
	    handleCallback(callback, null, processResults(indexes));
	  });
	}

	define.classMethod('indexInformation', {callback: true, promise:true});

	var createCreateIndexCommand = function(db, name, fieldOrSpec, options) {
	  var indexParameters = parseIndexOptions(fieldOrSpec);
	  var fieldHash = indexParameters.fieldHash;
	  var keys = indexParameters.keys;

	  // Generate the index name
	  var indexName = typeof options.name == 'string' ? options.name : indexParameters.name;
	  var selector = {
	    'ns': db.databaseName + "." + name, 'key': fieldHash, 'name': indexName
	  }

	  // Ensure we have a correct finalUnique
	  var finalUnique = options == null || 'object' === typeof options ? false : options;
	  // Set up options
	  options = options == null || typeof options == 'boolean' ? {} : options;

	  // Add all the options
	  var keysToOmit = Object.keys(selector);
	  for(var optionName in options) {
	    if(keysToOmit.indexOf(optionName) == -1) {
	      selector[optionName] = options[optionName];
	    }
	  }

	  if(selector['unique'] == null) selector['unique'] = finalUnique;

	  // Remove any write concern operations
	  var removeKeys = ['w', 'wtimeout', 'j', 'fsync', 'readPreference'];
	  for(var i = 0; i < removeKeys.length; i++) {
	    delete selector[removeKeys[i]];
	  }

	  // Return the command creation selector
	  return selector;
	}

	var createIndexUsingCreateIndexes = function(self, name, fieldOrSpec, options, callback) {
	  // Build the index
	  var indexParameters = parseIndexOptions(fieldOrSpec);
	  // Generate the index name
	  var indexName = typeof options.name == 'string' ? options.name : indexParameters.name;
	  // Set up the index
	  var indexes = [{ name: indexName, key: indexParameters.fieldHash }];
	  // merge all the options
	  var keysToOmit = Object.keys(indexes[0]);
	  for(var optionName in options) {
	    if(keysToOmit.indexOf(optionName) == -1) {
	      indexes[0][optionName] = options[optionName];
	    }

	    // Remove any write concern operations
	    var removeKeys = ['w', 'wtimeout', 'j', 'fsync', 'readPreference'];
	    for(var i = 0; i < removeKeys.length; i++) {
	      delete indexes[0][removeKeys[i]];
	    }
	  }

	  // Create command
	  var cmd = {createIndexes: name, indexes: indexes};

	  // Apply write concern to command
	  cmd = writeConcern(cmd, self, options);

	  // Build the command
	  self.command(cmd, options, function(err, result) {
	    if(err) return handleCallback(callback, err, null);
	    if(result.ok == 0) return handleCallback(callback, toError(result), null);
	    // Return the indexName for backward compatibility
	    handleCallback(callback, null, indexName);
	  });
	}

	// Validate the database name
	var validateDatabaseName = function(databaseName) {
	  if(typeof databaseName !== 'string') throw MongoError.create({message: "database name must be a string", driver:true});
	  if(databaseName.length === 0) throw MongoError.create({message: "database name cannot be the empty string", driver:true});
	  if(databaseName == '$external') return;

	  var invalidChars = [" ", ".", "$", "/", "\\"];
	  for(var i = 0; i < invalidChars.length; i++) {
	    if(databaseName.indexOf(invalidChars[i]) != -1) throw MongoError.create({message: "database names cannot contain the character '" + invalidChars[i] + "'", driver:true});
	  }
	}

	// Get write concern
	var writeConcern = function(target, db, options) {
	  if(options.w != null || options.j != null || options.fsync != null) {
	    var opts = {};
	    if(options.w) opts.w = options.w;
	    if(options.wtimeout) opts.wtimeout = options.wtimeout;
	    if(options.j) opts.j = options.j;
	    if(options.fsync) opts.fsync = options.fsync;
	    target.writeConcern = opts;
	  } else if(db.writeConcern.w != null || db.writeConcern.j != null || db.writeConcern.fsync != null) {
	    target.writeConcern = db.writeConcern;
	  }

	  return target
	}

	// Add listeners to topology
	var createListener = function(self, e, object) {
	  var listener = function(err) {
	    if(e != 'error') {
	      object.emit(e, err, self);

	      // Emit on all associated db's if available
	      for(var i = 0; i < self.s.children.length; i++) {
	        self.s.children[i].emit(e, err, self.s.children[i]);
	      }
	    }
	  }
	  return listener;
	}

	/**
	 * Db close event
	 *
	 * Emitted after a socket closed against a single server or mongos proxy.
	 *
	 * @event Db#close
	 * @type {MongoError}
	 */

	/**
	 * Db authenticated event
	 *
	 * Emitted after all server members in the topology (single server, replicaset or mongos) have successfully authenticated.
	 *
	 * @event Db#authenticated
	 * @type {object}
	 */

	/**
	 * Db reconnect event
	 *
	 *  * Server: Emitted when the driver has reconnected and re-authenticated.
	 *  * ReplicaSet: N/A
	 *  * Mongos: Emitted when the driver reconnects and re-authenticates successfully against a Mongos.
	 *
	 * @event Db#reconnect
	 * @type {object}
	 */

	/**
	 * Db error event
	 *
	 * Emitted after an error occurred against a single server or mongos proxy.
	 *
	 * @event Db#error
	 * @type {MongoError}
	 */

	/**
	 * Db timeout event
	 *
	 * Emitted after a socket timeout occurred against a single server or mongos proxy.
	 *
	 * @event Db#timeout
	 * @type {MongoError}
	 */

	/**
	 * Db parseError event
	 *
	 * The parseError event is emitted if the driver detects illegal or corrupt BSON being received from the server.
	 *
	 * @event Db#parseError
	 * @type {MongoError}
	 */

	/**
	 * Db fullsetup event, emitted when all servers in the topology have been connected to at start up time.
	 *
	 * * Server: Emitted when the driver has connected to the single server and has authenticated.
	 * * ReplSet: Emitted after the driver has attempted to connect to all replicaset members.
	 * * Mongos: Emitted after the driver has attempted to connect to all mongos proxies.
	 *
	 * @event Db#fullsetup
	 * @type {Db}
	 */

	// Constants
	Db.SYSTEM_NAMESPACE_COLLECTION = "system.namespaces";
	Db.SYSTEM_INDEX_COLLECTION = "system.indexes";
	Db.SYSTEM_PROFILE_COLLECTION = "system.profile";
	Db.SYSTEM_USER_COLLECTION = "system.users";
	Db.SYSTEM_COMMAND_COLLECTION = "$cmd";
	Db.SYSTEM_JS_COLLECTION = "system.js";

	module.exports = Db;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var toError = __webpack_require__(220).toError,
	  Define = __webpack_require__(232),
	  shallowClone = __webpack_require__(220).shallowClone;

	/**
	 * @fileOverview The **Admin** class is an internal class that allows convenient access to
	 * the admin functionality and commands for MongoDB.
	 *
	 * **ADMIN Cannot directly be instantiated**
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   test = require('assert');
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   // Use the admin database for the operation
	 *   var adminDb = db.admin();
	 *
	 *   // List all the available databases
	 *   adminDb.listDatabases(function(err, dbs) {
	 *     test.equal(null, err);
	 *     test.ok(dbs.databases.length > 0);
	 *     db.close();
	 *   });
	 * });
	 */

	/**
	 * Create a new Admin instance (INTERNAL TYPE, do not instantiate directly)
	 * @class
	 * @return {Admin} a collection instance.
	 */
	var Admin = function(db, topology, promiseLibrary) {
	  if(!(this instanceof Admin)) return new Admin(db, topology);
	  var self = this;

	  // Internal state
	  this.s = {
	      db: db
	    , topology: topology
	    , promiseLibrary: promiseLibrary
	  }
	}

	var define = Admin.define = new Define('Admin', Admin, false);

	/**
	 * The callback format for results
	 * @callback Admin~resultCallback
	 * @param {MongoError} error An error instance representing the error during the execution.
	 * @param {object} result The result object if the command was executed successfully.
	 */

	/**
	 * Execute a command
	 * @method
	 * @param {object} command The command hash
	 * @param {object} [options=null] Optional settings.
	 * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
	 * @param {number} [options.maxTimeMS=null] Number of milliseconds to wait before aborting the query.
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.command = function(command, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() : {};

	  // Execute using callback
	  if(typeof callback == 'function') return this.s.db.executeDbAdminCommand(command, options, function(err, doc) {
	    return callback != null ? callback(err, doc) : null;
	  });

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.executeDbAdminCommand(command, options, function(err, doc) {
	      if(err) return reject(err);
	      resolve(doc);
	    });
	  });
	}

	define.classMethod('command', {callback: true, promise:true});

	/**
	 * Retrieve the server information for the current
	 * instance of the db client
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.buildInfo = function(callback) {
	  var self = this;
	  // Execute using callback
	  if(typeof callback == 'function') return this.serverInfo(callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.serverInfo(function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('buildInfo', {callback: true, promise:true});

	/**
	 * Retrieve the server information for the current
	 * instance of the db client
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.serverInfo = function(callback) {
	  var self = this;
	  // Execute using callback
	  if(typeof callback == 'function') return this.s.db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {
	    if(err != null) return callback(err, null);
	    callback(null, doc);
	  });

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {
	      if(err) return reject(err);
	      resolve(doc);
	    });
	  });
	}

	define.classMethod('serverInfo', {callback: true, promise:true});

	/**
	 * Retrieve this db's server status.
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.serverStatus = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return serverStatus(self, callback)

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    serverStatus(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var serverStatus = function(self, callback) {
	  self.s.db.executeDbAdminCommand({serverStatus: 1}, function(err, doc) {
	    if(err == null && doc.ok === 1) {
	      callback(null, doc);
	    } else {
	      if(err) return callback(err, false);
	      return callback(toError(doc), false);
	    }
	  });
	}

	define.classMethod('serverStatus', {callback: true, promise:true});

	/**
	 * Retrieve the current profiling Level for MongoDB
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.profilingLevel = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return profilingLevel(self, callback)

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    profilingLevel(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var profilingLevel = function(self, callback) {
	  self.s.db.executeDbAdminCommand({profile:-1}, function(err, doc) {
	    doc = doc;

	    if(err == null && doc.ok === 1) {
	      var was = doc.was;
	      if(was == 0) return callback(null, "off");
	      if(was == 1) return callback(null, "slow_only");
	      if(was == 2) return callback(null, "all");
	        return callback(new Error("Error: illegal profiling level value " + was), null);
	    } else {
	      err != null ? callback(err, null) : callback(new Error("Error with profile command"), null);
	    }
	  });
	}

	define.classMethod('profilingLevel', {callback: true, promise:true});

	/**
	 * Ping the MongoDB server and retrieve results
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.ping = function(options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 0);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);

	  // Execute using callback
	  if(typeof callback == 'function') return this.s.db.executeDbAdminCommand({ping: 1}, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.executeDbAdminCommand({ping: 1}, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('ping', {callback: true, promise:true});

	/**
	 * Authenticate a user against the server.
	 * @method
	 * @param {string} username The username.
	 * @param {string} [password] The password.
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.authenticate = function(username, password, options, callback) {
	  var self = this;
	  if(typeof options == 'function') callback = options, options = {};
	  options = shallowClone(options);
	  options.authdb = 'admin';
	  
	  // Execute using callback
	  if(typeof callback == 'function') return this.s.db.authenticate(username, password, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.authenticate(username, password, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('authenticate', {callback: true, promise:true});

	/**
	 * Logout user from server, fire off on all connections and remove all auth info
	 * @method
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.logout = function(callback) {
	  var self = this;
	  // Execute using callback
	  if(typeof callback == 'function') return this.s.db.logout({authdb: 'admin'}, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.logout({authdb: 'admin'}, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('logout', {callback: true, promise:true});

	// Get write concern
	var writeConcern = function(options, db) {
	  options = shallowClone(options);

	  // If options already contain write concerns return it
	  if(options.w || options.wtimeout || options.j || options.fsync) {
	    return options;
	  }

	  // Set db write concern if available
	  if(db.writeConcern) {
	    if(options.w) options.w = db.writeConcern.w;
	    if(options.wtimeout) options.wtimeout = db.writeConcern.wtimeout;
	    if(options.j) options.j = db.writeConcern.j;
	    if(options.fsync) options.fsync = db.writeConcern.fsync;
	  }

	  // Return modified options
	  return options;
	}

	/**
	 * Add a user to the database.
	 * @method
	 * @param {string} username The username.
	 * @param {string} password The password.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.fsync=false] Specify a file sync write concern.
	 * @param {object} [options.customData=null] Custom data associated with the user (only Mongodb 2.6 or higher)
	 * @param {object[]} [options.roles=null] Roles associated with the created user (only Mongodb 2.6 or higher)
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.addUser = function(username, password, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 2);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() : {};
	  options = options || {};
	  // Get the options
	  options = writeConcern(options, self.s.db)
	  // Set the db name to admin
	  options.dbName = 'admin';

	  // Execute using callback
	  if(typeof callback == 'function')
	    return self.s.db.addUser(username, password, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.addUser(username, password, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('addUser', {callback: true, promise:true});

	/**
	 * Remove a user from a database
	 * @method
	 * @param {string} username The username.
	 * @param {object} [options=null] Optional settings.
	 * @param {(number|string)} [options.w=null] The write concern.
	 * @param {number} [options.wtimeout=null] The write concern timeout.
	 * @param {boolean} [options.j=false] Specify a journal write concern.
	 * @param {boolean} [options.fsync=false] Specify a file sync write concern.
	 * @param {Admin~resultCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.removeUser = function(username, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() : {};
	  options = options || {};
	  // Get the options
	  options = writeConcern(options, self.s.db)
	  // Set the db name
	  options.dbName = 'admin';

	  // Execute using callback
	  if(typeof callback == 'function')
	    return self.s.db.removeUser(username, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.removeUser(username, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('removeUser', {callback: true, promise:true});

	/**
	 * Set the current profiling level of MongoDB
	 *
	 * @param {string} level The new profiling level (off, slow_only, all).
	 * @param {Admin~resultCallback} [callback] The command result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.setProfilingLevel = function(level, callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return setProfilingLevel(self, level, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    setProfilingLevel(self, level, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var setProfilingLevel = function(self, level, callback) {
	  var command = {};
	  var profile = 0;

	  if(level == "off") {
	    profile = 0;
	  } else if(level == "slow_only") {
	    profile = 1;
	  } else if(level == "all") {
	    profile = 2;
	  } else {
	    return callback(new Error("Error: illegal profiling level value " + level));
	  }

	  // Set up the profile number
	  command['profile'] = profile;

	  self.s.db.executeDbAdminCommand(command, function(err, doc) {
	    doc = doc;

	    if(err == null && doc.ok === 1)
	      return callback(null, level);
	    return err != null ? callback(err, null) : callback(new Error("Error with profile command"), null);
	  });
	}

	define.classMethod('setProfilingLevel', {callback: true, promise:true});

	/**
	 * Retrive the current profiling information for MongoDB
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.profilingInfo = function(callback) {
	  var self = this;

	  // Execute using callback
	  if(typeof callback == 'function') return profilingInfo(self, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    profilingInfo(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var profilingInfo = function(self, callback) {
	  try {
	    self.s.topology.cursor("admin.system.profile", { find: 'system.profile', query: {}}, {}).toArray(callback);
	  } catch (err) {
	    return callback(err, null);
	  }
	}

	define.classMethod('profilingLevel', {callback: true, promise:true});

	/**
	 * Validate an existing collection
	 *
	 * @param {string} collectionName The name of the collection to validate.
	 * @param {object} [options=null] Optional settings.
	 * @param {Admin~resultCallback} [callback] The command result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.validateCollection = function(collectionName, options, callback) {
	  var self = this;
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = args.pop();
	  if(typeof callback != 'function') args.push(callback);
	  options = args.length ? args.shift() : {};
	  options = options || {};

	  // Execute using callback
	  if(typeof callback == 'function')
	    return validateCollection(self, collectionName, options, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    validateCollection(self, collectionName, options, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var validateCollection = function(self, collectionName, options, callback) {
	  var command = {validate: collectionName};
	  var keys = Object.keys(options);

	  // Decorate command with extra options
	  for(var i = 0; i < keys.length; i++) {
	    if(options.hasOwnProperty(keys[i])) {
	      command[keys[i]] = options[keys[i]];
	    }
	  }

	  self.s.db.command(command, function(err, doc) {
	    if(err != null) return callback(err, null);

	    if(doc.ok === 0)
	      return callback(new Error("Error with validate command"), null);
	    if(doc.result != null && doc.result.constructor != String)
	      return callback(new Error("Error with validation data"), null);
	    if(doc.result != null && doc.result.match(/exception|corrupt/) != null)
	      return callback(new Error("Error: invalid collection " + collectionName), null);
	    if(doc.valid != null && !doc.valid)
	      return callback(new Error("Error: invalid collection " + collectionName), null);

	    return callback(null, doc);
	  });
	}

	define.classMethod('validateCollection', {callback: true, promise:true});

	/**
	 * List the available databases
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.listDatabases = function(callback) {
	  var self = this;
	  // Execute using callback
	  if(typeof callback == 'function') return self.s.db.executeDbAdminCommand({listDatabases:1}, {}, callback);

	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    self.s.db.executeDbAdminCommand({listDatabases:1}, {}, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	}

	define.classMethod('listDatabases', {callback: true, promise:true});

	/**
	 * Get ReplicaSet status
	 *
	 * @param {Admin~resultCallback} [callback] The command result callback.
	 * @return {Promise} returns Promise if no callback passed
	 */
	Admin.prototype.replSetGetStatus = function(callback) {
	  var self = this;
	  // Execute using callback
	  if(typeof callback == 'function') return replSetGetStatus(self, callback);
	  // Return a Promise
	  return new this.s.promiseLibrary(function(resolve, reject) {
	    replSetGetStatus(self, function(err, r) {
	      if(err) return reject(err);
	      resolve(r);
	    });
	  });
	};

	var replSetGetStatus = function(self, callback) {
	  self.s.db.executeDbAdminCommand({replSetGetStatus:1}, function(err, doc) {
	    if(err == null && doc.ok === 1)
	      return callback(null, doc);
	    if(err) return callback(err, false);
	    callback(toError(doc), false);
	  });
	}

	define.classMethod('replSetGetStatus', {callback: true, promise:true});

	module.exports = Admin;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";

	var parse = __webpack_require__(251)
	  , Server = __webpack_require__(244)
	  , Mongos = __webpack_require__(247)
	  , ReplSet = __webpack_require__(246)
	  , Define = __webpack_require__(232)
	  , ReadPreference = __webpack_require__(221)
	  , Db = __webpack_require__(248);

	/**
	 * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.
	 *
	 * @example
	 * var MongoClient = require('mongodb').MongoClient,
	 *   test = require('assert');
	 * // Connection url
	 * var url = 'mongodb://localhost:27017/test';
	 * // Connect using MongoClient
	 * MongoClient.connect(url, function(err, db) {
	 *   // Get an additional db
	 *   db.close();
	 * });
	 */

	/**
	 * Creates a new MongoClient instance
	 * @class
	 * @return {MongoClient} a MongoClient instance.
	 */
	function MongoClient() {
	  /**
	   * The callback format for results
	   * @callback MongoClient~connectCallback
	   * @param {MongoError} error An error instance representing the error during the execution.
	   * @param {Db} db The connected database.
	   */

	  /**
	   * Connect to MongoDB using a url as documented at
	   *
	   *  docs.mongodb.org/manual/reference/connection-string/
	   *
	   * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver
	   *
	   * @method
	   * @param {string} url The connection URI string
	   * @param {object} [options=null] Optional settings.
	   * @param {boolean} [options.uri_decode_auth=false] Uri decode the user name and password for authentication
	   * @param {object} [options.db=null] A hash of options to set on the db object, see **Db constructor**
	   * @param {object} [options.server=null] A hash of options to set on the server objects, see **Server** constructor**
	   * @param {object} [options.replSet=null] A hash of options to set on the replSet object, see **ReplSet** constructor**
	   * @param {object} [options.mongos=null] A hash of options to set on the mongos object, see **Mongos** constructor**
	   * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	   * @param {MongoClient~connectCallback} [callback] The command result callback
	   * @return {Promise} returns Promise if no callback passed
	   */
	  this.connect = MongoClient.connect;
	}

	var define = MongoClient.define = new Define('MongoClient', MongoClient, false);

	/**
	 * Connect to MongoDB using a url as documented at
	 *
	 *  docs.mongodb.org/manual/reference/connection-string/
	 *
	 * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver
	 *
	 * @method
	 * @static
	 * @param {string} url The connection URI string
	 * @param {object} [options=null] Optional settings.
	 * @param {boolean} [options.uri_decode_auth=false] Uri decode the user name and password for authentication
	 * @param {object} [options.db=null] A hash of options to set on the db object, see **Db constructor**
	 * @param {object} [options.server=null] A hash of options to set on the server objects, see **Server** constructor**
	 * @param {object} [options.replSet=null] A hash of options to set on the replSet object, see **ReplSet** constructor**
	 * @param {object} [options.mongos=null] A hash of options to set on the mongos object, see **Mongos** constructor**
	 * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
	 * @param {MongoClient~connectCallback} [callback] The command result callback
	 * @return {Promise} returns Promise if no callback passed
	 */
	MongoClient.connect = function(url, options, callback) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;
	  options = args.length ? args.shift() : null;
	  options = options || {};

	  // Get the promiseLibrary
	  var promiseLibrary = options.promiseLibrary;

	  // No promise library selected fall back
	  if(!promiseLibrary) {
	    promiseLibrary = typeof global.Promise == 'function' ?
	      global.Promise : __webpack_require__(234).Promise;
	  }

	  // Return a promise
	  if(typeof callback != 'function') {
	    return new promiseLibrary(function(resolve, reject) {
	      connect(url, options, function(err, db) {
	        if(err) return reject(err);
	        resolve(db);
	      });
	    });
	  }

	  // Fallback to callback based connect
	  connect(url, options, callback);
	}

	define.staticMethod('connect', {callback: true, promise:true});

	var connect = function(url, options, callback) {
	  var serverOptions = options.server || {};
	  var mongosOptions = options.mongos || {};
	  var replSetServersOptions = options.replSet || options.replSetServers || {};
	  var dbOptions = options.db || {};

	  // If callback is null throw an exception
	  if(callback == null)
	    throw new Error("no callback function provided");

	  // Parse the string
	  var object = parse(url, options);

	  // Merge in any options for db in options object
	  if(dbOptions) {
	    for(var name in dbOptions) object.db_options[name] = dbOptions[name];
	  }

	  // Added the url to the options
	  object.db_options.url = url;

	  // Merge in any options for server in options object
	  if(serverOptions) {
	    for(var name in serverOptions) object.server_options[name] = serverOptions[name];
	  }

	  // Merge in any replicaset server options
	  if(replSetServersOptions) {
	    for(var name in replSetServersOptions) object.rs_options[name] = replSetServersOptions[name];
	  }

	  if(replSetServersOptions.ssl
	    || replSetServersOptions.sslValidate
	    || replSetServersOptions.sslCA
	    || replSetServersOptions.sslCert
	    || replSetServersOptions.sslKey
	    || replSetServersOptions.sslPass) {
	    object.server_options.ssl = replSetServersOptions.ssl;
	    object.server_options.sslValidate = replSetServersOptions.sslValidate;
	    object.server_options.sslCA = replSetServersOptions.sslCA;
	    object.server_options.sslCert = replSetServersOptions.sslCert;
	    object.server_options.sslKey = replSetServersOptions.sslKey;
	    object.server_options.sslPass = replSetServersOptions.sslPass;
	  }

	  // Merge in any replicaset server options
	  if(mongosOptions) {
	    for(var name in mongosOptions) object.mongos_options[name] = mongosOptions[name];
	  }

	  if(typeof object.server_options.poolSize == 'number') {
	    if(!object.mongos_options.poolSize) object.mongos_options.poolSize = object.server_options.poolSize;
	    if(!object.rs_options.poolSize) object.rs_options.poolSize = object.server_options.poolSize;
	  }

	  if(mongosOptions.ssl
	    || mongosOptions.sslValidate
	    || mongosOptions.sslCA
	    || mongosOptions.sslCert
	    || mongosOptions.sslKey
	    || mongosOptions.sslPass) {
	    object.server_options.ssl = mongosOptions.ssl;
	    object.server_options.sslValidate = mongosOptions.sslValidate;
	    object.server_options.sslCA = mongosOptions.sslCA;
	    object.server_options.sslCert = mongosOptions.sslCert;
	    object.server_options.sslKey = mongosOptions.sslKey;
	    object.server_options.sslPass = mongosOptions.sslPass;
	  }

	  // Set the promise library
	  object.db_options.promiseLibrary = options.promiseLibrary;

	  // We need to ensure that the list of servers are only either direct members or mongos
	  // they cannot be a mix of monogs and mongod's
	  var totalNumberOfServers = object.servers.length;
	  var totalNumberOfMongosServers = 0;
	  var totalNumberOfMongodServers = 0;
	  var serverConfig = null;
	  var errorServers = {};

	  // Failure modes
	  if(object.servers.length == 0) throw new Error("connection string must contain at least one seed host");

	  // If we have no db setting for the native parser try to set the c++ one first
	  object.db_options.native_parser = _setNativeParser(object.db_options);
	  // If no auto_reconnect is set, set it to true as default for single servers
	  if(typeof object.server_options.auto_reconnect != 'boolean') {
	    object.server_options.auto_reconnect = true;
	  }

	  // If we have more than a server, it could be replicaset or mongos list
	  // need to verify that it's one or the other and fail if it's a mix
	  // Connect to all servers and run ismaster
	  for(var i = 0; i < object.servers.length; i++) {
	    // Set up socket options
	    var providedSocketOptions = object.server_options.socketOptions || {};

	    var _server_options = {
	        poolSize:1
	      , socketOptions: {
	          connectTimeoutMS: providedSocketOptions.connectTimeoutMS || 30000
	        , socketTimeoutMS:  providedSocketOptions.socketTimeoutMS || 30000
	      }
	      , auto_reconnect:false};

	    // Ensure we have ssl setup for the servers
	    if(object.server_options.ssl) {
	      _server_options.ssl = object.server_options.ssl;
	      _server_options.sslValidate = object.server_options.sslValidate;
	      _server_options.sslCA = object.server_options.sslCA;
	      _server_options.sslCert = object.server_options.sslCert;
	      _server_options.sslKey = object.server_options.sslKey;
	      _server_options.sslPass = object.server_options.sslPass;
	    } else if(object.rs_options.ssl) {
	      _server_options.ssl = object.rs_options.ssl;
	      _server_options.sslValidate = object.rs_options.sslValidate;
	      _server_options.sslCA = object.rs_options.sslCA;
	      _server_options.sslCert = object.rs_options.sslCert;
	      _server_options.sslKey = object.rs_options.sslKey;
	      _server_options.sslPass = object.rs_options.sslPass;
	    }

	    // Error
	    var error = null;
	    // Set up the Server object
	    var _server = object.servers[i].domain_socket
	        ? new Server(object.servers[i].domain_socket, _server_options)
	        : new Server(object.servers[i].host, object.servers[i].port, _server_options);

	    var connectFunction = function(__server) {
	      // Attempt connect
	      new Db(object.dbName, __server, {w:1, native_parser:false, promiseLibrary:options.promiseLibrary}).open(function(err, db) {
	        // Update number of servers
	        totalNumberOfServers = totalNumberOfServers - 1;
	        
	        // If no error do the correct checks
	        if(!err) {
	          // Close the connection
	          db.close();
	          var isMasterDoc = db.serverConfig.isMasterDoc;
	          
	          // Check what type of server we have
	          if(isMasterDoc.setName) {
	            totalNumberOfMongodServers++;
	          }

	          if(isMasterDoc.msg && isMasterDoc.msg == "isdbgrid") totalNumberOfMongosServers++;
	        } else {
	          error = err;
	          errorServers[__server.host + ":" + __server.port] = __server;
	        }

	        if(totalNumberOfServers == 0) {
	          // Error out
	          if(totalNumberOfMongodServers == 0 && totalNumberOfMongosServers == 0 && error) {
	            return callback(error, null);
	          }

	          // If we have a mix of mongod and mongos, throw an error
	          if(totalNumberOfMongosServers > 0 && totalNumberOfMongodServers > 0) {
	            if(db) db.close();
	            return process.nextTick(function() {
	              try {
	                callback(new Error("cannot combine a list of replicaset seeds and mongos seeds"));
	              } catch (err) {
	                throw err
	              }
	            })
	          }

	          if(totalNumberOfMongodServers == 0
	            && totalNumberOfMongosServers == 0
	            && object.servers.length == 1
	            && (!object.rs_options.replicaSet || !object.rs_options.rs_name)) {
	            
	            var obj = object.servers[0];
	            serverConfig = obj.domain_socket ?
	                new Server(obj.domain_socket, object.server_options)
	              : new Server(obj.host, obj.port, object.server_options);
	          
	          } else if(totalNumberOfMongodServers > 0
	            || totalNumberOfMongosServers > 0
	            || object.rs_options.replicaSet || object.rs_options.rs_name) {
	            
	            var finalServers = object.servers
	              .filter(function(serverObj) {
	                return errorServers[serverObj.host + ":" + serverObj.port] == null;
	              })
	              .map(function(serverObj) {
	                return new Server(serverObj.host, serverObj.port, object.server_options);
	              });

	            // Clean out any error servers
	            errorServers = {};

	            // Set up the final configuration
	            if(totalNumberOfMongodServers > 0) {
	              try {
	                
	                // If no replicaset name was provided, we wish to perform a
	                // direct connection
	                if(totalNumberOfMongodServers == 1 
	                  && (!object.rs_options.replicaSet && !object.rs_options.rs_name)) {
	                  serverConfig = finalServers[0];
	                } else if(totalNumberOfMongodServers == 1) {
	                  object.rs_options.replicaSet = object.rs_options.replicaSet || object.rs_options.rs_name;
	                  serverConfig = new ReplSet(finalServers, object.rs_options);
	                } else {
	                  serverConfig = new ReplSet(finalServers, object.rs_options);                  
	                }

	              } catch(err) {
	                return callback(err, null);
	              }
	            } else {
	              serverConfig = new Mongos(finalServers, object.mongos_options);
	            }
	          }

	          if(serverConfig == null) {
	            return process.nextTick(function() {
	              try {
	                callback(new Error("Could not locate any valid servers in initial seed list"));
	              } catch (err) {
	                if(db) db.close();
	                throw err
	              }
	            });
	          }

	          // Ensure no firing of open event before we are ready
	          serverConfig.emitOpen = false;
	          // Set up all options etc and connect to the database
	          _finishConnecting(serverConfig, object, options, callback)
	        }
	      });
	    }

	    // Wrap the context of the call
	    connectFunction(_server);
	  }
	}

	var _setNativeParser = function(db_options) {
	  if(typeof db_options.native_parser == 'boolean') return db_options.native_parser;

	  try {
	    __webpack_require__(167).BSON.BSONNative.BSON;
	    return true;
	  } catch(err) {
	    return false;
	  }
	}

	var _finishConnecting = function(serverConfig, object, options, callback) {
	  // If we have a readPreference passed in by the db options
	  if(typeof object.db_options.readPreference == 'string') {
	    object.db_options.readPreference = new ReadPreference(object.db_options.readPreference);
	  } else if(typeof object.db_options.read_preference == 'string') {
	    object.db_options.readPreference = new ReadPreference(object.db_options.read_preference);
	  }

	  // Do we have readPreference tags
	  if(object.db_options.readPreference && object.db_options.readPreferenceTags) {
	    object.db_options.readPreference.tags = object.db_options.readPreferenceTags;
	  } else if(object.db_options.readPreference && object.db_options.read_preference_tags) {
	    object.db_options.readPreference.tags = object.db_options.read_preference_tags;
	  }

	  // Get the socketTimeoutMS
	  var socketTimeoutMS = object.server_options.socketOptions.socketTimeoutMS || 0;

	  // If we have a replset, override with replicaset socket timeout option if available
	  if(serverConfig instanceof ReplSet) {
	    socketTimeoutMS = object.rs_options.socketOptions.socketTimeoutMS || socketTimeoutMS;
	  }

	  // Set socketTimeout to the same as the connectTimeoutMS or 30 sec
	  serverConfig.connectTimeoutMS = serverConfig.connectTimeoutMS || 30000;
	  serverConfig.socketTimeoutMS = serverConfig.connectTimeoutMS;

	  // Set up the db options
	  var db = new Db(object.dbName, serverConfig, object.db_options);
	  // Open the db
	  db.open(function(err, db){

	    if(err) {
	      return process.nextTick(function() {
	        try {
	          callback(err, null);
	        } catch (err) {
	          if(db) db.close();
	          throw err
	        }
	      });
	    }

	    // Reset the socket timeout
	    serverConfig.socketTimeoutMS = socketTimeoutMS || 0;

	    // Return object
	    if(err == null && object.auth){
	      // What db to authenticate against
	      var authentication_db = db;
	      if(object.db_options && object.db_options.authSource) {
	        authentication_db = db.db(object.db_options.authSource);
	      }

	      // Build options object
	      var options = {};
	      if(object.db_options.authMechanism) options.authMechanism = object.db_options.authMechanism;
	      if(object.db_options.gssapiServiceName) options.gssapiServiceName = object.db_options.gssapiServiceName;

	      // Authenticate
	      authentication_db.authenticate(object.auth.user, object.auth.password, options, function(err, success){
	        if(success){
	          process.nextTick(function() {
	            try {
	              callback(null, db);
	            } catch (err) {
	              if(db) db.close();
	              throw err
	            }
	          });
	        } else {
	          if(db) db.close();
	          process.nextTick(function() {
	            try {
	              callback(err ? err : new Error('Could not authenticate user ' + object.auth[0]), null);
	            } catch (err) {
	              if(db) db.close();
	              throw err
	            }
	          });
	        }
	      });
	    } else {
	      process.nextTick(function() {
	        try {
	          callback(err, db);
	        } catch (err) {
	          if(db) db.close();
	          throw err
	        }
	      })
	    }
	  });
	}

	module.exports = MongoClient

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var ReadPreference = __webpack_require__(221);

	module.exports = function(url, options) {
	  // Ensure we have a default options object if none set
	  options = options || {};
	  // Variables
	  var connection_part = '';
	  var auth_part = '';
	  var query_string_part = '';
	  var dbName = 'admin';

	  // Must start with mongodb
	  if(url.indexOf("mongodb://") != 0)
	    throw Error("URL must be in the format mongodb://user:pass@host:port/dbname");
	  // If we have a ? mark cut the query elements off
	  if(url.indexOf("?") != -1) {
	    query_string_part = url.substr(url.indexOf("?") + 1);
	    connection_part = url.substring("mongodb://".length, url.indexOf("?"))
	  } else {
	    connection_part = url.substring("mongodb://".length);
	  }

	  // Check if we have auth params
	  if(connection_part.indexOf("@") != -1) {
	    auth_part = connection_part.split("@")[0];
	    connection_part = connection_part.split("@")[1];
	  }

	  // Check if the connection string has a db
	  if(connection_part.indexOf(".sock") != -1) {
	    if(connection_part.indexOf(".sock/") != -1) {
	      dbName = connection_part.split(".sock/")[1];
	      connection_part = connection_part.split("/", connection_part.indexOf(".sock") + ".sock".length);
	    }
	  } else if(connection_part.indexOf("/") != -1) {
	    dbName = connection_part.split("/")[1];
	    connection_part = connection_part.split("/")[0];
	  }

	  // Result object
	  var object = {};

	  // Pick apart the authentication part of the string
	  var authPart = auth_part || '';
	  var auth = authPart.split(':', 2);

	  // Decode the URI components
	  auth[0] = decodeURIComponent(auth[0]);
	  if(auth[1]){
	    auth[1] = decodeURIComponent(auth[1]);
	  }

	  // Add auth to final object if we have 2 elements
	  if(auth.length == 2) object.auth = {user: auth[0], password: auth[1]};

	  // Variables used for temporary storage
	  var hostPart;
	  var urlOptions;
	  var servers;
	  var serverOptions = {socketOptions: {}};
	  var dbOptions = {read_preference_tags: []};
	  var replSetServersOptions = {socketOptions: {}};
	  // Add server options to final object
	  object.server_options = serverOptions;
	  object.db_options = dbOptions;
	  object.rs_options = replSetServersOptions;
	  object.mongos_options = {};

	  // Let's check if we are using a domain socket
	  if(url.match(/\.sock/)) {
	    // Split out the socket part
	    var domainSocket = url.substring(
	        url.indexOf("mongodb://") + "mongodb://".length
	      , url.lastIndexOf(".sock") + ".sock".length);
	    // Clean out any auth stuff if any
	    if(domainSocket.indexOf("@") != -1) domainSocket = domainSocket.split("@")[1];
	    servers = [{domain_socket: domainSocket}];
	  } else {
	    // Split up the db
	    hostPart = connection_part;
	    // Deduplicate servers
	    var deduplicatedServers = {};

	    // Parse all server results
	    servers = hostPart.split(',').map(function(h) {
	      var _host, _port, ipv6match;
	      //check if it matches [IPv6]:port, where the port number is optional
	      if ((ipv6match = /\[([^\]]+)\](?:\:(.+))?/.exec(h))) {
	        _host = ipv6match[1];
	        _port = parseInt(ipv6match[2], 10) || 27017;
	      } else {
	        //otherwise assume it's IPv4, or plain hostname
	        var hostPort = h.split(':', 2);
	        _host = hostPort[0] || 'localhost';
	        _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017;
	        // Check for localhost?safe=true style case
	        if(_host.indexOf("?") != -1) _host = _host.split(/\?/)[0];
	      }

	      // No entry returned for duplicate servr
	      if(deduplicatedServers[_host + "_" + _port]) return null;
	      deduplicatedServers[_host + "_" + _port] = 1;

	      // Return the mapped object
	      return {host: _host, port: _port};
	    }).filter(function(x) {
	      return x != null;
	    });
	  }

	  // Get the db name
	  object.dbName = dbName || 'admin';
	  // Split up all the options
	  urlOptions = (query_string_part || '').split(/[&;]/);
	  // Ugh, we have to figure out which options go to which constructor manually.
	  urlOptions.forEach(function(opt) {
	    if(!opt) return;
	    var splitOpt = opt.split('='), name = splitOpt[0], value = splitOpt[1];
	    // Options implementations
	    switch(name) {
	      case 'slaveOk':
	      case 'slave_ok':
	        serverOptions.slave_ok = (value == 'true');
	        dbOptions.slaveOk = (value == 'true');
	        break;
	      case 'maxPoolSize':
	      case 'poolSize':
	        serverOptions.poolSize = parseInt(value, 10);
	        replSetServersOptions.poolSize = parseInt(value, 10);
	        break;
	      case 'autoReconnect':
	      case 'auto_reconnect':
	        serverOptions.auto_reconnect = (value == 'true');
	        break;
	      case 'minPoolSize':
	        throw new Error("minPoolSize not supported");
	      case 'maxIdleTimeMS':
	        throw new Error("maxIdleTimeMS not supported");
	      case 'waitQueueMultiple':
	        throw new Error("waitQueueMultiple not supported");
	      case 'waitQueueTimeoutMS':
	        throw new Error("waitQueueTimeoutMS not supported");
	      case 'uuidRepresentation':
	        throw new Error("uuidRepresentation not supported");
	      case 'ssl':
	        if(value == 'prefer') {
	          serverOptions.ssl = value;
	          replSetServersOptions.ssl = value;
	          break;
	        }
	        serverOptions.ssl = (value == 'true');
	        replSetServersOptions.ssl = (value == 'true');
	        break;
	      case 'replicaSet':
	      case 'rs_name':
	        replSetServersOptions.rs_name = value;
	        break;
	      case 'reconnectWait':
	        replSetServersOptions.reconnectWait = parseInt(value, 10);
	        break;
	      case 'retries':
	        replSetServersOptions.retries = parseInt(value, 10);
	        break;
	      case 'readSecondary':
	      case 'read_secondary':
	        replSetServersOptions.read_secondary = (value == 'true');
	        break;
	      case 'fsync':
	        dbOptions.fsync = (value == 'true');
	        break;
	      case 'journal':
	        dbOptions.j = (value == 'true');
	        break;
	      case 'safe':
	        dbOptions.safe = (value == 'true');
	        break;
	      case 'nativeParser':
	      case 'native_parser':
	        dbOptions.native_parser = (value == 'true');
	        break;
	      case 'readConcernLevel':
	        dbOptions.readConcern = {level: value};
	        break;
	      case 'connectTimeoutMS':
	        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);
	        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);
	        break;
	      case 'socketTimeoutMS':
	        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);
	        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);
	        break;
	      case 'w':
	        dbOptions.w = parseInt(value, 10);
	        if(isNaN(dbOptions.w)) dbOptions.w = value;
	        break;
	      case 'authSource':
	        dbOptions.authSource = value;
	        break;
	      case 'gssapiServiceName':
	        dbOptions.gssapiServiceName = value;
	        break;
	      case 'authMechanism':
	        if(value == 'GSSAPI') {
	          // If no password provided decode only the principal
	          if(object.auth == null) {
	            var urlDecodeAuthPart = decodeURIComponent(authPart);
	            if(urlDecodeAuthPart.indexOf("@") == -1) throw new Error("GSSAPI requires a provided principal");
	            object.auth = {user: urlDecodeAuthPart, password: null};
	          } else {
	            object.auth.user = decodeURIComponent(object.auth.user);
	          }
	        } else if(value == 'MONGODB-X509') {
	          object.auth = {user: decodeURIComponent(authPart)};
	        }

	        // Only support GSSAPI or MONGODB-CR for now
	        if(value != 'GSSAPI'
	          && value != 'MONGODB-X509'
	          && value != 'MONGODB-CR'
	          && value != 'SCRAM-SHA-1'
	          && value != 'PLAIN')
	            throw new Error("only GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism");

	        // Authentication mechanism
	        dbOptions.authMechanism = value;
	        break;
	      case 'authMechanismProperties':
	        // Split up into key, value pairs
	        var values = value.split(',');
	        var o = {};
	        // For each value split into key, value
	        values.forEach(function(x) {
	          var v = x.split(':');
	          o[v[0]] = v[1];
	        });

	        // Set all authMechanismProperties
	        dbOptions.authMechanismProperties = o;
	        // Set the service name value
	        if(typeof o.SERVICE_NAME == 'string') dbOptions.gssapiServiceName = o.SERVICE_NAME;
	        break;
	      case 'wtimeoutMS':
	        dbOptions.wtimeout = parseInt(value, 10);
	        break;
	      case 'readPreference':
	        if(!ReadPreference.isValid(value)) throw new Error("readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest");
	        dbOptions.read_preference = value;
	        break;
	      case 'readPreferenceTags':
	        // Decode the value
	        value = decodeURIComponent(value);
	        // Contains the tag object
	        var tagObject = {};
	        if(value == null || value == '') {
	          dbOptions.read_preference_tags.push(tagObject);
	          break;
	        }

	        // Split up the tags
	        var tags = value.split(/\,/);
	        for(var i = 0; i < tags.length; i++) {
	          var parts = tags[i].trim().split(/\:/);
	          tagObject[parts[0]] = parts[1];
	        }

	        // Set the preferences tags
	        dbOptions.read_preference_tags.push(tagObject);
	        break;
	      default:
	        break;
	    }
	  });

	  // No tags: should be null (not [])
	  if(dbOptions.read_preference_tags.length === 0) {
	    dbOptions.read_preference_tags = null;
	  }

	  // Validate if there are an invalid write concern combinations
	  if((dbOptions.w == -1 || dbOptions.w == 0) && (
	      dbOptions.journal == true
	      || dbOptions.fsync == true
	      || dbOptions.safe == true)) throw new Error("w set to -1 or 0 cannot be combined with safe/w/journal/fsync")

	  // If no read preference set it to primary
	  if(!dbOptions.read_preference) dbOptions.read_preference = 'primary';

	  // Add servers to result
	  object.servers = servers;
	  // Returned parsed object
	  return object;
	}


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var request = __webpack_require__(253);
	var config = __webpack_require__(3);

	var model = {
	    checkUser: function (userId) {
	        return new Promise(function (resolve, reject) {
	            request(config.get('backServ') + '/auth/session/' + userId, function (error, response, body) {
	                if (!error && response.statusCode === 200) {
	                    return resolve(JSON.parse(body));
	                }
	                return reject('invalid authorization');
	            });
	        });
	    }
	};

	module.exports = model;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2010-2012 Mikeal Rogers
	//
	//    Licensed under the Apache License, Version 2.0 (the "License");
	//    you may not use this file except in compliance with the License.
	//    You may obtain a copy of the License at
	//
	//        http://www.apache.org/licenses/LICENSE-2.0
	//
	//    Unless required by applicable law or agreed to in writing, software
	//    distributed under the License is distributed on an "AS IS" BASIS,
	//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	//    See the License for the specific language governing permissions and
	//    limitations under the License.

	'use strict'

	var extend                = __webpack_require__(254)
	  , cookies               = __webpack_require__(255)
	  , helpers               = __webpack_require__(263)

	var isFunction            = helpers.isFunction
	  , paramsHaveRequestBody = helpers.paramsHaveRequestBody


	// organize params for patch, post, put, head, del
	function initParams(uri, options, callback) {
	  if (typeof options === 'function') {
	    callback = options
	  }

	  var params = {}
	  if (typeof options === 'object') {
	    extend(params, options, {uri: uri})
	  } else if (typeof uri === 'string') {
	    extend(params, {uri: uri})
	  } else {
	    extend(params, uri)
	  }

	  params.callback = callback
	  return params
	}

	function request (uri, options, callback) {
	  if (typeof uri === 'undefined') {
	    throw new Error('undefined is not a valid uri or options object.')
	  }

	  var params = initParams(uri, options, callback)

	  if (params.method === 'HEAD' && paramsHaveRequestBody(params)) {
	    throw new Error('HTTP HEAD requests MUST NOT include a request body.')
	  }

	  return new request.Request(params)
	}

	function verbFunc (verb) {
	  var method = verb === 'del' ? 'DELETE' : verb.toUpperCase()
	  return function (uri, options, callback) {
	    var params = initParams(uri, options, callback)
	    params.method = method
	    return request(params, params.callback)
	  }
	}

	// define like this to please codeintel/intellisense IDEs
	request.get = verbFunc('get')
	request.head = verbFunc('head')
	request.post = verbFunc('post')
	request.put = verbFunc('put')
	request.patch = verbFunc('patch')
	request.del = verbFunc('del')

	request.jar = function (store) {
	  return cookies.jar(store)
	}

	request.cookie = function (str) {
	  return cookies.parse(str)
	}

	function wrapRequestMethod (method, options, requester, verb) {

	  return function (uri, opts, callback) {
	    var params = initParams(uri, opts, callback)

	    var target = {}
	    extend(true, target, options, params)

	    target.pool = params.pool || options.pool

	    if (verb) {
	      target.method = (verb === 'del' ? 'DELETE' : verb.toUpperCase())
	    }

	    if (isFunction(requester)) {
	      method = requester
	    }

	    return method(target, target.callback)
	  }
	}

	request.defaults = function (options, requester) {
	  var self = this

	  options = options || {}

	  if (typeof options === 'function') {
	    requester = options
	    options = {}
	  }

	  var defaults      = wrapRequestMethod(self, options, requester)

	  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del']
	  verbs.forEach(function(verb) {
	    defaults[verb]  = wrapRequestMethod(self[verb], options, requester, verb)
	  })

	  defaults.cookie   = wrapRequestMethod(self.cookie, options, requester)
	  defaults.jar      = self.jar
	  defaults.defaults = self.defaults
	  return defaults
	}

	request.forever = function (agentOptions, optionsArg) {
	  var options = {}
	  if (optionsArg) {
	    extend(options, optionsArg)
	  }
	  if (agentOptions) {
	    options.agentOptions = agentOptions
	  }

	  options.forever = true
	  return request.defaults(options)
	}

	// Exports

	module.exports = request
	request.Request = __webpack_require__(265)
	request.initParams = initParams

	// Backwards compatibility for request.debug
	Object.defineProperty(request, 'debug', {
	  enumerable : true,
	  get : function() {
	    return request.Request.debug
	  },
	  set : function(debug) {
	    request.Request.debug = debug
	  }
	})


/***/ },
/* 254 */
/***/ function(module, exports) {

	'use strict';

	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;

	var isArray = function isArray(arr) {
		if (typeof Array.isArray === 'function') {
			return Array.isArray(arr);
		}

		return toStr.call(arr) === '[object Array]';
	};

	var isPlainObject = function isPlainObject(obj) {
		if (!obj || toStr.call(obj) !== '[object Object]') {
			return false;
		}

		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) {/**/}

		return typeof key === 'undefined' || hasOwn.call(obj, key);
	};

	module.exports = function extend() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0],
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
			target = {};
		}

		for (; i < length; ++i) {
			options = arguments[i];
			// Only deal with non-null/undefined values
			if (options != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target !== copy) {
						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && isArray(src) ? src : [];
							} else {
								clone = src && isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							target[name] = extend(deep, clone, copy);

						// Don't bring in undefined values
						} else if (typeof copy !== 'undefined') {
							target[name] = copy;
						}
					}
				}
			}
		}

		// Return the modified object
		return target;
	};



/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var tough = __webpack_require__(256)

	var Cookie = tough.Cookie
	  , CookieJar = tough.CookieJar


	exports.parse = function(str) {
	  if (str && str.uri) {
	    str = str.uri
	  }
	  if (typeof str !== 'string') {
	    throw new Error('The cookie function only accepts STRING as param')
	  }
	  return Cookie.parse(str)
	}

	// Adapt the sometimes-Async api of tough.CookieJar to our requirements
	function RequestJar(store) {
	  var self = this
	  self._jar = new CookieJar(store)
	}
	RequestJar.prototype.setCookie = function(cookieOrStr, uri, options) {
	  var self = this
	  return self._jar.setCookieSync(cookieOrStr, uri, options || {})
	}
	RequestJar.prototype.getCookieString = function(uri) {
	  var self = this
	  return self._jar.getCookieStringSync(uri)
	}
	RequestJar.prototype.getCookies = function(uri) {
	  var self = this
	  return self._jar.getCookiesSync(uri)
	}

	exports.jar = function(store) {
	  return new RequestJar(store)
	}


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	'use strict';
	var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var urlParse = __webpack_require__(41).parse;
	var pubsuffix = __webpack_require__(257);
	var Store = __webpack_require__(258).Store;
	var MemoryCookieStore = __webpack_require__(259).MemoryCookieStore;
	var pathMatch = __webpack_require__(261).pathMatch;
	var VERSION = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;

	var punycode;
	try {
	  punycode = __webpack_require__(42);
	} catch(e) {
	  console.warn("cookie: can't load punycode; won't use punycode for domain normalization");
	}

	var DATE_DELIM = /[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/;

	// From RFC6265 S4.1.1
	// note that it excludes \x3B ";"
	var COOKIE_OCTET  = /[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]/;
	var COOKIE_OCTETS = new RegExp('^'+COOKIE_OCTET.source+'$');

	// Double quotes are part of the value (see: S4.1.1).
	// '\r', '\n' and '\0' should be treated as a terminator in the "relaxed" mode
	// (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60)
	// '=' and ';' are attribute/values separators
	// (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L64)
	var COOKIE_PAIR = /^([^=;]+)\s*=\s*(("?)[^\n\r\0]*\3)/;

	// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or ";"'
	// Note ';' is \x3B
	var PATH_VALUE = /[\x20-\x3A\x3C-\x7E]+/;

	// Used for checking whether or not there is a trailing semi-colon
	var TRAILING_SEMICOLON = /;+$/;

	var DAY_OF_MONTH = /^(\d{1,2})[^\d]*$/;
	var TIME = /^(\d{1,2})[^\d]*:(\d{1,2})[^\d]*:(\d{1,2})[^\d]*$/;
	var MONTH = /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)/i;

	var MONTH_TO_NUM = {
	  jan:0, feb:1, mar:2, apr:3, may:4, jun:5,
	  jul:6, aug:7, sep:8, oct:9, nov:10, dec:11
	};
	var NUM_TO_MONTH = [
	  'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'
	];
	var NUM_TO_DAY = [
	  'Sun','Mon','Tue','Wed','Thu','Fri','Sat'
	];

	var YEAR = /^(\d{2}|\d{4})$/; // 2 to 4 digits

	var MAX_TIME = 2147483647000; // 31-bit max
	var MIN_TIME = 0; // 31-bit min


	// RFC6265 S5.1.1 date parser:
	function parseDate(str) {
	  if (!str) {
	    return;
	  }

	  /* RFC6265 S5.1.1:
	   * 2. Process each date-token sequentially in the order the date-tokens
	   * appear in the cookie-date
	   */
	  var tokens = str.split(DATE_DELIM);
	  if (!tokens) {
	    return;
	  }

	  var hour = null;
	  var minutes = null;
	  var seconds = null;
	  var day = null;
	  var month = null;
	  var year = null;

	  for (var i=0; i<tokens.length; i++) {
	    var token = tokens[i].trim();
	    if (!token.length) {
	      continue;
	    }

	    var result;

	    /* 2.1. If the found-time flag is not set and the token matches the time
	     * production, set the found-time flag and set the hour- value,
	     * minute-value, and second-value to the numbers denoted by the digits in
	     * the date-token, respectively.  Skip the remaining sub-steps and continue
	     * to the next date-token.
	     */
	    if (seconds === null) {
	      result = TIME.exec(token);
	      if (result) {
	        hour = parseInt(result[1], 10);
	        minutes = parseInt(result[2], 10);
	        seconds = parseInt(result[3], 10);
	        /* RFC6265 S5.1.1.5:
	         * [fail if]
	         * *  the hour-value is greater than 23,
	         * *  the minute-value is greater than 59, or
	         * *  the second-value is greater than 59.
	         */
	        if(hour > 23 || minutes > 59 || seconds > 59) {
	          return;
	        }

	        continue;
	      }
	    }

	    /* 2.2. If the found-day-of-month flag is not set and the date-token matches
	     * the day-of-month production, set the found-day-of- month flag and set
	     * the day-of-month-value to the number denoted by the date-token.  Skip
	     * the remaining sub-steps and continue to the next date-token.
	     */
	    if (day === null) {
	      result = DAY_OF_MONTH.exec(token);
	      if (result) {
	        day = parseInt(result, 10);
	        /* RFC6265 S5.1.1.5:
	         * [fail if] the day-of-month-value is less than 1 or greater than 31
	         */
	        if(day < 1 || day > 31) {
	          return;
	        }
	        continue;
	      }
	    }

	    /* 2.3. If the found-month flag is not set and the date-token matches the
	     * month production, set the found-month flag and set the month-value to
	     * the month denoted by the date-token.  Skip the remaining sub-steps and
	     * continue to the next date-token.
	     */
	    if (month === null) {
	      result = MONTH.exec(token);
	      if (result) {
	        month = MONTH_TO_NUM[result[1].toLowerCase()];
	        continue;
	      }
	    }

	    /* 2.4. If the found-year flag is not set and the date-token matches the year
	     * production, set the found-year flag and set the year-value to the number
	     * denoted by the date-token.  Skip the remaining sub-steps and continue to
	     * the next date-token.
	     */
	    if (year === null) {
	      result = YEAR.exec(token);
	      if (result) {
	        year = parseInt(result[0], 10);
	        /* From S5.1.1:
	         * 3.  If the year-value is greater than or equal to 70 and less
	         * than or equal to 99, increment the year-value by 1900.
	         * 4.  If the year-value is greater than or equal to 0 and less
	         * than or equal to 69, increment the year-value by 2000.
	         */
	        if (70 <= year && year <= 99) {
	          year += 1900;
	        } else if (0 <= year && year <= 69) {
	          year += 2000;
	        }

	        if (year < 1601) {
	          return; // 5. ... the year-value is less than 1601
	        }
	      }
	    }
	  }

	  if (seconds === null || day === null || month === null || year === null) {
	    return; // 5. ... at least one of the found-day-of-month, found-month, found-
	            // year, or found-time flags is not set,
	  }

	  return new Date(Date.UTC(year, month, day, hour, minutes, seconds));
	}

	function formatDate(date) {
	  var d = date.getUTCDate(); d = d >= 10 ? d : '0'+d;
	  var h = date.getUTCHours(); h = h >= 10 ? h : '0'+h;
	  var m = date.getUTCMinutes(); m = m >= 10 ? m : '0'+m;
	  var s = date.getUTCSeconds(); s = s >= 10 ? s : '0'+s;
	  return NUM_TO_DAY[date.getUTCDay()] + ', ' +
	    d+' '+ NUM_TO_MONTH[date.getUTCMonth()] +' '+ date.getUTCFullYear() +' '+
	    h+':'+m+':'+s+' GMT';
	}

	// S5.1.2 Canonicalized Host Names
	function canonicalDomain(str) {
	  if (str == null) {
	    return null;
	  }
	  str = str.trim().replace(/^\./,''); // S4.1.2.3 & S5.2.3: ignore leading .

	  // convert to IDN if any non-ASCII characters
	  if (punycode && /[^\u0001-\u007f]/.test(str)) {
	    str = punycode.toASCII(str);
	  }

	  return str.toLowerCase();
	}

	// S5.1.3 Domain Matching
	function domainMatch(str, domStr, canonicalize) {
	  if (str == null || domStr == null) {
	    return null;
	  }
	  if (canonicalize !== false) {
	    str = canonicalDomain(str);
	    domStr = canonicalDomain(domStr);
	  }

	  /*
	   * "The domain string and the string are identical. (Note that both the
	   * domain string and the string will have been canonicalized to lower case at
	   * this point)"
	   */
	  if (str == domStr) {
	    return true;
	  }

	  /* "All of the following [three] conditions hold:" (order adjusted from the RFC) */

	  /* "* The string is a host name (i.e., not an IP address)." */
	  if (net.isIP(str)) {
	    return false;
	  }

	  /* "* The domain string is a suffix of the string" */
	  var idx = str.indexOf(domStr);
	  if (idx <= 0) {
	    return false; // it's a non-match (-1) or prefix (0)
	  }

	  // e.g "a.b.c".indexOf("b.c") === 2
	  // 5 === 3+2
	  if (str.length !== domStr.length + idx) { // it's not a suffix
	    return false;
	  }

	  /* "* The last character of the string that is not included in the domain
	  * string is a %x2E (".") character." */
	  if (str.substr(idx-1,1) !== '.') {
	    return false;
	  }

	  return true;
	}


	// RFC6265 S5.1.4 Paths and Path-Match

	/*
	 * "The user agent MUST use an algorithm equivalent to the following algorithm
	 * to compute the default-path of a cookie:"
	 *
	 * Assumption: the path (and not query part or absolute uri) is passed in.
	 */
	function defaultPath(path) {
	  // "2. If the uri-path is empty or if the first character of the uri-path is not
	  // a %x2F ("/") character, output %x2F ("/") and skip the remaining steps.
	  if (!path || path.substr(0,1) !== "/") {
	    return "/";
	  }

	  // "3. If the uri-path contains no more than one %x2F ("/") character, output
	  // %x2F ("/") and skip the remaining step."
	  if (path === "/") {
	    return path;
	  }

	  var rightSlash = path.lastIndexOf("/");
	  if (rightSlash === 0) {
	    return "/";
	  }

	  // "4. Output the characters of the uri-path from the first character up to,
	  // but not including, the right-most %x2F ("/")."
	  return path.slice(0, rightSlash);
	}


	function parse(str) {
	  str = str.trim();

	  // S4.1.1 Trailing semi-colons are not part of the specification.
	  var semiColonCheck = TRAILING_SEMICOLON.exec(str);
	  if (semiColonCheck) {
	    str = str.slice(0, semiColonCheck.index);
	  }

	  // We use a regex to parse the "name-value-pair" part of S5.2
	  var firstSemi = str.indexOf(';'); // S5.2 step 1
	  var result = COOKIE_PAIR.exec(firstSemi === -1 ? str : str.substr(0,firstSemi));

	  // Rx satisfies the "the name string is empty" and "lacks a %x3D ("=")"
	  // constraints as well as trimming any whitespace.
	  if (!result) {
	    return;
	  }

	  var c = new Cookie();
	  c.key = result[1].trim();
	  c.value = result[2].trim();

	  if (firstSemi === -1) {
	    return c;
	  }

	  // S5.2.3 "unparsed-attributes consist of the remainder of the set-cookie-string
	  // (including the %x3B (";") in question)." plus later on in the same section
	  // "discard the first ";" and trim".
	  var unparsed = str.slice(firstSemi).replace(/^\s*;\s*/,'').trim();

	  // "If the unparsed-attributes string is empty, skip the rest of these
	  // steps."
	  if (unparsed.length === 0) {
	    return c;
	  }

	  /*
	   * S5.2 says that when looping over the items "[p]rocess the attribute-name
	   * and attribute-value according to the requirements in the following
	   * subsections" for every item.  Plus, for many of the individual attributes
	   * in S5.3 it says to use the "attribute-value of the last attribute in the
	   * cookie-attribute-list".  Therefore, in this implementation, we overwrite
	   * the previous value.
	   */
	  var cookie_avs = unparsed.split(/\s*;\s*/);
	  while (cookie_avs.length) {
	    var av = cookie_avs.shift();
	    var av_sep = av.indexOf('=');
	    var av_key, av_value;

	    if (av_sep === -1) {
	      av_key = av;
	      av_value = null;
	    } else {
	      av_key = av.substr(0,av_sep);
	      av_value = av.substr(av_sep+1);
	    }

	    av_key = av_key.trim().toLowerCase();

	    if (av_value) {
	      av_value = av_value.trim();
	    }

	    switch(av_key) {
	    case 'expires': // S5.2.1
	      if (av_value) {
	        var exp = parseDate(av_value);
	        // "If the attribute-value failed to parse as a cookie date, ignore the
	        // cookie-av."
	        if (exp) {
	          // over and underflow not realistically a concern: V8's getTime() seems to
	          // store something larger than a 32-bit time_t (even with 32-bit node)
	          c.expires = exp;
	        }
	      }
	      break;

	    case 'max-age': // S5.2.2
	      if (av_value) {
	        // "If the first character of the attribute-value is not a DIGIT or a "-"
	        // character ...[or]... If the remainder of attribute-value contains a
	        // non-DIGIT character, ignore the cookie-av."
	        if (/^-?[0-9]+$/.test(av_value)) {
	          var delta = parseInt(av_value, 10);
	          // "If delta-seconds is less than or equal to zero (0), let expiry-time
	          // be the earliest representable date and time."
	          c.setMaxAge(delta);
	        }
	      }
	      break;

	    case 'domain': // S5.2.3
	      // "If the attribute-value is empty, the behavior is undefined.  However,
	      // the user agent SHOULD ignore the cookie-av entirely."
	      if (av_value) {
	        // S5.2.3 "Let cookie-domain be the attribute-value without the leading %x2E
	        // (".") character."
	        var domain = av_value.trim().replace(/^\./, '');
	        if (domain) {
	          // "Convert the cookie-domain to lower case."
	          c.domain = domain.toLowerCase();
	        }
	      }
	      break;

	    case 'path': // S5.2.4
	      /*
	       * "If the attribute-value is empty or if the first character of the
	       * attribute-value is not %x2F ("/"):
	       *   Let cookie-path be the default-path.
	       * Otherwise:
	       *   Let cookie-path be the attribute-value."
	       *
	       * We'll represent the default-path as null since it depends on the
	       * context of the parsing.
	       */
	      c.path = av_value && av_value[0] === "/" ? av_value : null;
	      break;

	    case 'secure': // S5.2.5
	      /*
	       * "If the attribute-name case-insensitively matches the string "Secure",
	       * the user agent MUST append an attribute to the cookie-attribute-list
	       * with an attribute-name of Secure and an empty attribute-value."
	       */
	      c.secure = true;
	      break;

	    case 'httponly': // S5.2.6 -- effectively the same as 'secure'
	      c.httpOnly = true;
	      break;

	    default:
	      c.extensions = c.extensions || [];
	      c.extensions.push(av);
	      break;
	    }
	  }

	  return c;
	}

	// avoid the V8 deoptimization monster!
	function jsonParse(str) {
	  var obj;
	  try {
	    obj = JSON.parse(str);
	  } catch (e) {
	    return e;
	  }
	  return obj;
	}

	function fromJSON(str) {
	  if (!str) {
	    return null;
	  }

	  var obj;
	  if (typeof str === 'string') {
	    obj = jsonParse(str);
	    if (obj instanceof Error) {
	      return null;
	    }
	  } else {
	    // assume it's an Object
	    obj = str;
	  }

	  var c = new Cookie();
	  for (var i=0; i<Cookie.serializableProperties.length; i++) {
	    var prop = Cookie.serializableProperties[i];
	    if (obj[prop] === undefined ||
	        obj[prop] === Cookie.prototype[prop])
	    {
	      continue; // leave as prototype default
	    }

	    if (prop === 'expires' ||
	        prop === 'creation' ||
	        prop === 'lastAccessed')
	    {
	      if (obj[prop] === null) {
	        c[prop] = null;
	      } else {
	        c[prop] = obj[prop] == "Infinity" ?
	          "Infinity" : new Date(obj[prop]);
	      }
	    } else {
	      c[prop] = obj[prop];
	    }
	  }

	  return c;
	}

	/* Section 5.4 part 2:
	 * "*  Cookies with longer paths are listed before cookies with
	 *     shorter paths.
	 *
	 *  *  Among cookies that have equal-length path fields, cookies with
	 *     earlier creation-times are listed before cookies with later
	 *     creation-times."
	 */

	function cookieCompare(a,b) {
	  var cmp = 0;

	  // descending for length: b CMP a
	  var aPathLen = a.path ? a.path.length : 0;
	  var bPathLen = b.path ? b.path.length : 0;
	  cmp = bPathLen - aPathLen;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  // ascending for time: a CMP b
	  var aTime = a.creation ? a.creation.getTime() : MAX_TIME;
	  var bTime = b.creation ? b.creation.getTime() : MAX_TIME;
	  cmp = aTime - bTime;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  // break ties for the same millisecond (precision of JavaScript's clock)
	  cmp = a.creationIndex - b.creationIndex;

	  return cmp;
	}

	// Gives the permutation of all possible pathMatch()es of a given path. The
	// array is in longest-to-shortest order.  Handy for indexing.
	function permutePath(path) {
	  if (path === '/') {
	    return ['/'];
	  }
	  if (path.lastIndexOf('/') === path.length-1) {
	    path = path.substr(0,path.length-1);
	  }
	  var permutations = [path];
	  while (path.length > 1) {
	    var lindex = path.lastIndexOf('/');
	    if (lindex === 0) {
	      break;
	    }
	    path = path.substr(0,lindex);
	    permutations.push(path);
	  }
	  permutations.push('/');
	  return permutations;
	}

	function getCookieContext(url) {
	  if (url instanceof Object) {
	    return url;
	  }
	  // NOTE: decodeURI will throw on malformed URIs (see GH-32).
	  // Therefore, we will just skip decoding for such URIs.
	  try {
	    url = decodeURI(url);
	  }
	  catch(err) {
	    // Silently swallow error
	  }

	  return urlParse(url);
	}

	function Cookie(opts) {
	  opts = opts || {};

	  Object.keys(opts).forEach(function(prop) {
	    if (Cookie.prototype.hasOwnProperty(prop) &&
	        Cookie.prototype[prop] !== opts[prop] &&
	        prop.substr(0,1) !== '_')
	    {
	      this[prop] = opts[prop];
	    }
	  }, this);

	  this.creation = this.creation || new Date();

	  // used to break creation ties in cookieCompare():
	  Object.defineProperty(this, 'creationIndex', {
	    configurable: false,
	    enumerable: false, // important for assert.deepEqual checks
	    writable: true,
	    value: ++Cookie.cookiesCreated
	  });
	}

	Cookie.cookiesCreated = 0; // incremented each time a cookie is created

	Cookie.parse = parse;
	Cookie.fromJSON = fromJSON;

	Cookie.prototype.key = "";
	Cookie.prototype.value = "";

	// the order in which the RFC has them:
	Cookie.prototype.expires = "Infinity"; // coerces to literal Infinity
	Cookie.prototype.maxAge = null; // takes precedence over expires for TTL
	Cookie.prototype.domain = null;
	Cookie.prototype.path = null;
	Cookie.prototype.secure = false;
	Cookie.prototype.httpOnly = false;
	Cookie.prototype.extensions = null;

	// set by the CookieJar:
	Cookie.prototype.hostOnly = null; // boolean when set
	Cookie.prototype.pathIsDefault = null; // boolean when set
	Cookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse
	Cookie.prototype.lastAccessed = null; // Date when set
	Object.defineProperty(Cookie.prototype, 'creationIndex', {
	  configurable: true,
	  enumerable: false,
	  writable: true,
	  value: 0
	});

	Cookie.serializableProperties = Object.keys(Cookie.prototype)
	  .filter(function(prop) {
	    return !(
	      Cookie.prototype[prop] instanceof Function ||
	      prop === 'creationIndex' ||
	      prop.substr(0,1) === '_'
	    );
	  });

	Cookie.prototype.inspect = function inspect() {
	  var now = Date.now();
	  return 'Cookie="'+this.toString() +
	    '; hostOnly='+(this.hostOnly != null ? this.hostOnly : '?') +
	    '; aAge='+(this.lastAccessed ? (now-this.lastAccessed.getTime())+'ms' : '?') +
	    '; cAge='+(this.creation ? (now-this.creation.getTime())+'ms' : '?') +
	    '"';
	};

	Cookie.prototype.toJSON = function() {
	  var obj = {};

	  var props = Cookie.serializableProperties;
	  for (var i=0; i<props.length; i++) {
	    var prop = props[i];
	    if (this[prop] === Cookie.prototype[prop]) {
	      continue; // leave as prototype default
	    }

	    if (prop === 'expires' ||
	        prop === 'creation' ||
	        prop === 'lastAccessed')
	    {
	      if (this[prop] === null) {
	        obj[prop] = null;
	      } else {
	        obj[prop] = this[prop] == "Infinity" ? // intentionally not ===
	          "Infinity" : this[prop].toISOString();
	      }
	    } else if (prop === 'maxAge') {
	      if (this[prop] !== null) {
	        // again, intentionally not ===
	        obj[prop] = (this[prop] == Infinity || this[prop] == -Infinity) ?
	          this[prop].toString() : this[prop];
	      }
	    } else {
	      if (this[prop] !== Cookie.prototype[prop]) {
	        obj[prop] = this[prop];
	      }
	    }
	  }

	  return obj;
	};

	Cookie.prototype.clone = function() {
	  return fromJSON(this.toJSON());
	};

	Cookie.prototype.validate = function validate() {
	  if (!COOKIE_OCTETS.test(this.value)) {
	    return false;
	  }
	  if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {
	    return false;
	  }
	  if (this.maxAge != null && this.maxAge <= 0) {
	    return false; // "Max-Age=" non-zero-digit *DIGIT
	  }
	  if (this.path != null && !PATH_VALUE.test(this.path)) {
	    return false;
	  }

	  var cdomain = this.cdomain();
	  if (cdomain) {
	    if (cdomain.match(/\.$/)) {
	      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this
	    }
	    var suffix = pubsuffix.getPublicSuffix(cdomain);
	    if (suffix == null) { // it's a public suffix
	      return false;
	    }
	  }
	  return true;
	};

	Cookie.prototype.setExpires = function setExpires(exp) {
	  if (exp instanceof Date) {
	    this.expires = exp;
	  } else {
	    this.expires = parseDate(exp) || "Infinity";
	  }
	};

	Cookie.prototype.setMaxAge = function setMaxAge(age) {
	  if (age === Infinity || age === -Infinity) {
	    this.maxAge = age.toString(); // so JSON.stringify() works
	  } else {
	    this.maxAge = age;
	  }
	};

	// gives Cookie header format
	Cookie.prototype.cookieString = function cookieString() {
	  var val = this.value;
	  if (val == null) {
	    val = '';
	  }
	  return this.key+'='+val;
	};

	// gives Set-Cookie header format
	Cookie.prototype.toString = function toString() {
	  var str = this.cookieString();

	  if (this.expires != Infinity) {
	    if (this.expires instanceof Date) {
	      str += '; Expires='+formatDate(this.expires);
	    } else {
	      str += '; Expires='+this.expires;
	    }
	  }

	  if (this.maxAge != null && this.maxAge != Infinity) {
	    str += '; Max-Age='+this.maxAge;
	  }

	  if (this.domain && !this.hostOnly) {
	    str += '; Domain='+this.domain;
	  }
	  if (this.path) {
	    str += '; Path='+this.path;
	  }

	  if (this.secure) {
	    str += '; Secure';
	  }
	  if (this.httpOnly) {
	    str += '; HttpOnly';
	  }
	  if (this.extensions) {
	    this.extensions.forEach(function(ext) {
	      str += '; '+ext;
	    });
	  }

	  return str;
	};

	// TTL() partially replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere)
	// S5.3 says to give the "latest representable date" for which we use Infinity
	// For "expired" we use 0
	Cookie.prototype.TTL = function TTL(now) {
	  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires
	   * attribute, the Max-Age attribute has precedence and controls the
	   * expiration date of the cookie.
	   * (Concurs with S5.3 step 3)
	   */
	  if (this.maxAge != null) {
	    return this.maxAge<=0 ? 0 : this.maxAge*1000;
	  }

	  var expires = this.expires;
	  if (expires != Infinity) {
	    if (!(expires instanceof Date)) {
	      expires = parseDate(expires) || Infinity;
	    }

	    if (expires == Infinity) {
	      return Infinity;
	    }

	    return expires.getTime() - (now || Date.now());
	  }

	  return Infinity;
	};

	// expiryTime() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere)
	Cookie.prototype.expiryTime = function expiryTime(now) {
	  if (this.maxAge != null) {
	    var relativeTo = now || this.creation || new Date();
	    var age = (this.maxAge <= 0) ? -Infinity : this.maxAge*1000;
	    return relativeTo.getTime() + age;
	  }

	  if (this.expires == Infinity) {
	    return Infinity;
	  }
	  return this.expires.getTime();
	};

	// expiryDate() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere), except it returns a Date
	Cookie.prototype.expiryDate = function expiryDate(now) {
	  var millisec = this.expiryTime(now);
	  if (millisec == Infinity) {
	    return new Date(MAX_TIME);
	  } else if (millisec == -Infinity) {
	    return new Date(MIN_TIME);
	  } else {
	    return new Date(millisec);
	  }
	};

	// This replaces the "persistent-flag" parts of S5.3 step 3
	Cookie.prototype.isPersistent = function isPersistent() {
	  return (this.maxAge != null || this.expires != Infinity);
	};

	// Mostly S5.1.2 and S5.2.3:
	Cookie.prototype.cdomain =
	Cookie.prototype.canonicalizedDomain = function canonicalizedDomain() {
	  if (this.domain == null) {
	    return null;
	  }
	  return canonicalDomain(this.domain);
	};

	function CookieJar(store, rejectPublicSuffixes) {
	  if (rejectPublicSuffixes != null) {
	    this.rejectPublicSuffixes = rejectPublicSuffixes;
	  }

	  if (!store) {
	    store = new MemoryCookieStore();
	  }
	  this.store = store;
	}
	CookieJar.prototype.store = null;
	CookieJar.prototype.rejectPublicSuffixes = true;
	var CAN_BE_SYNC = [];

	CAN_BE_SYNC.push('setCookie');
	CookieJar.prototype.setCookie = function(cookie, url, options, cb) {
	  var err;
	  var context = getCookieContext(url);
	  if (options instanceof Function) {
	    cb = options;
	    options = {};
	  }

	  var host = canonicalDomain(context.hostname);

	  // S5.3 step 1
	  if (!(cookie instanceof Cookie)) {
	    cookie = Cookie.parse(cookie);
	  }
	  if (!cookie) {
	    err = new Error("Cookie failed to parse");
	    return cb(options.ignoreError ? null : err);
	  }

	  // S5.3 step 2
	  var now = options.now || new Date(); // will assign later to save effort in the face of errors

	  // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()

	  // S5.3 step 4: NOOP; domain is null by default

	  // S5.3 step 5: public suffixes
	  if (this.rejectPublicSuffixes && cookie.domain) {
	    var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());
	    if (suffix == null) { // e.g. "com"
	      err = new Error("Cookie has domain set to a public suffix");
	      return cb(options.ignoreError ? null : err);
	    }
	  }

	  // S5.3 step 6:
	  if (cookie.domain) {
	    if (!domainMatch(host, cookie.cdomain(), false)) {
	      err = new Error("Cookie not in this host's domain. Cookie:"+cookie.cdomain()+" Request:"+host);
	      return cb(options.ignoreError ? null : err);
	    }

	    if (cookie.hostOnly == null) { // don't reset if already set
	      cookie.hostOnly = false;
	    }

	  } else {
	    cookie.hostOnly = true;
	    cookie.domain = host;
	  }

	  //S5.2.4 If the attribute-value is empty or if the first character of the
	  //attribute-value is not %x2F ("/"):
	  //Let cookie-path be the default-path.
	  if (!cookie.path || cookie.path[0] !== '/') {
	    cookie.path = defaultPath(context.pathname);
	    cookie.pathIsDefault = true;
	  }

	  // S5.3 step 8: NOOP; secure attribute
	  // S5.3 step 9: NOOP; httpOnly attribute

	  // S5.3 step 10
	  if (options.http === false && cookie.httpOnly) {
	    err = new Error("Cookie is HttpOnly and this isn't an HTTP API");
	    return cb(options.ignoreError ? null : err);
	  }

	  var store = this.store;

	  if (!store.updateCookie) {
	    store.updateCookie = function(oldCookie, newCookie, cb) {
	      this.putCookie(newCookie, cb);
	    };
	  }

	  function withCookie(err, oldCookie) {
	    if (err) {
	      return cb(err);
	    }

	    var next = function(err) {
	      if (err) {
	        return cb(err);
	      } else {
	        cb(null, cookie);
	      }
	    };

	    if (oldCookie) {
	      // S5.3 step 11 - "If the cookie store contains a cookie with the same name,
	      // domain, and path as the newly created cookie:"
	      if (options.http === false && oldCookie.httpOnly) { // step 11.2
	        err = new Error("old Cookie is HttpOnly and this isn't an HTTP API");
	        return cb(options.ignoreError ? null : err);
	      }
	      cookie.creation = oldCookie.creation; // step 11.3
	      cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker
	      cookie.lastAccessed = now;
	      // Step 11.4 (delete cookie) is implied by just setting the new one:
	      store.updateCookie(oldCookie, cookie, next); // step 12

	    } else {
	      cookie.creation = cookie.lastAccessed = now;
	      store.putCookie(cookie, next); // step 12
	    }
	  }

	  store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);
	};

	// RFC6365 S5.4
	CAN_BE_SYNC.push('getCookies');
	CookieJar.prototype.getCookies = function(url, options, cb) {
	  var context = getCookieContext(url);
	  if (options instanceof Function) {
	    cb = options;
	    options = {};
	  }

	  var host = canonicalDomain(context.hostname);
	  var path = context.pathname || '/';

	  var secure = options.secure;
	  if (secure == null && context.protocol &&
	      (context.protocol == 'https:' || context.protocol == 'wss:'))
	  {
	    secure = true;
	  }

	  var http = options.http;
	  if (http == null) {
	    http = true;
	  }

	  var now = options.now || Date.now();
	  var expireCheck = options.expire !== false;
	  var allPaths = !!options.allPaths;
	  var store = this.store;

	  function matchingCookie(c) {
	    // "Either:
	    //   The cookie's host-only-flag is true and the canonicalized
	    //   request-host is identical to the cookie's domain.
	    // Or:
	    //   The cookie's host-only-flag is false and the canonicalized
	    //   request-host domain-matches the cookie's domain."
	    if (c.hostOnly) {
	      if (c.domain != host) {
	        return false;
	      }
	    } else {
	      if (!domainMatch(host, c.domain, false)) {
	        return false;
	      }
	    }

	    // "The request-uri's path path-matches the cookie's path."
	    if (!allPaths && !pathMatch(path, c.path)) {
	      return false;
	    }

	    // "If the cookie's secure-only-flag is true, then the request-uri's
	    // scheme must denote a "secure" protocol"
	    if (c.secure && !secure) {
	      return false;
	    }

	    // "If the cookie's http-only-flag is true, then exclude the cookie if the
	    // cookie-string is being generated for a "non-HTTP" API"
	    if (c.httpOnly && !http) {
	      return false;
	    }

	    // deferred from S5.3
	    // non-RFC: allow retention of expired cookies by choice
	    if (expireCheck && c.expiryTime() <= now) {
	      store.removeCookie(c.domain, c.path, c.key, function(){}); // result ignored
	      return false;
	    }

	    return true;
	  }

	  store.findCookies(host, allPaths ? null : path, function(err,cookies) {
	    if (err) {
	      return cb(err);
	    }

	    cookies = cookies.filter(matchingCookie);

	    // sorting of S5.4 part 2
	    if (options.sort !== false) {
	      cookies = cookies.sort(cookieCompare);
	    }

	    // S5.4 part 3
	    var now = new Date();
	    cookies.forEach(function(c) {
	      c.lastAccessed = now;
	    });
	    // TODO persist lastAccessed

	    cb(null,cookies);
	  });
	};

	CAN_BE_SYNC.push('getCookieString');
	CookieJar.prototype.getCookieString = function(/*..., cb*/) {
	  var args = Array.prototype.slice.call(arguments,0);
	  var cb = args.pop();
	  var next = function(err,cookies) {
	    if (err) {
	      cb(err);
	    } else {
	      cb(null, cookies
	        .sort(cookieCompare)
	        .map(function(c){
	          return c.cookieString();
	        })
	        .join('; '));
	    }
	  };
	  args.push(next);
	  this.getCookies.apply(this,args);
	};

	CAN_BE_SYNC.push('getSetCookieStrings');
	CookieJar.prototype.getSetCookieStrings = function(/*..., cb*/) {
	  var args = Array.prototype.slice.call(arguments,0);
	  var cb = args.pop();
	  var next = function(err,cookies) {
	    if (err) {
	      cb(err);
	    } else {
	      cb(null, cookies.map(function(c){
	        return c.toString();
	      }));
	    }
	  };
	  args.push(next);
	  this.getCookies.apply(this,args);
	};

	CAN_BE_SYNC.push('serialize');
	CookieJar.prototype.serialize = function(cb) {
	  var type = this.store.constructor.name;
	  if (type === 'Object') {
	    type = null;
	  }

	  // update README.md "Serialization Format" if you change this, please!
	  var serialized = {
	    // The version of tough-cookie that serialized this jar. Generally a good
	    // practice since future versions can make data import decisions based on
	    // known past behavior. When/if this matters, use `semver`.
	    version: 'tough-cookie@'+VERSION,

	    // add the store type, to make humans happy:
	    storeType: type,

	    // CookieJar configuration:
	    rejectPublicSuffixes: !!this.rejectPublicSuffixes,

	    // this gets filled from getAllCookies:
	    cookies: []
	  };

	  if (!(this.store.getAllCookies &&
	        typeof this.store.getAllCookies === 'function'))
	  {
	    return cb(new Error('store does not support getAllCookies and cannot be serialized'));
	  }

	  this.store.getAllCookies(function(err,cookies) {
	    if (err) {
	      return cb(err);
	    }

	    serialized.cookies = cookies.map(function(cookie) {
	      // convert to serialized 'raw' cookies
	      cookie = (cookie instanceof Cookie) ? cookie.toJSON() : cookie;

	      // Remove the index so new ones get assigned during deserialization
	      delete cookie.creationIndex;

	      return cookie;
	    });

	    return cb(null, serialized);
	  });
	};

	// well-known name that JSON.stringify calls
	CookieJar.prototype.toJSON = function() {
	  return this.serializeSync();
	};

	// use the class method CookieJar.deserialize instead of calling this directly
	CAN_BE_SYNC.push('_importCookies');
	CookieJar.prototype._importCookies = function(serialized, cb) {
	  var jar = this;
	  var cookies = serialized.cookies;
	  if (!cookies || !Array.isArray(cookies)) {
	    return cb(new Error('serialized jar has no cookies array'));
	  }

	  function putNext(err) {
	    if (err) {
	      return cb(err);
	    }

	    if (!cookies.length) {
	      return cb(err, jar);
	    }

	    var cookie;
	    try {
	      cookie = fromJSON(cookies.shift());
	    } catch (e) {
	      return cb(e);
	    }

	    if (cookie === null) {
	      return putNext(null); // skip this cookie
	    }

	    jar.store.putCookie(cookie, putNext);
	  }

	  putNext();
	};

	CookieJar.deserialize = function(strOrObj, store, cb) {
	  if (arguments.length !== 3) {
	    // store is optional
	    cb = store;
	    store = null;
	  }

	  var serialized;
	  if (typeof strOrObj === 'string') {
	    serialized = jsonParse(strOrObj);
	    if (serialized instanceof Error) {
	      return cb(serialized);
	    }
	  } else {
	    serialized = strOrObj;
	  }

	  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);
	  jar._importCookies(serialized, function(err) {
	    if (err) {
	      return cb(err);
	    }
	    cb(null, jar);
	  });
	};

	CookieJar.fromJSON = CookieJar.deserializeSync;
	CookieJar.deserializeSync = function(strOrObj, store) {
	  var serialized = typeof strOrObj === 'string' ?
	    JSON.parse(strOrObj) : strOrObj;
	  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);

	  // catch this mistake early:
	  if (!jar.store.synchronous) {
	    throw new Error('CookieJar store is not synchronous; use async API instead.');
	  }

	  jar._importCookiesSync(serialized);
	  return jar;
	};

	CAN_BE_SYNC.push('clone');
	CookieJar.prototype.clone = function(newStore, cb) {
	  if (arguments.length === 1) {
	    cb = newStore;
	    newStore = null;
	  }

	  this.serialize(function(err,serialized) {
	    if (err) {
	      return cb(err);
	    }
	    CookieJar.deserialize(newStore, serialized, cb);
	  });
	};

	// Use a closure to provide a true imperative API for synchronous stores.
	function syncWrap(method) {
	  return function() {
	    if (!this.store.synchronous) {
	      throw new Error('CookieJar store is not synchronous; use async API instead.');
	    }

	    var args = Array.prototype.slice.call(arguments);
	    var syncErr, syncResult;
	    args.push(function syncCb(err, result) {
	      syncErr = err;
	      syncResult = result;
	    });
	    this[method].apply(this, args);

	    if (syncErr) {
	      throw syncErr;
	    }
	    return syncResult;
	  };
	}

	// wrap all declared CAN_BE_SYNC methods in the sync wrapper
	CAN_BE_SYNC.forEach(function(method) {
	  CookieJar.prototype[method+'Sync'] = syncWrap(method);
	});

	module.exports = {
	  CookieJar: CookieJar,
	  Cookie: Cookie,
	  Store: Store,
	  MemoryCookieStore: MemoryCookieStore,
	  parseDate: parseDate,
	  formatDate: formatDate,
	  parse: parse,
	  fromJSON: fromJSON,
	  domainMatch: domainMatch,
	  defaultPath: defaultPath,
	  pathMatch: pathMatch,
	  getPublicSuffix: pubsuffix.getPublicSuffix,
	  cookieCompare: cookieCompare,
	  permuteDomain: __webpack_require__(260).permuteDomain,
	  permutePath: permutePath,
	  canonicalDomain: canonicalDomain
	};


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/****************************************************
	 * AUTOMATICALLY GENERATED by generate-pubsuffix.js *
	 *                  DO NOT EDIT!                    *
	 ****************************************************/

	"use strict";

	var punycode = __webpack_require__(42);

	module.exports.getPublicSuffix = function getPublicSuffix(domain) {
	  /*!
	   * Copyright (c) 2015, Salesforce.com, Inc.
	   * All rights reserved.
	   *
	   * Redistribution and use in source and binary forms, with or without
	   * modification, are permitted provided that the following conditions are met:
	   *
	   * 1. Redistributions of source code must retain the above copyright notice,
	   * this list of conditions and the following disclaimer.
	   *
	   * 2. Redistributions in binary form must reproduce the above copyright notice,
	   * this list of conditions and the following disclaimer in the documentation
	   * and/or other materials provided with the distribution.
	   *
	   * 3. Neither the name of Salesforce.com nor the names of its contributors may
	   * be used to endorse or promote products derived from this software without
	   * specific prior written permission.
	   *
	   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	   * POSSIBILITY OF SUCH DAMAGE.
	   */
	  if (!domain) {
	    return null;
	  }
	  if (domain.match(/^\./)) {
	    return null;
	  }
	  var asciiDomain = punycode.toASCII(domain);
	  var converted = false;
	  if (asciiDomain !== domain) {
	    domain = asciiDomain;
	    converted = true;
	  }
	  if (index[domain]) {
	    return null;
	  }

	  domain = domain.toLowerCase();
	  var parts = domain.split('.').reverse();

	  var suffix = '';
	  var suffixLen = 0;
	  for (var i=0; i<parts.length; i++) {
	    var part = parts[i];
	    var starstr = '*'+suffix;
	    var partstr = part+suffix;

	    if (index[starstr]) { // star rule matches
	      suffixLen = i+1;
	      if (index[partstr] === false) { // exception rule matches (NB: false, not undefined)
	        suffixLen--;
	      }
	    } else if (index[partstr]) { // exact match, not exception
	      suffixLen = i+1;
	    }

	    suffix = '.'+partstr;
	  }

	  if (index['*'+suffix]) { // *.domain exists (e.g. *.kyoto.jp for domain='kyoto.jp');
	    return null;
	  }

	  suffixLen = suffixLen || 1;
	  if (parts.length > suffixLen) {
	    var publicSuffix = parts.slice(0,suffixLen+1).reverse().join('.');
	    return converted ? punycode.toUnicode(publicSuffix) : publicSuffix;
	  }

	  return null;
	};

	// The following generated structure is used under the MPL version 1.1
	// See public-suffix.txt for more information

	var index = module.exports.index = Object.freeze(
	{"ac":true,"com.ac":true,"edu.ac":true,"gov.ac":true,"net.ac":true,"mil.ac":true,"org.ac":true,"ad":true,"nom.ad":true,"ae":true,"co.ae":true,"net.ae":true,"org.ae":true,"sch.ae":true,"ac.ae":true,"gov.ae":true,"mil.ae":true,"aero":true,"accident-investigation.aero":true,"accident-prevention.aero":true,"aerobatic.aero":true,"aeroclub.aero":true,"aerodrome.aero":true,"agents.aero":true,"aircraft.aero":true,"airline.aero":true,"airport.aero":true,"air-surveillance.aero":true,"airtraffic.aero":true,"air-traffic-control.aero":true,"ambulance.aero":true,"amusement.aero":true,"association.aero":true,"author.aero":true,"ballooning.aero":true,"broker.aero":true,"caa.aero":true,"cargo.aero":true,"catering.aero":true,"certification.aero":true,"championship.aero":true,"charter.aero":true,"civilaviation.aero":true,"club.aero":true,"conference.aero":true,"consultant.aero":true,"consulting.aero":true,"control.aero":true,"council.aero":true,"crew.aero":true,"design.aero":true,"dgca.aero":true,"educator.aero":true,"emergency.aero":true,"engine.aero":true,"engineer.aero":true,"entertainment.aero":true,"equipment.aero":true,"exchange.aero":true,"express.aero":true,"federation.aero":true,"flight.aero":true,"freight.aero":true,"fuel.aero":true,"gliding.aero":true,"government.aero":true,"groundhandling.aero":true,"group.aero":true,"hanggliding.aero":true,"homebuilt.aero":true,"insurance.aero":true,"journal.aero":true,"journalist.aero":true,"leasing.aero":true,"logistics.aero":true,"magazine.aero":true,"maintenance.aero":true,"marketplace.aero":true,"media.aero":true,"microlight.aero":true,"modelling.aero":true,"navigation.aero":true,"parachuting.aero":true,"paragliding.aero":true,"passenger-association.aero":true,"pilot.aero":true,"press.aero":true,"production.aero":true,"recreation.aero":true,"repbody.aero":true,"res.aero":true,"research.aero":true,"rotorcraft.aero":true,"safety.aero":true,"scientist.aero":true,"services.aero":true,"show.aero":true,"skydiving.aero":true,"software.aero":true,"student.aero":true,"taxi.aero":true,"trader.aero":true,"trading.aero":true,"trainer.aero":true,"union.aero":true,"workinggroup.aero":true,"works.aero":true,"af":true,"gov.af":true,"com.af":true,"org.af":true,"net.af":true,"edu.af":true,"ag":true,"com.ag":true,"org.ag":true,"net.ag":true,"co.ag":true,"nom.ag":true,"ai":true,"off.ai":true,"com.ai":true,"net.ai":true,"org.ai":true,"al":true,"com.al":true,"edu.al":true,"gov.al":true,"mil.al":true,"net.al":true,"org.al":true,"am":true,"an":true,"com.an":true,"net.an":true,"org.an":true,"edu.an":true,"ao":true,"ed.ao":true,"gv.ao":true,"og.ao":true,"co.ao":true,"pb.ao":true,"it.ao":true,"aq":true,"ar":true,"com.ar":true,"edu.ar":true,"gob.ar":true,"gov.ar":true,"int.ar":true,"mil.ar":true,"net.ar":true,"org.ar":true,"tur.ar":true,"arpa":true,"e164.arpa":true,"in-addr.arpa":true,"ip6.arpa":true,"iris.arpa":true,"uri.arpa":true,"urn.arpa":true,"as":true,"gov.as":true,"asia":true,"at":true,"ac.at":true,"co.at":true,"gv.at":true,"or.at":true,"au":true,"com.au":true,"net.au":true,"org.au":true,"edu.au":true,"gov.au":true,"asn.au":true,"id.au":true,"info.au":true,"conf.au":true,"oz.au":true,"act.au":true,"nsw.au":true,"nt.au":true,"qld.au":true,"sa.au":true,"tas.au":true,"vic.au":true,"wa.au":true,"act.edu.au":true,"nsw.edu.au":true,"nt.edu.au":true,"qld.edu.au":true,"sa.edu.au":true,"tas.edu.au":true,"vic.edu.au":true,"wa.edu.au":true,"qld.gov.au":true,"sa.gov.au":true,"tas.gov.au":true,"vic.gov.au":true,"wa.gov.au":true,"aw":true,"com.aw":true,"ax":true,"az":true,"com.az":true,"net.az":true,"int.az":true,"gov.az":true,"org.az":true,"edu.az":true,"info.az":true,"pp.az":true,"mil.az":true,"name.az":true,"pro.az":true,"biz.az":true,"ba":true,"org.ba":true,"net.ba":true,"edu.ba":true,"gov.ba":true,"mil.ba":true,"unsa.ba":true,"unbi.ba":true,"co.ba":true,"com.ba":true,"rs.ba":true,"bb":true,"biz.bb":true,"co.bb":true,"com.bb":true,"edu.bb":true,"gov.bb":true,"info.bb":true,"net.bb":true,"org.bb":true,"store.bb":true,"tv.bb":true,"*.bd":true,"be":true,"ac.be":true,"bf":true,"gov.bf":true,"bg":true,"a.bg":true,"b.bg":true,"c.bg":true,"d.bg":true,"e.bg":true,"f.bg":true,"g.bg":true,"h.bg":true,"i.bg":true,"j.bg":true,"k.bg":true,"l.bg":true,"m.bg":true,"n.bg":true,"o.bg":true,"p.bg":true,"q.bg":true,"r.bg":true,"s.bg":true,"t.bg":true,"u.bg":true,"v.bg":true,"w.bg":true,"x.bg":true,"y.bg":true,"z.bg":true,"0.bg":true,"1.bg":true,"2.bg":true,"3.bg":true,"4.bg":true,"5.bg":true,"6.bg":true,"7.bg":true,"8.bg":true,"9.bg":true,"bh":true,"com.bh":true,"edu.bh":true,"net.bh":true,"org.bh":true,"gov.bh":true,"bi":true,"co.bi":true,"com.bi":true,"edu.bi":true,"or.bi":true,"org.bi":true,"biz":true,"bj":true,"asso.bj":true,"barreau.bj":true,"gouv.bj":true,"bm":true,"com.bm":true,"edu.bm":true,"gov.bm":true,"net.bm":true,"org.bm":true,"*.bn":true,"bo":true,"com.bo":true,"edu.bo":true,"gov.bo":true,"gob.bo":true,"int.bo":true,"org.bo":true,"net.bo":true,"mil.bo":true,"tv.bo":true,"br":true,"adm.br":true,"adv.br":true,"agr.br":true,"am.br":true,"arq.br":true,"art.br":true,"ato.br":true,"b.br":true,"bio.br":true,"blog.br":true,"bmd.br":true,"cim.br":true,"cng.br":true,"cnt.br":true,"com.br":true,"coop.br":true,"ecn.br":true,"eco.br":true,"edu.br":true,"emp.br":true,"eng.br":true,"esp.br":true,"etc.br":true,"eti.br":true,"far.br":true,"flog.br":true,"fm.br":true,"fnd.br":true,"fot.br":true,"fst.br":true,"g12.br":true,"ggf.br":true,"gov.br":true,"imb.br":true,"ind.br":true,"inf.br":true,"jor.br":true,"jus.br":true,"leg.br":true,"lel.br":true,"mat.br":true,"med.br":true,"mil.br":true,"mp.br":true,"mus.br":true,"net.br":true,"*.nom.br":true,"not.br":true,"ntr.br":true,"odo.br":true,"org.br":true,"ppg.br":true,"pro.br":true,"psc.br":true,"psi.br":true,"qsl.br":true,"radio.br":true,"rec.br":true,"slg.br":true,"srv.br":true,"taxi.br":true,"teo.br":true,"tmp.br":true,"trd.br":true,"tur.br":true,"tv.br":true,"vet.br":true,"vlog.br":true,"wiki.br":true,"zlg.br":true,"bs":true,"com.bs":true,"net.bs":true,"org.bs":true,"edu.bs":true,"gov.bs":true,"bt":true,"com.bt":true,"edu.bt":true,"gov.bt":true,"net.bt":true,"org.bt":true,"bv":true,"bw":true,"co.bw":true,"org.bw":true,"by":true,"gov.by":true,"mil.by":true,"com.by":true,"of.by":true,"bz":true,"com.bz":true,"net.bz":true,"org.bz":true,"edu.bz":true,"gov.bz":true,"ca":true,"ab.ca":true,"bc.ca":true,"mb.ca":true,"nb.ca":true,"nf.ca":true,"nl.ca":true,"ns.ca":true,"nt.ca":true,"nu.ca":true,"on.ca":true,"pe.ca":true,"qc.ca":true,"sk.ca":true,"yk.ca":true,"gc.ca":true,"cat":true,"cc":true,"cd":true,"gov.cd":true,"cf":true,"cg":true,"ch":true,"ci":true,"org.ci":true,"or.ci":true,"com.ci":true,"co.ci":true,"edu.ci":true,"ed.ci":true,"ac.ci":true,"net.ci":true,"go.ci":true,"asso.ci":true,"xn--aroport-bya.ci":true,"int.ci":true,"presse.ci":true,"md.ci":true,"gouv.ci":true,"*.ck":true,"www.ck":false,"cl":true,"gov.cl":true,"gob.cl":true,"co.cl":true,"mil.cl":true,"cm":true,"co.cm":true,"com.cm":true,"gov.cm":true,"net.cm":true,"cn":true,"ac.cn":true,"com.cn":true,"edu.cn":true,"gov.cn":true,"net.cn":true,"org.cn":true,"mil.cn":true,"xn--55qx5d.cn":true,"xn--io0a7i.cn":true,"xn--od0alg.cn":true,"ah.cn":true,"bj.cn":true,"cq.cn":true,"fj.cn":true,"gd.cn":true,"gs.cn":true,"gz.cn":true,"gx.cn":true,"ha.cn":true,"hb.cn":true,"he.cn":true,"hi.cn":true,"hl.cn":true,"hn.cn":true,"jl.cn":true,"js.cn":true,"jx.cn":true,"ln.cn":true,"nm.cn":true,"nx.cn":true,"qh.cn":true,"sc.cn":true,"sd.cn":true,"sh.cn":true,"sn.cn":true,"sx.cn":true,"tj.cn":true,"xj.cn":true,"xz.cn":true,"yn.cn":true,"zj.cn":true,"hk.cn":true,"mo.cn":true,"tw.cn":true,"co":true,"arts.co":true,"com.co":true,"edu.co":true,"firm.co":true,"gov.co":true,"info.co":true,"int.co":true,"mil.co":true,"net.co":true,"nom.co":true,"org.co":true,"rec.co":true,"web.co":true,"com":true,"coop":true,"cr":true,"ac.cr":true,"co.cr":true,"ed.cr":true,"fi.cr":true,"go.cr":true,"or.cr":true,"sa.cr":true,"cu":true,"com.cu":true,"edu.cu":true,"org.cu":true,"net.cu":true,"gov.cu":true,"inf.cu":true,"cv":true,"cw":true,"com.cw":true,"edu.cw":true,"net.cw":true,"org.cw":true,"cx":true,"gov.cx":true,"*.cy":true,"cz":true,"de":true,"dj":true,"dk":true,"dm":true,"com.dm":true,"net.dm":true,"org.dm":true,"edu.dm":true,"gov.dm":true,"do":true,"art.do":true,"com.do":true,"edu.do":true,"gob.do":true,"gov.do":true,"mil.do":true,"net.do":true,"org.do":true,"sld.do":true,"web.do":true,"dz":true,"com.dz":true,"org.dz":true,"net.dz":true,"gov.dz":true,"edu.dz":true,"asso.dz":true,"pol.dz":true,"art.dz":true,"ec":true,"com.ec":true,"info.ec":true,"net.ec":true,"fin.ec":true,"k12.ec":true,"med.ec":true,"pro.ec":true,"org.ec":true,"edu.ec":true,"gov.ec":true,"gob.ec":true,"mil.ec":true,"edu":true,"ee":true,"edu.ee":true,"gov.ee":true,"riik.ee":true,"lib.ee":true,"med.ee":true,"com.ee":true,"pri.ee":true,"aip.ee":true,"org.ee":true,"fie.ee":true,"eg":true,"com.eg":true,"edu.eg":true,"eun.eg":true,"gov.eg":true,"mil.eg":true,"name.eg":true,"net.eg":true,"org.eg":true,"sci.eg":true,"*.er":true,"es":true,"com.es":true,"nom.es":true,"org.es":true,"gob.es":true,"edu.es":true,"et":true,"com.et":true,"gov.et":true,"org.et":true,"edu.et":true,"biz.et":true,"name.et":true,"info.et":true,"eu":true,"fi":true,"aland.fi":true,"*.fj":true,"*.fk":true,"fm":true,"fo":true,"fr":true,"com.fr":true,"asso.fr":true,"nom.fr":true,"prd.fr":true,"presse.fr":true,"tm.fr":true,"aeroport.fr":true,"assedic.fr":true,"avocat.fr":true,"avoues.fr":true,"cci.fr":true,"chambagri.fr":true,"chirurgiens-dentistes.fr":true,"experts-comptables.fr":true,"geometre-expert.fr":true,"gouv.fr":true,"greta.fr":true,"huissier-justice.fr":true,"medecin.fr":true,"notaires.fr":true,"pharmacien.fr":true,"port.fr":true,"veterinaire.fr":true,"ga":true,"gb":true,"gd":true,"ge":true,"com.ge":true,"edu.ge":true,"gov.ge":true,"org.ge":true,"mil.ge":true,"net.ge":true,"pvt.ge":true,"gf":true,"gg":true,"co.gg":true,"net.gg":true,"org.gg":true,"gh":true,"com.gh":true,"edu.gh":true,"gov.gh":true,"org.gh":true,"mil.gh":true,"gi":true,"com.gi":true,"ltd.gi":true,"gov.gi":true,"mod.gi":true,"edu.gi":true,"org.gi":true,"gl":true,"gm":true,"gn":true,"ac.gn":true,"com.gn":true,"edu.gn":true,"gov.gn":true,"org.gn":true,"net.gn":true,"gov":true,"gp":true,"com.gp":true,"net.gp":true,"mobi.gp":true,"edu.gp":true,"org.gp":true,"asso.gp":true,"gq":true,"gr":true,"com.gr":true,"edu.gr":true,"net.gr":true,"org.gr":true,"gov.gr":true,"gs":true,"gt":true,"com.gt":true,"edu.gt":true,"gob.gt":true,"ind.gt":true,"mil.gt":true,"net.gt":true,"org.gt":true,"*.gu":true,"gw":true,"gy":true,"co.gy":true,"com.gy":true,"net.gy":true,"hk":true,"com.hk":true,"edu.hk":true,"gov.hk":true,"idv.hk":true,"net.hk":true,"org.hk":true,"xn--55qx5d.hk":true,"xn--wcvs22d.hk":true,"xn--lcvr32d.hk":true,"xn--mxtq1m.hk":true,"xn--gmqw5a.hk":true,"xn--ciqpn.hk":true,"xn--gmq050i.hk":true,"xn--zf0avx.hk":true,"xn--io0a7i.hk":true,"xn--mk0axi.hk":true,"xn--od0alg.hk":true,"xn--od0aq3b.hk":true,"xn--tn0ag.hk":true,"xn--uc0atv.hk":true,"xn--uc0ay4a.hk":true,"hm":true,"hn":true,"com.hn":true,"edu.hn":true,"org.hn":true,"net.hn":true,"mil.hn":true,"gob.hn":true,"hr":true,"iz.hr":true,"from.hr":true,"name.hr":true,"com.hr":true,"ht":true,"com.ht":true,"shop.ht":true,"firm.ht":true,"info.ht":true,"adult.ht":true,"net.ht":true,"pro.ht":true,"org.ht":true,"med.ht":true,"art.ht":true,"coop.ht":true,"pol.ht":true,"asso.ht":true,"edu.ht":true,"rel.ht":true,"gouv.ht":true,"perso.ht":true,"hu":true,"co.hu":true,"info.hu":true,"org.hu":true,"priv.hu":true,"sport.hu":true,"tm.hu":true,"2000.hu":true,"agrar.hu":true,"bolt.hu":true,"casino.hu":true,"city.hu":true,"erotica.hu":true,"erotika.hu":true,"film.hu":true,"forum.hu":true,"games.hu":true,"hotel.hu":true,"ingatlan.hu":true,"jogasz.hu":true,"konyvelo.hu":true,"lakas.hu":true,"media.hu":true,"news.hu":true,"reklam.hu":true,"sex.hu":true,"shop.hu":true,"suli.hu":true,"szex.hu":true,"tozsde.hu":true,"utazas.hu":true,"video.hu":true,"id":true,"ac.id":true,"biz.id":true,"co.id":true,"desa.id":true,"go.id":true,"mil.id":true,"my.id":true,"net.id":true,"or.id":true,"sch.id":true,"web.id":true,"ie":true,"gov.ie":true,"*.il":true,"im":true,"ac.im":true,"co.im":true,"com.im":true,"ltd.co.im":true,"net.im":true,"org.im":true,"plc.co.im":true,"tt.im":true,"tv.im":true,"in":true,"co.in":true,"firm.in":true,"net.in":true,"org.in":true,"gen.in":true,"ind.in":true,"nic.in":true,"ac.in":true,"edu.in":true,"res.in":true,"gov.in":true,"mil.in":true,"info":true,"int":true,"eu.int":true,"io":true,"com.io":true,"iq":true,"gov.iq":true,"edu.iq":true,"mil.iq":true,"com.iq":true,"org.iq":true,"net.iq":true,"ir":true,"ac.ir":true,"co.ir":true,"gov.ir":true,"id.ir":true,"net.ir":true,"org.ir":true,"sch.ir":true,"xn--mgba3a4f16a.ir":true,"xn--mgba3a4fra.ir":true,"is":true,"net.is":true,"com.is":true,"edu.is":true,"gov.is":true,"org.is":true,"int.is":true,"it":true,"gov.it":true,"edu.it":true,"abr.it":true,"abruzzo.it":true,"aosta-valley.it":true,"aostavalley.it":true,"bas.it":true,"basilicata.it":true,"cal.it":true,"calabria.it":true,"cam.it":true,"campania.it":true,"emilia-romagna.it":true,"emiliaromagna.it":true,"emr.it":true,"friuli-v-giulia.it":true,"friuli-ve-giulia.it":true,"friuli-vegiulia.it":true,"friuli-venezia-giulia.it":true,"friuli-veneziagiulia.it":true,"friuli-vgiulia.it":true,"friuliv-giulia.it":true,"friulive-giulia.it":true,"friulivegiulia.it":true,"friulivenezia-giulia.it":true,"friuliveneziagiulia.it":true,"friulivgiulia.it":true,"fvg.it":true,"laz.it":true,"lazio.it":true,"lig.it":true,"liguria.it":true,"lom.it":true,"lombardia.it":true,"lombardy.it":true,"lucania.it":true,"mar.it":true,"marche.it":true,"mol.it":true,"molise.it":true,"piedmont.it":true,"piemonte.it":true,"pmn.it":true,"pug.it":true,"puglia.it":true,"sar.it":true,"sardegna.it":true,"sardinia.it":true,"sic.it":true,"sicilia.it":true,"sicily.it":true,"taa.it":true,"tos.it":true,"toscana.it":true,"trentino-a-adige.it":true,"trentino-aadige.it":true,"trentino-alto-adige.it":true,"trentino-altoadige.it":true,"trentino-s-tirol.it":true,"trentino-stirol.it":true,"trentino-sud-tirol.it":true,"trentino-sudtirol.it":true,"trentino-sued-tirol.it":true,"trentino-suedtirol.it":true,"trentinoa-adige.it":true,"trentinoaadige.it":true,"trentinoalto-adige.it":true,"trentinoaltoadige.it":true,"trentinos-tirol.it":true,"trentinostirol.it":true,"trentinosud-tirol.it":true,"trentinosudtirol.it":true,"trentinosued-tirol.it":true,"trentinosuedtirol.it":true,"tuscany.it":true,"umb.it":true,"umbria.it":true,"val-d-aosta.it":true,"val-daosta.it":true,"vald-aosta.it":true,"valdaosta.it":true,"valle-aosta.it":true,"valle-d-aosta.it":true,"valle-daosta.it":true,"valleaosta.it":true,"valled-aosta.it":true,"valledaosta.it":true,"vallee-aoste.it":true,"valleeaoste.it":true,"vao.it":true,"vda.it":true,"ven.it":true,"veneto.it":true,"ag.it":true,"agrigento.it":true,"al.it":true,"alessandria.it":true,"alto-adige.it":true,"altoadige.it":true,"an.it":true,"ancona.it":true,"andria-barletta-trani.it":true,"andria-trani-barletta.it":true,"andriabarlettatrani.it":true,"andriatranibarletta.it":true,"ao.it":true,"aosta.it":true,"aoste.it":true,"ap.it":true,"aq.it":true,"aquila.it":true,"ar.it":true,"arezzo.it":true,"ascoli-piceno.it":true,"ascolipiceno.it":true,"asti.it":true,"at.it":true,"av.it":true,"avellino.it":true,"ba.it":true,"balsan.it":true,"bari.it":true,"barletta-trani-andria.it":true,"barlettatraniandria.it":true,"belluno.it":true,"benevento.it":true,"bergamo.it":true,"bg.it":true,"bi.it":true,"biella.it":true,"bl.it":true,"bn.it":true,"bo.it":true,"bologna.it":true,"bolzano.it":true,"bozen.it":true,"br.it":true,"brescia.it":true,"brindisi.it":true,"bs.it":true,"bt.it":true,"bz.it":true,"ca.it":true,"cagliari.it":true,"caltanissetta.it":true,"campidano-medio.it":true,"campidanomedio.it":true,"campobasso.it":true,"carbonia-iglesias.it":true,"carboniaiglesias.it":true,"carrara-massa.it":true,"carraramassa.it":true,"caserta.it":true,"catania.it":true,"catanzaro.it":true,"cb.it":true,"ce.it":true,"cesena-forli.it":true,"cesenaforli.it":true,"ch.it":true,"chieti.it":true,"ci.it":true,"cl.it":true,"cn.it":true,"co.it":true,"como.it":true,"cosenza.it":true,"cr.it":true,"cremona.it":true,"crotone.it":true,"cs.it":true,"ct.it":true,"cuneo.it":true,"cz.it":true,"dell-ogliastra.it":true,"dellogliastra.it":true,"en.it":true,"enna.it":true,"fc.it":true,"fe.it":true,"fermo.it":true,"ferrara.it":true,"fg.it":true,"fi.it":true,"firenze.it":true,"florence.it":true,"fm.it":true,"foggia.it":true,"forli-cesena.it":true,"forlicesena.it":true,"fr.it":true,"frosinone.it":true,"ge.it":true,"genoa.it":true,"genova.it":true,"go.it":true,"gorizia.it":true,"gr.it":true,"grosseto.it":true,"iglesias-carbonia.it":true,"iglesiascarbonia.it":true,"im.it":true,"imperia.it":true,"is.it":true,"isernia.it":true,"kr.it":true,"la-spezia.it":true,"laquila.it":true,"laspezia.it":true,"latina.it":true,"lc.it":true,"le.it":true,"lecce.it":true,"lecco.it":true,"li.it":true,"livorno.it":true,"lo.it":true,"lodi.it":true,"lt.it":true,"lu.it":true,"lucca.it":true,"macerata.it":true,"mantova.it":true,"massa-carrara.it":true,"massacarrara.it":true,"matera.it":true,"mb.it":true,"mc.it":true,"me.it":true,"medio-campidano.it":true,"mediocampidano.it":true,"messina.it":true,"mi.it":true,"milan.it":true,"milano.it":true,"mn.it":true,"mo.it":true,"modena.it":true,"monza-brianza.it":true,"monza-e-della-brianza.it":true,"monza.it":true,"monzabrianza.it":true,"monzaebrianza.it":true,"monzaedellabrianza.it":true,"ms.it":true,"mt.it":true,"na.it":true,"naples.it":true,"napoli.it":true,"no.it":true,"novara.it":true,"nu.it":true,"nuoro.it":true,"og.it":true,"ogliastra.it":true,"olbia-tempio.it":true,"olbiatempio.it":true,"or.it":true,"oristano.it":true,"ot.it":true,"pa.it":true,"padova.it":true,"padua.it":true,"palermo.it":true,"parma.it":true,"pavia.it":true,"pc.it":true,"pd.it":true,"pe.it":true,"perugia.it":true,"pesaro-urbino.it":true,"pesarourbino.it":true,"pescara.it":true,"pg.it":true,"pi.it":true,"piacenza.it":true,"pisa.it":true,"pistoia.it":true,"pn.it":true,"po.it":true,"pordenone.it":true,"potenza.it":true,"pr.it":true,"prato.it":true,"pt.it":true,"pu.it":true,"pv.it":true,"pz.it":true,"ra.it":true,"ragusa.it":true,"ravenna.it":true,"rc.it":true,"re.it":true,"reggio-calabria.it":true,"reggio-emilia.it":true,"reggiocalabria.it":true,"reggioemilia.it":true,"rg.it":true,"ri.it":true,"rieti.it":true,"rimini.it":true,"rm.it":true,"rn.it":true,"ro.it":true,"roma.it":true,"rome.it":true,"rovigo.it":true,"sa.it":true,"salerno.it":true,"sassari.it":true,"savona.it":true,"si.it":true,"siena.it":true,"siracusa.it":true,"so.it":true,"sondrio.it":true,"sp.it":true,"sr.it":true,"ss.it":true,"suedtirol.it":true,"sv.it":true,"ta.it":true,"taranto.it":true,"te.it":true,"tempio-olbia.it":true,"tempioolbia.it":true,"teramo.it":true,"terni.it":true,"tn.it":true,"to.it":true,"torino.it":true,"tp.it":true,"tr.it":true,"trani-andria-barletta.it":true,"trani-barletta-andria.it":true,"traniandriabarletta.it":true,"tranibarlettaandria.it":true,"trapani.it":true,"trentino.it":true,"trento.it":true,"treviso.it":true,"trieste.it":true,"ts.it":true,"turin.it":true,"tv.it":true,"ud.it":true,"udine.it":true,"urbino-pesaro.it":true,"urbinopesaro.it":true,"va.it":true,"varese.it":true,"vb.it":true,"vc.it":true,"ve.it":true,"venezia.it":true,"venice.it":true,"verbania.it":true,"vercelli.it":true,"verona.it":true,"vi.it":true,"vibo-valentia.it":true,"vibovalentia.it":true,"vicenza.it":true,"viterbo.it":true,"vr.it":true,"vs.it":true,"vt.it":true,"vv.it":true,"je":true,"co.je":true,"net.je":true,"org.je":true,"*.jm":true,"jo":true,"com.jo":true,"org.jo":true,"net.jo":true,"edu.jo":true,"sch.jo":true,"gov.jo":true,"mil.jo":true,"name.jo":true,"jobs":true,"jp":true,"ac.jp":true,"ad.jp":true,"co.jp":true,"ed.jp":true,"go.jp":true,"gr.jp":true,"lg.jp":true,"ne.jp":true,"or.jp":true,"aichi.jp":true,"akita.jp":true,"aomori.jp":true,"chiba.jp":true,"ehime.jp":true,"fukui.jp":true,"fukuoka.jp":true,"fukushima.jp":true,"gifu.jp":true,"gunma.jp":true,"hiroshima.jp":true,"hokkaido.jp":true,"hyogo.jp":true,"ibaraki.jp":true,"ishikawa.jp":true,"iwate.jp":true,"kagawa.jp":true,"kagoshima.jp":true,"kanagawa.jp":true,"kochi.jp":true,"kumamoto.jp":true,"kyoto.jp":true,"mie.jp":true,"miyagi.jp":true,"miyazaki.jp":true,"nagano.jp":true,"nagasaki.jp":true,"nara.jp":true,"niigata.jp":true,"oita.jp":true,"okayama.jp":true,"okinawa.jp":true,"osaka.jp":true,"saga.jp":true,"saitama.jp":true,"shiga.jp":true,"shimane.jp":true,"shizuoka.jp":true,"tochigi.jp":true,"tokushima.jp":true,"tokyo.jp":true,"tottori.jp":true,"toyama.jp":true,"wakayama.jp":true,"yamagata.jp":true,"yamaguchi.jp":true,"yamanashi.jp":true,"xn--4pvxs.jp":true,"xn--vgu402c.jp":true,"xn--c3s14m.jp":true,"xn--f6qx53a.jp":true,"xn--8pvr4u.jp":true,"xn--uist22h.jp":true,"xn--djrs72d6uy.jp":true,"xn--mkru45i.jp":true,"xn--0trq7p7nn.jp":true,"xn--8ltr62k.jp":true,"xn--2m4a15e.jp":true,"xn--efvn9s.jp":true,"xn--32vp30h.jp":true,"xn--4it797k.jp":true,"xn--1lqs71d.jp":true,"xn--5rtp49c.jp":true,"xn--5js045d.jp":true,"xn--ehqz56n.jp":true,"xn--1lqs03n.jp":true,"xn--qqqt11m.jp":true,"xn--kbrq7o.jp":true,"xn--pssu33l.jp":true,"xn--ntsq17g.jp":true,"xn--uisz3g.jp":true,"xn--6btw5a.jp":true,"xn--1ctwo.jp":true,"xn--6orx2r.jp":true,"xn--rht61e.jp":true,"xn--rht27z.jp":true,"xn--djty4k.jp":true,"xn--nit225k.jp":true,"xn--rht3d.jp":true,"xn--klty5x.jp":true,"xn--kltx9a.jp":true,"xn--kltp7d.jp":true,"xn--uuwu58a.jp":true,"xn--zbx025d.jp":true,"xn--ntso0iqx3a.jp":true,"xn--elqq16h.jp":true,"xn--4it168d.jp":true,"xn--klt787d.jp":true,"xn--rny31h.jp":true,"xn--7t0a264c.jp":true,"xn--5rtq34k.jp":true,"xn--k7yn95e.jp":true,"xn--tor131o.jp":true,"xn--d5qv7z876c.jp":true,"*.kawasaki.jp":true,"*.kitakyushu.jp":true,"*.kobe.jp":true,"*.nagoya.jp":true,"*.sapporo.jp":true,"*.sendai.jp":true,"*.yokohama.jp":true,"city.kawasaki.jp":false,"city.kitakyushu.jp":false,"city.kobe.jp":false,"city.nagoya.jp":false,"city.sapporo.jp":false,"city.sendai.jp":false,"city.yokohama.jp":false,"aisai.aichi.jp":true,"ama.aichi.jp":true,"anjo.aichi.jp":true,"asuke.aichi.jp":true,"chiryu.aichi.jp":true,"chita.aichi.jp":true,"fuso.aichi.jp":true,"gamagori.aichi.jp":true,"handa.aichi.jp":true,"hazu.aichi.jp":true,"hekinan.aichi.jp":true,"higashiura.aichi.jp":true,"ichinomiya.aichi.jp":true,"inazawa.aichi.jp":true,"inuyama.aichi.jp":true,"isshiki.aichi.jp":true,"iwakura.aichi.jp":true,"kanie.aichi.jp":true,"kariya.aichi.jp":true,"kasugai.aichi.jp":true,"kira.aichi.jp":true,"kiyosu.aichi.jp":true,"komaki.aichi.jp":true,"konan.aichi.jp":true,"kota.aichi.jp":true,"mihama.aichi.jp":true,"miyoshi.aichi.jp":true,"nishio.aichi.jp":true,"nisshin.aichi.jp":true,"obu.aichi.jp":true,"oguchi.aichi.jp":true,"oharu.aichi.jp":true,"okazaki.aichi.jp":true,"owariasahi.aichi.jp":true,"seto.aichi.jp":true,"shikatsu.aichi.jp":true,"shinshiro.aichi.jp":true,"shitara.aichi.jp":true,"tahara.aichi.jp":true,"takahama.aichi.jp":true,"tobishima.aichi.jp":true,"toei.aichi.jp":true,"togo.aichi.jp":true,"tokai.aichi.jp":true,"tokoname.aichi.jp":true,"toyoake.aichi.jp":true,"toyohashi.aichi.jp":true,"toyokawa.aichi.jp":true,"toyone.aichi.jp":true,"toyota.aichi.jp":true,"tsushima.aichi.jp":true,"yatomi.aichi.jp":true,"akita.akita.jp":true,"daisen.akita.jp":true,"fujisato.akita.jp":true,"gojome.akita.jp":true,"hachirogata.akita.jp":true,"happou.akita.jp":true,"higashinaruse.akita.jp":true,"honjo.akita.jp":true,"honjyo.akita.jp":true,"ikawa.akita.jp":true,"kamikoani.akita.jp":true,"kamioka.akita.jp":true,"katagami.akita.jp":true,"kazuno.akita.jp":true,"kitaakita.akita.jp":true,"kosaka.akita.jp":true,"kyowa.akita.jp":true,"misato.akita.jp":true,"mitane.akita.jp":true,"moriyoshi.akita.jp":true,"nikaho.akita.jp":true,"noshiro.akita.jp":true,"odate.akita.jp":true,"oga.akita.jp":true,"ogata.akita.jp":true,"semboku.akita.jp":true,"yokote.akita.jp":true,"yurihonjo.akita.jp":true,"aomori.aomori.jp":true,"gonohe.aomori.jp":true,"hachinohe.aomori.jp":true,"hashikami.aomori.jp":true,"hiranai.aomori.jp":true,"hirosaki.aomori.jp":true,"itayanagi.aomori.jp":true,"kuroishi.aomori.jp":true,"misawa.aomori.jp":true,"mutsu.aomori.jp":true,"nakadomari.aomori.jp":true,"noheji.aomori.jp":true,"oirase.aomori.jp":true,"owani.aomori.jp":true,"rokunohe.aomori.jp":true,"sannohe.aomori.jp":true,"shichinohe.aomori.jp":true,"shingo.aomori.jp":true,"takko.aomori.jp":true,"towada.aomori.jp":true,"tsugaru.aomori.jp":true,"tsuruta.aomori.jp":true,"abiko.chiba.jp":true,"asahi.chiba.jp":true,"chonan.chiba.jp":true,"chosei.chiba.jp":true,"choshi.chiba.jp":true,"chuo.chiba.jp":true,"funabashi.chiba.jp":true,"futtsu.chiba.jp":true,"hanamigawa.chiba.jp":true,"ichihara.chiba.jp":true,"ichikawa.chiba.jp":true,"ichinomiya.chiba.jp":true,"inzai.chiba.jp":true,"isumi.chiba.jp":true,"kamagaya.chiba.jp":true,"kamogawa.chiba.jp":true,"kashiwa.chiba.jp":true,"katori.chiba.jp":true,"katsuura.chiba.jp":true,"kimitsu.chiba.jp":true,"kisarazu.chiba.jp":true,"kozaki.chiba.jp":true,"kujukuri.chiba.jp":true,"kyonan.chiba.jp":true,"matsudo.chiba.jp":true,"midori.chiba.jp":true,"mihama.chiba.jp":true,"minamiboso.chiba.jp":true,"mobara.chiba.jp":true,"mutsuzawa.chiba.jp":true,"nagara.chiba.jp":true,"nagareyama.chiba.jp":true,"narashino.chiba.jp":true,"narita.chiba.jp":true,"noda.chiba.jp":true,"oamishirasato.chiba.jp":true,"omigawa.chiba.jp":true,"onjuku.chiba.jp":true,"otaki.chiba.jp":true,"sakae.chiba.jp":true,"sakura.chiba.jp":true,"shimofusa.chiba.jp":true,"shirako.chiba.jp":true,"shiroi.chiba.jp":true,"shisui.chiba.jp":true,"sodegaura.chiba.jp":true,"sosa.chiba.jp":true,"tako.chiba.jp":true,"tateyama.chiba.jp":true,"togane.chiba.jp":true,"tohnosho.chiba.jp":true,"tomisato.chiba.jp":true,"urayasu.chiba.jp":true,"yachimata.chiba.jp":true,"yachiyo.chiba.jp":true,"yokaichiba.chiba.jp":true,"yokoshibahikari.chiba.jp":true,"yotsukaido.chiba.jp":true,"ainan.ehime.jp":true,"honai.ehime.jp":true,"ikata.ehime.jp":true,"imabari.ehime.jp":true,"iyo.ehime.jp":true,"kamijima.ehime.jp":true,"kihoku.ehime.jp":true,"kumakogen.ehime.jp":true,"masaki.ehime.jp":true,"matsuno.ehime.jp":true,"matsuyama.ehime.jp":true,"namikata.ehime.jp":true,"niihama.ehime.jp":true,"ozu.ehime.jp":true,"saijo.ehime.jp":true,"seiyo.ehime.jp":true,"shikokuchuo.ehime.jp":true,"tobe.ehime.jp":true,"toon.ehime.jp":true,"uchiko.ehime.jp":true,"uwajima.ehime.jp":true,"yawatahama.ehime.jp":true,"echizen.fukui.jp":true,"eiheiji.fukui.jp":true,"fukui.fukui.jp":true,"ikeda.fukui.jp":true,"katsuyama.fukui.jp":true,"mihama.fukui.jp":true,"minamiechizen.fukui.jp":true,"obama.fukui.jp":true,"ohi.fukui.jp":true,"ono.fukui.jp":true,"sabae.fukui.jp":true,"sakai.fukui.jp":true,"takahama.fukui.jp":true,"tsuruga.fukui.jp":true,"wakasa.fukui.jp":true,"ashiya.fukuoka.jp":true,"buzen.fukuoka.jp":true,"chikugo.fukuoka.jp":true,"chikuho.fukuoka.jp":true,"chikujo.fukuoka.jp":true,"chikushino.fukuoka.jp":true,"chikuzen.fukuoka.jp":true,"chuo.fukuoka.jp":true,"dazaifu.fukuoka.jp":true,"fukuchi.fukuoka.jp":true,"hakata.fukuoka.jp":true,"higashi.fukuoka.jp":true,"hirokawa.fukuoka.jp":true,"hisayama.fukuoka.jp":true,"iizuka.fukuoka.jp":true,"inatsuki.fukuoka.jp":true,"kaho.fukuoka.jp":true,"kasuga.fukuoka.jp":true,"kasuya.fukuoka.jp":true,"kawara.fukuoka.jp":true,"keisen.fukuoka.jp":true,"koga.fukuoka.jp":true,"kurate.fukuoka.jp":true,"kurogi.fukuoka.jp":true,"kurume.fukuoka.jp":true,"minami.fukuoka.jp":true,"miyako.fukuoka.jp":true,"miyama.fukuoka.jp":true,"miyawaka.fukuoka.jp":true,"mizumaki.fukuoka.jp":true,"munakata.fukuoka.jp":true,"nakagawa.fukuoka.jp":true,"nakama.fukuoka.jp":true,"nishi.fukuoka.jp":true,"nogata.fukuoka.jp":true,"ogori.fukuoka.jp":true,"okagaki.fukuoka.jp":true,"okawa.fukuoka.jp":true,"oki.fukuoka.jp":true,"omuta.fukuoka.jp":true,"onga.fukuoka.jp":true,"onojo.fukuoka.jp":true,"oto.fukuoka.jp":true,"saigawa.fukuoka.jp":true,"sasaguri.fukuoka.jp":true,"shingu.fukuoka.jp":true,"shinyoshitomi.fukuoka.jp":true,"shonai.fukuoka.jp":true,"soeda.fukuoka.jp":true,"sue.fukuoka.jp":true,"tachiarai.fukuoka.jp":true,"tagawa.fukuoka.jp":true,"takata.fukuoka.jp":true,"toho.fukuoka.jp":true,"toyotsu.fukuoka.jp":true,"tsuiki.fukuoka.jp":true,"ukiha.fukuoka.jp":true,"umi.fukuoka.jp":true,"usui.fukuoka.jp":true,"yamada.fukuoka.jp":true,"yame.fukuoka.jp":true,"yanagawa.fukuoka.jp":true,"yukuhashi.fukuoka.jp":true,"aizubange.fukushima.jp":true,"aizumisato.fukushima.jp":true,"aizuwakamatsu.fukushima.jp":true,"asakawa.fukushima.jp":true,"bandai.fukushima.jp":true,"date.fukushima.jp":true,"fukushima.fukushima.jp":true,"furudono.fukushima.jp":true,"futaba.fukushima.jp":true,"hanawa.fukushima.jp":true,"higashi.fukushima.jp":true,"hirata.fukushima.jp":true,"hirono.fukushima.jp":true,"iitate.fukushima.jp":true,"inawashiro.fukushima.jp":true,"ishikawa.fukushima.jp":true,"iwaki.fukushima.jp":true,"izumizaki.fukushima.jp":true,"kagamiishi.fukushima.jp":true,"kaneyama.fukushima.jp":true,"kawamata.fukushima.jp":true,"kitakata.fukushima.jp":true,"kitashiobara.fukushima.jp":true,"koori.fukushima.jp":true,"koriyama.fukushima.jp":true,"kunimi.fukushima.jp":true,"miharu.fukushima.jp":true,"mishima.fukushima.jp":true,"namie.fukushima.jp":true,"nango.fukushima.jp":true,"nishiaizu.fukushima.jp":true,"nishigo.fukushima.jp":true,"okuma.fukushima.jp":true,"omotego.fukushima.jp":true,"ono.fukushima.jp":true,"otama.fukushima.jp":true,"samegawa.fukushima.jp":true,"shimogo.fukushima.jp":true,"shirakawa.fukushima.jp":true,"showa.fukushima.jp":true,"soma.fukushima.jp":true,"sukagawa.fukushima.jp":true,"taishin.fukushima.jp":true,"tamakawa.fukushima.jp":true,"tanagura.fukushima.jp":true,"tenei.fukushima.jp":true,"yabuki.fukushima.jp":true,"yamato.fukushima.jp":true,"yamatsuri.fukushima.jp":true,"yanaizu.fukushima.jp":true,"yugawa.fukushima.jp":true,"anpachi.gifu.jp":true,"ena.gifu.jp":true,"gifu.gifu.jp":true,"ginan.gifu.jp":true,"godo.gifu.jp":true,"gujo.gifu.jp":true,"hashima.gifu.jp":true,"hichiso.gifu.jp":true,"hida.gifu.jp":true,"higashishirakawa.gifu.jp":true,"ibigawa.gifu.jp":true,"ikeda.gifu.jp":true,"kakamigahara.gifu.jp":true,"kani.gifu.jp":true,"kasahara.gifu.jp":true,"kasamatsu.gifu.jp":true,"kawaue.gifu.jp":true,"kitagata.gifu.jp":true,"mino.gifu.jp":true,"minokamo.gifu.jp":true,"mitake.gifu.jp":true,"mizunami.gifu.jp":true,"motosu.gifu.jp":true,"nakatsugawa.gifu.jp":true,"ogaki.gifu.jp":true,"sakahogi.gifu.jp":true,"seki.gifu.jp":true,"sekigahara.gifu.jp":true,"shirakawa.gifu.jp":true,"tajimi.gifu.jp":true,"takayama.gifu.jp":true,"tarui.gifu.jp":true,"toki.gifu.jp":true,"tomika.gifu.jp":true,"wanouchi.gifu.jp":true,"yamagata.gifu.jp":true,"yaotsu.gifu.jp":true,"yoro.gifu.jp":true,"annaka.gunma.jp":true,"chiyoda.gunma.jp":true,"fujioka.gunma.jp":true,"higashiagatsuma.gunma.jp":true,"isesaki.gunma.jp":true,"itakura.gunma.jp":true,"kanna.gunma.jp":true,"kanra.gunma.jp":true,"katashina.gunma.jp":true,"kawaba.gunma.jp":true,"kiryu.gunma.jp":true,"kusatsu.gunma.jp":true,"maebashi.gunma.jp":true,"meiwa.gunma.jp":true,"midori.gunma.jp":true,"minakami.gunma.jp":true,"naganohara.gunma.jp":true,"nakanojo.gunma.jp":true,"nanmoku.gunma.jp":true,"numata.gunma.jp":true,"oizumi.gunma.jp":true,"ora.gunma.jp":true,"ota.gunma.jp":true,"shibukawa.gunma.jp":true,"shimonita.gunma.jp":true,"shinto.gunma.jp":true,"showa.gunma.jp":true,"takasaki.gunma.jp":true,"takayama.gunma.jp":true,"tamamura.gunma.jp":true,"tatebayashi.gunma.jp":true,"tomioka.gunma.jp":true,"tsukiyono.gunma.jp":true,"tsumagoi.gunma.jp":true,"ueno.gunma.jp":true,"yoshioka.gunma.jp":true,"asaminami.hiroshima.jp":true,"daiwa.hiroshima.jp":true,"etajima.hiroshima.jp":true,"fuchu.hiroshima.jp":true,"fukuyama.hiroshima.jp":true,"hatsukaichi.hiroshima.jp":true,"higashihiroshima.hiroshima.jp":true,"hongo.hiroshima.jp":true,"jinsekikogen.hiroshima.jp":true,"kaita.hiroshima.jp":true,"kui.hiroshima.jp":true,"kumano.hiroshima.jp":true,"kure.hiroshima.jp":true,"mihara.hiroshima.jp":true,"miyoshi.hiroshima.jp":true,"naka.hiroshima.jp":true,"onomichi.hiroshima.jp":true,"osakikamijima.hiroshima.jp":true,"otake.hiroshima.jp":true,"saka.hiroshima.jp":true,"sera.hiroshima.jp":true,"seranishi.hiroshima.jp":true,"shinichi.hiroshima.jp":true,"shobara.hiroshima.jp":true,"takehara.hiroshima.jp":true,"abashiri.hokkaido.jp":true,"abira.hokkaido.jp":true,"aibetsu.hokkaido.jp":true,"akabira.hokkaido.jp":true,"akkeshi.hokkaido.jp":true,"asahikawa.hokkaido.jp":true,"ashibetsu.hokkaido.jp":true,"ashoro.hokkaido.jp":true,"assabu.hokkaido.jp":true,"atsuma.hokkaido.jp":true,"bibai.hokkaido.jp":true,"biei.hokkaido.jp":true,"bifuka.hokkaido.jp":true,"bihoro.hokkaido.jp":true,"biratori.hokkaido.jp":true,"chippubetsu.hokkaido.jp":true,"chitose.hokkaido.jp":true,"date.hokkaido.jp":true,"ebetsu.hokkaido.jp":true,"embetsu.hokkaido.jp":true,"eniwa.hokkaido.jp":true,"erimo.hokkaido.jp":true,"esan.hokkaido.jp":true,"esashi.hokkaido.jp":true,"fukagawa.hokkaido.jp":true,"fukushima.hokkaido.jp":true,"furano.hokkaido.jp":true,"furubira.hokkaido.jp":true,"haboro.hokkaido.jp":true,"hakodate.hokkaido.jp":true,"hamatonbetsu.hokkaido.jp":true,"hidaka.hokkaido.jp":true,"higashikagura.hokkaido.jp":true,"higashikawa.hokkaido.jp":true,"hiroo.hokkaido.jp":true,"hokuryu.hokkaido.jp":true,"hokuto.hokkaido.jp":true,"honbetsu.hokkaido.jp":true,"horokanai.hokkaido.jp":true,"horonobe.hokkaido.jp":true,"ikeda.hokkaido.jp":true,"imakane.hokkaido.jp":true,"ishikari.hokkaido.jp":true,"iwamizawa.hokkaido.jp":true,"iwanai.hokkaido.jp":true,"kamifurano.hokkaido.jp":true,"kamikawa.hokkaido.jp":true,"kamishihoro.hokkaido.jp":true,"kamisunagawa.hokkaido.jp":true,"kamoenai.hokkaido.jp":true,"kayabe.hokkaido.jp":true,"kembuchi.hokkaido.jp":true,"kikonai.hokkaido.jp":true,"kimobetsu.hokkaido.jp":true,"kitahiroshima.hokkaido.jp":true,"kitami.hokkaido.jp":true,"kiyosato.hokkaido.jp":true,"koshimizu.hokkaido.jp":true,"kunneppu.hokkaido.jp":true,"kuriyama.hokkaido.jp":true,"kuromatsunai.hokkaido.jp":true,"kushiro.hokkaido.jp":true,"kutchan.hokkaido.jp":true,"kyowa.hokkaido.jp":true,"mashike.hokkaido.jp":true,"matsumae.hokkaido.jp":true,"mikasa.hokkaido.jp":true,"minamifurano.hokkaido.jp":true,"mombetsu.hokkaido.jp":true,"moseushi.hokkaido.jp":true,"mukawa.hokkaido.jp":true,"muroran.hokkaido.jp":true,"naie.hokkaido.jp":true,"nakagawa.hokkaido.jp":true,"nakasatsunai.hokkaido.jp":true,"nakatombetsu.hokkaido.jp":true,"nanae.hokkaido.jp":true,"nanporo.hokkaido.jp":true,"nayoro.hokkaido.jp":true,"nemuro.hokkaido.jp":true,"niikappu.hokkaido.jp":true,"niki.hokkaido.jp":true,"nishiokoppe.hokkaido.jp":true,"noboribetsu.hokkaido.jp":true,"numata.hokkaido.jp":true,"obihiro.hokkaido.jp":true,"obira.hokkaido.jp":true,"oketo.hokkaido.jp":true,"okoppe.hokkaido.jp":true,"otaru.hokkaido.jp":true,"otobe.hokkaido.jp":true,"otofuke.hokkaido.jp":true,"otoineppu.hokkaido.jp":true,"oumu.hokkaido.jp":true,"ozora.hokkaido.jp":true,"pippu.hokkaido.jp":true,"rankoshi.hokkaido.jp":true,"rebun.hokkaido.jp":true,"rikubetsu.hokkaido.jp":true,"rishiri.hokkaido.jp":true,"rishirifuji.hokkaido.jp":true,"saroma.hokkaido.jp":true,"sarufutsu.hokkaido.jp":true,"shakotan.hokkaido.jp":true,"shari.hokkaido.jp":true,"shibecha.hokkaido.jp":true,"shibetsu.hokkaido.jp":true,"shikabe.hokkaido.jp":true,"shikaoi.hokkaido.jp":true,"shimamaki.hokkaido.jp":true,"shimizu.hokkaido.jp":true,"shimokawa.hokkaido.jp":true,"shinshinotsu.hokkaido.jp":true,"shintoku.hokkaido.jp":true,"shiranuka.hokkaido.jp":true,"shiraoi.hokkaido.jp":true,"shiriuchi.hokkaido.jp":true,"sobetsu.hokkaido.jp":true,"sunagawa.hokkaido.jp":true,"taiki.hokkaido.jp":true,"takasu.hokkaido.jp":true,"takikawa.hokkaido.jp":true,"takinoue.hokkaido.jp":true,"teshikaga.hokkaido.jp":true,"tobetsu.hokkaido.jp":true,"tohma.hokkaido.jp":true,"tomakomai.hokkaido.jp":true,"tomari.hokkaido.jp":true,"toya.hokkaido.jp":true,"toyako.hokkaido.jp":true,"toyotomi.hokkaido.jp":true,"toyoura.hokkaido.jp":true,"tsubetsu.hokkaido.jp":true,"tsukigata.hokkaido.jp":true,"urakawa.hokkaido.jp":true,"urausu.hokkaido.jp":true,"uryu.hokkaido.jp":true,"utashinai.hokkaido.jp":true,"wakkanai.hokkaido.jp":true,"wassamu.hokkaido.jp":true,"yakumo.hokkaido.jp":true,"yoichi.hokkaido.jp":true,"aioi.hyogo.jp":true,"akashi.hyogo.jp":true,"ako.hyogo.jp":true,"amagasaki.hyogo.jp":true,"aogaki.hyogo.jp":true,"asago.hyogo.jp":true,"ashiya.hyogo.jp":true,"awaji.hyogo.jp":true,"fukusaki.hyogo.jp":true,"goshiki.hyogo.jp":true,"harima.hyogo.jp":true,"himeji.hyogo.jp":true,"ichikawa.hyogo.jp":true,"inagawa.hyogo.jp":true,"itami.hyogo.jp":true,"kakogawa.hyogo.jp":true,"kamigori.hyogo.jp":true,"kamikawa.hyogo.jp":true,"kasai.hyogo.jp":true,"kasuga.hyogo.jp":true,"kawanishi.hyogo.jp":true,"miki.hyogo.jp":true,"minamiawaji.hyogo.jp":true,"nishinomiya.hyogo.jp":true,"nishiwaki.hyogo.jp":true,"ono.hyogo.jp":true,"sanda.hyogo.jp":true,"sannan.hyogo.jp":true,"sasayama.hyogo.jp":true,"sayo.hyogo.jp":true,"shingu.hyogo.jp":true,"shinonsen.hyogo.jp":true,"shiso.hyogo.jp":true,"sumoto.hyogo.jp":true,"taishi.hyogo.jp":true,"taka.hyogo.jp":true,"takarazuka.hyogo.jp":true,"takasago.hyogo.jp":true,"takino.hyogo.jp":true,"tamba.hyogo.jp":true,"tatsuno.hyogo.jp":true,"toyooka.hyogo.jp":true,"yabu.hyogo.jp":true,"yashiro.hyogo.jp":true,"yoka.hyogo.jp":true,"yokawa.hyogo.jp":true,"ami.ibaraki.jp":true,"asahi.ibaraki.jp":true,"bando.ibaraki.jp":true,"chikusei.ibaraki.jp":true,"daigo.ibaraki.jp":true,"fujishiro.ibaraki.jp":true,"hitachi.ibaraki.jp":true,"hitachinaka.ibaraki.jp":true,"hitachiomiya.ibaraki.jp":true,"hitachiota.ibaraki.jp":true,"ibaraki.ibaraki.jp":true,"ina.ibaraki.jp":true,"inashiki.ibaraki.jp":true,"itako.ibaraki.jp":true,"iwama.ibaraki.jp":true,"joso.ibaraki.jp":true,"kamisu.ibaraki.jp":true,"kasama.ibaraki.jp":true,"kashima.ibaraki.jp":true,"kasumigaura.ibaraki.jp":true,"koga.ibaraki.jp":true,"miho.ibaraki.jp":true,"mito.ibaraki.jp":true,"moriya.ibaraki.jp":true,"naka.ibaraki.jp":true,"namegata.ibaraki.jp":true,"oarai.ibaraki.jp":true,"ogawa.ibaraki.jp":true,"omitama.ibaraki.jp":true,"ryugasaki.ibaraki.jp":true,"sakai.ibaraki.jp":true,"sakuragawa.ibaraki.jp":true,"shimodate.ibaraki.jp":true,"shimotsuma.ibaraki.jp":true,"shirosato.ibaraki.jp":true,"sowa.ibaraki.jp":true,"suifu.ibaraki.jp":true,"takahagi.ibaraki.jp":true,"tamatsukuri.ibaraki.jp":true,"tokai.ibaraki.jp":true,"tomobe.ibaraki.jp":true,"tone.ibaraki.jp":true,"toride.ibaraki.jp":true,"tsuchiura.ibaraki.jp":true,"tsukuba.ibaraki.jp":true,"uchihara.ibaraki.jp":true,"ushiku.ibaraki.jp":true,"yachiyo.ibaraki.jp":true,"yamagata.ibaraki.jp":true,"yawara.ibaraki.jp":true,"yuki.ibaraki.jp":true,"anamizu.ishikawa.jp":true,"hakui.ishikawa.jp":true,"hakusan.ishikawa.jp":true,"kaga.ishikawa.jp":true,"kahoku.ishikawa.jp":true,"kanazawa.ishikawa.jp":true,"kawakita.ishikawa.jp":true,"komatsu.ishikawa.jp":true,"nakanoto.ishikawa.jp":true,"nanao.ishikawa.jp":true,"nomi.ishikawa.jp":true,"nonoichi.ishikawa.jp":true,"noto.ishikawa.jp":true,"shika.ishikawa.jp":true,"suzu.ishikawa.jp":true,"tsubata.ishikawa.jp":true,"tsurugi.ishikawa.jp":true,"uchinada.ishikawa.jp":true,"wajima.ishikawa.jp":true,"fudai.iwate.jp":true,"fujisawa.iwate.jp":true,"hanamaki.iwate.jp":true,"hiraizumi.iwate.jp":true,"hirono.iwate.jp":true,"ichinohe.iwate.jp":true,"ichinoseki.iwate.jp":true,"iwaizumi.iwate.jp":true,"iwate.iwate.jp":true,"joboji.iwate.jp":true,"kamaishi.iwate.jp":true,"kanegasaki.iwate.jp":true,"karumai.iwate.jp":true,"kawai.iwate.jp":true,"kitakami.iwate.jp":true,"kuji.iwate.jp":true,"kunohe.iwate.jp":true,"kuzumaki.iwate.jp":true,"miyako.iwate.jp":true,"mizusawa.iwate.jp":true,"morioka.iwate.jp":true,"ninohe.iwate.jp":true,"noda.iwate.jp":true,"ofunato.iwate.jp":true,"oshu.iwate.jp":true,"otsuchi.iwate.jp":true,"rikuzentakata.iwate.jp":true,"shiwa.iwate.jp":true,"shizukuishi.iwate.jp":true,"sumita.iwate.jp":true,"tanohata.iwate.jp":true,"tono.iwate.jp":true,"yahaba.iwate.jp":true,"yamada.iwate.jp":true,"ayagawa.kagawa.jp":true,"higashikagawa.kagawa.jp":true,"kanonji.kagawa.jp":true,"kotohira.kagawa.jp":true,"manno.kagawa.jp":true,"marugame.kagawa.jp":true,"mitoyo.kagawa.jp":true,"naoshima.kagawa.jp":true,"sanuki.kagawa.jp":true,"tadotsu.kagawa.jp":true,"takamatsu.kagawa.jp":true,"tonosho.kagawa.jp":true,"uchinomi.kagawa.jp":true,"utazu.kagawa.jp":true,"zentsuji.kagawa.jp":true,"akune.kagoshima.jp":true,"amami.kagoshima.jp":true,"hioki.kagoshima.jp":true,"isa.kagoshima.jp":true,"isen.kagoshima.jp":true,"izumi.kagoshima.jp":true,"kagoshima.kagoshima.jp":true,"kanoya.kagoshima.jp":true,"kawanabe.kagoshima.jp":true,"kinko.kagoshima.jp":true,"kouyama.kagoshima.jp":true,"makurazaki.kagoshima.jp":true,"matsumoto.kagoshima.jp":true,"minamitane.kagoshima.jp":true,"nakatane.kagoshima.jp":true,"nishinoomote.kagoshima.jp":true,"satsumasendai.kagoshima.jp":true,"soo.kagoshima.jp":true,"tarumizu.kagoshima.jp":true,"yusui.kagoshima.jp":true,"aikawa.kanagawa.jp":true,"atsugi.kanagawa.jp":true,"ayase.kanagawa.jp":true,"chigasaki.kanagawa.jp":true,"ebina.kanagawa.jp":true,"fujisawa.kanagawa.jp":true,"hadano.kanagawa.jp":true,"hakone.kanagawa.jp":true,"hiratsuka.kanagawa.jp":true,"isehara.kanagawa.jp":true,"kaisei.kanagawa.jp":true,"kamakura.kanagawa.jp":true,"kiyokawa.kanagawa.jp":true,"matsuda.kanagawa.jp":true,"minamiashigara.kanagawa.jp":true,"miura.kanagawa.jp":true,"nakai.kanagawa.jp":true,"ninomiya.kanagawa.jp":true,"odawara.kanagawa.jp":true,"oi.kanagawa.jp":true,"oiso.kanagawa.jp":true,"sagamihara.kanagawa.jp":true,"samukawa.kanagawa.jp":true,"tsukui.kanagawa.jp":true,"yamakita.kanagawa.jp":true,"yamato.kanagawa.jp":true,"yokosuka.kanagawa.jp":true,"yugawara.kanagawa.jp":true,"zama.kanagawa.jp":true,"zushi.kanagawa.jp":true,"aki.kochi.jp":true,"geisei.kochi.jp":true,"hidaka.kochi.jp":true,"higashitsuno.kochi.jp":true,"ino.kochi.jp":true,"kagami.kochi.jp":true,"kami.kochi.jp":true,"kitagawa.kochi.jp":true,"kochi.kochi.jp":true,"mihara.kochi.jp":true,"motoyama.kochi.jp":true,"muroto.kochi.jp":true,"nahari.kochi.jp":true,"nakamura.kochi.jp":true,"nankoku.kochi.jp":true,"nishitosa.kochi.jp":true,"niyodogawa.kochi.jp":true,"ochi.kochi.jp":true,"okawa.kochi.jp":true,"otoyo.kochi.jp":true,"otsuki.kochi.jp":true,"sakawa.kochi.jp":true,"sukumo.kochi.jp":true,"susaki.kochi.jp":true,"tosa.kochi.jp":true,"tosashimizu.kochi.jp":true,"toyo.kochi.jp":true,"tsuno.kochi.jp":true,"umaji.kochi.jp":true,"yasuda.kochi.jp":true,"yusuhara.kochi.jp":true,"amakusa.kumamoto.jp":true,"arao.kumamoto.jp":true,"aso.kumamoto.jp":true,"choyo.kumamoto.jp":true,"gyokuto.kumamoto.jp":true,"hitoyoshi.kumamoto.jp":true,"kamiamakusa.kumamoto.jp":true,"kashima.kumamoto.jp":true,"kikuchi.kumamoto.jp":true,"kosa.kumamoto.jp":true,"kumamoto.kumamoto.jp":true,"mashiki.kumamoto.jp":true,"mifune.kumamoto.jp":true,"minamata.kumamoto.jp":true,"minamioguni.kumamoto.jp":true,"nagasu.kumamoto.jp":true,"nishihara.kumamoto.jp":true,"oguni.kumamoto.jp":true,"ozu.kumamoto.jp":true,"sumoto.kumamoto.jp":true,"takamori.kumamoto.jp":true,"uki.kumamoto.jp":true,"uto.kumamoto.jp":true,"yamaga.kumamoto.jp":true,"yamato.kumamoto.jp":true,"yatsushiro.kumamoto.jp":true,"ayabe.kyoto.jp":true,"fukuchiyama.kyoto.jp":true,"higashiyama.kyoto.jp":true,"ide.kyoto.jp":true,"ine.kyoto.jp":true,"joyo.kyoto.jp":true,"kameoka.kyoto.jp":true,"kamo.kyoto.jp":true,"kita.kyoto.jp":true,"kizu.kyoto.jp":true,"kumiyama.kyoto.jp":true,"kyotamba.kyoto.jp":true,"kyotanabe.kyoto.jp":true,"kyotango.kyoto.jp":true,"maizuru.kyoto.jp":true,"minami.kyoto.jp":true,"minamiyamashiro.kyoto.jp":true,"miyazu.kyoto.jp":true,"muko.kyoto.jp":true,"nagaokakyo.kyoto.jp":true,"nakagyo.kyoto.jp":true,"nantan.kyoto.jp":true,"oyamazaki.kyoto.jp":true,"sakyo.kyoto.jp":true,"seika.kyoto.jp":true,"tanabe.kyoto.jp":true,"uji.kyoto.jp":true,"ujitawara.kyoto.jp":true,"wazuka.kyoto.jp":true,"yamashina.kyoto.jp":true,"yawata.kyoto.jp":true,"asahi.mie.jp":true,"inabe.mie.jp":true,"ise.mie.jp":true,"kameyama.mie.jp":true,"kawagoe.mie.jp":true,"kiho.mie.jp":true,"kisosaki.mie.jp":true,"kiwa.mie.jp":true,"komono.mie.jp":true,"kumano.mie.jp":true,"kuwana.mie.jp":true,"matsusaka.mie.jp":true,"meiwa.mie.jp":true,"mihama.mie.jp":true,"minamiise.mie.jp":true,"misugi.mie.jp":true,"miyama.mie.jp":true,"nabari.mie.jp":true,"shima.mie.jp":true,"suzuka.mie.jp":true,"tado.mie.jp":true,"taiki.mie.jp":true,"taki.mie.jp":true,"tamaki.mie.jp":true,"toba.mie.jp":true,"tsu.mie.jp":true,"udono.mie.jp":true,"ureshino.mie.jp":true,"watarai.mie.jp":true,"yokkaichi.mie.jp":true,"furukawa.miyagi.jp":true,"higashimatsushima.miyagi.jp":true,"ishinomaki.miyagi.jp":true,"iwanuma.miyagi.jp":true,"kakuda.miyagi.jp":true,"kami.miyagi.jp":true,"kawasaki.miyagi.jp":true,"kesennuma.miyagi.jp":true,"marumori.miyagi.jp":true,"matsushima.miyagi.jp":true,"minamisanriku.miyagi.jp":true,"misato.miyagi.jp":true,"murata.miyagi.jp":true,"natori.miyagi.jp":true,"ogawara.miyagi.jp":true,"ohira.miyagi.jp":true,"onagawa.miyagi.jp":true,"osaki.miyagi.jp":true,"rifu.miyagi.jp":true,"semine.miyagi.jp":true,"shibata.miyagi.jp":true,"shichikashuku.miyagi.jp":true,"shikama.miyagi.jp":true,"shiogama.miyagi.jp":true,"shiroishi.miyagi.jp":true,"tagajo.miyagi.jp":true,"taiwa.miyagi.jp":true,"tome.miyagi.jp":true,"tomiya.miyagi.jp":true,"wakuya.miyagi.jp":true,"watari.miyagi.jp":true,"yamamoto.miyagi.jp":true,"zao.miyagi.jp":true,"aya.miyazaki.jp":true,"ebino.miyazaki.jp":true,"gokase.miyazaki.jp":true,"hyuga.miyazaki.jp":true,"kadogawa.miyazaki.jp":true,"kawaminami.miyazaki.jp":true,"kijo.miyazaki.jp":true,"kitagawa.miyazaki.jp":true,"kitakata.miyazaki.jp":true,"kitaura.miyazaki.jp":true,"kobayashi.miyazaki.jp":true,"kunitomi.miyazaki.jp":true,"kushima.miyazaki.jp":true,"mimata.miyazaki.jp":true,"miyakonojo.miyazaki.jp":true,"miyazaki.miyazaki.jp":true,"morotsuka.miyazaki.jp":true,"nichinan.miyazaki.jp":true,"nishimera.miyazaki.jp":true,"nobeoka.miyazaki.jp":true,"saito.miyazaki.jp":true,"shiiba.miyazaki.jp":true,"shintomi.miyazaki.jp":true,"takaharu.miyazaki.jp":true,"takanabe.miyazaki.jp":true,"takazaki.miyazaki.jp":true,"tsuno.miyazaki.jp":true,"achi.nagano.jp":true,"agematsu.nagano.jp":true,"anan.nagano.jp":true,"aoki.nagano.jp":true,"asahi.nagano.jp":true,"azumino.nagano.jp":true,"chikuhoku.nagano.jp":true,"chikuma.nagano.jp":true,"chino.nagano.jp":true,"fujimi.nagano.jp":true,"hakuba.nagano.jp":true,"hara.nagano.jp":true,"hiraya.nagano.jp":true,"iida.nagano.jp":true,"iijima.nagano.jp":true,"iiyama.nagano.jp":true,"iizuna.nagano.jp":true,"ikeda.nagano.jp":true,"ikusaka.nagano.jp":true,"ina.nagano.jp":true,"karuizawa.nagano.jp":true,"kawakami.nagano.jp":true,"kiso.nagano.jp":true,"kisofukushima.nagano.jp":true,"kitaaiki.nagano.jp":true,"komagane.nagano.jp":true,"komoro.nagano.jp":true,"matsukawa.nagano.jp":true,"matsumoto.nagano.jp":true,"miasa.nagano.jp":true,"minamiaiki.nagano.jp":true,"minamimaki.nagano.jp":true,"minamiminowa.nagano.jp":true,"minowa.nagano.jp":true,"miyada.nagano.jp":true,"miyota.nagano.jp":true,"mochizuki.nagano.jp":true,"nagano.nagano.jp":true,"nagawa.nagano.jp":true,"nagiso.nagano.jp":true,"nakagawa.nagano.jp":true,"nakano.nagano.jp":true,"nozawaonsen.nagano.jp":true,"obuse.nagano.jp":true,"ogawa.nagano.jp":true,"okaya.nagano.jp":true,"omachi.nagano.jp":true,"omi.nagano.jp":true,"ookuwa.nagano.jp":true,"ooshika.nagano.jp":true,"otaki.nagano.jp":true,"otari.nagano.jp":true,"sakae.nagano.jp":true,"sakaki.nagano.jp":true,"saku.nagano.jp":true,"sakuho.nagano.jp":true,"shimosuwa.nagano.jp":true,"shinanomachi.nagano.jp":true,"shiojiri.nagano.jp":true,"suwa.nagano.jp":true,"suzaka.nagano.jp":true,"takagi.nagano.jp":true,"takamori.nagano.jp":true,"takayama.nagano.jp":true,"tateshina.nagano.jp":true,"tatsuno.nagano.jp":true,"togakushi.nagano.jp":true,"togura.nagano.jp":true,"tomi.nagano.jp":true,"ueda.nagano.jp":true,"wada.nagano.jp":true,"yamagata.nagano.jp":true,"yamanouchi.nagano.jp":true,"yasaka.nagano.jp":true,"yasuoka.nagano.jp":true,"chijiwa.nagasaki.jp":true,"futsu.nagasaki.jp":true,"goto.nagasaki.jp":true,"hasami.nagasaki.jp":true,"hirado.nagasaki.jp":true,"iki.nagasaki.jp":true,"isahaya.nagasaki.jp":true,"kawatana.nagasaki.jp":true,"kuchinotsu.nagasaki.jp":true,"matsuura.nagasaki.jp":true,"nagasaki.nagasaki.jp":true,"obama.nagasaki.jp":true,"omura.nagasaki.jp":true,"oseto.nagasaki.jp":true,"saikai.nagasaki.jp":true,"sasebo.nagasaki.jp":true,"seihi.nagasaki.jp":true,"shimabara.nagasaki.jp":true,"shinkamigoto.nagasaki.jp":true,"togitsu.nagasaki.jp":true,"tsushima.nagasaki.jp":true,"unzen.nagasaki.jp":true,"ando.nara.jp":true,"gose.nara.jp":true,"heguri.nara.jp":true,"higashiyoshino.nara.jp":true,"ikaruga.nara.jp":true,"ikoma.nara.jp":true,"kamikitayama.nara.jp":true,"kanmaki.nara.jp":true,"kashiba.nara.jp":true,"kashihara.nara.jp":true,"katsuragi.nara.jp":true,"kawai.nara.jp":true,"kawakami.nara.jp":true,"kawanishi.nara.jp":true,"koryo.nara.jp":true,"kurotaki.nara.jp":true,"mitsue.nara.jp":true,"miyake.nara.jp":true,"nara.nara.jp":true,"nosegawa.nara.jp":true,"oji.nara.jp":true,"ouda.nara.jp":true,"oyodo.nara.jp":true,"sakurai.nara.jp":true,"sango.nara.jp":true,"shimoichi.nara.jp":true,"shimokitayama.nara.jp":true,"shinjo.nara.jp":true,"soni.nara.jp":true,"takatori.nara.jp":true,"tawaramoto.nara.jp":true,"tenkawa.nara.jp":true,"tenri.nara.jp":true,"uda.nara.jp":true,"yamatokoriyama.nara.jp":true,"yamatotakada.nara.jp":true,"yamazoe.nara.jp":true,"yoshino.nara.jp":true,"aga.niigata.jp":true,"agano.niigata.jp":true,"gosen.niigata.jp":true,"itoigawa.niigata.jp":true,"izumozaki.niigata.jp":true,"joetsu.niigata.jp":true,"kamo.niigata.jp":true,"kariwa.niigata.jp":true,"kashiwazaki.niigata.jp":true,"minamiuonuma.niigata.jp":true,"mitsuke.niigata.jp":true,"muika.niigata.jp":true,"murakami.niigata.jp":true,"myoko.niigata.jp":true,"nagaoka.niigata.jp":true,"niigata.niigata.jp":true,"ojiya.niigata.jp":true,"omi.niigata.jp":true,"sado.niigata.jp":true,"sanjo.niigata.jp":true,"seiro.niigata.jp":true,"seirou.niigata.jp":true,"sekikawa.niigata.jp":true,"shibata.niigata.jp":true,"tagami.niigata.jp":true,"tainai.niigata.jp":true,"tochio.niigata.jp":true,"tokamachi.niigata.jp":true,"tsubame.niigata.jp":true,"tsunan.niigata.jp":true,"uonuma.niigata.jp":true,"yahiko.niigata.jp":true,"yoita.niigata.jp":true,"yuzawa.niigata.jp":true,"beppu.oita.jp":true,"bungoono.oita.jp":true,"bungotakada.oita.jp":true,"hasama.oita.jp":true,"hiji.oita.jp":true,"himeshima.oita.jp":true,"hita.oita.jp":true,"kamitsue.oita.jp":true,"kokonoe.oita.jp":true,"kuju.oita.jp":true,"kunisaki.oita.jp":true,"kusu.oita.jp":true,"oita.oita.jp":true,"saiki.oita.jp":true,"taketa.oita.jp":true,"tsukumi.oita.jp":true,"usa.oita.jp":true,"usuki.oita.jp":true,"yufu.oita.jp":true,"akaiwa.okayama.jp":true,"asakuchi.okayama.jp":true,"bizen.okayama.jp":true,"hayashima.okayama.jp":true,"ibara.okayama.jp":true,"kagamino.okayama.jp":true,"kasaoka.okayama.jp":true,"kibichuo.okayama.jp":true,"kumenan.okayama.jp":true,"kurashiki.okayama.jp":true,"maniwa.okayama.jp":true,"misaki.okayama.jp":true,"nagi.okayama.jp":true,"niimi.okayama.jp":true,"nishiawakura.okayama.jp":true,"okayama.okayama.jp":true,"satosho.okayama.jp":true,"setouchi.okayama.jp":true,"shinjo.okayama.jp":true,"shoo.okayama.jp":true,"soja.okayama.jp":true,"takahashi.okayama.jp":true,"tamano.okayama.jp":true,"tsuyama.okayama.jp":true,"wake.okayama.jp":true,"yakage.okayama.jp":true,"aguni.okinawa.jp":true,"ginowan.okinawa.jp":true,"ginoza.okinawa.jp":true,"gushikami.okinawa.jp":true,"haebaru.okinawa.jp":true,"higashi.okinawa.jp":true,"hirara.okinawa.jp":true,"iheya.okinawa.jp":true,"ishigaki.okinawa.jp":true,"ishikawa.okinawa.jp":true,"itoman.okinawa.jp":true,"izena.okinawa.jp":true,"kadena.okinawa.jp":true,"kin.okinawa.jp":true,"kitadaito.okinawa.jp":true,"kitanakagusuku.okinawa.jp":true,"kumejima.okinawa.jp":true,"kunigami.okinawa.jp":true,"minamidaito.okinawa.jp":true,"motobu.okinawa.jp":true,"nago.okinawa.jp":true,"naha.okinawa.jp":true,"nakagusuku.okinawa.jp":true,"nakijin.okinawa.jp":true,"nanjo.okinawa.jp":true,"nishihara.okinawa.jp":true,"ogimi.okinawa.jp":true,"okinawa.okinawa.jp":true,"onna.okinawa.jp":true,"shimoji.okinawa.jp":true,"taketomi.okinawa.jp":true,"tarama.okinawa.jp":true,"tokashiki.okinawa.jp":true,"tomigusuku.okinawa.jp":true,"tonaki.okinawa.jp":true,"urasoe.okinawa.jp":true,"uruma.okinawa.jp":true,"yaese.okinawa.jp":true,"yomitan.okinawa.jp":true,"yonabaru.okinawa.jp":true,"yonaguni.okinawa.jp":true,"zamami.okinawa.jp":true,"abeno.osaka.jp":true,"chihayaakasaka.osaka.jp":true,"chuo.osaka.jp":true,"daito.osaka.jp":true,"fujiidera.osaka.jp":true,"habikino.osaka.jp":true,"hannan.osaka.jp":true,"higashiosaka.osaka.jp":true,"higashisumiyoshi.osaka.jp":true,"higashiyodogawa.osaka.jp":true,"hirakata.osaka.jp":true,"ibaraki.osaka.jp":true,"ikeda.osaka.jp":true,"izumi.osaka.jp":true,"izumiotsu.osaka.jp":true,"izumisano.osaka.jp":true,"kadoma.osaka.jp":true,"kaizuka.osaka.jp":true,"kanan.osaka.jp":true,"kashiwara.osaka.jp":true,"katano.osaka.jp":true,"kawachinagano.osaka.jp":true,"kishiwada.osaka.jp":true,"kita.osaka.jp":true,"kumatori.osaka.jp":true,"matsubara.osaka.jp":true,"minato.osaka.jp":true,"minoh.osaka.jp":true,"misaki.osaka.jp":true,"moriguchi.osaka.jp":true,"neyagawa.osaka.jp":true,"nishi.osaka.jp":true,"nose.osaka.jp":true,"osakasayama.osaka.jp":true,"sakai.osaka.jp":true,"sayama.osaka.jp":true,"sennan.osaka.jp":true,"settsu.osaka.jp":true,"shijonawate.osaka.jp":true,"shimamoto.osaka.jp":true,"suita.osaka.jp":true,"tadaoka.osaka.jp":true,"taishi.osaka.jp":true,"tajiri.osaka.jp":true,"takaishi.osaka.jp":true,"takatsuki.osaka.jp":true,"tondabayashi.osaka.jp":true,"toyonaka.osaka.jp":true,"toyono.osaka.jp":true,"yao.osaka.jp":true,"ariake.saga.jp":true,"arita.saga.jp":true,"fukudomi.saga.jp":true,"genkai.saga.jp":true,"hamatama.saga.jp":true,"hizen.saga.jp":true,"imari.saga.jp":true,"kamimine.saga.jp":true,"kanzaki.saga.jp":true,"karatsu.saga.jp":true,"kashima.saga.jp":true,"kitagata.saga.jp":true,"kitahata.saga.jp":true,"kiyama.saga.jp":true,"kouhoku.saga.jp":true,"kyuragi.saga.jp":true,"nishiarita.saga.jp":true,"ogi.saga.jp":true,"omachi.saga.jp":true,"ouchi.saga.jp":true,"saga.saga.jp":true,"shiroishi.saga.jp":true,"taku.saga.jp":true,"tara.saga.jp":true,"tosu.saga.jp":true,"yoshinogari.saga.jp":true,"arakawa.saitama.jp":true,"asaka.saitama.jp":true,"chichibu.saitama.jp":true,"fujimi.saitama.jp":true,"fujimino.saitama.jp":true,"fukaya.saitama.jp":true,"hanno.saitama.jp":true,"hanyu.saitama.jp":true,"hasuda.saitama.jp":true,"hatogaya.saitama.jp":true,"hatoyama.saitama.jp":true,"hidaka.saitama.jp":true,"higashichichibu.saitama.jp":true,"higashimatsuyama.saitama.jp":true,"honjo.saitama.jp":true,"ina.saitama.jp":true,"iruma.saitama.jp":true,"iwatsuki.saitama.jp":true,"kamiizumi.saitama.jp":true,"kamikawa.saitama.jp":true,"kamisato.saitama.jp":true,"kasukabe.saitama.jp":true,"kawagoe.saitama.jp":true,"kawaguchi.saitama.jp":true,"kawajima.saitama.jp":true,"kazo.saitama.jp":true,"kitamoto.saitama.jp":true,"koshigaya.saitama.jp":true,"kounosu.saitama.jp":true,"kuki.saitama.jp":true,"kumagaya.saitama.jp":true,"matsubushi.saitama.jp":true,"minano.saitama.jp":true,"misato.saitama.jp":true,"miyashiro.saitama.jp":true,"miyoshi.saitama.jp":true,"moroyama.saitama.jp":true,"nagatoro.saitama.jp":true,"namegawa.saitama.jp":true,"niiza.saitama.jp":true,"ogano.saitama.jp":true,"ogawa.saitama.jp":true,"ogose.saitama.jp":true,"okegawa.saitama.jp":true,"omiya.saitama.jp":true,"otaki.saitama.jp":true,"ranzan.saitama.jp":true,"ryokami.saitama.jp":true,"saitama.saitama.jp":true,"sakado.saitama.jp":true,"satte.saitama.jp":true,"sayama.saitama.jp":true,"shiki.saitama.jp":true,"shiraoka.saitama.jp":true,"soka.saitama.jp":true,"sugito.saitama.jp":true,"toda.saitama.jp":true,"tokigawa.saitama.jp":true,"tokorozawa.saitama.jp":true,"tsurugashima.saitama.jp":true,"urawa.saitama.jp":true,"warabi.saitama.jp":true,"yashio.saitama.jp":true,"yokoze.saitama.jp":true,"yono.saitama.jp":true,"yorii.saitama.jp":true,"yoshida.saitama.jp":true,"yoshikawa.saitama.jp":true,"yoshimi.saitama.jp":true,"aisho.shiga.jp":true,"gamo.shiga.jp":true,"higashiomi.shiga.jp":true,"hikone.shiga.jp":true,"koka.shiga.jp":true,"konan.shiga.jp":true,"kosei.shiga.jp":true,"koto.shiga.jp":true,"kusatsu.shiga.jp":true,"maibara.shiga.jp":true,"moriyama.shiga.jp":true,"nagahama.shiga.jp":true,"nishiazai.shiga.jp":true,"notogawa.shiga.jp":true,"omihachiman.shiga.jp":true,"otsu.shiga.jp":true,"ritto.shiga.jp":true,"ryuoh.shiga.jp":true,"takashima.shiga.jp":true,"takatsuki.shiga.jp":true,"torahime.shiga.jp":true,"toyosato.shiga.jp":true,"yasu.shiga.jp":true,"akagi.shimane.jp":true,"ama.shimane.jp":true,"gotsu.shimane.jp":true,"hamada.shimane.jp":true,"higashiizumo.shimane.jp":true,"hikawa.shimane.jp":true,"hikimi.shimane.jp":true,"izumo.shimane.jp":true,"kakinoki.shimane.jp":true,"masuda.shimane.jp":true,"matsue.shimane.jp":true,"misato.shimane.jp":true,"nishinoshima.shimane.jp":true,"ohda.shimane.jp":true,"okinoshima.shimane.jp":true,"okuizumo.shimane.jp":true,"shimane.shimane.jp":true,"tamayu.shimane.jp":true,"tsuwano.shimane.jp":true,"unnan.shimane.jp":true,"yakumo.shimane.jp":true,"yasugi.shimane.jp":true,"yatsuka.shimane.jp":true,"arai.shizuoka.jp":true,"atami.shizuoka.jp":true,"fuji.shizuoka.jp":true,"fujieda.shizuoka.jp":true,"fujikawa.shizuoka.jp":true,"fujinomiya.shizuoka.jp":true,"fukuroi.shizuoka.jp":true,"gotemba.shizuoka.jp":true,"haibara.shizuoka.jp":true,"hamamatsu.shizuoka.jp":true,"higashiizu.shizuoka.jp":true,"ito.shizuoka.jp":true,"iwata.shizuoka.jp":true,"izu.shizuoka.jp":true,"izunokuni.shizuoka.jp":true,"kakegawa.shizuoka.jp":true,"kannami.shizuoka.jp":true,"kawanehon.shizuoka.jp":true,"kawazu.shizuoka.jp":true,"kikugawa.shizuoka.jp":true,"kosai.shizuoka.jp":true,"makinohara.shizuoka.jp":true,"matsuzaki.shizuoka.jp":true,"minamiizu.shizuoka.jp":true,"mishima.shizuoka.jp":true,"morimachi.shizuoka.jp":true,"nishiizu.shizuoka.jp":true,"numazu.shizuoka.jp":true,"omaezaki.shizuoka.jp":true,"shimada.shizuoka.jp":true,"shimizu.shizuoka.jp":true,"shimoda.shizuoka.jp":true,"shizuoka.shizuoka.jp":true,"susono.shizuoka.jp":true,"yaizu.shizuoka.jp":true,"yoshida.shizuoka.jp":true,"ashikaga.tochigi.jp":true,"bato.tochigi.jp":true,"haga.tochigi.jp":true,"ichikai.tochigi.jp":true,"iwafune.tochigi.jp":true,"kaminokawa.tochigi.jp":true,"kanuma.tochigi.jp":true,"karasuyama.tochigi.jp":true,"kuroiso.tochigi.jp":true,"mashiko.tochigi.jp":true,"mibu.tochigi.jp":true,"moka.tochigi.jp":true,"motegi.tochigi.jp":true,"nasu.tochigi.jp":true,"nasushiobara.tochigi.jp":true,"nikko.tochigi.jp":true,"nishikata.tochigi.jp":true,"nogi.tochigi.jp":true,"ohira.tochigi.jp":true,"ohtawara.tochigi.jp":true,"oyama.tochigi.jp":true,"sakura.tochigi.jp":true,"sano.tochigi.jp":true,"shimotsuke.tochigi.jp":true,"shioya.tochigi.jp":true,"takanezawa.tochigi.jp":true,"tochigi.tochigi.jp":true,"tsuga.tochigi.jp":true,"ujiie.tochigi.jp":true,"utsunomiya.tochigi.jp":true,"yaita.tochigi.jp":true,"aizumi.tokushima.jp":true,"anan.tokushima.jp":true,"ichiba.tokushima.jp":true,"itano.tokushima.jp":true,"kainan.tokushima.jp":true,"komatsushima.tokushima.jp":true,"matsushige.tokushima.jp":true,"mima.tokushima.jp":true,"minami.tokushima.jp":true,"miyoshi.tokushima.jp":true,"mugi.tokushima.jp":true,"nakagawa.tokushima.jp":true,"naruto.tokushima.jp":true,"sanagochi.tokushima.jp":true,"shishikui.tokushima.jp":true,"tokushima.tokushima.jp":true,"wajiki.tokushima.jp":true,"adachi.tokyo.jp":true,"akiruno.tokyo.jp":true,"akishima.tokyo.jp":true,"aogashima.tokyo.jp":true,"arakawa.tokyo.jp":true,"bunkyo.tokyo.jp":true,"chiyoda.tokyo.jp":true,"chofu.tokyo.jp":true,"chuo.tokyo.jp":true,"edogawa.tokyo.jp":true,"fuchu.tokyo.jp":true,"fussa.tokyo.jp":true,"hachijo.tokyo.jp":true,"hachioji.tokyo.jp":true,"hamura.tokyo.jp":true,"higashikurume.tokyo.jp":true,"higashimurayama.tokyo.jp":true,"higashiyamato.tokyo.jp":true,"hino.tokyo.jp":true,"hinode.tokyo.jp":true,"hinohara.tokyo.jp":true,"inagi.tokyo.jp":true,"itabashi.tokyo.jp":true,"katsushika.tokyo.jp":true,"kita.tokyo.jp":true,"kiyose.tokyo.jp":true,"kodaira.tokyo.jp":true,"koganei.tokyo.jp":true,"kokubunji.tokyo.jp":true,"komae.tokyo.jp":true,"koto.tokyo.jp":true,"kouzushima.tokyo.jp":true,"kunitachi.tokyo.jp":true,"machida.tokyo.jp":true,"meguro.tokyo.jp":true,"minato.tokyo.jp":true,"mitaka.tokyo.jp":true,"mizuho.tokyo.jp":true,"musashimurayama.tokyo.jp":true,"musashino.tokyo.jp":true,"nakano.tokyo.jp":true,"nerima.tokyo.jp":true,"ogasawara.tokyo.jp":true,"okutama.tokyo.jp":true,"ome.tokyo.jp":true,"oshima.tokyo.jp":true,"ota.tokyo.jp":true,"setagaya.tokyo.jp":true,"shibuya.tokyo.jp":true,"shinagawa.tokyo.jp":true,"shinjuku.tokyo.jp":true,"suginami.tokyo.jp":true,"sumida.tokyo.jp":true,"tachikawa.tokyo.jp":true,"taito.tokyo.jp":true,"tama.tokyo.jp":true,"toshima.tokyo.jp":true,"chizu.tottori.jp":true,"hino.tottori.jp":true,"kawahara.tottori.jp":true,"koge.tottori.jp":true,"kotoura.tottori.jp":true,"misasa.tottori.jp":true,"nanbu.tottori.jp":true,"nichinan.tottori.jp":true,"sakaiminato.tottori.jp":true,"tottori.tottori.jp":true,"wakasa.tottori.jp":true,"yazu.tottori.jp":true,"yonago.tottori.jp":true,"asahi.toyama.jp":true,"fuchu.toyama.jp":true,"fukumitsu.toyama.jp":true,"funahashi.toyama.jp":true,"himi.toyama.jp":true,"imizu.toyama.jp":true,"inami.toyama.jp":true,"johana.toyama.jp":true,"kamiichi.toyama.jp":true,"kurobe.toyama.jp":true,"nakaniikawa.toyama.jp":true,"namerikawa.toyama.jp":true,"nanto.toyama.jp":true,"nyuzen.toyama.jp":true,"oyabe.toyama.jp":true,"taira.toyama.jp":true,"takaoka.toyama.jp":true,"tateyama.toyama.jp":true,"toga.toyama.jp":true,"tonami.toyama.jp":true,"toyama.toyama.jp":true,"unazuki.toyama.jp":true,"uozu.toyama.jp":true,"yamada.toyama.jp":true,"arida.wakayama.jp":true,"aridagawa.wakayama.jp":true,"gobo.wakayama.jp":true,"hashimoto.wakayama.jp":true,"hidaka.wakayama.jp":true,"hirogawa.wakayama.jp":true,"inami.wakayama.jp":true,"iwade.wakayama.jp":true,"kainan.wakayama.jp":true,"kamitonda.wakayama.jp":true,"katsuragi.wakayama.jp":true,"kimino.wakayama.jp":true,"kinokawa.wakayama.jp":true,"kitayama.wakayama.jp":true,"koya.wakayama.jp":true,"koza.wakayama.jp":true,"kozagawa.wakayama.jp":true,"kudoyama.wakayama.jp":true,"kushimoto.wakayama.jp":true,"mihama.wakayama.jp":true,"misato.wakayama.jp":true,"nachikatsuura.wakayama.jp":true,"shingu.wakayama.jp":true,"shirahama.wakayama.jp":true,"taiji.wakayama.jp":true,"tanabe.wakayama.jp":true,"wakayama.wakayama.jp":true,"yuasa.wakayama.jp":true,"yura.wakayama.jp":true,"asahi.yamagata.jp":true,"funagata.yamagata.jp":true,"higashine.yamagata.jp":true,"iide.yamagata.jp":true,"kahoku.yamagata.jp":true,"kaminoyama.yamagata.jp":true,"kaneyama.yamagata.jp":true,"kawanishi.yamagata.jp":true,"mamurogawa.yamagata.jp":true,"mikawa.yamagata.jp":true,"murayama.yamagata.jp":true,"nagai.yamagata.jp":true,"nakayama.yamagata.jp":true,"nanyo.yamagata.jp":true,"nishikawa.yamagata.jp":true,"obanazawa.yamagata.jp":true,"oe.yamagata.jp":true,"oguni.yamagata.jp":true,"ohkura.yamagata.jp":true,"oishida.yamagata.jp":true,"sagae.yamagata.jp":true,"sakata.yamagata.jp":true,"sakegawa.yamagata.jp":true,"shinjo.yamagata.jp":true,"shirataka.yamagata.jp":true,"shonai.yamagata.jp":true,"takahata.yamagata.jp":true,"tendo.yamagata.jp":true,"tozawa.yamagata.jp":true,"tsuruoka.yamagata.jp":true,"yamagata.yamagata.jp":true,"yamanobe.yamagata.jp":true,"yonezawa.yamagata.jp":true,"yuza.yamagata.jp":true,"abu.yamaguchi.jp":true,"hagi.yamaguchi.jp":true,"hikari.yamaguchi.jp":true,"hofu.yamaguchi.jp":true,"iwakuni.yamaguchi.jp":true,"kudamatsu.yamaguchi.jp":true,"mitou.yamaguchi.jp":true,"nagato.yamaguchi.jp":true,"oshima.yamaguchi.jp":true,"shimonoseki.yamaguchi.jp":true,"shunan.yamaguchi.jp":true,"tabuse.yamaguchi.jp":true,"tokuyama.yamaguchi.jp":true,"toyota.yamaguchi.jp":true,"ube.yamaguchi.jp":true,"yuu.yamaguchi.jp":true,"chuo.yamanashi.jp":true,"doshi.yamanashi.jp":true,"fuefuki.yamanashi.jp":true,"fujikawa.yamanashi.jp":true,"fujikawaguchiko.yamanashi.jp":true,"fujiyoshida.yamanashi.jp":true,"hayakawa.yamanashi.jp":true,"hokuto.yamanashi.jp":true,"ichikawamisato.yamanashi.jp":true,"kai.yamanashi.jp":true,"kofu.yamanashi.jp":true,"koshu.yamanashi.jp":true,"kosuge.yamanashi.jp":true,"minami-alps.yamanashi.jp":true,"minobu.yamanashi.jp":true,"nakamichi.yamanashi.jp":true,"nanbu.yamanashi.jp":true,"narusawa.yamanashi.jp":true,"nirasaki.yamanashi.jp":true,"nishikatsura.yamanashi.jp":true,"oshino.yamanashi.jp":true,"otsuki.yamanashi.jp":true,"showa.yamanashi.jp":true,"tabayama.yamanashi.jp":true,"tsuru.yamanashi.jp":true,"uenohara.yamanashi.jp":true,"yamanakako.yamanashi.jp":true,"yamanashi.yamanashi.jp":true,"*.ke":true,"kg":true,"org.kg":true,"net.kg":true,"com.kg":true,"edu.kg":true,"gov.kg":true,"mil.kg":true,"*.kh":true,"ki":true,"edu.ki":true,"biz.ki":true,"net.ki":true,"org.ki":true,"gov.ki":true,"info.ki":true,"com.ki":true,"km":true,"org.km":true,"nom.km":true,"gov.km":true,"prd.km":true,"tm.km":true,"edu.km":true,"mil.km":true,"ass.km":true,"com.km":true,"coop.km":true,"asso.km":true,"presse.km":true,"medecin.km":true,"notaires.km":true,"pharmaciens.km":true,"veterinaire.km":true,"gouv.km":true,"kn":true,"net.kn":true,"org.kn":true,"edu.kn":true,"gov.kn":true,"kp":true,"com.kp":true,"edu.kp":true,"gov.kp":true,"org.kp":true,"rep.kp":true,"tra.kp":true,"kr":true,"ac.kr":true,"co.kr":true,"es.kr":true,"go.kr":true,"hs.kr":true,"kg.kr":true,"mil.kr":true,"ms.kr":true,"ne.kr":true,"or.kr":true,"pe.kr":true,"re.kr":true,"sc.kr":true,"busan.kr":true,"chungbuk.kr":true,"chungnam.kr":true,"daegu.kr":true,"daejeon.kr":true,"gangwon.kr":true,"gwangju.kr":true,"gyeongbuk.kr":true,"gyeonggi.kr":true,"gyeongnam.kr":true,"incheon.kr":true,"jeju.kr":true,"jeonbuk.kr":true,"jeonnam.kr":true,"seoul.kr":true,"ulsan.kr":true,"*.kw":true,"ky":true,"edu.ky":true,"gov.ky":true,"com.ky":true,"org.ky":true,"net.ky":true,"kz":true,"org.kz":true,"edu.kz":true,"net.kz":true,"gov.kz":true,"mil.kz":true,"com.kz":true,"la":true,"int.la":true,"net.la":true,"info.la":true,"edu.la":true,"gov.la":true,"per.la":true,"com.la":true,"org.la":true,"lb":true,"com.lb":true,"edu.lb":true,"gov.lb":true,"net.lb":true,"org.lb":true,"lc":true,"com.lc":true,"net.lc":true,"co.lc":true,"org.lc":true,"edu.lc":true,"gov.lc":true,"li":true,"lk":true,"gov.lk":true,"sch.lk":true,"net.lk":true,"int.lk":true,"com.lk":true,"org.lk":true,"edu.lk":true,"ngo.lk":true,"soc.lk":true,"web.lk":true,"ltd.lk":true,"assn.lk":true,"grp.lk":true,"hotel.lk":true,"lr":true,"com.lr":true,"edu.lr":true,"gov.lr":true,"org.lr":true,"net.lr":true,"ls":true,"co.ls":true,"org.ls":true,"lt":true,"gov.lt":true,"lu":true,"lv":true,"com.lv":true,"edu.lv":true,"gov.lv":true,"org.lv":true,"mil.lv":true,"id.lv":true,"net.lv":true,"asn.lv":true,"conf.lv":true,"ly":true,"com.ly":true,"net.ly":true,"gov.ly":true,"plc.ly":true,"edu.ly":true,"sch.ly":true,"med.ly":true,"org.ly":true,"id.ly":true,"ma":true,"co.ma":true,"net.ma":true,"gov.ma":true,"org.ma":true,"ac.ma":true,"press.ma":true,"mc":true,"tm.mc":true,"asso.mc":true,"md":true,"me":true,"co.me":true,"net.me":true,"org.me":true,"edu.me":true,"ac.me":true,"gov.me":true,"its.me":true,"priv.me":true,"mg":true,"org.mg":true,"nom.mg":true,"gov.mg":true,"prd.mg":true,"tm.mg":true,"edu.mg":true,"mil.mg":true,"com.mg":true,"mh":true,"mil":true,"mk":true,"com.mk":true,"org.mk":true,"net.mk":true,"edu.mk":true,"gov.mk":true,"inf.mk":true,"name.mk":true,"ml":true,"com.ml":true,"edu.ml":true,"gouv.ml":true,"gov.ml":true,"net.ml":true,"org.ml":true,"presse.ml":true,"*.mm":true,"mn":true,"gov.mn":true,"edu.mn":true,"org.mn":true,"mo":true,"com.mo":true,"net.mo":true,"org.mo":true,"edu.mo":true,"gov.mo":true,"mobi":true,"mp":true,"mq":true,"mr":true,"gov.mr":true,"ms":true,"com.ms":true,"edu.ms":true,"gov.ms":true,"net.ms":true,"org.ms":true,"mt":true,"com.mt":true,"edu.mt":true,"net.mt":true,"org.mt":true,"mu":true,"com.mu":true,"net.mu":true,"org.mu":true,"gov.mu":true,"ac.mu":true,"co.mu":true,"or.mu":true,"museum":true,"academy.museum":true,"agriculture.museum":true,"air.museum":true,"airguard.museum":true,"alabama.museum":true,"alaska.museum":true,"amber.museum":true,"ambulance.museum":true,"american.museum":true,"americana.museum":true,"americanantiques.museum":true,"americanart.museum":true,"amsterdam.museum":true,"and.museum":true,"annefrank.museum":true,"anthro.museum":true,"anthropology.museum":true,"antiques.museum":true,"aquarium.museum":true,"arboretum.museum":true,"archaeological.museum":true,"archaeology.museum":true,"architecture.museum":true,"art.museum":true,"artanddesign.museum":true,"artcenter.museum":true,"artdeco.museum":true,"arteducation.museum":true,"artgallery.museum":true,"arts.museum":true,"artsandcrafts.museum":true,"asmatart.museum":true,"assassination.museum":true,"assisi.museum":true,"association.museum":true,"astronomy.museum":true,"atlanta.museum":true,"austin.museum":true,"australia.museum":true,"automotive.museum":true,"aviation.museum":true,"axis.museum":true,"badajoz.museum":true,"baghdad.museum":true,"bahn.museum":true,"bale.museum":true,"baltimore.museum":true,"barcelona.museum":true,"baseball.museum":true,"basel.museum":true,"baths.museum":true,"bauern.museum":true,"beauxarts.museum":true,"beeldengeluid.museum":true,"bellevue.museum":true,"bergbau.museum":true,"berkeley.museum":true,"berlin.museum":true,"bern.museum":true,"bible.museum":true,"bilbao.museum":true,"bill.museum":true,"birdart.museum":true,"birthplace.museum":true,"bonn.museum":true,"boston.museum":true,"botanical.museum":true,"botanicalgarden.museum":true,"botanicgarden.museum":true,"botany.museum":true,"brandywinevalley.museum":true,"brasil.museum":true,"bristol.museum":true,"british.museum":true,"britishcolumbia.museum":true,"broadcast.museum":true,"brunel.museum":true,"brussel.museum":true,"brussels.museum":true,"bruxelles.museum":true,"building.museum":true,"burghof.museum":true,"bus.museum":true,"bushey.museum":true,"cadaques.museum":true,"california.museum":true,"cambridge.museum":true,"can.museum":true,"canada.museum":true,"capebreton.museum":true,"carrier.museum":true,"cartoonart.museum":true,"casadelamoneda.museum":true,"castle.museum":true,"castres.museum":true,"celtic.museum":true,"center.museum":true,"chattanooga.museum":true,"cheltenham.museum":true,"chesapeakebay.museum":true,"chicago.museum":true,"children.museum":true,"childrens.museum":true,"childrensgarden.museum":true,"chiropractic.museum":true,"chocolate.museum":true,"christiansburg.museum":true,"cincinnati.museum":true,"cinema.museum":true,"circus.museum":true,"civilisation.museum":true,"civilization.museum":true,"civilwar.museum":true,"clinton.museum":true,"clock.museum":true,"coal.museum":true,"coastaldefence.museum":true,"cody.museum":true,"coldwar.museum":true,"collection.museum":true,"colonialwilliamsburg.museum":true,"coloradoplateau.museum":true,"columbia.museum":true,"columbus.museum":true,"communication.museum":true,"communications.museum":true,"community.museum":true,"computer.museum":true,"computerhistory.museum":true,"xn--comunicaes-v6a2o.museum":true,"contemporary.museum":true,"contemporaryart.museum":true,"convent.museum":true,"copenhagen.museum":true,"corporation.museum":true,"xn--correios-e-telecomunicaes-ghc29a.museum":true,"corvette.museum":true,"costume.museum":true,"countryestate.museum":true,"county.museum":true,"crafts.museum":true,"cranbrook.museum":true,"creation.museum":true,"cultural.museum":true,"culturalcenter.museum":true,"culture.museum":true,"cyber.museum":true,"cymru.museum":true,"dali.museum":true,"dallas.museum":true,"database.museum":true,"ddr.museum":true,"decorativearts.museum":true,"delaware.museum":true,"delmenhorst.museum":true,"denmark.museum":true,"depot.museum":true,"design.museum":true,"detroit.museum":true,"dinosaur.museum":true,"discovery.museum":true,"dolls.museum":true,"donostia.museum":true,"durham.museum":true,"eastafrica.museum":true,"eastcoast.museum":true,"education.museum":true,"educational.museum":true,"egyptian.museum":true,"eisenbahn.museum":true,"elburg.museum":true,"elvendrell.museum":true,"embroidery.museum":true,"encyclopedic.museum":true,"england.museum":true,"entomology.museum":true,"environment.museum":true,"environmentalconservation.museum":true,"epilepsy.museum":true,"essex.museum":true,"estate.museum":true,"ethnology.museum":true,"exeter.museum":true,"exhibition.museum":true,"family.museum":true,"farm.museum":true,"farmequipment.museum":true,"farmers.museum":true,"farmstead.museum":true,"field.museum":true,"figueres.museum":true,"filatelia.museum":true,"film.museum":true,"fineart.museum":true,"finearts.museum":true,"finland.museum":true,"flanders.museum":true,"florida.museum":true,"force.museum":true,"fortmissoula.museum":true,"fortworth.museum":true,"foundation.museum":true,"francaise.museum":true,"frankfurt.museum":true,"franziskaner.museum":true,"freemasonry.museum":true,"freiburg.museum":true,"fribourg.museum":true,"frog.museum":true,"fundacio.museum":true,"furniture.museum":true,"gallery.museum":true,"garden.museum":true,"gateway.museum":true,"geelvinck.museum":true,"gemological.museum":true,"geology.museum":true,"georgia.museum":true,"giessen.museum":true,"glas.museum":true,"glass.museum":true,"gorge.museum":true,"grandrapids.museum":true,"graz.museum":true,"guernsey.museum":true,"halloffame.museum":true,"hamburg.museum":true,"handson.museum":true,"harvestcelebration.museum":true,"hawaii.museum":true,"health.museum":true,"heimatunduhren.museum":true,"hellas.museum":true,"helsinki.museum":true,"hembygdsforbund.museum":true,"heritage.museum":true,"histoire.museum":true,"historical.museum":true,"historicalsociety.museum":true,"historichouses.museum":true,"historisch.museum":true,"historisches.museum":true,"history.museum":true,"historyofscience.museum":true,"horology.museum":true,"house.museum":true,"humanities.museum":true,"illustration.museum":true,"imageandsound.museum":true,"indian.museum":true,"indiana.museum":true,"indianapolis.museum":true,"indianmarket.museum":true,"intelligence.museum":true,"interactive.museum":true,"iraq.museum":true,"iron.museum":true,"isleofman.museum":true,"jamison.museum":true,"jefferson.museum":true,"jerusalem.museum":true,"jewelry.museum":true,"jewish.museum":true,"jewishart.museum":true,"jfk.museum":true,"journalism.museum":true,"judaica.museum":true,"judygarland.museum":true,"juedisches.museum":true,"juif.museum":true,"karate.museum":true,"karikatur.museum":true,"kids.museum":true,"koebenhavn.museum":true,"koeln.museum":true,"kunst.museum":true,"kunstsammlung.museum":true,"kunstunddesign.museum":true,"labor.museum":true,"labour.museum":true,"lajolla.museum":true,"lancashire.museum":true,"landes.museum":true,"lans.museum":true,"xn--lns-qla.museum":true,"larsson.museum":true,"lewismiller.museum":true,"lincoln.museum":true,"linz.museum":true,"living.museum":true,"livinghistory.museum":true,"localhistory.museum":true,"london.museum":true,"losangeles.museum":true,"louvre.museum":true,"loyalist.museum":true,"lucerne.museum":true,"luxembourg.museum":true,"luzern.museum":true,"mad.museum":true,"madrid.museum":true,"mallorca.museum":true,"manchester.museum":true,"mansion.museum":true,"mansions.museum":true,"manx.museum":true,"marburg.museum":true,"maritime.museum":true,"maritimo.museum":true,"maryland.museum":true,"marylhurst.museum":true,"media.museum":true,"medical.museum":true,"medizinhistorisches.museum":true,"meeres.museum":true,"memorial.museum":true,"mesaverde.museum":true,"michigan.museum":true,"midatlantic.museum":true,"military.museum":true,"mill.museum":true,"miners.museum":true,"mining.museum":true,"minnesota.museum":true,"missile.museum":true,"missoula.museum":true,"modern.museum":true,"moma.museum":true,"money.museum":true,"monmouth.museum":true,"monticello.museum":true,"montreal.museum":true,"moscow.museum":true,"motorcycle.museum":true,"muenchen.museum":true,"muenster.museum":true,"mulhouse.museum":true,"muncie.museum":true,"museet.museum":true,"museumcenter.museum":true,"museumvereniging.museum":true,"music.museum":true,"national.museum":true,"nationalfirearms.museum":true,"nationalheritage.museum":true,"nativeamerican.museum":true,"naturalhistory.museum":true,"naturalhistorymuseum.museum":true,"naturalsciences.museum":true,"nature.museum":true,"naturhistorisches.museum":true,"natuurwetenschappen.museum":true,"naumburg.museum":true,"naval.museum":true,"nebraska.museum":true,"neues.museum":true,"newhampshire.museum":true,"newjersey.museum":true,"newmexico.museum":true,"newport.museum":true,"newspaper.museum":true,"newyork.museum":true,"niepce.museum":true,"norfolk.museum":true,"north.museum":true,"nrw.museum":true,"nuernberg.museum":true,"nuremberg.museum":true,"nyc.museum":true,"nyny.museum":true,"oceanographic.museum":true,"oceanographique.museum":true,"omaha.museum":true,"online.museum":true,"ontario.museum":true,"openair.museum":true,"oregon.museum":true,"oregontrail.museum":true,"otago.museum":true,"oxford.museum":true,"pacific.museum":true,"paderborn.museum":true,"palace.museum":true,"paleo.museum":true,"palmsprings.museum":true,"panama.museum":true,"paris.museum":true,"pasadena.museum":true,"pharmacy.museum":true,"philadelphia.museum":true,"philadelphiaarea.museum":true,"philately.museum":true,"phoenix.museum":true,"photography.museum":true,"pilots.museum":true,"pittsburgh.museum":true,"planetarium.museum":true,"plantation.museum":true,"plants.museum":true,"plaza.museum":true,"portal.museum":true,"portland.museum":true,"portlligat.museum":true,"posts-and-telecommunications.museum":true,"preservation.museum":true,"presidio.museum":true,"press.museum":true,"project.museum":true,"public.museum":true,"pubol.museum":true,"quebec.museum":true,"railroad.museum":true,"railway.museum":true,"research.museum":true,"resistance.museum":true,"riodejaneiro.museum":true,"rochester.museum":true,"rockart.museum":true,"roma.museum":true,"russia.museum":true,"saintlouis.museum":true,"salem.museum":true,"salvadordali.museum":true,"salzburg.museum":true,"sandiego.museum":true,"sanfrancisco.museum":true,"santabarbara.museum":true,"santacruz.museum":true,"santafe.museum":true,"saskatchewan.museum":true,"satx.museum":true,"savannahga.museum":true,"schlesisches.museum":true,"schoenbrunn.museum":true,"schokoladen.museum":true,"school.museum":true,"schweiz.museum":true,"science.museum":true,"scienceandhistory.museum":true,"scienceandindustry.museum":true,"sciencecenter.museum":true,"sciencecenters.museum":true,"science-fiction.museum":true,"sciencehistory.museum":true,"sciences.museum":true,"sciencesnaturelles.museum":true,"scotland.museum":true,"seaport.museum":true,"settlement.museum":true,"settlers.museum":true,"shell.museum":true,"sherbrooke.museum":true,"sibenik.museum":true,"silk.museum":true,"ski.museum":true,"skole.museum":true,"society.museum":true,"sologne.museum":true,"soundandvision.museum":true,"southcarolina.museum":true,"southwest.museum":true,"space.museum":true,"spy.museum":true,"square.museum":true,"stadt.museum":true,"stalbans.museum":true,"starnberg.museum":true,"state.museum":true,"stateofdelaware.museum":true,"station.museum":true,"steam.museum":true,"steiermark.museum":true,"stjohn.museum":true,"stockholm.museum":true,"stpetersburg.museum":true,"stuttgart.museum":true,"suisse.museum":true,"surgeonshall.museum":true,"surrey.museum":true,"svizzera.museum":true,"sweden.museum":true,"sydney.museum":true,"tank.museum":true,"tcm.museum":true,"technology.museum":true,"telekommunikation.museum":true,"television.museum":true,"texas.museum":true,"textile.museum":true,"theater.museum":true,"time.museum":true,"timekeeping.museum":true,"topology.museum":true,"torino.museum":true,"touch.museum":true,"town.museum":true,"transport.museum":true,"tree.museum":true,"trolley.museum":true,"trust.museum":true,"trustee.museum":true,"uhren.museum":true,"ulm.museum":true,"undersea.museum":true,"university.museum":true,"usa.museum":true,"usantiques.museum":true,"usarts.museum":true,"uscountryestate.museum":true,"usculture.museum":true,"usdecorativearts.museum":true,"usgarden.museum":true,"ushistory.museum":true,"ushuaia.museum":true,"uslivinghistory.museum":true,"utah.museum":true,"uvic.museum":true,"valley.museum":true,"vantaa.museum":true,"versailles.museum":true,"viking.museum":true,"village.museum":true,"virginia.museum":true,"virtual.museum":true,"virtuel.museum":true,"vlaanderen.museum":true,"volkenkunde.museum":true,"wales.museum":true,"wallonie.museum":true,"war.museum":true,"washingtondc.museum":true,"watchandclock.museum":true,"watch-and-clock.museum":true,"western.museum":true,"westfalen.museum":true,"whaling.museum":true,"wildlife.museum":true,"williamsburg.museum":true,"windmill.museum":true,"workshop.museum":true,"york.museum":true,"yorkshire.museum":true,"yosemite.museum":true,"youth.museum":true,"zoological.museum":true,"zoology.museum":true,"xn--9dbhblg6di.museum":true,"xn--h1aegh.museum":true,"mv":true,"aero.mv":true,"biz.mv":true,"com.mv":true,"coop.mv":true,"edu.mv":true,"gov.mv":true,"info.mv":true,"int.mv":true,"mil.mv":true,"museum.mv":true,"name.mv":true,"net.mv":true,"org.mv":true,"pro.mv":true,"mw":true,"ac.mw":true,"biz.mw":true,"co.mw":true,"com.mw":true,"coop.mw":true,"edu.mw":true,"gov.mw":true,"int.mw":true,"museum.mw":true,"net.mw":true,"org.mw":true,"mx":true,"com.mx":true,"org.mx":true,"gob.mx":true,"edu.mx":true,"net.mx":true,"my":true,"com.my":true,"net.my":true,"org.my":true,"gov.my":true,"edu.my":true,"mil.my":true,"name.my":true,"*.mz":true,"teledata.mz":false,"na":true,"info.na":true,"pro.na":true,"name.na":true,"school.na":true,"or.na":true,"dr.na":true,"us.na":true,"mx.na":true,"ca.na":true,"in.na":true,"cc.na":true,"tv.na":true,"ws.na":true,"mobi.na":true,"co.na":true,"com.na":true,"org.na":true,"name":true,"nc":true,"asso.nc":true,"ne":true,"net":true,"nf":true,"com.nf":true,"net.nf":true,"per.nf":true,"rec.nf":true,"web.nf":true,"arts.nf":true,"firm.nf":true,"info.nf":true,"other.nf":true,"store.nf":true,"ng":true,"com.ng":true,"edu.ng":true,"name.ng":true,"net.ng":true,"org.ng":true,"sch.ng":true,"gov.ng":true,"mil.ng":true,"mobi.ng":true,"*.ni":true,"nl":true,"bv.nl":true,"no":true,"fhs.no":true,"vgs.no":true,"fylkesbibl.no":true,"folkebibl.no":true,"museum.no":true,"idrett.no":true,"priv.no":true,"mil.no":true,"stat.no":true,"dep.no":true,"kommune.no":true,"herad.no":true,"aa.no":true,"ah.no":true,"bu.no":true,"fm.no":true,"hl.no":true,"hm.no":true,"jan-mayen.no":true,"mr.no":true,"nl.no":true,"nt.no":true,"of.no":true,"ol.no":true,"oslo.no":true,"rl.no":true,"sf.no":true,"st.no":true,"svalbard.no":true,"tm.no":true,"tr.no":true,"va.no":true,"vf.no":true,"gs.aa.no":true,"gs.ah.no":true,"gs.bu.no":true,"gs.fm.no":true,"gs.hl.no":true,"gs.hm.no":true,"gs.jan-mayen.no":true,"gs.mr.no":true,"gs.nl.no":true,"gs.nt.no":true,"gs.of.no":true,"gs.ol.no":true,"gs.oslo.no":true,"gs.rl.no":true,"gs.sf.no":true,"gs.st.no":true,"gs.svalbard.no":true,"gs.tm.no":true,"gs.tr.no":true,"gs.va.no":true,"gs.vf.no":true,"akrehamn.no":true,"xn--krehamn-dxa.no":true,"algard.no":true,"xn--lgrd-poac.no":true,"arna.no":true,"brumunddal.no":true,"bryne.no":true,"bronnoysund.no":true,"xn--brnnysund-m8ac.no":true,"drobak.no":true,"xn--drbak-wua.no":true,"egersund.no":true,"fetsund.no":true,"floro.no":true,"xn--flor-jra.no":true,"fredrikstad.no":true,"hokksund.no":true,"honefoss.no":true,"xn--hnefoss-q1a.no":true,"jessheim.no":true,"jorpeland.no":true,"xn--jrpeland-54a.no":true,"kirkenes.no":true,"kopervik.no":true,"krokstadelva.no":true,"langevag.no":true,"xn--langevg-jxa.no":true,"leirvik.no":true,"mjondalen.no":true,"xn--mjndalen-64a.no":true,"mo-i-rana.no":true,"mosjoen.no":true,"xn--mosjen-eya.no":true,"nesoddtangen.no":true,"orkanger.no":true,"osoyro.no":true,"xn--osyro-wua.no":true,"raholt.no":true,"xn--rholt-mra.no":true,"sandnessjoen.no":true,"xn--sandnessjen-ogb.no":true,"skedsmokorset.no":true,"slattum.no":true,"spjelkavik.no":true,"stathelle.no":true,"stavern.no":true,"stjordalshalsen.no":true,"xn--stjrdalshalsen-sqb.no":true,"tananger.no":true,"tranby.no":true,"vossevangen.no":true,"afjord.no":true,"xn--fjord-lra.no":true,"agdenes.no":true,"al.no":true,"xn--l-1fa.no":true,"alesund.no":true,"xn--lesund-hua.no":true,"alstahaug.no":true,"alta.no":true,"xn--lt-liac.no":true,"alaheadju.no":true,"xn--laheadju-7ya.no":true,"alvdal.no":true,"amli.no":true,"xn--mli-tla.no":true,"amot.no":true,"xn--mot-tla.no":true,"andebu.no":true,"andoy.no":true,"xn--andy-ira.no":true,"andasuolo.no":true,"ardal.no":true,"xn--rdal-poa.no":true,"aremark.no":true,"arendal.no":true,"xn--s-1fa.no":true,"aseral.no":true,"xn--seral-lra.no":true,"asker.no":true,"askim.no":true,"askvoll.no":true,"askoy.no":true,"xn--asky-ira.no":true,"asnes.no":true,"xn--snes-poa.no":true,"audnedaln.no":true,"aukra.no":true,"aure.no":true,"aurland.no":true,"aurskog-holand.no":true,"xn--aurskog-hland-jnb.no":true,"austevoll.no":true,"austrheim.no":true,"averoy.no":true,"xn--avery-yua.no":true,"balestrand.no":true,"ballangen.no":true,"balat.no":true,"xn--blt-elab.no":true,"balsfjord.no":true,"bahccavuotna.no":true,"xn--bhccavuotna-k7a.no":true,"bamble.no":true,"bardu.no":true,"beardu.no":true,"beiarn.no":true,"bajddar.no":true,"xn--bjddar-pta.no":true,"baidar.no":true,"xn--bidr-5nac.no":true,"berg.no":true,"bergen.no":true,"berlevag.no":true,"xn--berlevg-jxa.no":true,"bearalvahki.no":true,"xn--bearalvhki-y4a.no":true,"bindal.no":true,"birkenes.no":true,"bjarkoy.no":true,"xn--bjarky-fya.no":true,"bjerkreim.no":true,"bjugn.no":true,"bodo.no":true,"xn--bod-2na.no":true,"badaddja.no":true,"xn--bdddj-mrabd.no":true,"budejju.no":true,"bokn.no":true,"bremanger.no":true,"bronnoy.no":true,"xn--brnny-wuac.no":true,"bygland.no":true,"bykle.no":true,"barum.no":true,"xn--brum-voa.no":true,"bo.telemark.no":true,"xn--b-5ga.telemark.no":true,"bo.nordland.no":true,"xn--b-5ga.nordland.no":true,"bievat.no":true,"xn--bievt-0qa.no":true,"bomlo.no":true,"xn--bmlo-gra.no":true,"batsfjord.no":true,"xn--btsfjord-9za.no":true,"bahcavuotna.no":true,"xn--bhcavuotna-s4a.no":true,"dovre.no":true,"drammen.no":true,"drangedal.no":true,"dyroy.no":true,"xn--dyry-ira.no":true,"donna.no":true,"xn--dnna-gra.no":true,"eid.no":true,"eidfjord.no":true,"eidsberg.no":true,"eidskog.no":true,"eidsvoll.no":true,"eigersund.no":true,"elverum.no":true,"enebakk.no":true,"engerdal.no":true,"etne.no":true,"etnedal.no":true,"evenes.no":true,"evenassi.no":true,"xn--eveni-0qa01ga.no":true,"evje-og-hornnes.no":true,"farsund.no":true,"fauske.no":true,"fuossko.no":true,"fuoisku.no":true,"fedje.no":true,"fet.no":true,"finnoy.no":true,"xn--finny-yua.no":true,"fitjar.no":true,"fjaler.no":true,"fjell.no":true,"flakstad.no":true,"flatanger.no":true,"flekkefjord.no":true,"flesberg.no":true,"flora.no":true,"fla.no":true,"xn--fl-zia.no":true,"folldal.no":true,"forsand.no":true,"fosnes.no":true,"frei.no":true,"frogn.no":true,"froland.no":true,"frosta.no":true,"frana.no":true,"xn--frna-woa.no":true,"froya.no":true,"xn--frya-hra.no":true,"fusa.no":true,"fyresdal.no":true,"forde.no":true,"xn--frde-gra.no":true,"gamvik.no":true,"gangaviika.no":true,"xn--ggaviika-8ya47h.no":true,"gaular.no":true,"gausdal.no":true,"gildeskal.no":true,"xn--gildeskl-g0a.no":true,"giske.no":true,"gjemnes.no":true,"gjerdrum.no":true,"gjerstad.no":true,"gjesdal.no":true,"gjovik.no":true,"xn--gjvik-wua.no":true,"gloppen.no":true,"gol.no":true,"gran.no":true,"grane.no":true,"granvin.no":true,"gratangen.no":true,"grimstad.no":true,"grong.no":true,"kraanghke.no":true,"xn--kranghke-b0a.no":true,"grue.no":true,"gulen.no":true,"hadsel.no":true,"halden.no":true,"halsa.no":true,"hamar.no":true,"hamaroy.no":true,"habmer.no":true,"xn--hbmer-xqa.no":true,"hapmir.no":true,"xn--hpmir-xqa.no":true,"hammerfest.no":true,"hammarfeasta.no":true,"xn--hmmrfeasta-s4ac.no":true,"haram.no":true,"hareid.no":true,"harstad.no":true,"hasvik.no":true,"aknoluokta.no":true,"xn--koluokta-7ya57h.no":true,"hattfjelldal.no":true,"aarborte.no":true,"haugesund.no":true,"hemne.no":true,"hemnes.no":true,"hemsedal.no":true,"heroy.more-og-romsdal.no":true,"xn--hery-ira.xn--mre-og-romsdal-qqb.no":true,"heroy.nordland.no":true,"xn--hery-ira.nordland.no":true,"hitra.no":true,"hjartdal.no":true,"hjelmeland.no":true,"hobol.no":true,"xn--hobl-ira.no":true,"hof.no":true,"hol.no":true,"hole.no":true,"holmestrand.no":true,"holtalen.no":true,"xn--holtlen-hxa.no":true,"hornindal.no":true,"horten.no":true,"hurdal.no":true,"hurum.no":true,"hvaler.no":true,"hyllestad.no":true,"hagebostad.no":true,"xn--hgebostad-g3a.no":true,"hoyanger.no":true,"xn--hyanger-q1a.no":true,"hoylandet.no":true,"xn--hylandet-54a.no":true,"ha.no":true,"xn--h-2fa.no":true,"ibestad.no":true,"inderoy.no":true,"xn--indery-fya.no":true,"iveland.no":true,"jevnaker.no":true,"jondal.no":true,"jolster.no":true,"xn--jlster-bya.no":true,"karasjok.no":true,"karasjohka.no":true,"xn--krjohka-hwab49j.no":true,"karlsoy.no":true,"galsa.no":true,"xn--gls-elac.no":true,"karmoy.no":true,"xn--karmy-yua.no":true,"kautokeino.no":true,"guovdageaidnu.no":true,"klepp.no":true,"klabu.no":true,"xn--klbu-woa.no":true,"kongsberg.no":true,"kongsvinger.no":true,"kragero.no":true,"xn--krager-gya.no":true,"kristiansand.no":true,"kristiansund.no":true,"krodsherad.no":true,"xn--krdsherad-m8a.no":true,"kvalsund.no":true,"rahkkeravju.no":true,"xn--rhkkervju-01af.no":true,"kvam.no":true,"kvinesdal.no":true,"kvinnherad.no":true,"kviteseid.no":true,"kvitsoy.no":true,"xn--kvitsy-fya.no":true,"kvafjord.no":true,"xn--kvfjord-nxa.no":true,"giehtavuoatna.no":true,"kvanangen.no":true,"xn--kvnangen-k0a.no":true,"navuotna.no":true,"xn--nvuotna-hwa.no":true,"kafjord.no":true,"xn--kfjord-iua.no":true,"gaivuotna.no":true,"xn--givuotna-8ya.no":true,"larvik.no":true,"lavangen.no":true,"lavagis.no":true,"loabat.no":true,"xn--loabt-0qa.no":true,"lebesby.no":true,"davvesiida.no":true,"leikanger.no":true,"leirfjord.no":true,"leka.no":true,"leksvik.no":true,"lenvik.no":true,"leangaviika.no":true,"xn--leagaviika-52b.no":true,"lesja.no":true,"levanger.no":true,"lier.no":true,"lierne.no":true,"lillehammer.no":true,"lillesand.no":true,"lindesnes.no":true,"lindas.no":true,"xn--linds-pra.no":true,"lom.no":true,"loppa.no":true,"lahppi.no":true,"xn--lhppi-xqa.no":true,"lund.no":true,"lunner.no":true,"luroy.no":true,"xn--lury-ira.no":true,"luster.no":true,"lyngdal.no":true,"lyngen.no":true,"ivgu.no":true,"lardal.no":true,"lerdal.no":true,"xn--lrdal-sra.no":true,"lodingen.no":true,"xn--ldingen-q1a.no":true,"lorenskog.no":true,"xn--lrenskog-54a.no":true,"loten.no":true,"xn--lten-gra.no":true,"malvik.no":true,"masoy.no":true,"xn--msy-ula0h.no":true,"muosat.no":true,"xn--muost-0qa.no":true,"mandal.no":true,"marker.no":true,"marnardal.no":true,"masfjorden.no":true,"meland.no":true,"meldal.no":true,"melhus.no":true,"meloy.no":true,"xn--mely-ira.no":true,"meraker.no":true,"xn--merker-kua.no":true,"moareke.no":true,"xn--moreke-jua.no":true,"midsund.no":true,"midtre-gauldal.no":true,"modalen.no":true,"modum.no":true,"molde.no":true,"moskenes.no":true,"moss.no":true,"mosvik.no":true,"malselv.no":true,"xn--mlselv-iua.no":true,"malatvuopmi.no":true,"xn--mlatvuopmi-s4a.no":true,"namdalseid.no":true,"aejrie.no":true,"namsos.no":true,"namsskogan.no":true,"naamesjevuemie.no":true,"xn--nmesjevuemie-tcba.no":true,"laakesvuemie.no":true,"nannestad.no":true,"narvik.no":true,"narviika.no":true,"naustdal.no":true,"nedre-eiker.no":true,"nes.akershus.no":true,"nes.buskerud.no":true,"nesna.no":true,"nesodden.no":true,"nesseby.no":true,"unjarga.no":true,"xn--unjrga-rta.no":true,"nesset.no":true,"nissedal.no":true,"nittedal.no":true,"nord-aurdal.no":true,"nord-fron.no":true,"nord-odal.no":true,"norddal.no":true,"nordkapp.no":true,"davvenjarga.no":true,"xn--davvenjrga-y4a.no":true,"nordre-land.no":true,"nordreisa.no":true,"raisa.no":true,"xn--risa-5na.no":true,"nore-og-uvdal.no":true,"notodden.no":true,"naroy.no":true,"xn--nry-yla5g.no":true,"notteroy.no":true,"xn--nttery-byae.no":true,"odda.no":true,"oksnes.no":true,"xn--ksnes-uua.no":true,"oppdal.no":true,"oppegard.no":true,"xn--oppegrd-ixa.no":true,"orkdal.no":true,"orland.no":true,"xn--rland-uua.no":true,"orskog.no":true,"xn--rskog-uua.no":true,"orsta.no":true,"xn--rsta-fra.no":true,"os.hedmark.no":true,"os.hordaland.no":true,"osen.no":true,"osteroy.no":true,"xn--ostery-fya.no":true,"ostre-toten.no":true,"xn--stre-toten-zcb.no":true,"overhalla.no":true,"ovre-eiker.no":true,"xn--vre-eiker-k8a.no":true,"oyer.no":true,"xn--yer-zna.no":true,"oygarden.no":true,"xn--ygarden-p1a.no":true,"oystre-slidre.no":true,"xn--ystre-slidre-ujb.no":true,"porsanger.no":true,"porsangu.no":true,"xn--porsgu-sta26f.no":true,"porsgrunn.no":true,"radoy.no":true,"xn--rady-ira.no":true,"rakkestad.no":true,"rana.no":true,"ruovat.no":true,"randaberg.no":true,"rauma.no":true,"rendalen.no":true,"rennebu.no":true,"rennesoy.no":true,"xn--rennesy-v1a.no":true,"rindal.no":true,"ringebu.no":true,"ringerike.no":true,"ringsaker.no":true,"rissa.no":true,"risor.no":true,"xn--risr-ira.no":true,"roan.no":true,"rollag.no":true,"rygge.no":true,"ralingen.no":true,"xn--rlingen-mxa.no":true,"rodoy.no":true,"xn--rdy-0nab.no":true,"romskog.no":true,"xn--rmskog-bya.no":true,"roros.no":true,"xn--rros-gra.no":true,"rost.no":true,"xn--rst-0na.no":true,"royken.no":true,"xn--ryken-vua.no":true,"royrvik.no":true,"xn--ryrvik-bya.no":true,"rade.no":true,"xn--rde-ula.no":true,"salangen.no":true,"siellak.no":true,"saltdal.no":true,"salat.no":true,"xn--slt-elab.no":true,"xn--slat-5na.no":true,"samnanger.no":true,"sande.more-og-romsdal.no":true,"sande.xn--mre-og-romsdal-qqb.no":true,"sande.vestfold.no":true,"sandefjord.no":true,"sandnes.no":true,"sandoy.no":true,"xn--sandy-yua.no":true,"sarpsborg.no":true,"sauda.no":true,"sauherad.no":true,"sel.no":true,"selbu.no":true,"selje.no":true,"seljord.no":true,"sigdal.no":true,"siljan.no":true,"sirdal.no":true,"skaun.no":true,"skedsmo.no":true,"ski.no":true,"skien.no":true,"skiptvet.no":true,"skjervoy.no":true,"xn--skjervy-v1a.no":true,"skierva.no":true,"xn--skierv-uta.no":true,"skjak.no":true,"xn--skjk-soa.no":true,"skodje.no":true,"skanland.no":true,"xn--sknland-fxa.no":true,"skanit.no":true,"xn--sknit-yqa.no":true,"smola.no":true,"xn--smla-hra.no":true,"snillfjord.no":true,"snasa.no":true,"xn--snsa-roa.no":true,"snoasa.no":true,"snaase.no":true,"xn--snase-nra.no":true,"sogndal.no":true,"sokndal.no":true,"sola.no":true,"solund.no":true,"songdalen.no":true,"sortland.no":true,"spydeberg.no":true,"stange.no":true,"stavanger.no":true,"steigen.no":true,"steinkjer.no":true,"stjordal.no":true,"xn--stjrdal-s1a.no":true,"stokke.no":true,"stor-elvdal.no":true,"stord.no":true,"stordal.no":true,"storfjord.no":true,"omasvuotna.no":true,"strand.no":true,"stranda.no":true,"stryn.no":true,"sula.no":true,"suldal.no":true,"sund.no":true,"sunndal.no":true,"surnadal.no":true,"sveio.no":true,"svelvik.no":true,"sykkylven.no":true,"sogne.no":true,"xn--sgne-gra.no":true,"somna.no":true,"xn--smna-gra.no":true,"sondre-land.no":true,"xn--sndre-land-0cb.no":true,"sor-aurdal.no":true,"xn--sr-aurdal-l8a.no":true,"sor-fron.no":true,"xn--sr-fron-q1a.no":true,"sor-odal.no":true,"xn--sr-odal-q1a.no":true,"sor-varanger.no":true,"xn--sr-varanger-ggb.no":true,"matta-varjjat.no":true,"xn--mtta-vrjjat-k7af.no":true,"sorfold.no":true,"xn--srfold-bya.no":true,"sorreisa.no":true,"xn--srreisa-q1a.no":true,"sorum.no":true,"xn--srum-gra.no":true,"tana.no":true,"deatnu.no":true,"time.no":true,"tingvoll.no":true,"tinn.no":true,"tjeldsund.no":true,"dielddanuorri.no":true,"tjome.no":true,"xn--tjme-hra.no":true,"tokke.no":true,"tolga.no":true,"torsken.no":true,"tranoy.no":true,"xn--trany-yua.no":true,"tromso.no":true,"xn--troms-zua.no":true,"tromsa.no":true,"romsa.no":true,"trondheim.no":true,"troandin.no":true,"trysil.no":true,"trana.no":true,"xn--trna-woa.no":true,"trogstad.no":true,"xn--trgstad-r1a.no":true,"tvedestrand.no":true,"tydal.no":true,"tynset.no":true,"tysfjord.no":true,"divtasvuodna.no":true,"divttasvuotna.no":true,"tysnes.no":true,"tysvar.no":true,"xn--tysvr-vra.no":true,"tonsberg.no":true,"xn--tnsberg-q1a.no":true,"ullensaker.no":true,"ullensvang.no":true,"ulvik.no":true,"utsira.no":true,"vadso.no":true,"xn--vads-jra.no":true,"cahcesuolo.no":true,"xn--hcesuolo-7ya35b.no":true,"vaksdal.no":true,"valle.no":true,"vang.no":true,"vanylven.no":true,"vardo.no":true,"xn--vard-jra.no":true,"varggat.no":true,"xn--vrggt-xqad.no":true,"vefsn.no":true,"vaapste.no":true,"vega.no":true,"vegarshei.no":true,"xn--vegrshei-c0a.no":true,"vennesla.no":true,"verdal.no":true,"verran.no":true,"vestby.no":true,"vestnes.no":true,"vestre-slidre.no":true,"vestre-toten.no":true,"vestvagoy.no":true,"xn--vestvgy-ixa6o.no":true,"vevelstad.no":true,"vik.no":true,"vikna.no":true,"vindafjord.no":true,"volda.no":true,"voss.no":true,"varoy.no":true,"xn--vry-yla5g.no":true,"vagan.no":true,"xn--vgan-qoa.no":true,"voagat.no":true,"vagsoy.no":true,"xn--vgsy-qoa0j.no":true,"vaga.no":true,"xn--vg-yiab.no":true,"valer.ostfold.no":true,"xn--vler-qoa.xn--stfold-9xa.no":true,"valer.hedmark.no":true,"xn--vler-qoa.hedmark.no":true,"*.np":true,"nr":true,"biz.nr":true,"info.nr":true,"gov.nr":true,"edu.nr":true,"org.nr":true,"net.nr":true,"com.nr":true,"nu":true,"nz":true,"ac.nz":true,"co.nz":true,"cri.nz":true,"geek.nz":true,"gen.nz":true,"govt.nz":true,"health.nz":true,"iwi.nz":true,"kiwi.nz":true,"maori.nz":true,"mil.nz":true,"xn--mori-qsa.nz":true,"net.nz":true,"org.nz":true,"parliament.nz":true,"school.nz":true,"om":true,"co.om":true,"com.om":true,"edu.om":true,"gov.om":true,"med.om":true,"museum.om":true,"net.om":true,"org.om":true,"pro.om":true,"org":true,"pa":true,"ac.pa":true,"gob.pa":true,"com.pa":true,"org.pa":true,"sld.pa":true,"edu.pa":true,"net.pa":true,"ing.pa":true,"abo.pa":true,"med.pa":true,"nom.pa":true,"pe":true,"edu.pe":true,"gob.pe":true,"nom.pe":true,"mil.pe":true,"org.pe":true,"com.pe":true,"net.pe":true,"pf":true,"com.pf":true,"org.pf":true,"edu.pf":true,"*.pg":true,"ph":true,"com.ph":true,"net.ph":true,"org.ph":true,"gov.ph":true,"edu.ph":true,"ngo.ph":true,"mil.ph":true,"i.ph":true,"pk":true,"com.pk":true,"net.pk":true,"edu.pk":true,"org.pk":true,"fam.pk":true,"biz.pk":true,"web.pk":true,"gov.pk":true,"gob.pk":true,"gok.pk":true,"gon.pk":true,"gop.pk":true,"gos.pk":true,"info.pk":true,"pl":true,"com.pl":true,"net.pl":true,"org.pl":true,"info.pl":true,"waw.pl":true,"gov.pl":true,"aid.pl":true,"agro.pl":true,"atm.pl":true,"auto.pl":true,"biz.pl":true,"edu.pl":true,"gmina.pl":true,"gsm.pl":true,"mail.pl":true,"miasta.pl":true,"media.pl":true,"mil.pl":true,"nieruchomosci.pl":true,"nom.pl":true,"pc.pl":true,"powiat.pl":true,"priv.pl":true,"realestate.pl":true,"rel.pl":true,"sex.pl":true,"shop.pl":true,"sklep.pl":true,"sos.pl":true,"szkola.pl":true,"targi.pl":true,"tm.pl":true,"tourism.pl":true,"travel.pl":true,"turystyka.pl":true,"uw.gov.pl":true,"um.gov.pl":true,"ug.gov.pl":true,"upow.gov.pl":true,"starostwo.gov.pl":true,"so.gov.pl":true,"sr.gov.pl":true,"po.gov.pl":true,"pa.gov.pl":true,"augustow.pl":true,"babia-gora.pl":true,"bedzin.pl":true,"beskidy.pl":true,"bialowieza.pl":true,"bialystok.pl":true,"bielawa.pl":true,"bieszczady.pl":true,"boleslawiec.pl":true,"bydgoszcz.pl":true,"bytom.pl":true,"cieszyn.pl":true,"czeladz.pl":true,"czest.pl":true,"dlugoleka.pl":true,"elblag.pl":true,"elk.pl":true,"glogow.pl":true,"gniezno.pl":true,"gorlice.pl":true,"grajewo.pl":true,"ilawa.pl":true,"jaworzno.pl":true,"jelenia-gora.pl":true,"jgora.pl":true,"kalisz.pl":true,"kazimierz-dolny.pl":true,"karpacz.pl":true,"kartuzy.pl":true,"kaszuby.pl":true,"katowice.pl":true,"kepno.pl":true,"ketrzyn.pl":true,"klodzko.pl":true,"kobierzyce.pl":true,"kolobrzeg.pl":true,"konin.pl":true,"konskowola.pl":true,"kutno.pl":true,"lapy.pl":true,"lebork.pl":true,"legnica.pl":true,"lezajsk.pl":true,"limanowa.pl":true,"lomza.pl":true,"lowicz.pl":true,"lubin.pl":true,"lukow.pl":true,"malbork.pl":true,"malopolska.pl":true,"mazowsze.pl":true,"mazury.pl":true,"mielec.pl":true,"mielno.pl":true,"mragowo.pl":true,"naklo.pl":true,"nowaruda.pl":true,"nysa.pl":true,"olawa.pl":true,"olecko.pl":true,"olkusz.pl":true,"olsztyn.pl":true,"opoczno.pl":true,"opole.pl":true,"ostroda.pl":true,"ostroleka.pl":true,"ostrowiec.pl":true,"ostrowwlkp.pl":true,"pila.pl":true,"pisz.pl":true,"podhale.pl":true,"podlasie.pl":true,"polkowice.pl":true,"pomorze.pl":true,"pomorskie.pl":true,"prochowice.pl":true,"pruszkow.pl":true,"przeworsk.pl":true,"pulawy.pl":true,"radom.pl":true,"rawa-maz.pl":true,"rybnik.pl":true,"rzeszow.pl":true,"sanok.pl":true,"sejny.pl":true,"slask.pl":true,"slupsk.pl":true,"sosnowiec.pl":true,"stalowa-wola.pl":true,"skoczow.pl":true,"starachowice.pl":true,"stargard.pl":true,"suwalki.pl":true,"swidnica.pl":true,"swiebodzin.pl":true,"swinoujscie.pl":true,"szczecin.pl":true,"szczytno.pl":true,"tarnobrzeg.pl":true,"tgory.pl":true,"turek.pl":true,"tychy.pl":true,"ustka.pl":true,"walbrzych.pl":true,"warmia.pl":true,"warszawa.pl":true,"wegrow.pl":true,"wielun.pl":true,"wlocl.pl":true,"wloclawek.pl":true,"wodzislaw.pl":true,"wolomin.pl":true,"wroclaw.pl":true,"zachpomor.pl":true,"zagan.pl":true,"zarow.pl":true,"zgora.pl":true,"zgorzelec.pl":true,"pm":true,"pn":true,"gov.pn":true,"co.pn":true,"org.pn":true,"edu.pn":true,"net.pn":true,"post":true,"pr":true,"com.pr":true,"net.pr":true,"org.pr":true,"gov.pr":true,"edu.pr":true,"isla.pr":true,"pro.pr":true,"biz.pr":true,"info.pr":true,"name.pr":true,"est.pr":true,"prof.pr":true,"ac.pr":true,"pro":true,"aca.pro":true,"bar.pro":true,"cpa.pro":true,"jur.pro":true,"law.pro":true,"med.pro":true,"eng.pro":true,"ps":true,"edu.ps":true,"gov.ps":true,"sec.ps":true,"plo.ps":true,"com.ps":true,"org.ps":true,"net.ps":true,"pt":true,"net.pt":true,"gov.pt":true,"org.pt":true,"edu.pt":true,"int.pt":true,"publ.pt":true,"com.pt":true,"nome.pt":true,"pw":true,"co.pw":true,"ne.pw":true,"or.pw":true,"ed.pw":true,"go.pw":true,"belau.pw":true,"py":true,"com.py":true,"coop.py":true,"edu.py":true,"gov.py":true,"mil.py":true,"net.py":true,"org.py":true,"qa":true,"com.qa":true,"edu.qa":true,"gov.qa":true,"mil.qa":true,"name.qa":true,"net.qa":true,"org.qa":true,"sch.qa":true,"re":true,"com.re":true,"asso.re":true,"nom.re":true,"ro":true,"com.ro":true,"org.ro":true,"tm.ro":true,"nt.ro":true,"nom.ro":true,"info.ro":true,"rec.ro":true,"arts.ro":true,"firm.ro":true,"store.ro":true,"www.ro":true,"rs":true,"co.rs":true,"org.rs":true,"edu.rs":true,"ac.rs":true,"gov.rs":true,"in.rs":true,"ru":true,"ac.ru":true,"com.ru":true,"edu.ru":true,"int.ru":true,"net.ru":true,"org.ru":true,"pp.ru":true,"adygeya.ru":true,"altai.ru":true,"amur.ru":true,"arkhangelsk.ru":true,"astrakhan.ru":true,"bashkiria.ru":true,"belgorod.ru":true,"bir.ru":true,"bryansk.ru":true,"buryatia.ru":true,"cbg.ru":true,"chel.ru":true,"chelyabinsk.ru":true,"chita.ru":true,"chukotka.ru":true,"chuvashia.ru":true,"dagestan.ru":true,"dudinka.ru":true,"e-burg.ru":true,"grozny.ru":true,"irkutsk.ru":true,"ivanovo.ru":true,"izhevsk.ru":true,"jar.ru":true,"joshkar-ola.ru":true,"kalmykia.ru":true,"kaluga.ru":true,"kamchatka.ru":true,"karelia.ru":true,"kazan.ru":true,"kchr.ru":true,"kemerovo.ru":true,"khabarovsk.ru":true,"khakassia.ru":true,"khv.ru":true,"kirov.ru":true,"koenig.ru":true,"komi.ru":true,"kostroma.ru":true,"krasnoyarsk.ru":true,"kuban.ru":true,"kurgan.ru":true,"kursk.ru":true,"lipetsk.ru":true,"magadan.ru":true,"mari.ru":true,"mari-el.ru":true,"marine.ru":true,"mordovia.ru":true,"msk.ru":true,"murmansk.ru":true,"nalchik.ru":true,"nnov.ru":true,"nov.ru":true,"novosibirsk.ru":true,"nsk.ru":true,"omsk.ru":true,"orenburg.ru":true,"oryol.ru":true,"palana.ru":true,"penza.ru":true,"perm.ru":true,"ptz.ru":true,"rnd.ru":true,"ryazan.ru":true,"sakhalin.ru":true,"samara.ru":true,"saratov.ru":true,"simbirsk.ru":true,"smolensk.ru":true,"spb.ru":true,"stavropol.ru":true,"stv.ru":true,"surgut.ru":true,"tambov.ru":true,"tatarstan.ru":true,"tom.ru":true,"tomsk.ru":true,"tsaritsyn.ru":true,"tsk.ru":true,"tula.ru":true,"tuva.ru":true,"tver.ru":true,"tyumen.ru":true,"udm.ru":true,"udmurtia.ru":true,"ulan-ude.ru":true,"vladikavkaz.ru":true,"vladimir.ru":true,"vladivostok.ru":true,"volgograd.ru":true,"vologda.ru":true,"voronezh.ru":true,"vrn.ru":true,"vyatka.ru":true,"yakutia.ru":true,"yamal.ru":true,"yaroslavl.ru":true,"yekaterinburg.ru":true,"yuzhno-sakhalinsk.ru":true,"amursk.ru":true,"baikal.ru":true,"cmw.ru":true,"fareast.ru":true,"jamal.ru":true,"kms.ru":true,"k-uralsk.ru":true,"kustanai.ru":true,"kuzbass.ru":true,"magnitka.ru":true,"mytis.ru":true,"nakhodka.ru":true,"nkz.ru":true,"norilsk.ru":true,"oskol.ru":true,"pyatigorsk.ru":true,"rubtsovsk.ru":true,"snz.ru":true,"syzran.ru":true,"vdonsk.ru":true,"zgrad.ru":true,"gov.ru":true,"mil.ru":true,"test.ru":true,"rw":true,"gov.rw":true,"net.rw":true,"edu.rw":true,"ac.rw":true,"com.rw":true,"co.rw":true,"int.rw":true,"mil.rw":true,"gouv.rw":true,"sa":true,"com.sa":true,"net.sa":true,"org.sa":true,"gov.sa":true,"med.sa":true,"pub.sa":true,"edu.sa":true,"sch.sa":true,"sb":true,"com.sb":true,"edu.sb":true,"gov.sb":true,"net.sb":true,"org.sb":true,"sc":true,"com.sc":true,"gov.sc":true,"net.sc":true,"org.sc":true,"edu.sc":true,"sd":true,"com.sd":true,"net.sd":true,"org.sd":true,"edu.sd":true,"med.sd":true,"tv.sd":true,"gov.sd":true,"info.sd":true,"se":true,"a.se":true,"ac.se":true,"b.se":true,"bd.se":true,"brand.se":true,"c.se":true,"d.se":true,"e.se":true,"f.se":true,"fh.se":true,"fhsk.se":true,"fhv.se":true,"g.se":true,"h.se":true,"i.se":true,"k.se":true,"komforb.se":true,"kommunalforbund.se":true,"komvux.se":true,"l.se":true,"lanbib.se":true,"m.se":true,"n.se":true,"naturbruksgymn.se":true,"o.se":true,"org.se":true,"p.se":true,"parti.se":true,"pp.se":true,"press.se":true,"r.se":true,"s.se":true,"t.se":true,"tm.se":true,"u.se":true,"w.se":true,"x.se":true,"y.se":true,"z.se":true,"sg":true,"com.sg":true,"net.sg":true,"org.sg":true,"gov.sg":true,"edu.sg":true,"per.sg":true,"sh":true,"com.sh":true,"net.sh":true,"gov.sh":true,"org.sh":true,"mil.sh":true,"si":true,"sj":true,"sk":true,"sl":true,"com.sl":true,"net.sl":true,"edu.sl":true,"gov.sl":true,"org.sl":true,"sm":true,"sn":true,"art.sn":true,"com.sn":true,"edu.sn":true,"gouv.sn":true,"org.sn":true,"perso.sn":true,"univ.sn":true,"so":true,"com.so":true,"net.so":true,"org.so":true,"sr":true,"st":true,"co.st":true,"com.st":true,"consulado.st":true,"edu.st":true,"embaixada.st":true,"gov.st":true,"mil.st":true,"net.st":true,"org.st":true,"principe.st":true,"saotome.st":true,"store.st":true,"su":true,"adygeya.su":true,"arkhangelsk.su":true,"balashov.su":true,"bashkiria.su":true,"bryansk.su":true,"dagestan.su":true,"grozny.su":true,"ivanovo.su":true,"kalmykia.su":true,"kaluga.su":true,"karelia.su":true,"khakassia.su":true,"krasnodar.su":true,"kurgan.su":true,"lenug.su":true,"mordovia.su":true,"msk.su":true,"murmansk.su":true,"nalchik.su":true,"nov.su":true,"obninsk.su":true,"penza.su":true,"pokrovsk.su":true,"sochi.su":true,"spb.su":true,"togliatti.su":true,"troitsk.su":true,"tula.su":true,"tuva.su":true,"vladikavkaz.su":true,"vladimir.su":true,"vologda.su":true,"sv":true,"com.sv":true,"edu.sv":true,"gob.sv":true,"org.sv":true,"red.sv":true,"sx":true,"gov.sx":true,"sy":true,"edu.sy":true,"gov.sy":true,"net.sy":true,"mil.sy":true,"com.sy":true,"org.sy":true,"sz":true,"co.sz":true,"ac.sz":true,"org.sz":true,"tc":true,"td":true,"tel":true,"tf":true,"tg":true,"th":true,"ac.th":true,"co.th":true,"go.th":true,"in.th":true,"mi.th":true,"net.th":true,"or.th":true,"tj":true,"ac.tj":true,"biz.tj":true,"co.tj":true,"com.tj":true,"edu.tj":true,"go.tj":true,"gov.tj":true,"int.tj":true,"mil.tj":true,"name.tj":true,"net.tj":true,"nic.tj":true,"org.tj":true,"test.tj":true,"web.tj":true,"tk":true,"tl":true,"gov.tl":true,"tm":true,"com.tm":true,"co.tm":true,"org.tm":true,"net.tm":true,"nom.tm":true,"gov.tm":true,"mil.tm":true,"edu.tm":true,"tn":true,"com.tn":true,"ens.tn":true,"fin.tn":true,"gov.tn":true,"ind.tn":true,"intl.tn":true,"nat.tn":true,"net.tn":true,"org.tn":true,"info.tn":true,"perso.tn":true,"tourism.tn":true,"edunet.tn":true,"rnrt.tn":true,"rns.tn":true,"rnu.tn":true,"mincom.tn":true,"agrinet.tn":true,"defense.tn":true,"turen.tn":true,"to":true,"com.to":true,"gov.to":true,"net.to":true,"org.to":true,"edu.to":true,"mil.to":true,"tp":true,"tr":true,"com.tr":true,"info.tr":true,"biz.tr":true,"net.tr":true,"org.tr":true,"web.tr":true,"gen.tr":true,"tv.tr":true,"av.tr":true,"dr.tr":true,"bbs.tr":true,"name.tr":true,"tel.tr":true,"gov.tr":true,"bel.tr":true,"pol.tr":true,"mil.tr":true,"k12.tr":true,"edu.tr":true,"kep.tr":true,"nc.tr":true,"gov.nc.tr":true,"travel":true,"tt":true,"co.tt":true,"com.tt":true,"org.tt":true,"net.tt":true,"biz.tt":true,"info.tt":true,"pro.tt":true,"int.tt":true,"coop.tt":true,"jobs.tt":true,"mobi.tt":true,"travel.tt":true,"museum.tt":true,"aero.tt":true,"name.tt":true,"gov.tt":true,"edu.tt":true,"tv":true,"tw":true,"edu.tw":true,"gov.tw":true,"mil.tw":true,"com.tw":true,"net.tw":true,"org.tw":true,"idv.tw":true,"game.tw":true,"ebiz.tw":true,"club.tw":true,"xn--zf0ao64a.tw":true,"xn--uc0atv.tw":true,"xn--czrw28b.tw":true,"tz":true,"ac.tz":true,"co.tz":true,"go.tz":true,"hotel.tz":true,"info.tz":true,"me.tz":true,"mil.tz":true,"mobi.tz":true,"ne.tz":true,"or.tz":true,"sc.tz":true,"tv.tz":true,"ua":true,"com.ua":true,"edu.ua":true,"gov.ua":true,"in.ua":true,"net.ua":true,"org.ua":true,"cherkassy.ua":true,"cherkasy.ua":true,"chernigov.ua":true,"chernihiv.ua":true,"chernivtsi.ua":true,"chernovtsy.ua":true,"ck.ua":true,"cn.ua":true,"cr.ua":true,"crimea.ua":true,"cv.ua":true,"dn.ua":true,"dnepropetrovsk.ua":true,"dnipropetrovsk.ua":true,"dominic.ua":true,"donetsk.ua":true,"dp.ua":true,"if.ua":true,"ivano-frankivsk.ua":true,"kh.ua":true,"kharkiv.ua":true,"kharkov.ua":true,"kherson.ua":true,"khmelnitskiy.ua":true,"khmelnytskyi.ua":true,"kiev.ua":true,"kirovograd.ua":true,"km.ua":true,"kr.ua":true,"krym.ua":true,"ks.ua":true,"kv.ua":true,"kyiv.ua":true,"lg.ua":true,"lt.ua":true,"lugansk.ua":true,"lutsk.ua":true,"lv.ua":true,"lviv.ua":true,"mk.ua":true,"mykolaiv.ua":true,"nikolaev.ua":true,"od.ua":true,"odesa.ua":true,"odessa.ua":true,"pl.ua":true,"poltava.ua":true,"rivne.ua":true,"rovno.ua":true,"rv.ua":true,"sb.ua":true,"sebastopol.ua":true,"sevastopol.ua":true,"sm.ua":true,"sumy.ua":true,"te.ua":true,"ternopil.ua":true,"uz.ua":true,"uzhgorod.ua":true,"vinnica.ua":true,"vinnytsia.ua":true,"vn.ua":true,"volyn.ua":true,"yalta.ua":true,"zaporizhzhe.ua":true,"zaporizhzhia.ua":true,"zhitomir.ua":true,"zhytomyr.ua":true,"zp.ua":true,"zt.ua":true,"co.ua":true,"pp.ua":true,"ug":true,"co.ug":true,"or.ug":true,"ac.ug":true,"sc.ug":true,"go.ug":true,"ne.ug":true,"com.ug":true,"org.ug":true,"uk":true,"ac.uk":true,"co.uk":true,"gov.uk":true,"ltd.uk":true,"me.uk":true,"net.uk":true,"nhs.uk":true,"org.uk":true,"plc.uk":true,"police.uk":true,"*.sch.uk":true,"us":true,"dni.us":true,"fed.us":true,"isa.us":true,"kids.us":true,"nsn.us":true,"ak.us":true,"al.us":true,"ar.us":true,"as.us":true,"az.us":true,"ca.us":true,"co.us":true,"ct.us":true,"dc.us":true,"de.us":true,"fl.us":true,"ga.us":true,"gu.us":true,"hi.us":true,"ia.us":true,"id.us":true,"il.us":true,"in.us":true,"ks.us":true,"ky.us":true,"la.us":true,"ma.us":true,"md.us":true,"me.us":true,"mi.us":true,"mn.us":true,"mo.us":true,"ms.us":true,"mt.us":true,"nc.us":true,"nd.us":true,"ne.us":true,"nh.us":true,"nj.us":true,"nm.us":true,"nv.us":true,"ny.us":true,"oh.us":true,"ok.us":true,"or.us":true,"pa.us":true,"pr.us":true,"ri.us":true,"sc.us":true,"sd.us":true,"tn.us":true,"tx.us":true,"ut.us":true,"vi.us":true,"vt.us":true,"va.us":true,"wa.us":true,"wi.us":true,"wv.us":true,"wy.us":true,"k12.ak.us":true,"k12.al.us":true,"k12.ar.us":true,"k12.as.us":true,"k12.az.us":true,"k12.ca.us":true,"k12.co.us":true,"k12.ct.us":true,"k12.dc.us":true,"k12.de.us":true,"k12.fl.us":true,"k12.ga.us":true,"k12.gu.us":true,"k12.ia.us":true,"k12.id.us":true,"k12.il.us":true,"k12.in.us":true,"k12.ks.us":true,"k12.ky.us":true,"k12.la.us":true,"k12.ma.us":true,"k12.md.us":true,"k12.me.us":true,"k12.mi.us":true,"k12.mn.us":true,"k12.mo.us":true,"k12.ms.us":true,"k12.mt.us":true,"k12.nc.us":true,"k12.ne.us":true,"k12.nh.us":true,"k12.nj.us":true,"k12.nm.us":true,"k12.nv.us":true,"k12.ny.us":true,"k12.oh.us":true,"k12.ok.us":true,"k12.or.us":true,"k12.pa.us":true,"k12.pr.us":true,"k12.ri.us":true,"k12.sc.us":true,"k12.tn.us":true,"k12.tx.us":true,"k12.ut.us":true,"k12.vi.us":true,"k12.vt.us":true,"k12.va.us":true,"k12.wa.us":true,"k12.wi.us":true,"k12.wy.us":true,"cc.ak.us":true,"cc.al.us":true,"cc.ar.us":true,"cc.as.us":true,"cc.az.us":true,"cc.ca.us":true,"cc.co.us":true,"cc.ct.us":true,"cc.dc.us":true,"cc.de.us":true,"cc.fl.us":true,"cc.ga.us":true,"cc.gu.us":true,"cc.hi.us":true,"cc.ia.us":true,"cc.id.us":true,"cc.il.us":true,"cc.in.us":true,"cc.ks.us":true,"cc.ky.us":true,"cc.la.us":true,"cc.ma.us":true,"cc.md.us":true,"cc.me.us":true,"cc.mi.us":true,"cc.mn.us":true,"cc.mo.us":true,"cc.ms.us":true,"cc.mt.us":true,"cc.nc.us":true,"cc.nd.us":true,"cc.ne.us":true,"cc.nh.us":true,"cc.nj.us":true,"cc.nm.us":true,"cc.nv.us":true,"cc.ny.us":true,"cc.oh.us":true,"cc.ok.us":true,"cc.or.us":true,"cc.pa.us":true,"cc.pr.us":true,"cc.ri.us":true,"cc.sc.us":true,"cc.sd.us":true,"cc.tn.us":true,"cc.tx.us":true,"cc.ut.us":true,"cc.vi.us":true,"cc.vt.us":true,"cc.va.us":true,"cc.wa.us":true,"cc.wi.us":true,"cc.wv.us":true,"cc.wy.us":true,"lib.ak.us":true,"lib.al.us":true,"lib.ar.us":true,"lib.as.us":true,"lib.az.us":true,"lib.ca.us":true,"lib.co.us":true,"lib.ct.us":true,"lib.dc.us":true,"lib.de.us":true,"lib.fl.us":true,"lib.ga.us":true,"lib.gu.us":true,"lib.hi.us":true,"lib.ia.us":true,"lib.id.us":true,"lib.il.us":true,"lib.in.us":true,"lib.ks.us":true,"lib.ky.us":true,"lib.la.us":true,"lib.ma.us":true,"lib.md.us":true,"lib.me.us":true,"lib.mi.us":true,"lib.mn.us":true,"lib.mo.us":true,"lib.ms.us":true,"lib.mt.us":true,"lib.nc.us":true,"lib.nd.us":true,"lib.ne.us":true,"lib.nh.us":true,"lib.nj.us":true,"lib.nm.us":true,"lib.nv.us":true,"lib.ny.us":true,"lib.oh.us":true,"lib.ok.us":true,"lib.or.us":true,"lib.pa.us":true,"lib.pr.us":true,"lib.ri.us":true,"lib.sc.us":true,"lib.sd.us":true,"lib.tn.us":true,"lib.tx.us":true,"lib.ut.us":true,"lib.vi.us":true,"lib.vt.us":true,"lib.va.us":true,"lib.wa.us":true,"lib.wi.us":true,"lib.wy.us":true,"pvt.k12.ma.us":true,"chtr.k12.ma.us":true,"paroch.k12.ma.us":true,"uy":true,"com.uy":true,"edu.uy":true,"gub.uy":true,"mil.uy":true,"net.uy":true,"org.uy":true,"uz":true,"co.uz":true,"com.uz":true,"net.uz":true,"org.uz":true,"va":true,"vc":true,"com.vc":true,"net.vc":true,"org.vc":true,"gov.vc":true,"mil.vc":true,"edu.vc":true,"ve":true,"arts.ve":true,"co.ve":true,"com.ve":true,"e12.ve":true,"edu.ve":true,"firm.ve":true,"gob.ve":true,"gov.ve":true,"info.ve":true,"int.ve":true,"mil.ve":true,"net.ve":true,"org.ve":true,"rec.ve":true,"store.ve":true,"tec.ve":true,"web.ve":true,"vg":true,"vi":true,"co.vi":true,"com.vi":true,"k12.vi":true,"net.vi":true,"org.vi":true,"vn":true,"com.vn":true,"net.vn":true,"org.vn":true,"edu.vn":true,"gov.vn":true,"int.vn":true,"ac.vn":true,"biz.vn":true,"info.vn":true,"name.vn":true,"pro.vn":true,"health.vn":true,"vu":true,"com.vu":true,"edu.vu":true,"net.vu":true,"org.vu":true,"wf":true,"ws":true,"com.ws":true,"net.ws":true,"org.ws":true,"gov.ws":true,"edu.ws":true,"yt":true,"xn--mgbaam7a8h":true,"xn--54b7fta0cc":true,"xn--fiqs8s":true,"xn--fiqz9s":true,"xn--lgbbat1ad8j":true,"xn--wgbh1c":true,"xn--node":true,"xn--j6w193g":true,"xn--h2brj9c":true,"xn--mgbbh1a71e":true,"xn--fpcrj9c3d":true,"xn--gecrj9c":true,"xn--s9brj9c":true,"xn--45brj9c":true,"xn--xkc2dl3a5ee0h":true,"xn--mgba3a4f16a":true,"xn--mgba3a4fra":true,"xn--mgbayh7gpa":true,"xn--3e0b707e":true,"xn--80ao21a":true,"xn--fzc2c9e2c":true,"xn--xkc2al3hye2a":true,"xn--mgbc0a9azcg":true,"xn--l1acc":true,"xn--mgbx4cd0ab":true,"xn--mgb9awbf":true,"xn--ygbi2ammx":true,"xn--90a3ac":true,"xn--o1ac.xn--90a3ac":true,"xn--c1avg.xn--90a3ac":true,"xn--90azh.xn--90a3ac":true,"xn--d1at.xn--90a3ac":true,"xn--o1ach.xn--90a3ac":true,"xn--80au.xn--90a3ac":true,"xn--p1ai":true,"xn--wgbl6a":true,"xn--mgberp4a5d4ar":true,"xn--mgberp4a5d4a87g":true,"xn--mgbqly7c0a67fbc":true,"xn--mgbqly7cvafr":true,"xn--ogbpf8fl":true,"xn--mgbtf8fl":true,"xn--yfro4i67o":true,"xn--clchc0ea0b2g2a9gcd":true,"xn--o3cw4h":true,"xn--pgbs0dh":true,"xn--kpry57d":true,"xn--kprw13d":true,"xn--nnx388a":true,"xn--j1amh":true,"xn--mgb2ddes":true,"xxx":true,"*.ye":true,"*.za":true,"*.zm":true,"*.zw":true,"aaa":true,"abb":true,"abbott":true,"abogado":true,"academy":true,"accenture":true,"accountant":true,"accountants":true,"aco":true,"active":true,"actor":true,"ads":true,"adult":true,"aeg":true,"afl":true,"africa":true,"africamagic":true,"agency":true,"aig":true,"airforce":true,"airtel":true,"alibaba":true,"alipay":true,"allfinanz":true,"alsace":true,"amsterdam":true,"analytics":true,"android":true,"anquan":true,"apartments":true,"aquarelle":true,"aramco":true,"archi":true,"army":true,"arte":true,"associates":true,"attorney":true,"auction":true,"audio":true,"author":true,"auto":true,"autos":true,"avianca":true,"axa":true,"azure":true,"baidu":true,"band":true,"bank":true,"bar":true,"barcelona":true,"barclaycard":true,"barclays":true,"bargains":true,"bauhaus":true,"bayern":true,"bbc":true,"bbva":true,"bcg":true,"bcn":true,"beer":true,"bentley":true,"berlin":true,"best":true,"bharti":true,"bible":true,"bid":true,"bike":true,"bing":true,"bingo":true,"bio":true,"black":true,"blackfriday":true,"bloomberg":true,"blue":true,"bms":true,"bmw":true,"bnl":true,"bnpparibas":true,"boats":true,"bom":true,"bond":true,"boo":true,"boots":true,"bot":true,"boutique":true,"bradesco":true,"bridgestone":true,"broadway":true,"broker":true,"brother":true,"brussels":true,"budapest":true,"build":true,"builders":true,"business":true,"buy":true,"buzz":true,"bzh":true,"cab":true,"cafe":true,"cal":true,"call":true,"camera":true,"camp":true,"cancerresearch":true,"canon":true,"capetown":true,"capital":true,"car":true,"caravan":true,"cards":true,"care":true,"career":true,"careers":true,"cars":true,"cartier":true,"casa":true,"cash":true,"casino":true,"catering":true,"cba":true,"cbn":true,"center":true,"ceo":true,"cern":true,"cfa":true,"cfd":true,"channel":true,"chat":true,"cheap":true,"chloe":true,"christmas":true,"chrome":true,"church":true,"cipriani":true,"circle":true,"cisco":true,"citic":true,"city":true,"cityeats":true,"claims":true,"cleaning":true,"click":true,"clinic":true,"clothing":true,"club":true,"coach":true,"codes":true,"coffee":true,"college":true,"cologne":true,"commbank":true,"community":true,"company":true,"computer":true,"comsec":true,"condos":true,"construction":true,"consulting":true,"contact":true,"contractors":true,"cooking":true,"cool":true,"corsica":true,"country":true,"coupon":true,"coupons":true,"courses":true,"credit":true,"creditcard":true,"creditunion":true,"cricket":true,"crown":true,"crs":true,"cruises":true,"csc":true,"cuisinella":true,"cymru":true,"cyou":true,"dabur":true,"dad":true,"dance":true,"date":true,"dating":true,"datsun":true,"day":true,"dclk":true,"dealer":true,"deals":true,"degree":true,"delivery":true,"dell":true,"delta":true,"democrat":true,"dental":true,"dentist":true,"desi":true,"design":true,"dev":true,"diamonds":true,"diet":true,"digital":true,"direct":true,"directory":true,"discount":true,"dnp":true,"docs":true,"dog":true,"doha":true,"domains":true,"doosan":true,"download":true,"drive":true,"dstv":true,"dubai":true,"durban":true,"dvag":true,"earth":true,"eat":true,"edeka":true,"education":true,"email":true,"emerck":true,"energy":true,"engineer":true,"engineering":true,"enterprises":true,"epson":true,"equipment":true,"erni":true,"esq":true,"estate":true,"eurovision":true,"eus":true,"events":true,"everbank":true,"exchange":true,"expert":true,"exposed":true,"express":true,"fage":true,"fail":true,"fairwinds":true,"faith":true,"family":true,"fan":true,"fans":true,"farm":true,"fashion":true,"fast":true,"feedback":true,"ferrero":true,"film":true,"final":true,"finance":true,"financial":true,"firestone":true,"firmdale":true,"fish":true,"fishing":true,"fit":true,"fitness":true,"flickr":true,"flights":true,"florist":true,"flowers":true,"flsmidth":true,"fly":true,"foo":true,"football":true,"ford":true,"forex":true,"forsale":true,"forum":true,"foundation":true,"frl":true,"frogans":true,"frontier":true,"fund":true,"furniture":true,"futbol":true,"fyi":true,"gal":true,"gallery":true,"gallup":true,"garden":true,"gbiz":true,"gdn":true,"gea":true,"gent":true,"genting":true,"ggee":true,"gift":true,"gifts":true,"gives":true,"giving":true,"glass":true,"gle":true,"global":true,"globo":true,"gmail":true,"gmo":true,"gmx":true,"gold":true,"goldpoint":true,"golf":true,"goo":true,"goog":true,"google":true,"gop":true,"got":true,"gotv":true,"graphics":true,"gratis":true,"green":true,"gripe":true,"group":true,"gucci":true,"guge":true,"guide":true,"guitars":true,"guru":true,"hamburg":true,"hangout":true,"haus":true,"hdfcbank":true,"health":true,"healthcare":true,"help":true,"helsinki":true,"here":true,"hermes":true,"hiphop":true,"hitachi":true,"hiv":true,"hockey":true,"holdings":true,"holiday":true,"homedepot":true,"homes":true,"honda":true,"horse":true,"host":true,"hosting":true,"hoteles":true,"hotmail":true,"house":true,"how":true,"hsbc":true,"htc":true,"ibm":true,"icbc":true,"ice":true,"icu":true,"ifm":true,"iinet":true,"immo":true,"immobilien":true,"industries":true,"infiniti":true,"ing":true,"ink":true,"institute":true,"insurance":true,"insure":true,"international":true,"investments":true,"ipiranga":true,"irish":true,"iselect":true,"ist":true,"istanbul":true,"itau":true,"iwc":true,"jaguar":true,"java":true,"jcb":true,"jetzt":true,"jewelry":true,"jio":true,"jlc":true,"jll":true,"jmp":true,"joburg":true,"jot":true,"joy":true,"jprs":true,"juegos":true,"kaufen":true,"kddi":true,"kfh":true,"kim":true,"kinder":true,"kitchen":true,"kiwi":true,"koeln":true,"komatsu":true,"kpn":true,"krd":true,"kred":true,"kyknet":true,"kyoto":true,"lacaixa":true,"lancaster":true,"land":true,"landrover":true,"lasalle":true,"lat":true,"latrobe":true,"law":true,"lawyer":true,"lds":true,"lease":true,"leclerc":true,"legal":true,"lgbt":true,"liaison":true,"lidl":true,"life":true,"lifeinsurance":true,"lifestyle":true,"lighting":true,"like":true,"limited":true,"limo":true,"lincoln":true,"linde":true,"link":true,"live":true,"lixil":true,"loan":true,"loans":true,"lol":true,"london":true,"lotte":true,"lotto":true,"love":true,"ltd":true,"ltda":true,"lupin":true,"luxe":true,"luxury":true,"madrid":true,"maif":true,"maison":true,"makeup":true,"man":true,"management":true,"mango":true,"market":true,"marketing":true,"markets":true,"marriott":true,"mba":true,"media":true,"meet":true,"melbourne":true,"meme":true,"memorial":true,"men":true,"menu":true,"meo":true,"miami":true,"microsoft":true,"mini":true,"mma":true,"mnet":true,"mobily":true,"moda":true,"moe":true,"moi":true,"monash":true,"money":true,"montblanc":true,"mormon":true,"mortgage":true,"moscow":true,"motorcycles":true,"mov":true,"movie":true,"movistar":true,"mtn":true,"mtpc":true,"mtr":true,"multichoice":true,"mutual":true,"mzansimagic":true,"nadex":true,"nagoya":true,"naspers":true,"natura":true,"navy":true,"nec":true,"netbank":true,"network":true,"neustar":true,"new":true,"news":true,"nexus":true,"ngo":true,"nhk":true,"nico":true,"ninja":true,"nissan":true,"nokia":true,"norton":true,"nowruz":true,"nra":true,"nrw":true,"ntt":true,"nyc":true,"obi":true,"office":true,"okinawa":true,"omega":true,"one":true,"ong":true,"onl":true,"online":true,"ooo":true,"oracle":true,"orange":true,"organic":true,"orientexpress":true,"osaka":true,"otsuka":true,"ovh":true,"page":true,"pamperedchef":true,"panerai":true,"paris":true,"pars":true,"partners":true,"parts":true,"party":true,"passagens":true,"payu":true,"pharmacy":true,"philips":true,"photo":true,"photography":true,"photos":true,"physio":true,"piaget":true,"pics":true,"pictet":true,"pictures":true,"pid":true,"pin":true,"pink":true,"pizza":true,"place":true,"play":true,"plumbing":true,"plus":true,"pohl":true,"poker":true,"porn":true,"praxi":true,"press":true,"prod":true,"productions":true,"prof":true,"promo":true,"properties":true,"property":true,"pub":true,"qpon":true,"quebec":true,"quest":true,"racing":true,"read":true,"realtor":true,"realty":true,"recipes":true,"red":true,"redstone":true,"redumbrella":true,"rehab":true,"reise":true,"reisen":true,"reit":true,"reliance":true,"ren":true,"rent":true,"rentals":true,"repair":true,"report":true,"republican":true,"rest":true,"restaurant":true,"review":true,"reviews":true,"rich":true,"ricoh":true,"ril":true,"rio":true,"rip":true,"rocher":true,"rocks":true,"rodeo":true,"room":true,"rsvp":true,"ruhr":true,"run":true,"rwe":true,"ryukyu":true,"saarland":true,"safe":true,"safety":true,"sakura":true,"sale":true,"salon":true,"samsung":true,"sandvik":true,"sandvikcoromant":true,"sanofi":true,"sap":true,"sapo":true,"sarl":true,"sas":true,"saxo":true,"sbi":true,"sbs":true,"sca":true,"scb":true,"schmidt":true,"scholarships":true,"school":true,"schule":true,"schwarz":true,"science":true,"scor":true,"scot":true,"seat":true,"seek":true,"sener":true,"services":true,"sew":true,"sex":true,"sexy":true,"sharp":true,"shia":true,"shiksha":true,"shoes":true,"shouji":true,"show":true,"shriram":true,"sina":true,"singles":true,"site":true,"skin":true,"sky":true,"skype":true,"smile":true,"sncf":true,"soccer":true,"social":true,"software":true,"sohu":true,"solar":true,"solutions":true,"song":true,"sony":true,"soy":true,"space":true,"spiegel":true,"spot":true,"spreadbetting":true,"stada":true,"star":true,"starhub":true,"statebank":true,"statoil":true,"stc":true,"stcgroup":true,"stockholm":true,"storage":true,"studio":true,"study":true,"style":true,"sucks":true,"supersport":true,"supplies":true,"supply":true,"support":true,"surf":true,"surgery":true,"suzuki":true,"swatch":true,"swiss":true,"sydney":true,"symantec":true,"systems":true,"tab":true,"taipei":true,"taobao":true,"tatamotors":true,"tatar":true,"tattoo":true,"tax":true,"taxi":true,"tci":true,"team":true,"tech":true,"technology":true,"telecity":true,"telefonica":true,"temasek":true,"tennis":true,"thd":true,"theater":true,"tickets":true,"tienda":true,"tiffany":true,"tips":true,"tires":true,"tirol":true,"tmall":true,"today":true,"tokyo":true,"tools":true,"top":true,"toray":true,"toshiba":true,"tours":true,"town":true,"toys":true,"trade":true,"trading":true,"training":true,"travelers":true,"travelersinsurance":true,"trust":true,"trv":true,"tui":true,"tunes":true,"tushu":true,"tvs":true,"ubs":true,"university":true,"uno":true,"uol":true,"vacations":true,"vana":true,"vegas":true,"ventures":true,"versicherung":true,"vet":true,"viajes":true,"video":true,"viking":true,"villas":true,"vip":true,"virgin":true,"vision":true,"vista":true,"vistaprint":true,"viva":true,"vlaanderen":true,"vodka":true,"vote":true,"voting":true,"voto":true,"voyage":true,"vuelos":true,"wales":true,"walter":true,"wang":true,"wanggou":true,"watch":true,"watches":true,"weather":true,"weatherchannel":true,"webcam":true,"website":true,"wed":true,"wedding":true,"weibo":true,"weir":true,"whoswho":true,"wien":true,"wiki":true,"williamhill":true,"win":true,"windows":true,"wme":true,"work":true,"works":true,"world":true,"wtc":true,"wtf":true,"xbox":true,"xerox":true,"xihuan":true,"xin":true,"xn--11b4c3d":true,"xn--1ck2e1b":true,"xn--1qqw23a":true,"xn--30rr7y":true,"xn--3bst00m":true,"xn--3ds443g":true,"xn--3pxu8k":true,"xn--42c2d9a":true,"xn--45q11c":true,"xn--4gbrim":true,"xn--55qw42g":true,"xn--55qx5d":true,"xn--5tzm5g":true,"xn--6frz82g":true,"xn--6qq986b3xl":true,"xn--80adxhks":true,"xn--80asehdb":true,"xn--80aswg":true,"xn--8y0a063a":true,"xn--9dbq2a":true,"xn--9et52u":true,"xn--9krt00a":true,"xn--b4w605ferd":true,"xn--bck1b9a5dre4c":true,"xn--c1avg":true,"xn--c2br7g":true,"xn--cck2b3b":true,"xn--cg4bki":true,"xn--czr694b":true,"xn--czrs0t":true,"xn--czru2d":true,"xn--d1acj3b":true,"xn--eckvdtc9d":true,"xn--efvy88h":true,"xn--estv75g":true,"xn--fhbei":true,"xn--fiq228c5hs":true,"xn--fiq64b":true,"xn--fjq720a":true,"xn--flw351e":true,"xn--g2xx48c":true,"xn--gckr3f0f":true,"xn--hxt814e":true,"xn--i1b6b1a6a2e":true,"xn--imr513n":true,"xn--io0a7i":true,"xn--j1aef":true,"xn--jlq61u9w7b":true,"xn--jvr189m":true,"xn--kcrx77d1x4a":true,"xn--kpu716f":true,"xn--kput3i":true,"xn--mgba3a3ejt":true,"xn--mgbab2bd":true,"xn--mgbb9fbpob":true,"xn--mgbt3dhd":true,"xn--mk1bu44c":true,"xn--mxtq1m":true,"xn--ngbc5azd":true,"xn--ngbe9e0a":true,"xn--nqv7f":true,"xn--nqv7fs00ema":true,"xn--nyqy26a":true,"xn--p1acf":true,"xn--pbt977c":true,"xn--pssy2u":true,"xn--q9jyb4c":true,"xn--qcka1pmc":true,"xn--rhqv96g":true,"xn--rovu88b":true,"xn--ses554g":true,"xn--t60b56a":true,"xn--tckwe":true,"xn--unup4y":true,"xn--vermgensberater-ctb":true,"xn--vermgensberatung-pwb":true,"xn--vhquv":true,"xn--vuq861b":true,"xn--xhq521b":true,"xn--zfr164b":true,"xyz":true,"yachts":true,"yahoo":true,"yamaxun":true,"yandex":true,"yodobashi":true,"yoga":true,"yokohama":true,"youtube":true,"yun":true,"zara":true,"zero":true,"zip":true,"zone":true,"zuerich":true,"cloudfront.net":true,"ap-northeast-1.compute.amazonaws.com":true,"ap-southeast-1.compute.amazonaws.com":true,"ap-southeast-2.compute.amazonaws.com":true,"cn-north-1.compute.amazonaws.cn":true,"compute.amazonaws.cn":true,"compute.amazonaws.com":true,"compute-1.amazonaws.com":true,"eu-west-1.compute.amazonaws.com":true,"eu-central-1.compute.amazonaws.com":true,"sa-east-1.compute.amazonaws.com":true,"us-east-1.amazonaws.com":true,"us-gov-west-1.compute.amazonaws.com":true,"us-west-1.compute.amazonaws.com":true,"us-west-2.compute.amazonaws.com":true,"z-1.compute-1.amazonaws.com":true,"z-2.compute-1.amazonaws.com":true,"elasticbeanstalk.com":true,"elb.amazonaws.com":true,"s3.amazonaws.com":true,"s3-us-west-2.amazonaws.com":true,"s3-us-west-1.amazonaws.com":true,"s3-eu-west-1.amazonaws.com":true,"s3-ap-southeast-1.amazonaws.com":true,"s3-ap-southeast-2.amazonaws.com":true,"s3-ap-northeast-1.amazonaws.com":true,"s3-sa-east-1.amazonaws.com":true,"s3-us-gov-west-1.amazonaws.com":true,"s3-fips-us-gov-west-1.amazonaws.com":true,"s3-website-us-east-1.amazonaws.com":true,"s3-website-us-west-2.amazonaws.com":true,"s3-website-us-west-1.amazonaws.com":true,"s3-website-eu-west-1.amazonaws.com":true,"s3-website-ap-southeast-1.amazonaws.com":true,"s3-website-ap-southeast-2.amazonaws.com":true,"s3-website-ap-northeast-1.amazonaws.com":true,"s3-website-sa-east-1.amazonaws.com":true,"s3-website-us-gov-west-1.amazonaws.com":true,"betainabox.com":true,"ae.org":true,"ar.com":true,"br.com":true,"cn.com":true,"com.de":true,"com.se":true,"de.com":true,"eu.com":true,"gb.com":true,"gb.net":true,"hu.com":true,"hu.net":true,"jp.net":true,"jpn.com":true,"kr.com":true,"mex.com":true,"no.com":true,"qc.com":true,"ru.com":true,"sa.com":true,"se.com":true,"se.net":true,"uk.com":true,"uk.net":true,"us.com":true,"uy.com":true,"za.bz":true,"za.com":true,"africa.com":true,"gr.com":true,"in.net":true,"us.org":true,"co.com":true,"c.la":true,"cloudcontrolled.com":true,"cloudcontrolapp.com":true,"co.ca":true,"co.nl":true,"co.no":true,"*.platform.sh":true,"cupcake.is":true,"dreamhosters.com":true,"dyndns-at-home.com":true,"dyndns-at-work.com":true,"dyndns-blog.com":true,"dyndns-free.com":true,"dyndns-home.com":true,"dyndns-ip.com":true,"dyndns-mail.com":true,"dyndns-office.com":true,"dyndns-pics.com":true,"dyndns-remote.com":true,"dyndns-server.com":true,"dyndns-web.com":true,"dyndns-wiki.com":true,"dyndns-work.com":true,"dyndns.biz":true,"dyndns.info":true,"dyndns.org":true,"dyndns.tv":true,"at-band-camp.net":true,"ath.cx":true,"barrel-of-knowledge.info":true,"barrell-of-knowledge.info":true,"better-than.tv":true,"blogdns.com":true,"blogdns.net":true,"blogdns.org":true,"blogsite.org":true,"boldlygoingnowhere.org":true,"broke-it.net":true,"buyshouses.net":true,"cechire.com":true,"dnsalias.com":true,"dnsalias.net":true,"dnsalias.org":true,"dnsdojo.com":true,"dnsdojo.net":true,"dnsdojo.org":true,"does-it.net":true,"doesntexist.com":true,"doesntexist.org":true,"dontexist.com":true,"dontexist.net":true,"dontexist.org":true,"doomdns.com":true,"doomdns.org":true,"dvrdns.org":true,"dyn-o-saur.com":true,"dynalias.com":true,"dynalias.net":true,"dynalias.org":true,"dynathome.net":true,"dyndns.ws":true,"endofinternet.net":true,"endofinternet.org":true,"endoftheinternet.org":true,"est-a-la-maison.com":true,"est-a-la-masion.com":true,"est-le-patron.com":true,"est-mon-blogueur.com":true,"for-better.biz":true,"for-more.biz":true,"for-our.info":true,"for-some.biz":true,"for-the.biz":true,"forgot.her.name":true,"forgot.his.name":true,"from-ak.com":true,"from-al.com":true,"from-ar.com":true,"from-az.net":true,"from-ca.com":true,"from-co.net":true,"from-ct.com":true,"from-dc.com":true,"from-de.com":true,"from-fl.com":true,"from-ga.com":true,"from-hi.com":true,"from-ia.com":true,"from-id.com":true,"from-il.com":true,"from-in.com":true,"from-ks.com":true,"from-ky.com":true,"from-la.net":true,"from-ma.com":true,"from-md.com":true,"from-me.org":true,"from-mi.com":true,"from-mn.com":true,"from-mo.com":true,"from-ms.com":true,"from-mt.com":true,"from-nc.com":true,"from-nd.com":true,"from-ne.com":true,"from-nh.com":true,"from-nj.com":true,"from-nm.com":true,"from-nv.com":true,"from-ny.net":true,"from-oh.com":true,"from-ok.com":true,"from-or.com":true,"from-pa.com":true,"from-pr.com":true,"from-ri.com":true,"from-sc.com":true,"from-sd.com":true,"from-tn.com":true,"from-tx.com":true,"from-ut.com":true,"from-va.com":true,"from-vt.com":true,"from-wa.com":true,"from-wi.com":true,"from-wv.com":true,"from-wy.com":true,"ftpaccess.cc":true,"fuettertdasnetz.de":true,"game-host.org":true,"game-server.cc":true,"getmyip.com":true,"gets-it.net":true,"go.dyndns.org":true,"gotdns.com":true,"gotdns.org":true,"groks-the.info":true,"groks-this.info":true,"ham-radio-op.net":true,"here-for-more.info":true,"hobby-site.com":true,"hobby-site.org":true,"home.dyndns.org":true,"homedns.org":true,"homeftp.net":true,"homeftp.org":true,"homeip.net":true,"homelinux.com":true,"homelinux.net":true,"homelinux.org":true,"homeunix.com":true,"homeunix.net":true,"homeunix.org":true,"iamallama.com":true,"in-the-band.net":true,"is-a-anarchist.com":true,"is-a-blogger.com":true,"is-a-bookkeeper.com":true,"is-a-bruinsfan.org":true,"is-a-bulls-fan.com":true,"is-a-candidate.org":true,"is-a-caterer.com":true,"is-a-celticsfan.org":true,"is-a-chef.com":true,"is-a-chef.net":true,"is-a-chef.org":true,"is-a-conservative.com":true,"is-a-cpa.com":true,"is-a-cubicle-slave.com":true,"is-a-democrat.com":true,"is-a-designer.com":true,"is-a-doctor.com":true,"is-a-financialadvisor.com":true,"is-a-geek.com":true,"is-a-geek.net":true,"is-a-geek.org":true,"is-a-green.com":true,"is-a-guru.com":true,"is-a-hard-worker.com":true,"is-a-hunter.com":true,"is-a-knight.org":true,"is-a-landscaper.com":true,"is-a-lawyer.com":true,"is-a-liberal.com":true,"is-a-libertarian.com":true,"is-a-linux-user.org":true,"is-a-llama.com":true,"is-a-musician.com":true,"is-a-nascarfan.com":true,"is-a-nurse.com":true,"is-a-painter.com":true,"is-a-patsfan.org":true,"is-a-personaltrainer.com":true,"is-a-photographer.com":true,"is-a-player.com":true,"is-a-republican.com":true,"is-a-rockstar.com":true,"is-a-socialist.com":true,"is-a-soxfan.org":true,"is-a-student.com":true,"is-a-teacher.com":true,"is-a-techie.com":true,"is-a-therapist.com":true,"is-an-accountant.com":true,"is-an-actor.com":true,"is-an-actress.com":true,"is-an-anarchist.com":true,"is-an-artist.com":true,"is-an-engineer.com":true,"is-an-entertainer.com":true,"is-by.us":true,"is-certified.com":true,"is-found.org":true,"is-gone.com":true,"is-into-anime.com":true,"is-into-cars.com":true,"is-into-cartoons.com":true,"is-into-games.com":true,"is-leet.com":true,"is-lost.org":true,"is-not-certified.com":true,"is-saved.org":true,"is-slick.com":true,"is-uberleet.com":true,"is-very-bad.org":true,"is-very-evil.org":true,"is-very-good.org":true,"is-very-nice.org":true,"is-very-sweet.org":true,"is-with-theband.com":true,"isa-geek.com":true,"isa-geek.net":true,"isa-geek.org":true,"isa-hockeynut.com":true,"issmarterthanyou.com":true,"isteingeek.de":true,"istmein.de":true,"kicks-ass.net":true,"kicks-ass.org":true,"knowsitall.info":true,"land-4-sale.us":true,"lebtimnetz.de":true,"leitungsen.de":true,"likes-pie.com":true,"likescandy.com":true,"merseine.nu":true,"mine.nu":true,"misconfused.org":true,"mypets.ws":true,"myphotos.cc":true,"neat-url.com":true,"office-on-the.net":true,"on-the-web.tv":true,"podzone.net":true,"podzone.org":true,"readmyblog.org":true,"saves-the-whales.com":true,"scrapper-site.net":true,"scrapping.cc":true,"selfip.biz":true,"selfip.com":true,"selfip.info":true,"selfip.net":true,"selfip.org":true,"sells-for-less.com":true,"sells-for-u.com":true,"sells-it.net":true,"sellsyourhome.org":true,"servebbs.com":true,"servebbs.net":true,"servebbs.org":true,"serveftp.net":true,"serveftp.org":true,"servegame.org":true,"shacknet.nu":true,"simple-url.com":true,"space-to-rent.com":true,"stuff-4-sale.org":true,"stuff-4-sale.us":true,"teaches-yoga.com":true,"thruhere.net":true,"traeumtgerade.de":true,"webhop.biz":true,"webhop.info":true,"webhop.net":true,"webhop.org":true,"worse-than.tv":true,"writesthisblog.com":true,"a.ssl.fastly.net":true,"b.ssl.fastly.net":true,"global.ssl.fastly.net":true,"a.prod.fastly.net":true,"global.prod.fastly.net":true,"firebaseapp.com":true,"flynnhub.com":true,"service.gov.uk":true,"github.io":true,"githubusercontent.com":true,"ro.com":true,"appspot.com":true,"blogspot.ae":true,"blogspot.be":true,"blogspot.bj":true,"blogspot.ca":true,"blogspot.cf":true,"blogspot.ch":true,"blogspot.co.at":true,"blogspot.co.il":true,"blogspot.co.nz":true,"blogspot.co.uk":true,"blogspot.com":true,"blogspot.com.ar":true,"blogspot.com.au":true,"blogspot.com.br":true,"blogspot.com.es":true,"blogspot.com.tr":true,"blogspot.cv":true,"blogspot.cz":true,"blogspot.de":true,"blogspot.dk":true,"blogspot.fi":true,"blogspot.fr":true,"blogspot.gr":true,"blogspot.hk":true,"blogspot.hu":true,"blogspot.ie":true,"blogspot.in":true,"blogspot.it":true,"blogspot.jp":true,"blogspot.kr":true,"blogspot.mr":true,"blogspot.mx":true,"blogspot.nl":true,"blogspot.no":true,"blogspot.pt":true,"blogspot.re":true,"blogspot.ro":true,"blogspot.ru":true,"blogspot.se":true,"blogspot.sg":true,"blogspot.sk":true,"blogspot.td":true,"blogspot.tw":true,"codespot.com":true,"googleapis.com":true,"googlecode.com":true,"pagespeedmobilizer.com":true,"withgoogle.com":true,"herokuapp.com":true,"herokussl.com":true,"iki.fi":true,"biz.at":true,"info.at":true,"co.pl":true,"azurewebsites.net":true,"azure-mobile.net":true,"cloudapp.net":true,"nfshost.com":true,"nyc.mn":true,"nid.io":true,"operaunite.com":true,"outsystemscloud.com":true,"art.pl":true,"gliwice.pl":true,"krakow.pl":true,"poznan.pl":true,"wroc.pl":true,"zakopane.pl":true,"priv.at":true,"rhcloud.com":true,"sinaapp.com":true,"vipsinaapp.com":true,"1kapp.com":true,"gda.pl":true,"gdansk.pl":true,"gdynia.pl":true,"med.pl":true,"sopot.pl":true,"hk.com":true,"hk.org":true,"ltd.hk":true,"inc.hk":true,"yolasite.com":true,"za.net":true,"za.org":true});

	// END of automatically generated file


/***/ },
/* 258 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	'use strict';
	/*jshint unused:false */

	function Store() {
	}
	exports.Store = Store;

	// Stores may be synchronous, but are still required to use a
	// Continuation-Passing Style API.  The CookieJar itself will expose a "*Sync"
	// API that converts from synchronous-callbacks to imperative style.
	Store.prototype.synchronous = false;

	Store.prototype.findCookie = function(domain, path, key, cb) {
	  throw new Error('findCookie is not implemented');
	};

	Store.prototype.findCookies = function(domain, path, cb) {
	  throw new Error('findCookies is not implemented');
	};

	Store.prototype.putCookie = function(cookie, cb) {
	  throw new Error('putCookie is not implemented');
	};

	Store.prototype.updateCookie = function(oldCookie, newCookie, cb) {
	  // recommended default implementation:
	  // return this.putCookie(newCookie, cb);
	  throw new Error('updateCookie is not implemented');
	};

	Store.prototype.removeCookie = function(domain, path, key, cb) {
	  throw new Error('removeCookie is not implemented');
	};

	Store.prototype.removeCookies = function(domain, path, cb) {
	  throw new Error('removeCookies is not implemented');
	};

	Store.prototype.getAllCookies = function(cb) {
	  throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');
	};


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	'use strict';
	var Store = __webpack_require__(258).Store;
	var permuteDomain = __webpack_require__(260).permuteDomain;
	var pathMatch = __webpack_require__(261).pathMatch;
	var util = __webpack_require__(10);

	function MemoryCookieStore() {
	  Store.call(this);
	  this.idx = {};
	}
	util.inherits(MemoryCookieStore, Store);
	exports.MemoryCookieStore = MemoryCookieStore;
	MemoryCookieStore.prototype.idx = null;

	// Since it's just a struct in RAM, this Store is synchronous
	MemoryCookieStore.prototype.synchronous = true;

	// force a default depth:
	MemoryCookieStore.prototype.inspect = function() {
	  return "{ idx: "+util.inspect(this.idx, false, 2)+' }';
	};

	MemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {
	  if (!this.idx[domain]) {
	    return cb(null,undefined);
	  }
	  if (!this.idx[domain][path]) {
	    return cb(null,undefined);
	  }
	  return cb(null,this.idx[domain][path][key]||null);
	};

	MemoryCookieStore.prototype.findCookies = function(domain, path, cb) {
	  var results = [];
	  if (!domain) {
	    return cb(null,[]);
	  }

	  var pathMatcher;
	  if (!path) {
	    // null means "all paths"
	    pathMatcher = function matchAll(domainIndex) {
	      for (var curPath in domainIndex) {
	        var pathIndex = domainIndex[curPath];
	        for (var key in pathIndex) {
	          results.push(pathIndex[key]);
	        }
	      }
	    };

	  } else {
	    pathMatcher = function matchRFC(domainIndex) {
	       //NOTE: we should use path-match algorithm from S5.1.4 here
	       //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)
	       Object.keys(domainIndex).forEach(function (cookiePath) {
	         if (pathMatch(path, cookiePath)) {
	           var pathIndex = domainIndex[cookiePath];

	           for (var key in pathIndex) {
	             results.push(pathIndex[key]);
	           }
	         }
	       });
	     };
	  }

	  var domains = permuteDomain(domain) || [domain];
	  var idx = this.idx;
	  domains.forEach(function(curDomain) {
	    var domainIndex = idx[curDomain];
	    if (!domainIndex) {
	      return;
	    }
	    pathMatcher(domainIndex);
	  });

	  cb(null,results);
	};

	MemoryCookieStore.prototype.putCookie = function(cookie, cb) {
	  if (!this.idx[cookie.domain]) {
	    this.idx[cookie.domain] = {};
	  }
	  if (!this.idx[cookie.domain][cookie.path]) {
	    this.idx[cookie.domain][cookie.path] = {};
	  }
	  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
	  cb(null);
	};

	MemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {
	  // updateCookie() may avoid updating cookies that are identical.  For example,
	  // lastAccessed may not be important to some stores and an equality
	  // comparison could exclude that field.
	  this.putCookie(newCookie,cb);
	};

	MemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {
	  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {
	    delete this.idx[domain][path][key];
	  }
	  cb(null);
	};

	MemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {
	  if (this.idx[domain]) {
	    if (path) {
	      delete this.idx[domain][path];
	    } else {
	      delete this.idx[domain];
	    }
	  }
	  return cb(null);
	};

	MemoryCookieStore.prototype.getAllCookies = function(cb) {
	  var cookies = [];
	  var idx = this.idx;

	  var domains = Object.keys(idx);
	  domains.forEach(function(domain) {
	    var paths = Object.keys(idx[domain]);
	    paths.forEach(function(path) {
	      var keys = Object.keys(idx[domain][path]);
	      keys.forEach(function(key) {
	        if (key !== null) {
	          cookies.push(idx[domain][path][key]);
	        }
	      });
	    });
	  });

	  // Sort by creationIndex so deserializing retains the creation order.
	  // When implementing your own store, this SHOULD retain the order too
	  cookies.sort(function(a,b) {
	    return (a.creationIndex||0) - (b.creationIndex||0);
	  });

	  cb(null, cookies);
	};


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	"use strict";
	var pubsuffix = __webpack_require__(257);

	// Gives the permutation of all possible domainMatch()es of a given domain. The
	// array is in shortest-to-longest order.  Handy for indexing.
	function permuteDomain (domain) {
	  var pubSuf = pubsuffix.getPublicSuffix(domain);
	  if (!pubSuf) {
	    return null;
	  }
	  if (pubSuf == domain) {
	    return [domain];
	  }

	  var prefix = domain.slice(0, -(pubSuf.length + 1)); // ".example.com"
	  var parts = prefix.split('.').reverse();
	  var cur = pubSuf;
	  var permutations = [cur];
	  while (parts.length) {
	    cur = parts.shift() + '.' + cur;
	    permutations.push(cur);
	  }
	  return permutations;
	}

	exports.permuteDomain = permuteDomain;


/***/ },
/* 261 */
/***/ function(module, exports) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	"use strict";
	/*
	 * "A request-path path-matches a given cookie-path if at least one of the
	 * following conditions holds:"
	 */
	function pathMatch (reqPath, cookiePath) {
	  // "o  The cookie-path and the request-path are identical."
	  if (cookiePath === reqPath) {
	    return true;
	  }

	  var idx = reqPath.indexOf(cookiePath);
	  if (idx === 0) {
	    // "o  The cookie-path is a prefix of the request-path, and the last
	    // character of the cookie-path is %x2F ("/")."
	    if (cookiePath.substr(-1) === "/") {
	      return true;
	    }

	    // " o  The cookie-path is a prefix of the request-path, and the first
	    // character of the request-path that is not included in the cookie- path
	    // is a %x2F ("/") character."
	    if (reqPath.substr(cookiePath.length, 1) === "/") {
	      return true;
	    }
	  }

	  return false;
	}

	exports.pathMatch = pathMatch;


/***/ },
/* 262 */,
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process, Buffer) {'use strict'

	var jsonSafeStringify = __webpack_require__(264)
	  , crypto = __webpack_require__(52)

	function deferMethod() {
	  if (typeof setImmediate === 'undefined') {
	    return process.nextTick
	  }

	  return setImmediate
	}

	function isFunction(value) {
	  return typeof value === 'function'
	}

	function paramsHaveRequestBody(params) {
	  return (
	    params.body ||
	    params.requestBodyStream ||
	    (params.json && typeof params.json !== 'boolean') ||
	    params.multipart
	  )
	}

	function safeStringify (obj) {
	  var ret
	  try {
	    ret = JSON.stringify(obj)
	  } catch (e) {
	    ret = jsonSafeStringify(obj)
	  }
	  return ret
	}

	function md5 (str) {
	  return crypto.createHash('md5').update(str).digest('hex')
	}

	function isReadStream (rs) {
	  return rs.readable && rs.path && rs.mode
	}

	function toBase64 (str) {
	  return (new Buffer(str || '', 'utf8')).toString('base64')
	}

	function copy (obj) {
	  var o = {}
	  Object.keys(obj).forEach(function (i) {
	    o[i] = obj[i]
	  })
	  return o
	}

	function version () {
	  var numbers = process.version.replace('v', '').split('.')
	  return {
	    major: parseInt(numbers[0], 10),
	    minor: parseInt(numbers[1], 10),
	    patch: parseInt(numbers[2], 10)
	  }
	}

	exports.isFunction            = isFunction
	exports.paramsHaveRequestBody = paramsHaveRequestBody
	exports.safeStringify         = safeStringify
	exports.md5                   = md5
	exports.isReadStream          = isReadStream
	exports.toBase64              = toBase64
	exports.copy                  = copy
	exports.version               = version
	exports.defer                 = deferMethod()

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(172).setImmediate, __webpack_require__(4), __webpack_require__(5).Buffer))

/***/ },
/* 264 */
/***/ function(module, exports) {

	exports = module.exports = stringify
	exports.getSerialize = serializer

	function stringify(obj, replacer, spaces, cycleReplacer) {
	  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)
	}

	function serializer(replacer, cycleReplacer) {
	  var stack = [], keys = []

	  if (cycleReplacer == null) cycleReplacer = function(key, value) {
	    if (stack[0] === value) return "[Circular ~]"
	    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]"
	  }

	  return function(key, value) {
	    if (stack.length > 0) {
	      var thisPos = stack.indexOf(this)
	      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)
	      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)
	      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)
	    }
	    else stack.push(value)

	    return replacer == null ? value : replacer.call(this, key, value)
	  }
	}


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {'use strict'

	var http = __webpack_require__(18)
	  , https = __webpack_require__(266)
	  , url = __webpack_require__(41)
	  , util = __webpack_require__(10)
	  , stream = __webpack_require__(21)
	  , zlib = __webpack_require__(267)
	  , bl = __webpack_require__(281)
	  , hawk = __webpack_require__(293)
	  , aws = __webpack_require__(294)
	  , httpSignature = __webpack_require__(295)
	  , mime = __webpack_require__(310)
	  , stringstream = __webpack_require__(313)
	  , caseless = __webpack_require__(314)
	  , ForeverAgent = __webpack_require__(315)
	  , FormData = __webpack_require__(316)
	  , helpers = __webpack_require__(263)
	  , cookies = __webpack_require__(255)
	  , getProxyFromURI = __webpack_require__(317)
	  , Querystring = __webpack_require__(318).Querystring
	  , Har = __webpack_require__(323).Har
	  , Auth = __webpack_require__(349).Auth
	  , OAuth = __webpack_require__(351).OAuth
	  , Multipart = __webpack_require__(353).Multipart
	  , Redirect = __webpack_require__(357).Redirect
	  , Tunnel = __webpack_require__(358).Tunnel

	var safeStringify = helpers.safeStringify
	  , isReadStream = helpers.isReadStream
	  , toBase64 = helpers.toBase64
	  , defer = helpers.defer
	  , copy = helpers.copy
	  , version = helpers.version
	  , globalCookieJar = cookies.jar()


	var globalPool = {}

	function filterForNonReserved(reserved, options) {
	  // Filter out properties that are not reserved.
	  // Reserved values are passed in at call site.

	  var object = {}
	  for (var i in options) {
	    var notReserved = (reserved.indexOf(i) === -1)
	    if (notReserved) {
	      object[i] = options[i]
	    }
	  }
	  return object
	}

	function filterOutReservedFunctions(reserved, options) {
	  // Filter out properties that are functions and are reserved.
	  // Reserved values are passed in at call site.

	  var object = {}
	  for (var i in options) {
	    var isReserved = !(reserved.indexOf(i) === -1)
	    var isFunction = (typeof options[i] === 'function')
	    if (!(isReserved && isFunction)) {
	      object[i] = options[i]
	    }
	  }
	  return object

	}

	// Function for properly handling a connection error
	function connectionErrorHandler(error) {
	  var socket = this
	  if (socket.res) {
	    if (socket.res.request) {
	      socket.res.request.emit('error', error)
	    } else {
	      socket.res.emit('error', error)
	    }
	  } else {
	    socket._httpMessage.emit('error', error)
	  }
	}

	// Return a simpler request object to allow serialization
	function requestToJSON() {
	  var self = this
	  return {
	    uri: self.uri,
	    method: self.method,
	    headers: self.headers
	  }
	}

	// Return a simpler response object to allow serialization
	function responseToJSON() {
	  var self = this
	  return {
	    statusCode: self.statusCode,
	    body: self.body,
	    headers: self.headers,
	    request: requestToJSON.call(self.request)
	  }
	}

	function Request (options) {
	  // if given the method property in options, set property explicitMethod to true

	  // extend the Request instance with any non-reserved properties
	  // remove any reserved functions from the options object
	  // set Request instance to be readable and writable
	  // call init

	  var self = this

	  // start with HAR, then override with additional options
	  if (options.har) {
	    self._har = new Har(self)
	    options = self._har.options(options)
	  }

	  stream.Stream.call(self)
	  var reserved = Object.keys(Request.prototype)
	  var nonReserved = filterForNonReserved(reserved, options)

	  stream.Stream.call(self)
	  util._extend(self, nonReserved)
	  options = filterOutReservedFunctions(reserved, options)

	  self.readable = true
	  self.writable = true
	  if (options.method) {
	    self.explicitMethod = true
	  }
	  self._qs = new Querystring(self)
	  self._auth = new Auth(self)
	  self._oauth = new OAuth(self)
	  self._multipart = new Multipart(self)
	  self._redirect = new Redirect(self)
	  self._tunnel = new Tunnel(self)
	  self.init(options)
	}

	util.inherits(Request, stream.Stream)

	// Debugging
	Request.debug = process.env.NODE_DEBUG && /\brequest\b/.test(process.env.NODE_DEBUG)
	function debug() {
	  if (Request.debug) {
	    console.error('REQUEST %s', util.format.apply(util, arguments))
	  }
	}
	Request.prototype.debug = debug

	Request.prototype.init = function (options) {
	  // init() contains all the code to setup the request object.
	  // the actual outgoing request is not started until start() is called
	  // this function is called from both the constructor and on redirect.
	  var self = this
	  if (!options) {
	    options = {}
	  }
	  self.headers = self.headers ? copy(self.headers) : {}

	  // Delete headers with value undefined since they break
	  // ClientRequest.OutgoingMessage.setHeader in node 0.12
	  for (var headerName in self.headers) {
	    if (typeof self.headers[headerName] === 'undefined') {
	      delete self.headers[headerName]
	    }
	  }

	  caseless.httpify(self, self.headers)

	  if (!self.method) {
	    self.method = options.method || 'GET'
	  }
	  if (!self.localAddress) {
	    self.localAddress = options.localAddress
	  }

	  self._qs.init(options)

	  debug(options)
	  if (!self.pool && self.pool !== false) {
	    self.pool = globalPool
	  }
	  self.dests = self.dests || []
	  self.__isRequestRequest = true

	  // Protect against double callback
	  if (!self._callback && self.callback) {
	    self._callback = self.callback
	    self.callback = function () {
	      if (self._callbackCalled) {
	        return // Print a warning maybe?
	      }
	      self._callbackCalled = true
	      self._callback.apply(self, arguments)
	    }
	    self.on('error', self.callback.bind())
	    self.on('complete', self.callback.bind(self, null))
	  }

	  // People use this property instead all the time, so support it
	  if (!self.uri && self.url) {
	    self.uri = self.url
	    delete self.url
	  }

	  // If there's a baseUrl, then use it as the base URL (i.e. uri must be
	  // specified as a relative path and is appended to baseUrl).
	  if (self.baseUrl) {
	    if (typeof self.baseUrl !== 'string') {
	      return self.emit('error', new Error('options.baseUrl must be a string'))
	    }

	    if (typeof self.uri !== 'string') {
	      return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'))
	    }

	    if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {
	      return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'))
	    }

	    // Handle all cases to make sure that there's only one slash between
	    // baseUrl and uri.
	    var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1
	    var uriStartsWithSlash = self.uri.indexOf('/') === 0

	    if (baseUrlEndsWithSlash && uriStartsWithSlash) {
	      self.uri = self.baseUrl + self.uri.slice(1)
	    } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {
	      self.uri = self.baseUrl + self.uri
	    } else if (self.uri === '') {
	      self.uri = self.baseUrl
	    } else {
	      self.uri = self.baseUrl + '/' + self.uri
	    }
	    delete self.baseUrl
	  }

	  // A URI is needed by this point, emit error if we haven't been able to get one
	  if (!self.uri) {
	    return self.emit('error', new Error('options.uri is a required argument'))
	  }

	  // If a string URI/URL was given, parse it into a URL object
	  if (typeof self.uri === 'string') {
	    self.uri = url.parse(self.uri)
	  }

	  // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme
	  if (self.uri.protocol === 'unix:') {
	    return self.emit('error', new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`'))
	  }

	  // Support Unix Sockets
	  if (self.uri.host === 'unix') {
	    self.enableUnixSocket()
	  }

	  if (self.strictSSL === false) {
	    self.rejectUnauthorized = false
	  }

	  if (!self.uri.pathname) {self.uri.pathname = '/'}

	  if (!(self.uri.host || (self.uri.hostname && self.uri.port)) && !self.uri.isUnix) {
	    // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar
	    // Detect and reject it as soon as possible
	    var faultyUri = url.format(self.uri)
	    var message = 'Invalid URI "' + faultyUri + '"'
	    if (Object.keys(options).length === 0) {
	      // No option ? This can be the sign of a redirect
	      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
	      // they should be warned that it can be caused by a redirection (can save some hair)
	      message += '. This can be caused by a crappy redirection.'
	    }
	    // This error was fatal
	    return self.emit('error', new Error(message))
	  }

	  if (!self.hasOwnProperty('proxy')) {
	    self.proxy = getProxyFromURI(self.uri)
	  }

	  self.tunnel = self._tunnel.isEnabled(options)
	  if (self.proxy) {
	    self._tunnel.setup(options)
	  }

	  self._redirect.onRequest(options)

	  self.setHost = false
	  if (!self.hasHeader('host')) {
	    var hostHeaderName = self.originalHostHeaderName || 'host'
	    self.setHeader(hostHeaderName, self.uri.hostname)
	    if (self.uri.port) {
	      if ( !(self.uri.port === 80 && self.uri.protocol === 'http:') &&
	           !(self.uri.port === 443 && self.uri.protocol === 'https:') ) {
	        self.setHeader(hostHeaderName, self.getHeader('host') + (':' + self.uri.port) )
	      }
	    }
	    self.setHost = true
	  }

	  self.jar(self._jar || options.jar)

	  if (!self.uri.port) {
	    if (self.uri.protocol === 'http:') {self.uri.port = 80}
	    else if (self.uri.protocol === 'https:') {self.uri.port = 443}
	  }

	  if (self.proxy && !self.tunnel) {
	    self.port = self.proxy.port
	    self.host = self.proxy.hostname
	  } else {
	    self.port = self.uri.port
	    self.host = self.uri.hostname
	  }

	  if (options.form) {
	    self.form(options.form)
	  }

	  if (options.formData) {
	    var formData = options.formData
	    var requestForm = self.form()
	    var appendFormValue = function (key, value) {
	      if (value.hasOwnProperty('value') && value.hasOwnProperty('options')) {
	        requestForm.append(key, value.value, value.options)
	      } else {
	        requestForm.append(key, value)
	      }
	    }
	    for (var formKey in formData) {
	      if (formData.hasOwnProperty(formKey)) {
	        var formValue = formData[formKey]
	        if (formValue instanceof Array) {
	          for (var j = 0; j < formValue.length; j++) {
	            appendFormValue(formKey, formValue[j])
	          }
	        } else {
	          appendFormValue(formKey, formValue)
	        }
	      }
	    }
	  }

	  if (options.qs) {
	    self.qs(options.qs)
	  }

	  if (self.uri.path) {
	    self.path = self.uri.path
	  } else {
	    self.path = self.uri.pathname + (self.uri.search || '')
	  }

	  if (self.path.length === 0) {
	    self.path = '/'
	  }

	  // Auth must happen last in case signing is dependent on other headers
	  if (options.aws) {
	    self.aws(options.aws)
	  }

	  if (options.hawk) {
	    self.hawk(options.hawk)
	  }

	  if (options.httpSignature) {
	    self.httpSignature(options.httpSignature)
	  }

	  if (options.auth) {
	    if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {
	      options.auth.user = options.auth.username
	    }
	    if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {
	      options.auth.pass = options.auth.password
	    }

	    self.auth(
	      options.auth.user,
	      options.auth.pass,
	      options.auth.sendImmediately,
	      options.auth.bearer
	    )
	  }

	  if (self.gzip && !self.hasHeader('accept-encoding')) {
	    self.setHeader('accept-encoding', 'gzip')
	  }

	  if (self.uri.auth && !self.hasHeader('authorization')) {
	    var uriAuthPieces = self.uri.auth.split(':').map(function(item) {return self._qs.unescape(item)})
	    self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true)
	  }

	  if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {
	    var proxyAuthPieces = self.proxy.auth.split(':').map(function(item) {return self._qs.unescape(item)})
	    var authHeader = 'Basic ' + toBase64(proxyAuthPieces.join(':'))
	    self.setHeader('proxy-authorization', authHeader)
	  }

	  if (self.proxy && !self.tunnel) {
	    self.path = (self.uri.protocol + '//' + self.uri.host + self.path)
	  }

	  if (options.json) {
	    self.json(options.json)
	  }
	  if (options.multipart) {
	    self.multipart(options.multipart)
	  }

	  if (options.time) {
	    self.timing = true
	    self.elapsedTime = self.elapsedTime || 0
	  }

	  function setContentLength () {
	    if (!self.hasHeader('content-length')) {
	      var length
	      if (typeof self.body === 'string') {
	        length = Buffer.byteLength(self.body)
	      }
	      else if (Array.isArray(self.body)) {
	        length = self.body.reduce(function (a, b) {return a + b.length}, 0)
	      }
	      else {
	        length = self.body.length
	      }

	      if (length) {
	        self.setHeader('content-length', length)
	      } else {
	        self.emit('error', new Error('Argument error, options.body.'))
	      }
	    }
	  }
	  if (self.body) {
	    setContentLength()
	  }

	  if (options.oauth) {
	    self.oauth(options.oauth)
	  } else if (self._oauth.params && self.hasHeader('authorization')) {
	    self.oauth(self._oauth.params)
	  }

	  var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol
	    , defaultModules = {'http:':http, 'https:':https}
	    , httpModules = self.httpModules || {}

	  self.httpModule = httpModules[protocol] || defaultModules[protocol]

	  if (!self.httpModule) {
	    return self.emit('error', new Error('Invalid protocol: ' + protocol))
	  }

	  if (options.ca) {
	    self.ca = options.ca
	  }

	  if (!self.agent) {
	    if (options.agentOptions) {
	      self.agentOptions = options.agentOptions
	    }

	    if (options.agentClass) {
	      self.agentClass = options.agentClass
	    } else if (options.forever) {
	      var v = version()
	      // use ForeverAgent in node 0.10- only
	      if (v.major === 0 && v.minor <= 10) {
	        self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL
	      } else {
	        self.agentClass = self.httpModule.Agent
	        self.agentOptions = self.agentOptions || {}
	        self.agentOptions.keepAlive = true
	      }
	    } else {
	      self.agentClass = self.httpModule.Agent
	    }
	  }

	  if (self.pool === false) {
	    self.agent = false
	  } else {
	    self.agent = self.agent || self.getNewAgent()
	  }

	  self.on('pipe', function (src) {
	    if (self.ntick && self._started) {
	      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'))
	    }
	    self.src = src
	    if (isReadStream(src)) {
	      if (!self.hasHeader('content-type')) {
	        self.setHeader('content-type', mime.lookup(src.path))
	      }
	    } else {
	      if (src.headers) {
	        for (var i in src.headers) {
	          if (!self.hasHeader(i)) {
	            self.setHeader(i, src.headers[i])
	          }
	        }
	      }
	      if (self._json && !self.hasHeader('content-type')) {
	        self.setHeader('content-type', 'application/json')
	      }
	      if (src.method && !self.explicitMethod) {
	        self.method = src.method
	      }
	    }

	    // self.on('pipe', function () {
	    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
	    // })
	  })

	  defer(function () {
	    if (self._aborted) {
	      return
	    }

	    var end = function () {
	      if (self._form) {
	        if (!self._auth.hasAuth) {
	          self._form.pipe(self)
	        }
	        else if (self._auth.hasAuth && self._auth.sentAuth) {
	          self._form.pipe(self)
	        }
	      }
	      if (self._multipart && self._multipart.chunked) {
	        self._multipart.body.pipe(self)
	      }
	      if (self.body) {
	        setContentLength()
	        if (Array.isArray(self.body)) {
	          self.body.forEach(function (part) {
	            self.write(part)
	          })
	        } else {
	          self.write(self.body)
	        }
	        self.end()
	      } else if (self.requestBodyStream) {
	        console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.')
	        self.requestBodyStream.pipe(self)
	      } else if (!self.src) {
	        if (self._auth.hasAuth && !self._auth.sentAuth) {
	          self.end()
	          return
	        }
	        if (self.method !== 'GET' && typeof self.method !== 'undefined') {
	          self.setHeader('content-length', 0)
	        }
	        self.end()
	      }
	    }

	    if (self._form && !self.hasHeader('content-length')) {
	      // Before ending the request, we had to compute the length of the whole form, asyncly
	      self.setHeader(self._form.getHeaders(), true)
	      self._form.getLength(function (err, length) {
	        if (!err) {
	          self.setHeader('content-length', length)
	        }
	        end()
	      })
	    } else {
	      end()
	    }

	    self.ntick = true
	  })

	}

	// Must call this when following a redirect from https to http or vice versa
	// Attempts to keep everything as identical as possible, but update the
	// httpModule, Tunneling agent, and/or Forever Agent in use.
	Request.prototype._updateProtocol = function () {
	  var self = this
	  var protocol = self.uri.protocol

	  if (protocol === 'https:' || self.tunnel) {
	    // previously was doing http, now doing https
	    // if it's https, then we might need to tunnel now.
	    if (self.proxy) {
	      if (self._tunnel.setup()) {
	        return
	      }
	    }

	    self.httpModule = https
	    switch (self.agentClass) {
	      case ForeverAgent:
	        self.agentClass = ForeverAgent.SSL
	        break
	      case http.Agent:
	        self.agentClass = https.Agent
	        break
	      default:
	        // nothing we can do.  Just hope for the best.
	        return
	    }

	    // if there's an agent, we need to get a new one.
	    if (self.agent) {
	      self.agent = self.getNewAgent()
	    }

	  } else {
	    // previously was doing https, now doing http
	    self.httpModule = http
	    switch (self.agentClass) {
	      case ForeverAgent.SSL:
	        self.agentClass = ForeverAgent
	        break
	      case https.Agent:
	        self.agentClass = http.Agent
	        break
	      default:
	        // nothing we can do.  just hope for the best
	        return
	    }

	    // if there's an agent, then get a new one.
	    if (self.agent) {
	      self.agent = null
	      self.agent = self.getNewAgent()
	    }
	  }
	}

	Request.prototype.getNewAgent = function () {
	  var self = this
	  var Agent = self.agentClass
	  var options = {}
	  if (self.agentOptions) {
	    for (var i in self.agentOptions) {
	      options[i] = self.agentOptions[i]
	    }
	  }
	  if (self.ca) {
	    options.ca = self.ca
	  }
	  if (self.ciphers) {
	    options.ciphers = self.ciphers
	  }
	  if (self.secureProtocol) {
	    options.secureProtocol = self.secureProtocol
	  }
	  if (self.secureOptions) {
	    options.secureOptions = self.secureOptions
	  }
	  if (typeof self.rejectUnauthorized !== 'undefined') {
	    options.rejectUnauthorized = self.rejectUnauthorized
	  }

	  if (self.cert && self.key) {
	    options.key = self.key
	    options.cert = self.cert
	  }

	  if (self.pfx) {
	    options.pfx = self.pfx
	  }

	  if (self.passphrase) {
	    options.passphrase = self.passphrase
	  }

	  var poolKey = ''

	  // different types of agents are in different pools
	  if (Agent !== self.httpModule.Agent) {
	    poolKey += Agent.name
	  }

	  // ca option is only relevant if proxy or destination are https
	  var proxy = self.proxy
	  if (typeof proxy === 'string') {
	    proxy = url.parse(proxy)
	  }
	  var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:'

	  if (isHttps) {
	    if (options.ca) {
	      if (poolKey) {
	        poolKey += ':'
	      }
	      poolKey += options.ca
	    }

	    if (typeof options.rejectUnauthorized !== 'undefined') {
	      if (poolKey) {
	        poolKey += ':'
	      }
	      poolKey += options.rejectUnauthorized
	    }

	    if (options.cert) {
	      if (poolKey) {
	        poolKey += ':'
	      }
	      poolKey += options.cert.toString('ascii') + options.key.toString('ascii')
	    }

	    if (options.pfx) {
	      if (poolKey) {
	        poolKey += ':'
	      }
	      poolKey += options.pfx.toString('ascii')
	    }

	    if (options.ciphers) {
	      if (poolKey) {
	        poolKey += ':'
	      }
	      poolKey += options.ciphers
	    }

	    if (options.secureProtocol) {
	      if (poolKey) {
	        poolKey += ':'
	      }
	      poolKey += options.secureProtocol
	    }

	    if (options.secureOptions) {
	      if (poolKey) {
	        poolKey += ':'
	      }
	      poolKey += options.secureOptions
	    }
	  }

	  if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {
	    // not doing anything special.  Use the globalAgent
	    return self.httpModule.globalAgent
	  }

	  // we're using a stored agent.  Make sure it's protocol-specific
	  poolKey = self.uri.protocol + poolKey

	  // generate a new agent for this setting if none yet exists
	  if (!self.pool[poolKey]) {
	    self.pool[poolKey] = new Agent(options)
	    // properly set maxSockets on new agents
	    if (self.pool.maxSockets) {
	      self.pool[poolKey].maxSockets = self.pool.maxSockets
	    }
	  }

	  return self.pool[poolKey]
	}

	Request.prototype.start = function () {
	  // start() is called once we are ready to send the outgoing HTTP request.
	  // this is usually called on the first write(), end() or on nextTick()
	  var self = this

	  if (self._aborted) {
	    return
	  }

	  self._started = true
	  self.method = self.method || 'GET'
	  self.href = self.uri.href

	  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
	    self.setHeader('content-length', self.src.stat.size)
	  }
	  if (self._aws) {
	    self.aws(self._aws, true)
	  }

	  // We have a method named auth, which is completely different from the http.request
	  // auth option.  If we don't remove it, we're gonna have a bad time.
	  var reqOptions = copy(self)
	  delete reqOptions.auth

	  debug('make request', self.uri.href)

	  self.req = self.httpModule.request(reqOptions)

	  if (self.timing) {
	    self.startTime = new Date().getTime()
	  }

	  if (self.timeout && !self.timeoutTimer) {
	    var timeout = self.timeout < 0 ? 0 : self.timeout
	    // Set a timeout in memory - this block will throw if the server takes more
	    // than `timeout` to write the HTTP status and headers (corresponding to
	    // the on('response') event on the client). NB: this measures wall-clock
	    // time, not the time between bytes sent by the server.
	    self.timeoutTimer = setTimeout(function () {
	      var connectTimeout = self.req.socket && self.req.socket.readable === false
	      self.abort()
	      var e = new Error('ETIMEDOUT')
	      e.code = 'ETIMEDOUT'
	      e.connect = connectTimeout
	      self.emit('error', e)
	    }, timeout)

	    if (self.req.setTimeout) { // only works on node 0.6+
	      // Set an additional timeout on the socket, via the `setsockopt` syscall.
	      // This timeout sets the amount of time to wait *between* bytes sent
	      // from the server, and may or may not correspond to the wall-clock time
	      // elapsed from the start of the request.
	      //
	      // In particular, it's useful for erroring if the server fails to send
	      // data halfway through streaming a response.
	      self.req.setTimeout(timeout, function () {
	        if (self.req) {
	          self.req.abort()
	          var e = new Error('ESOCKETTIMEDOUT')
	          e.code = 'ESOCKETTIMEDOUT'
	          e.connect = false
	          self.emit('error', e)
	        }
	      })
	    }
	  }

	  self.req.on('response', self.onRequestResponse.bind(self))
	  self.req.on('error', self.onRequestError.bind(self))
	  self.req.on('drain', function() {
	    self.emit('drain')
	  })
	  self.req.on('socket', function(socket) {
	    self.emit('socket', socket)
	  })

	  self.on('end', function() {
	    if ( self.req.connection ) {
	      self.req.connection.removeListener('error', connectionErrorHandler)
	    }
	  })
	  self.emit('request', self.req)
	}

	Request.prototype.onRequestError = function (error) {
	  var self = this
	  if (self._aborted) {
	    return
	  }
	  if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET'
	      && self.agent.addRequestNoreuse) {
	    self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) }
	    self.start()
	    self.req.end()
	    return
	  }
	  if (self.timeout && self.timeoutTimer) {
	    clearTimeout(self.timeoutTimer)
	    self.timeoutTimer = null
	  }
	  self.emit('error', error)
	}

	Request.prototype.onRequestResponse = function (response) {
	  var self = this
	  debug('onRequestResponse', self.uri.href, response.statusCode, response.headers)
	  response.on('end', function() {
	    if (self.timing) {
	      self.elapsedTime += (new Date().getTime() - self.startTime)
	      debug('elapsed time', self.elapsedTime)
	      response.elapsedTime = self.elapsedTime
	    }
	    debug('response end', self.uri.href, response.statusCode, response.headers)
	  })

	  // The check on response.connection is a workaround for browserify.
	  if (response.connection && response.connection.listeners('error').indexOf(connectionErrorHandler) === -1) {
	    response.connection.setMaxListeners(0)
	    response.connection.once('error', connectionErrorHandler)
	  }
	  if (self._aborted) {
	    debug('aborted', self.uri.href)
	    response.resume()
	    return
	  }

	  self.response = response
	  response.request = self
	  response.toJSON = responseToJSON

	  // XXX This is different on 0.10, because SSL is strict by default
	  if (self.httpModule === https &&
	      self.strictSSL && (!response.hasOwnProperty('socket') ||
	      !response.socket.authorized)) {
	    debug('strict ssl error', self.uri.href)
	    var sslErr = response.hasOwnProperty('socket') ? response.socket.authorizationError : self.uri.href + ' does not support SSL'
	    self.emit('error', new Error('SSL Error: ' + sslErr))
	    return
	  }

	  // Save the original host before any redirect (if it changes, we need to
	  // remove any authorization headers).  Also remember the case of the header
	  // name because lots of broken servers expect Host instead of host and we
	  // want the caller to be able to specify this.
	  self.originalHost = self.getHeader('host')
	  if (!self.originalHostHeaderName) {
	    self.originalHostHeaderName = self.hasHeader('host')
	  }
	  if (self.setHost) {
	    self.removeHeader('host')
	  }
	  if (self.timeout && self.timeoutTimer) {
	    clearTimeout(self.timeoutTimer)
	    self.timeoutTimer = null
	  }

	  var targetCookieJar = (self._jar && self._jar.setCookie) ? self._jar : globalCookieJar
	  var addCookie = function (cookie) {
	    //set the cookie if it's domain in the href's domain.
	    try {
	      targetCookieJar.setCookie(cookie, self.uri.href, {ignoreError: true})
	    } catch (e) {
	      self.emit('error', e)
	    }
	  }

	  response.caseless = caseless(response.headers)

	  if (response.caseless.has('set-cookie') && (!self._disableCookies)) {
	    var headerName = response.caseless.has('set-cookie')
	    if (Array.isArray(response.headers[headerName])) {
	      response.headers[headerName].forEach(addCookie)
	    } else {
	      addCookie(response.headers[headerName])
	    }
	  }

	  if (self._redirect.onResponse(response)) {
	    return // Ignore the rest of the response
	  } else {
	    // Be a good stream and emit end when the response is finished.
	    // Hack to emit end on close because of a core bug that never fires end
	    response.on('close', function () {
	      if (!self._ended) {
	        self.response.emit('end')
	      }
	    })

	    response.on('end', function () {
	      self._ended = true
	    })

	    var responseContent
	    if (self.gzip) {
	      var contentEncoding = response.headers['content-encoding'] || 'identity'
	      contentEncoding = contentEncoding.trim().toLowerCase()

	      if (contentEncoding === 'gzip') {
	        responseContent = zlib.createGunzip()
	        response.pipe(responseContent)
	      } else {
	        // Since previous versions didn't check for Content-Encoding header,
	        // ignore any invalid values to preserve backwards-compatibility
	        if (contentEncoding !== 'identity') {
	          debug('ignoring unrecognized Content-Encoding ' + contentEncoding)
	        }
	        responseContent = response
	      }
	    } else {
	      responseContent = response
	    }

	    if (self.encoding) {
	      if (self.dests.length !== 0) {
	        console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.')
	      } else if (responseContent.setEncoding) {
	        responseContent.setEncoding(self.encoding)
	      } else {
	        // Should only occur on node pre-v0.9.4 (joyent/node@9b5abe5) with
	        // zlib streams.
	        // If/When support for 0.9.4 is dropped, this should be unnecessary.
	        responseContent = responseContent.pipe(stringstream(self.encoding))
	      }
	    }

	    if (self._paused) {
	      responseContent.pause()
	    }

	    self.responseContent = responseContent

	    self.emit('response', response)

	    self.dests.forEach(function (dest) {
	      self.pipeDest(dest)
	    })

	    responseContent.on('data', function (chunk) {
	      self._destdata = true
	      self.emit('data', chunk)
	    })
	    responseContent.on('end', function (chunk) {
	      self.emit('end', chunk)
	    })
	    responseContent.on('error', function (error) {
	      self.emit('error', error)
	    })
	    responseContent.on('close', function () {self.emit('close')})

	    if (self.callback) {
	      var buffer = bl()
	        , strings = []

	      self.on('data', function (chunk) {
	        if (Buffer.isBuffer(chunk)) {
	          buffer.append(chunk)
	        } else {
	          strings.push(chunk)
	        }
	      })
	      self.on('end', function () {
	        debug('end event', self.uri.href)
	        if (self._aborted) {
	          debug('aborted', self.uri.href)
	          return
	        }

	        if (buffer.length) {
	          debug('has body', self.uri.href, buffer.length)
	          if (self.encoding === null) {
	            // response.body = buffer
	            // can't move to this until https://github.com/rvagg/bl/issues/13
	            response.body = buffer.slice()
	          } else {
	            response.body = buffer.toString(self.encoding)
	          }
	        } else if (strings.length) {
	          // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
	          // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
	          if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
	            strings[0] = strings[0].substring(1)
	          }
	          response.body = strings.join('')
	        }

	        if (self._json) {
	          try {
	            response.body = JSON.parse(response.body, self._jsonReviver)
	          } catch (e) {
	            debug('invalid JSON received', self.uri.href)
	          }
	        }
	        debug('emitting complete', self.uri.href)
	        if (typeof response.body === 'undefined' && !self._json) {
	          response.body = self.encoding === null ? new Buffer(0) : ''
	        }
	        self.emit('complete', response, response.body)
	      })
	    }
	    //if no callback
	    else {
	      self.on('end', function () {
	        if (self._aborted) {
	          debug('aborted', self.uri.href)
	          return
	        }
	        self.emit('complete', response)
	      })
	    }
	  }
	  debug('finish init function', self.uri.href)
	}

	Request.prototype.abort = function () {
	  var self = this
	  self._aborted = true

	  if (self.req) {
	    self.req.abort()
	  }
	  else if (self.response) {
	    self.response.abort()
	  }

	  self.emit('abort')
	}

	Request.prototype.pipeDest = function (dest) {
	  var self = this
	  var response = self.response
	  // Called after the response is received
	  if (dest.headers && !dest.headersSent) {
	    if (response.caseless.has('content-type')) {
	      var ctname = response.caseless.has('content-type')
	      if (dest.setHeader) {
	        dest.setHeader(ctname, response.headers[ctname])
	      }
	      else {
	        dest.headers[ctname] = response.headers[ctname]
	      }
	    }

	    if (response.caseless.has('content-length')) {
	      var clname = response.caseless.has('content-length')
	      if (dest.setHeader) {
	        dest.setHeader(clname, response.headers[clname])
	      } else {
	        dest.headers[clname] = response.headers[clname]
	      }
	    }
	  }
	  if (dest.setHeader && !dest.headersSent) {
	    for (var i in response.headers) {
	      // If the response content is being decoded, the Content-Encoding header
	      // of the response doesn't represent the piped content, so don't pass it.
	      if (!self.gzip || i !== 'content-encoding') {
	        dest.setHeader(i, response.headers[i])
	      }
	    }
	    dest.statusCode = response.statusCode
	  }
	  if (self.pipefilter) {
	    self.pipefilter(response, dest)
	  }
	}

	Request.prototype.qs = function (q, clobber) {
	  var self = this
	  var base
	  if (!clobber && self.uri.query) {
	    base = self._qs.parse(self.uri.query)
	  } else {
	    base = {}
	  }

	  for (var i in q) {
	    base[i] = q[i]
	  }

	  if (self._qs.stringify(base) === '') {
	    return self
	  }

	  var qs = self._qs.stringify(base)

	  self.uri = url.parse(self.uri.href.split('?')[0] + '?' + qs)
	  self.url = self.uri
	  self.path = self.uri.path

	  if (self.uri.host === 'unix') {
	    self.enableUnixSocket()
	  }

	  return self
	}
	Request.prototype.form = function (form) {
	  var self = this
	  if (form) {
	    if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
	      self.setHeader('content-type', 'application/x-www-form-urlencoded')
	    }
	    self.body = (typeof form === 'string')
	      ? self._qs.rfc3986(form.toString('utf8'))
	      : self._qs.stringify(form).toString('utf8')
	    return self
	  }
	  // create form-data object
	  self._form = new FormData()
	  self._form.on('error', function(err) {
	    err.message = 'form-data: ' + err.message
	    self.emit('error', err)
	    self.abort()
	  })
	  return self._form
	}
	Request.prototype.multipart = function (multipart) {
	  var self = this

	  self._multipart.onRequest(multipart)

	  if (!self._multipart.chunked) {
	    self.body = self._multipart.body
	  }

	  return self
	}
	Request.prototype.json = function (val) {
	  var self = this

	  if (!self.hasHeader('accept')) {
	    self.setHeader('accept', 'application/json')
	  }

	  self._json = true
	  if (typeof val === 'boolean') {
	    if (self.body !== undefined) {
	      if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
	        self.body = safeStringify(self.body)
	      } else {
	        self.body = self._qs.rfc3986(self.body)
	      }
	      if (!self.hasHeader('content-type')) {
	        self.setHeader('content-type', 'application/json')
	      }
	    }
	  } else {
	    self.body = safeStringify(val)
	    if (!self.hasHeader('content-type')) {
	      self.setHeader('content-type', 'application/json')
	    }
	  }

	  if (typeof self.jsonReviver === 'function') {
	    self._jsonReviver = self.jsonReviver
	  }

	  return self
	}
	Request.prototype.getHeader = function (name, headers) {
	  var self = this
	  var result, re, match
	  if (!headers) {
	    headers = self.headers
	  }
	  Object.keys(headers).forEach(function (key) {
	    if (key.length !== name.length) {
	      return
	    }
	    re = new RegExp(name, 'i')
	    match = key.match(re)
	    if (match) {
	      result = headers[key]
	    }
	  })
	  return result
	}
	Request.prototype.enableUnixSocket = function () {
	  // Get the socket & request paths from the URL
	  var unixParts = this.uri.path.split(':')
	    , host = unixParts[0]
	    , path = unixParts[1]
	  // Apply unix properties to request
	  this.socketPath = host
	  this.uri.pathname = path
	  this.uri.path = path
	  this.uri.host = host
	  this.uri.hostname = host
	  this.uri.isUnix = true
	}


	Request.prototype.auth = function (user, pass, sendImmediately, bearer) {
	  var self = this

	  self._auth.onRequest(user, pass, sendImmediately, bearer)

	  return self
	}
	Request.prototype.aws = function (opts, now) {
	  var self = this

	  if (!now) {
	    self._aws = opts
	    return self
	  }
	  var date = new Date()
	  self.setHeader('date', date.toUTCString())
	  var auth =
	    { key: opts.key
	    , secret: opts.secret
	    , verb: self.method.toUpperCase()
	    , date: date
	    , contentType: self.getHeader('content-type') || ''
	    , md5: self.getHeader('content-md5') || ''
	    , amazonHeaders: aws.canonicalizeHeaders(self.headers)
	    }
	  var path = self.uri.path
	  if (opts.bucket && path) {
	    auth.resource = '/' + opts.bucket + path
	  } else if (opts.bucket && !path) {
	    auth.resource = '/' + opts.bucket
	  } else if (!opts.bucket && path) {
	    auth.resource = path
	  } else if (!opts.bucket && !path) {
	    auth.resource = '/'
	  }
	  auth.resource = aws.canonicalizeResource(auth.resource)
	  self.setHeader('authorization', aws.authorization(auth))

	  return self
	}
	Request.prototype.httpSignature = function (opts) {
	  var self = this
	  httpSignature.signRequest({
	    getHeader: function(header) {
	      return self.getHeader(header, self.headers)
	    },
	    setHeader: function(header, value) {
	      self.setHeader(header, value)
	    },
	    method: self.method,
	    path: self.path
	  }, opts)
	  debug('httpSignature authorization', self.getHeader('authorization'))

	  return self
	}
	Request.prototype.hawk = function (opts) {
	  var self = this
	  self.setHeader('Authorization', hawk.client.header(self.uri, self.method, opts).field)
	}
	Request.prototype.oauth = function (_oauth) {
	  var self = this

	  self._oauth.onRequest(_oauth)

	  return self
	}

	Request.prototype.jar = function (jar) {
	  var self = this
	  var cookies

	  if (self._redirect.redirectsFollowed === 0) {
	    self.originalCookieHeader = self.getHeader('cookie')
	  }

	  if (!jar) {
	    // disable cookies
	    cookies = false
	    self._disableCookies = true
	  } else {
	    var targetCookieJar = (jar && jar.getCookieString) ? jar : globalCookieJar
	    var urihref = self.uri.href
	    //fetch cookie in the Specified host
	    if (targetCookieJar) {
	      cookies = targetCookieJar.getCookieString(urihref)
	    }
	  }

	  //if need cookie and cookie is not empty
	  if (cookies && cookies.length) {
	    if (self.originalCookieHeader) {
	      // Don't overwrite existing Cookie header
	      self.setHeader('cookie', self.originalCookieHeader + '; ' + cookies)
	    } else {
	      self.setHeader('cookie', cookies)
	    }
	  }
	  self._jar = jar
	  return self
	}


	// Stream API
	Request.prototype.pipe = function (dest, opts) {
	  var self = this

	  if (self.response) {
	    if (self._destdata) {
	      self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'))
	    } else if (self._ended) {
	      self.emit('error', new Error('You cannot pipe after the response has been ended.'))
	    } else {
	      stream.Stream.prototype.pipe.call(self, dest, opts)
	      self.pipeDest(dest)
	      return dest
	    }
	  } else {
	    self.dests.push(dest)
	    stream.Stream.prototype.pipe.call(self, dest, opts)
	    return dest
	  }
	}
	Request.prototype.write = function () {
	  var self = this
	  if (!self._started) {
	    self.start()
	  }
	  return self.req.write.apply(self.req, arguments)
	}
	Request.prototype.end = function (chunk) {
	  var self = this
	  if (chunk) {
	    self.write(chunk)
	  }
	  if (!self._started) {
	    self.start()
	  }
	  self.req.end()
	}
	Request.prototype.pause = function () {
	  var self = this
	  if (!self.responseContent) {
	    self._paused = true
	  } else {
	    self.responseContent.pause.apply(self.responseContent, arguments)
	  }
	}
	Request.prototype.resume = function () {
	  var self = this
	  if (!self.responseContent) {
	    self._paused = false
	  } else {
	    self.responseContent.resume.apply(self.responseContent, arguments)
	  }
	}
	Request.prototype.destroy = function () {
	  var self = this
	  if (!self._ended) {
	    self.end()
	  } else if (self.response) {
	    self.response.destroy()
	  }
	}

	Request.defaultProxyHeaderWhiteList =
	  Tunnel.defaultProxyHeaderWhiteList.slice()

	Request.defaultProxyHeaderExclusiveList =
	  Tunnel.defaultProxyHeaderExclusiveList.slice()

	// Exports

	Request.prototype.toJSON = requestToJSON
	module.exports = Request

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(5).Buffer))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(18);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Transform = __webpack_require__(36);

	var binding = __webpack_require__(268);
	var util = __webpack_require__(10);
	var assert = __webpack_require__(280).ok;

	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding.Z_MIN_WINDOWBITS = 8;
	binding.Z_MAX_WINDOWBITS = 15;
	binding.Z_DEFAULT_WINDOWBITS = 15;

	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding.Z_MIN_CHUNK = 64;
	binding.Z_MAX_CHUNK = Infinity;
	binding.Z_DEFAULT_CHUNK = (16 * 1024);

	binding.Z_MIN_MEMLEVEL = 1;
	binding.Z_MAX_MEMLEVEL = 9;
	binding.Z_DEFAULT_MEMLEVEL = 8;

	binding.Z_MIN_LEVEL = -1;
	binding.Z_MAX_LEVEL = 9;
	binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

	// expose all the zlib constants
	Object.keys(binding).forEach(function(k) {
	  if (k.match(/^Z/)) exports[k] = binding[k];
	});

	// translation table for return codes.
	exports.codes = {
	  Z_OK: binding.Z_OK,
	  Z_STREAM_END: binding.Z_STREAM_END,
	  Z_NEED_DICT: binding.Z_NEED_DICT,
	  Z_ERRNO: binding.Z_ERRNO,
	  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
	};

	Object.keys(exports.codes).forEach(function(k) {
	  exports.codes[exports.codes[k]] = k;
	});

	exports.Deflate = Deflate;
	exports.Inflate = Inflate;
	exports.Gzip = Gzip;
	exports.Gunzip = Gunzip;
	exports.DeflateRaw = DeflateRaw;
	exports.InflateRaw = InflateRaw;
	exports.Unzip = Unzip;

	exports.createDeflate = function(o) {
	  return new Deflate(o);
	};

	exports.createInflate = function(o) {
	  return new Inflate(o);
	};

	exports.createDeflateRaw = function(o) {
	  return new DeflateRaw(o);
	};

	exports.createInflateRaw = function(o) {
	  return new InflateRaw(o);
	};

	exports.createGzip = function(o) {
	  return new Gzip(o);
	};

	exports.createGunzip = function(o) {
	  return new Gunzip(o);
	};

	exports.createUnzip = function(o) {
	  return new Unzip(o);
	};


	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	exports.deflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	};

	exports.deflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	};

	exports.gzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	};

	exports.gzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	};

	exports.deflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	};

	exports.deflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	};

	exports.unzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	};

	exports.unzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	};

	exports.inflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	};

	exports.inflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	};

	exports.gunzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	};

	exports.gunzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	};

	exports.inflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	};

	exports.inflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	};

	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;

	  engine.on('error', onError);
	  engine.on('end', onEnd);

	  engine.end(buffer);
	  flow();

	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }

	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }

	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}

	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string')
	    buffer = new Buffer(buffer);
	  if (!Buffer.isBuffer(buffer))
	    throw new TypeError('Not a string or buffer');

	  var flushFlag = binding.Z_FINISH;

	  return engine._processChunk(buffer, flushFlag);
	}

	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib.call(this, opts, binding.DEFLATE);
	}

	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib.call(this, opts, binding.INFLATE);
	}



	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib.call(this, opts, binding.GZIP);
	}

	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib.call(this, opts, binding.GUNZIP);
	}



	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib.call(this, opts, binding.DEFLATERAW);
	}

	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib.call(this, opts, binding.INFLATERAW);
	}


	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib.call(this, opts, binding.UNZIP);
	}


	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.

	function Zlib(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

	  Transform.call(this, opts);

	  if (opts.flush) {
	    if (opts.flush !== binding.Z_NO_FLUSH &&
	        opts.flush !== binding.Z_PARTIAL_FLUSH &&
	        opts.flush !== binding.Z_SYNC_FLUSH &&
	        opts.flush !== binding.Z_FULL_FLUSH &&
	        opts.flush !== binding.Z_FINISH &&
	        opts.flush !== binding.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

	  if (opts.chunkSize) {
	    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
	        opts.chunkSize > exports.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }

	  if (opts.windowBits) {
	    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
	        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }

	  if (opts.level) {
	    if (opts.level < exports.Z_MIN_LEVEL ||
	        opts.level > exports.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }

	  if (opts.memLevel) {
	    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
	        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }

	  if (opts.strategy) {
	    if (opts.strategy != exports.Z_FILTERED &&
	        opts.strategy != exports.Z_HUFFMAN_ONLY &&
	        opts.strategy != exports.Z_RLE &&
	        opts.strategy != exports.Z_FIXED &&
	        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }

	  if (opts.dictionary) {
	    if (!Buffer.isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }

	  this._binding = new binding.Zlib(mode);

	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function(message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;

	    var error = new Error(message);
	    error.errno = errno;
	    error.code = exports.codes[errno];
	    self.emit('error', error);
	  };

	  var level = exports.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;

	  var strategy = exports.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;

	  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
	                     level,
	                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
	                     strategy,
	                     opts.dictionary);

	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;

	  this.once('end', this.close);
	}

	util.inherits(Zlib, Transform);

	Zlib.prototype.params = function(level, strategy, callback) {
	  if (level < exports.Z_MIN_LEVEL ||
	      level > exports.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != exports.Z_FILTERED &&
	      strategy != exports.Z_HUFFMAN_ONLY &&
	      strategy != exports.Z_RLE &&
	      strategy != exports.Z_FIXED &&
	      strategy != exports.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }

	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding.Z_SYNC_FLUSH, function() {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    process.nextTick(callback);
	  }
	};

	Zlib.prototype.reset = function() {
	  return this._binding.reset();
	};

	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib.prototype._flush = function(callback) {
	  this._transform(new Buffer(0), '', callback);
	};

	Zlib.prototype.flush = function(kind, callback) {
	  var ws = this._writableState;

	  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
	    callback = kind;
	    kind = binding.Z_FULL_FLUSH;
	  }

	  if (ws.ended) {
	    if (callback)
	      process.nextTick(callback);
	  } else if (ws.ending) {
	    if (callback)
	      this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function() {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};

	Zlib.prototype.close = function(callback) {
	  if (callback)
	    process.nextTick(callback);

	  if (this._closed)
	    return;

	  this._closed = true;

	  this._binding.close();

	  var self = this;
	  process.nextTick(function() {
	    self.emit('close');
	  });
	};

	Zlib.prototype._transform = function(chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);

	  if (!chunk === null && !Buffer.isBuffer(chunk))
	    return cb(new Error('invalid input'));

	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last)
	    flushFlag = binding.Z_FINISH;
	  else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
	    }
	  }

	  var self = this;
	  this._processChunk(chunk, flushFlag, cb);
	};

	Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;

	  var self = this;

	  var async = typeof cb === 'function';

	  if (!async) {
	    var buffers = [];
	    var nread = 0;

	    var error;
	    this.on('error', function(er) {
	      error = er;
	    });

	    do {
	      var res = this._binding.writeSync(flushFlag,
	                                        chunk, // in
	                                        inOff, // in_off
	                                        availInBefore, // in_len
	                                        this._buffer, // out
	                                        this._offset, //out_off
	                                        availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));

	    if (this._hadError) {
	      throw error;
	    }

	    var buf = Buffer.concat(buffers, nread);
	    this.close();

	    return buf;
	  }

	  var req = this._binding.write(flushFlag,
	                                chunk, // in
	                                inOff, // in_off
	                                availInBefore, // in_len
	                                this._buffer, // out
	                                this._offset, //out_off
	                                availOutBefore); // out_len

	  req.buffer = chunk;
	  req.callback = callback;

	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError)
	      return;

	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');

	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }

	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }

	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;

	      if (!async)
	        return true;

	      var newReq = self._binding.write(flushFlag,
	                                       chunk,
	                                       inOff,
	                                       availInBefore,
	                                       self._buffer,
	                                       self._offset,
	                                       self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }

	    if (!async)
	      return false;

	    // finished with the chunk.
	    cb();
	  }
	};

	util.inherits(Deflate, Zlib);
	util.inherits(Inflate, Zlib);
	util.inherits(Gzip, Zlib);
	util.inherits(Gunzip, Zlib);
	util.inherits(DeflateRaw, Zlib);
	util.inherits(InflateRaw, Zlib);
	util.inherits(Unzip, Zlib);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer, __webpack_require__(4)))

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(269);
	var zstream = __webpack_require__(270);
	var zlib_deflate = __webpack_require__(271);
	var zlib_inflate = __webpack_require__(276);
	var constants = __webpack_require__(279);

	for (var key in constants) {
	  exports[key] = constants[key];
	}

	// zlib modes
	exports.NONE = 0;
	exports.DEFLATE = 1;
	exports.INFLATE = 2;
	exports.GZIP = 3;
	exports.GUNZIP = 4;
	exports.DEFLATERAW = 5;
	exports.INFLATERAW = 6;
	exports.UNZIP = 7;

	/**
	 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	 */
	function Zlib(mode) {
	  if (mode < exports.DEFLATE || mode > exports.UNZIP)
	    throw new TypeError("Bad argument");
	    
	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}

	Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.
	  
	  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
	    this.windowBits += 16;
	    
	  if (this.mode === exports.UNZIP)
	    this.windowBits += 32;
	    
	  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
	    this.windowBits = -this.windowBits;
	    
	  this.strm = new zstream();
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateInit2(
	        this.strm,
	        this.level,
	        exports.Z_DEFLATED,
	        this.windowBits,
	        this.memLevel,
	        this.strategy
	      );
	      break;
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	    case exports.UNZIP:
	      var status  = zlib_inflate.inflateInit2(
	        this.strm,
	        this.windowBits
	      );
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	    return;
	  }
	  
	  this.write_in_progress = false;
	  this.init_done = true;
	};

	Zlib.prototype.params = function() {
	  throw new Error("deflateParams Not supported");
	};

	Zlib.prototype._writeCheck = function() {
	  if (!this.init_done)
	    throw new Error("write before init");
	    
	  if (this.mode === exports.NONE)
	    throw new Error("already finalized");
	    
	  if (this.write_in_progress)
	    throw new Error("write already in progress");
	    
	  if (this.pending_close)
	    throw new Error("close is pending");
	};

	Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
	  this._writeCheck();
	  this.write_in_progress = true;
	  
	  var self = this;
	  process.nextTick(function() {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);
	    
	    if (self.pending_close)
	      self.close();
	  });
	  
	  return this;
	};

	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}

	Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};

	Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;
	  
	  if (flush !== exports.Z_NO_FLUSH &&
	      flush !== exports.Z_PARTIAL_FLUSH &&
	      flush !== exports.Z_SYNC_FLUSH &&
	      flush !== exports.Z_FULL_FLUSH &&
	      flush !== exports.Z_FINISH &&
	      flush !== exports.Z_BLOCK) {
	    throw new Error("Invalid flush value");
	  }
	  
	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }
	  
	  if (out._set)
	    out.set = out._set;
	  else
	    out.set = bufferSet;
	  
	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflate(strm, flush);
	      break;
	    case exports.UNZIP:
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflate(strm, flush);
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
	    this._error(status);
	  }
	  
	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};

	Zlib.prototype.close = function() {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }
	  
	  this.pending_close = false;
	  
	  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	    zlib_deflate.deflateEnd(this.strm);
	  } else {
	    zlib_inflate.inflateEnd(this.strm);
	  }
	  
	  this.mode = exports.NONE;
	};

	Zlib.prototype.reset = function() {
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateReset(this.strm);
	      break;
	    case exports.INFLATE:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflateReset(this.strm);
	      break;
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	  }
	};

	Zlib.prototype._error = function(status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);
	  
	  this.write_in_progress = false;
	  if (this.pending_close)
	    this.close();
	};

	exports.Zlib = Zlib;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(5).Buffer))

/***/ },
/* 269 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  '2':    'need dictionary',     /* Z_NEED_DICT       2  */
	  '1':    'stream end',          /* Z_STREAM_END      1  */
	  '0':    '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ },
/* 270 */
/***/ function(module, exports) {

	'use strict';


	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	module.exports = ZStream;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils   = __webpack_require__(272);
	var trees   = __webpack_require__(273);
	var adler32 = __webpack_require__(274);
	var crc32   = __webpack_require__(275);
	var msg   = __webpack_require__(269);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2*L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only (s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH-1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH-1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length-1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH-1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	};

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
	  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS+1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);

	  s.d_buf = s.lit_bufsize >> 1;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}

	/* =========================================================================
	 * Copy the source state to the destination state
	 */
	//function deflateCopy(dest, source) {
	//
	//}

	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ },
/* 272 */
/***/ function(module, exports) {

	'use strict';


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');


	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i=0; i<len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function(chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i=0, l=chunks.length; i<l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i=0, l=chunks.length; i<l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i=0; i<len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function(chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(272);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;

	/*============================================================================*/


	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES       = 30;
	/* number of distance codes */

	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE     = 2*L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES+2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	};


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	var TreeDesc = function(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	};



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short (s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n*2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n-base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length-1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m*2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
	        tree[m*2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits-1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n*2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS+1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES-1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1<<extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length-1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0 ; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1<<extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n*2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n*2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n*2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n*2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES+1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n*2 + 1]/*.Len*/ = 5;
	    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n*2;
	  var _m2 = m*2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code+LITERALS+1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n*2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node*2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6*2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count-3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count-3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count-11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3*(max_blindex+1) + 5+5+4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes-1,   5);
	  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES<<1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len+3+7) >>> 3;
	    static_lenb = (s.static_len+3+7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc*2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize-1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ },
/* 274 */
/***/ function(module, exports) {

	'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	module.exports = adler32;


/***/ },
/* 275 */
/***/ function(module, exports) {

	'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n =0; n < 256; n++) {
	    c = n;
	    for (var k =0; k < 8; k++) {
	      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc = crc ^ (-1);

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	module.exports = crc32;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(272);
	var adler32 = __webpack_require__(274);
	var crc32   = __webpack_require__(275);
	var inflate_fast = __webpack_require__(277);
	var inflate_table = __webpack_require__(278);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function ZSWAP32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window,src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window,src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//

	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);

	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = ZSWAP32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//

	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;

	      opts = {bits: state.lenbits};
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;

	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }

	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }

	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }

	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;

	      opts = {bits: state.lenbits};
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;

	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }

	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = {bits: state.distbits};
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;

	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
	        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}


	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ },
/* 277 */
/***/ function(module, exports) {

	'use strict';

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(272);

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }

	  var i=0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ },
/* 279 */
/***/ function(module, exports) {

	module.exports = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(10);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var DuplexStream = __webpack_require__(282)
	  , util         = __webpack_require__(10)

	function BufferList (callback) {
	  if (!(this instanceof BufferList))
	    return new BufferList(callback)

	  this._bufs  = []
	  this.length = 0

	  if (typeof callback == 'function') {
	    this._callback = callback

	    var piper = function (err) {
	      if (this._callback) {
	        this._callback(err)
	        this._callback = null
	      }
	    }.bind(this)

	    this.on('pipe', function (src) {
	      src.on('error', piper)
	    })
	    this.on('unpipe', function (src) {
	      src.removeListener('error', piper)
	    })
	  }
	  else if (Buffer.isBuffer(callback))
	    this.append(callback)
	  else if (Array.isArray(callback)) {
	    callback.forEach(function (b) {
	      Buffer.isBuffer(b) && this.append(b)
	    }.bind(this))
	  }

	  DuplexStream.call(this)
	}

	util.inherits(BufferList, DuplexStream)

	BufferList.prototype._offset = function (offset) {
	  var tot = 0, i = 0, _t
	  for (; i < this._bufs.length; i++) {
	    _t = tot + this._bufs[i].length
	    if (offset < _t)
	      return [ i, offset - tot ]
	    tot = _t
	  }
	}

	BufferList.prototype.append = function (buf) {
	  var isBuffer = Buffer.isBuffer(buf) ||
	                 buf instanceof BufferList

	  this._bufs.push(isBuffer ? buf : new Buffer(buf))
	  this.length += buf.length
	  return this
	}

	BufferList.prototype._write = function (buf, encoding, callback) {
	  this.append(buf)
	  if (callback)
	    callback()
	}

	BufferList.prototype._read = function (size) {
	  if (!this.length)
	    return this.push(null)
	  size = Math.min(size, this.length)
	  this.push(this.slice(0, size))
	  this.consume(size)
	}

	BufferList.prototype.end = function (chunk) {
	  DuplexStream.prototype.end.call(this, chunk)

	  if (this._callback) {
	    this._callback(null, this.slice())
	    this._callback = null
	  }
	}

	BufferList.prototype.get = function (index) {
	  return this.slice(index, index + 1)[0]
	}

	BufferList.prototype.slice = function (start, end) {
	  return this.copy(null, 0, start, end)
	}

	BufferList.prototype.copy = function (dst, dstStart, srcStart, srcEnd) {
	  if (typeof srcStart != 'number' || srcStart < 0)
	    srcStart = 0
	  if (typeof srcEnd != 'number' || srcEnd > this.length)
	    srcEnd = this.length
	  if (srcStart >= this.length)
	    return dst || new Buffer(0)
	  if (srcEnd <= 0)
	    return dst || new Buffer(0)

	  var copy   = !!dst
	    , off    = this._offset(srcStart)
	    , len    = srcEnd - srcStart
	    , bytes  = len
	    , bufoff = (copy && dstStart) || 0
	    , start  = off[1]
	    , l
	    , i

	  // copy/slice everything
	  if (srcStart === 0 && srcEnd == this.length) {
	    if (!copy) // slice, just return a full concat
	      return Buffer.concat(this._bufs)

	    // copy, need to copy individual buffers
	    for (i = 0; i < this._bufs.length; i++) {
	      this._bufs[i].copy(dst, bufoff)
	      bufoff += this._bufs[i].length
	    }

	    return dst
	  }

	  // easy, cheap case where it's a subset of one of the buffers
	  if (bytes <= this._bufs[off[0]].length - start) {
	    return copy
	      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
	      : this._bufs[off[0]].slice(start, start + bytes)
	  }

	  if (!copy) // a slice, we need something to copy in to
	    dst = new Buffer(len)

	  for (i = off[0]; i < this._bufs.length; i++) {
	    l = this._bufs[i].length - start

	    if (bytes > l) {
	      this._bufs[i].copy(dst, bufoff, start)
	    } else {
	      this._bufs[i].copy(dst, bufoff, start, start + bytes)
	      break
	    }

	    bufoff += l
	    bytes -= l

	    if (start)
	      start = 0
	  }

	  return dst
	}

	BufferList.prototype.toString = function (encoding, start, end) {
	  return this.slice(start, end).toString(encoding)
	}

	BufferList.prototype.consume = function (bytes) {
	  while (this._bufs.length) {
	    if (bytes > this._bufs[0].length) {
	      bytes -= this._bufs[0].length
	      this.length -= this._bufs[0].length
	      this._bufs.shift()
	    } else {
	      this._bufs[0] = this._bufs[0].slice(bytes)
	      this.length -= bytes
	      break
	    }
	  }
	  return this
	}

	BufferList.prototype.duplicate = function () {
	  var i = 0
	    , copy = new BufferList()

	  for (; i < this._bufs.length; i++)
	    copy.append(this._bufs[i])

	  return copy
	}

	BufferList.prototype.destroy = function () {
	  this._bufs.length = 0;
	  this.length = 0;
	  this.push(null);
	}

	;(function () {
	  var methods = {
	      'readDoubleBE' : 8
	    , 'readDoubleLE' : 8
	    , 'readFloatBE'  : 4
	    , 'readFloatLE'  : 4
	    , 'readInt32BE'  : 4
	    , 'readInt32LE'  : 4
	    , 'readUInt32BE' : 4
	    , 'readUInt32LE' : 4
	    , 'readInt16BE'  : 2
	    , 'readInt16LE'  : 2
	    , 'readUInt16BE' : 2
	    , 'readUInt16LE' : 2
	    , 'readInt8'     : 1
	    , 'readUInt8'    : 1
	  }

	  for (var m in methods) {
	    (function (m) {
	      BufferList.prototype[m] = function (offset) {
	        return this.slice(offset, offset + methods[m])[m](0)
	      }
	    }(m))
	  }
	}())

	module.exports = BufferList

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(283)


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(284);
	/*</replacement>*/



	/*<replacement>*/
	var util = __webpack_require__(285);
	util.inherits = __webpack_require__(286);
	/*</replacement>*/

	var Readable = __webpack_require__(287);
	var Writable = __webpack_require__(291);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	module.exports = nextTick;

	function nextTick(fn) {
	  var args = new Array(arguments.length - 1);
	  var i = 0;
	  while (i < args.length) {
	    args[i++] = arguments[i];
	  }
	  process.nextTick(function afterTick() {
	    fn.apply(null, args);
	  });
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 286 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(284);
	/*</replacement>*/


	/*<replacement>*/
	var isArray = __webpack_require__(288);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(5).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(19).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/



	/*<replacement>*/
	var Stream;
	(function (){try{
	  Stream = __webpack_require__(21);
	}catch(_){}finally{
	  if (!Stream)
	    Stream = __webpack_require__(19).EventEmitter;
	}}())
	/*</replacement>*/

	var Buffer = __webpack_require__(5).Buffer;

	/*<replacement>*/
	var util = __webpack_require__(285);
	util.inherits = __webpack_require__(286);
	/*</replacement>*/



	/*<replacement>*/
	var debug = __webpack_require__(289);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var StringDecoder;

	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(283);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(290).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(283);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function')
	    this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function() {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(290).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (n === null || isNaN(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else {
	      return state.length;
	    }
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (ret !== null)
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!(Buffer.isBuffer(chunk)) &&
	      typeof chunk !== 'string' &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      processNextTick(emitReadable_, stream);
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    processNextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined))
	      return;
	    else if (!state.objectMode && (!chunk || !chunk.length))
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }; }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 288 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 289 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(5).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(284);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(5).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(285);
	util.inherits = __webpack_require__(286);
	/*</replacement>*/



	/*<replacement>*/
	var Stream;
	(function (){try{
	  Stream = __webpack_require__(21);
	}catch(_){}finally{
	  if (!Stream)
	    Stream = __webpack_require__(19).EventEmitter;
	}}())
	/*</replacement>*/

	var Buffer = __webpack_require__(5).Buffer;

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(283);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function (){try {
	Object.defineProperty(WritableState.prototype, 'buffer', {
	  get: __webpack_require__(292)(function() {
	    return this.getBuffer();
	  }, '_writableState.buffer is deprecated. Use ' +
	      '_writableState.getBuffer() instead.')
	});
	}catch(_){}}());


	function Writable(options) {
	  var Duplex = __webpack_require__(283);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function')
	      this._write = options.write;

	    if (typeof options.writev === 'function')
	      this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;

	  if (!(Buffer.isBuffer(chunk)) &&
	      typeof chunk !== 'string' &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (typeof cb !== 'function')
	    cb = nop;

	  if (state.ended)
	    writeAfterEnd(this, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.bufferedRequest)
	      clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string')
	    encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
	'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
	.indexOf((encoding + '').toLowerCase()) > -1))
	    throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync)
	    processNextTick(cb, er);
	  else
	    cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      processNextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var buffer = [];
	    var cbs = [];
	    while (entry) {
	      cbs.push(entry.callback);
	      buffer.push(entry);
	      entry = entry.next;
	    }

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    doWrite(stream, state, true, state.length, buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null)
	      state.lastBufferedRequest = null;
	  }
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined)
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(state) {
	  return (state.ending &&
	          state.length === 0 &&
	          state.bufferedRequest === null &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      processNextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}


/***/ },
/* 292 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  if (!global.localStorage) return false;
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 293 */
/***/ function(module, exports) {

	/*
	    HTTP Hawk Authentication Scheme
	    Copyright (c) 2012-2014, Eran Hammer <eran@hammer.io>
	    BSD Licensed
	*/


	// Declare namespace

	var hawk = {
	    internals: {}
	};


	hawk.client = {

	    // Generate an Authorization header for a given request

	    /*
	        uri: 'http://example.com/resource?a=b' or object generated by hawk.utils.parseUri()
	        method: HTTP verb (e.g. 'GET', 'POST')
	        options: {

	            // Required

	            credentials: {
	                id: 'dh37fgj492je',
	                key: 'aoijedoaijsdlaksjdl',
	                algorithm: 'sha256'                                 // 'sha1', 'sha256'
	            },

	            // Optional

	            ext: 'application-specific',                        // Application specific data sent via the ext attribute
	            timestamp: Date.now() / 1000,                       // A pre-calculated timestamp in seconds
	            nonce: '2334f34f',                                  // A pre-generated nonce
	            localtimeOffsetMsec: 400,                           // Time offset to sync with server time (ignored if timestamp provided)
	            payload: '{"some":"payload"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)
	            contentType: 'application/json',                    // Payload content-type (ignored if hash provided)
	            hash: 'U4MKKSmiVxk37JCCrAVIjV=',                    // Pre-calculated payload hash
	            app: '24s23423f34dx',                               // Oz application id
	            dlg: '234sz34tww3sd'                                // Oz delegated-by application id
	        }
	    */

	    header: function (uri, method, options) {

	        var result = {
	            field: '',
	            artifacts: {}
	        };

	        // Validate inputs

	        if (!uri || (typeof uri !== 'string' && typeof uri !== 'object') ||
	            !method || typeof method !== 'string' ||
	            !options || typeof options !== 'object') {

	            result.err = 'Invalid argument type';
	            return result;
	        }

	        // Application time

	        var timestamp = options.timestamp || hawk.utils.now(options.localtimeOffsetMsec);

	        // Validate credentials

	        var credentials = options.credentials;
	        if (!credentials ||
	            !credentials.id ||
	            !credentials.key ||
	            !credentials.algorithm) {

	            result.err = 'Invalid credentials object';
	            return result;
	        }

	        if (hawk.crypto.algorithms.indexOf(credentials.algorithm) === -1) {
	            result.err = 'Unknown algorithm';
	            return result;
	        }

	        // Parse URI

	        if (typeof uri === 'string') {
	            uri = hawk.utils.parseUri(uri);
	        }

	        // Calculate signature

	        var artifacts = {
	            ts: timestamp,
	            nonce: options.nonce || hawk.utils.randomString(6),
	            method: method,
	            resource: uri.relative,
	            host: uri.hostname,
	            port: uri.port,
	            hash: options.hash,
	            ext: options.ext,
	            app: options.app,
	            dlg: options.dlg
	        };

	        result.artifacts = artifacts;

	        // Calculate payload hash

	        if (!artifacts.hash &&
	            (options.payload || options.payload === '')) {

	            artifacts.hash = hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
	        }

	        var mac = hawk.crypto.calculateMac('header', credentials, artifacts);

	        // Construct header

	        var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== '';       // Other falsey values allowed
	        var header = 'Hawk id="' + credentials.id +
	                     '", ts="' + artifacts.ts +
	                     '", nonce="' + artifacts.nonce +
	                     (artifacts.hash ? '", hash="' + artifacts.hash : '') +
	                     (hasExt ? '", ext="' + hawk.utils.escapeHeaderAttribute(artifacts.ext) : '') +
	                     '", mac="' + mac + '"';

	        if (artifacts.app) {
	            header += ', app="' + artifacts.app +
	                      (artifacts.dlg ? '", dlg="' + artifacts.dlg : '') + '"';
	        }

	        result.field = header;

	        return result;
	    },

	    // Generate a bewit value for a given URI

	    /*
	        uri: 'http://example.com/resource?a=b'
	        options: {

	            // Required

	            credentials: {
	            id: 'dh37fgj492je',
	            key: 'aoijedoaijsdlaksjdl',
	            algorithm: 'sha256'                             // 'sha1', 'sha256'
	            },
	            ttlSec: 60 * 60,                                    // TTL in seconds

	            // Optional

	            ext: 'application-specific',                        // Application specific data sent via the ext attribute
	            localtimeOffsetMsec: 400                            // Time offset to sync with server time
	         };
	    */

	    bewit: function (uri, options) {

	        // Validate inputs

	        if (!uri ||
	            (typeof uri !== 'string') ||
	            !options ||
	            typeof options !== 'object' ||
	            !options.ttlSec) {

	            return '';
	        }

	        options.ext = (options.ext === null || options.ext === undefined ? '' : options.ext);       // Zero is valid value

	        // Application time

	        var now = hawk.utils.now(options.localtimeOffsetMsec);

	        // Validate credentials

	        var credentials = options.credentials;
	        if (!credentials ||
	            !credentials.id ||
	            !credentials.key ||
	            !credentials.algorithm) {

	            return '';
	        }

	        if (hawk.crypto.algorithms.indexOf(credentials.algorithm) === -1) {
	            return '';
	        }

	        // Parse URI

	        uri = hawk.utils.parseUri(uri);

	        // Calculate signature

	        var exp = now + options.ttlSec;
	        var mac = hawk.crypto.calculateMac('bewit', credentials, {
	            ts: exp,
	            nonce: '',
	            method: 'GET',
	            resource: uri.relative,                            // Maintain trailing '?' and query params
	            host: uri.hostname,
	            port: uri.port,
	            ext: options.ext
	        });

	        // Construct bewit: id\exp\mac\ext

	        var bewit = credentials.id + '\\' + exp + '\\' + mac + '\\' + options.ext;
	        return hawk.utils.base64urlEncode(bewit);
	    },

	    // Validate server response

	    /*
	        request:    object created via 'new XMLHttpRequest()' after response received
	        artifacts:  object received from header().artifacts
	        options: {
	            payload:    optional payload received
	            required:   specifies if a Server-Authorization header is required. Defaults to 'false'
	        }
	    */

	    authenticate: function (request, credentials, artifacts, options) {

	        options = options || {};

	        var getHeader = function (name) {

	            return request.getResponseHeader ? request.getResponseHeader(name) : request.getHeader(name);
	        };

	        var wwwAuthenticate = getHeader('www-authenticate');
	        if (wwwAuthenticate) {

	            // Parse HTTP WWW-Authenticate header

	            var wwwAttributes = hawk.utils.parseAuthorizationHeader(wwwAuthenticate, ['ts', 'tsm', 'error']);
	            if (!wwwAttributes) {
	                return false;
	            }

	            if (wwwAttributes.ts) {
	                var tsm = hawk.crypto.calculateTsMac(wwwAttributes.ts, credentials);
	                if (tsm !== wwwAttributes.tsm) {
	                    return false;
	                }

	                hawk.utils.setNtpOffset(wwwAttributes.ts - Math.floor((new Date()).getTime() / 1000));     // Keep offset at 1 second precision
	            }
	        }

	        // Parse HTTP Server-Authorization header

	        var serverAuthorization = getHeader('server-authorization');
	        if (!serverAuthorization &&
	            !options.required) {

	            return true;
	        }

	        var attributes = hawk.utils.parseAuthorizationHeader(serverAuthorization, ['mac', 'ext', 'hash']);
	        if (!attributes) {
	            return false;
	        }

	        var modArtifacts = {
	            ts: artifacts.ts,
	            nonce: artifacts.nonce,
	            method: artifacts.method,
	            resource: artifacts.resource,
	            host: artifacts.host,
	            port: artifacts.port,
	            hash: attributes.hash,
	            ext: attributes.ext,
	            app: artifacts.app,
	            dlg: artifacts.dlg
	        };

	        var mac = hawk.crypto.calculateMac('response', credentials, modArtifacts);
	        if (mac !== attributes.mac) {
	            return false;
	        }

	        if (!options.payload &&
	            options.payload !== '') {

	            return true;
	        }

	        if (!attributes.hash) {
	            return false;
	        }

	        var calculatedHash = hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, getHeader('content-type'));
	        return (calculatedHash === attributes.hash);
	    },

	    message: function (host, port, message, options) {

	        // Validate inputs

	        if (!host || typeof host !== 'string' ||
	            !port || typeof port !== 'number' ||
	            message === null || message === undefined || typeof message !== 'string' ||
	            !options || typeof options !== 'object') {

	            return null;
	        }

	        // Application time

	        var timestamp = options.timestamp || hawk.utils.now(options.localtimeOffsetMsec);

	        // Validate credentials

	        var credentials = options.credentials;
	        if (!credentials ||
	            !credentials.id ||
	            !credentials.key ||
	            !credentials.algorithm) {

	            // Invalid credential object
	            return null;
	        }

	        if (hawk.crypto.algorithms.indexOf(credentials.algorithm) === -1) {
	            return null;
	        }

	        // Calculate signature

	        var artifacts = {
	            ts: timestamp,
	            nonce: options.nonce || hawk.utils.randomString(6),
	            host: host,
	            port: port,
	            hash: hawk.crypto.calculatePayloadHash(message, credentials.algorithm)
	        };

	        // Construct authorization

	        var result = {
	            id: credentials.id,
	            ts: artifacts.ts,
	            nonce: artifacts.nonce,
	            hash: artifacts.hash,
	            mac: hawk.crypto.calculateMac('message', credentials, artifacts)
	        };

	        return result;
	    },

	    authenticateTimestamp: function (message, credentials, updateClock) {           // updateClock defaults to true

	        var tsm = hawk.crypto.calculateTsMac(message.ts, credentials);
	        if (tsm !== message.tsm) {
	            return false;
	        }

	        if (updateClock !== false) {
	            hawk.utils.setNtpOffset(message.ts - Math.floor((new Date()).getTime() / 1000));    // Keep offset at 1 second precision
	        }

	        return true;
	    }
	};


	hawk.crypto = {

	    headerVersion: '1',

	    algorithms: ['sha1', 'sha256'],

	    calculateMac: function (type, credentials, options) {

	        var normalized = hawk.crypto.generateNormalizedString(type, options);

	        var hmac = CryptoJS['Hmac' + credentials.algorithm.toUpperCase()](normalized, credentials.key);
	        return hmac.toString(CryptoJS.enc.Base64);
	    },

	    generateNormalizedString: function (type, options) {

	        var normalized = 'hawk.' + hawk.crypto.headerVersion + '.' + type + '\n' +
	                         options.ts + '\n' +
	                         options.nonce + '\n' +
	                         (options.method || '').toUpperCase() + '\n' +
	                         (options.resource || '') + '\n' +
	                         options.host.toLowerCase() + '\n' +
	                         options.port + '\n' +
	                         (options.hash || '') + '\n';

	        if (options.ext) {
	            normalized += options.ext.replace('\\', '\\\\').replace('\n', '\\n');
	        }

	        normalized += '\n';

	        if (options.app) {
	            normalized += options.app + '\n' +
	                          (options.dlg || '') + '\n';
	        }

	        return normalized;
	    },

	    calculatePayloadHash: function (payload, algorithm, contentType) {

	        var hash = CryptoJS.algo[algorithm.toUpperCase()].create();
	        hash.update('hawk.' + hawk.crypto.headerVersion + '.payload\n');
	        hash.update(hawk.utils.parseContentType(contentType) + '\n');
	        hash.update(payload);
	        hash.update('\n');
	        return hash.finalize().toString(CryptoJS.enc.Base64);
	    },

	    calculateTsMac: function (ts, credentials) {

	        var hash = CryptoJS['Hmac' + credentials.algorithm.toUpperCase()]('hawk.' + hawk.crypto.headerVersion + '.ts\n' + ts + '\n', credentials.key);
	        return hash.toString(CryptoJS.enc.Base64);
	    }
	};


	// localStorage compatible interface

	hawk.internals.LocalStorage = function () {

	    this._cache = {};
	    this.length = 0;

	    this.getItem = function (key) {

	        return this._cache.hasOwnProperty(key) ? String(this._cache[key]) : null;
	    };

	    this.setItem = function (key, value) {

	        this._cache[key] = String(value);
	        this.length = Object.keys(this._cache).length;
	    };

	    this.removeItem = function (key) {

	        delete this._cache[key];
	        this.length = Object.keys(this._cache).length;
	    };

	    this.clear = function () {

	        this._cache = {};
	        this.length = 0;
	    };

	    this.key = function (i) {

	        return Object.keys(this._cache)[i || 0];
	    };
	};


	hawk.utils = {

	    storage: new hawk.internals.LocalStorage(),

	    setStorage: function (storage) {

	        var ntpOffset = hawk.utils.storage.getItem('hawk_ntp_offset');
	        hawk.utils.storage = storage;
	        if (ntpOffset) {
	            hawk.utils.setNtpOffset(ntpOffset);
	        }
	    },

	    setNtpOffset: function (offset) {

	        try {
	            hawk.utils.storage.setItem('hawk_ntp_offset', offset);
	        }
	        catch (err) {
	            console.error('[hawk] could not write to storage.');
	            console.error(err);
	        }
	    },

	    getNtpOffset: function () {

	        var offset = hawk.utils.storage.getItem('hawk_ntp_offset');
	        if (!offset) {
	            return 0;
	        }

	        return parseInt(offset, 10);
	    },

	    now: function (localtimeOffsetMsec) {

	        return Math.floor(((new Date()).getTime() + (localtimeOffsetMsec || 0)) / 1000) + hawk.utils.getNtpOffset();
	    },

	    escapeHeaderAttribute: function (attribute) {

	        return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"');
	    },

	    parseContentType: function (header) {

	        if (!header) {
	            return '';
	        }

	        return header.split(';')[0].replace(/^\s+|\s+$/g, '').toLowerCase();
	    },

	    parseAuthorizationHeader: function (header, keys) {

	        if (!header) {
	            return null;
	        }

	        var headerParts = header.match(/^(\w+)(?:\s+(.*))?$/);       // Header: scheme[ something]
	        if (!headerParts) {
	            return null;
	        }

	        var scheme = headerParts[1];
	        if (scheme.toLowerCase() !== 'hawk') {
	            return null;
	        }

	        var attributesString = headerParts[2];
	        if (!attributesString) {
	            return null;
	        }

	        var attributes = {};
	        var verify = attributesString.replace(/(\w+)="([^"\\]*)"\s*(?:,\s*|$)/g, function ($0, $1, $2) {

	            // Check valid attribute names

	            if (keys.indexOf($1) === -1) {
	                return;
	            }

	            // Allowed attribute value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9

	            if ($2.match(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~]+$/) === null) {
	                return;
	            }

	            // Check for duplicates

	            if (attributes.hasOwnProperty($1)) {
	                return;
	            }

	            attributes[$1] = $2;
	            return '';
	        });

	        if (verify !== '') {
	            return null;
	        }

	        return attributes;
	    },

	    randomString: function (size) {

	        var randomSource = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	        var len = randomSource.length;

	        var result = [];
	        for (var i = 0; i < size; ++i) {
	            result[i] = randomSource[Math.floor(Math.random() * len)];
	        }

	        return result.join('');
	    },

	    parseUri: function (input) {

	        // Based on: parseURI 1.2.2
	        // http://blog.stevenlevithan.com/archives/parseuri
	        // (c) Steven Levithan <stevenlevithan.com>
	        // MIT License

	        var keys = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'hostname', 'port', 'resource', 'relative', 'pathname', 'directory', 'file', 'query', 'fragment'];

	        var uriRegex = /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?)(?:#(.*))?)/;
	        var uriByNumber = input.match(uriRegex);
	        var uri = {};

	        for (var i = 0, il = keys.length; i < il; ++i) {
	            uri[keys[i]] = uriByNumber[i] || '';
	        }

	        if (uri.port === '') {
	            uri.port = (uri.protocol.toLowerCase() === 'http' ? '80' : (uri.protocol.toLowerCase() === 'https' ? '443' : ''));
	        }

	        return uri;
	    },

	    base64urlEncode: function (value) {

	        var wordArray = CryptoJS.enc.Utf8.parse(value);
	        var encoded = CryptoJS.enc.Base64.stringify(wordArray);
	        return encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
	    }
	};


	// $lab:coverage:off$
	/* eslint-disable */

	// Based on: Crypto-JS v3.1.2
	// Copyright (c) 2009-2013, Jeff Mott. All rights reserved.
	// http://code.google.com/p/crypto-js/
	// http://code.google.com/p/crypto-js/wiki/License

	var CryptoJS = CryptoJS || function (h, r) { var k = {}, l = k.lib = {}, n = function () { }, f = l.Base = { extend: function (a) { n.prototype = this; var b = new n; a && b.mixIn(a); b.hasOwnProperty("init") || (b.init = function () { b.$super.init.apply(this, arguments) }); b.init.prototype = b; b.$super = this; return b }, create: function () { var a = this.extend(); a.init.apply(a, arguments); return a }, init: function () { }, mixIn: function (a) { for (var b in a) a.hasOwnProperty(b) && (this[b] = a[b]); a.hasOwnProperty("toString") && (this.toString = a.toString) }, clone: function () { return this.init.prototype.extend(this) } }, j = l.WordArray = f.extend({ init: function (a, b) { a = this.words = a || []; this.sigBytes = b != r ? b : 4 * a.length }, toString: function (a) { return (a || s).stringify(this) }, concat: function (a) { var b = this.words, d = a.words, c = this.sigBytes; a = a.sigBytes; this.clamp(); if (c % 4) for (var e = 0; e < a; e++) b[c + e >>> 2] |= (d[e >>> 2] >>> 24 - 8 * (e % 4) & 255) << 24 - 8 * ((c + e) % 4); else if (65535 < d.length) for (e = 0; e < a; e += 4) b[c + e >>> 2] = d[e >>> 2]; else b.push.apply(b, d); this.sigBytes += a; return this }, clamp: function () { var a = this.words, b = this.sigBytes; a[b >>> 2] &= 4294967295 << 32 - 8 * (b % 4); a.length = h.ceil(b / 4) }, clone: function () { var a = f.clone.call(this); a.words = this.words.slice(0); return a }, random: function (a) { for (var b = [], d = 0; d < a; d += 4) b.push(4294967296 * h.random() | 0); return new j.init(b, a) } }), m = k.enc = {}, s = m.Hex = { stringify: function (a) { var b = a.words; a = a.sigBytes; for (var d = [], c = 0; c < a; c++) { var e = b[c >>> 2] >>> 24 - 8 * (c % 4) & 255; d.push((e >>> 4).toString(16)); d.push((e & 15).toString(16)) } return d.join("") }, parse: function (a) { for (var b = a.length, d = [], c = 0; c < b; c += 2) d[c >>> 3] |= parseInt(a.substr(c, 2), 16) << 24 - 4 * (c % 8); return new j.init(d, b / 2) } }, p = m.Latin1 = { stringify: function (a) { var b = a.words; a = a.sigBytes; for (var d = [], c = 0; c < a; c++) d.push(String.fromCharCode(b[c >>> 2] >>> 24 - 8 * (c % 4) & 255)); return d.join("") }, parse: function (a) { for (var b = a.length, d = [], c = 0; c < b; c++) d[c >>> 2] |= (a.charCodeAt(c) & 255) << 24 - 8 * (c % 4); return new j.init(d, b) } }, t = m.Utf8 = { stringify: function (a) { try { return decodeURIComponent(escape(p.stringify(a))) } catch (b) { throw Error("Malformed UTF-8 data"); } }, parse: function (a) { return p.parse(unescape(encodeURIComponent(a))) } }, q = l.BufferedBlockAlgorithm = f.extend({ reset: function () { this._data = new j.init; this._nDataBytes = 0 }, _append: function (a) { "string" == typeof a && (a = t.parse(a)); this._data.concat(a); this._nDataBytes += a.sigBytes }, _process: function (a) { var b = this._data, d = b.words, c = b.sigBytes, e = this.blockSize, f = c / (4 * e), f = a ? h.ceil(f) : h.max((f | 0) - this._minBufferSize, 0); a = f * e; c = h.min(4 * a, c); if (a) { for (var g = 0; g < a; g += e) this._doProcessBlock(d, g); g = d.splice(0, a); b.sigBytes -= c } return new j.init(g, c) }, clone: function () { var a = f.clone.call(this); a._data = this._data.clone(); return a }, _minBufferSize: 0 }); l.Hasher = q.extend({ cfg: f.extend(), init: function (a) { this.cfg = this.cfg.extend(a); this.reset() }, reset: function () { q.reset.call(this); this._doReset() }, update: function (a) { this._append(a); this._process(); return this }, finalize: function (a) { a && this._append(a); return this._doFinalize() }, blockSize: 16, _createHelper: function (a) { return function (b, d) { return (new a.init(d)).finalize(b) } }, _createHmacHelper: function (a) { return function (b, d) { return (new u.HMAC.init(a, d)).finalize(b) } } }); var u = k.algo = {}; return k }(Math);
	(function () { var k = CryptoJS, b = k.lib, m = b.WordArray, l = b.Hasher, d = [], b = k.algo.SHA1 = l.extend({ _doReset: function () { this._hash = new m.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]) }, _doProcessBlock: function (n, p) { for (var a = this._hash.words, e = a[0], f = a[1], h = a[2], j = a[3], b = a[4], c = 0; 80 > c; c++) { if (16 > c) d[c] = n[p + c] | 0; else { var g = d[c - 3] ^ d[c - 8] ^ d[c - 14] ^ d[c - 16]; d[c] = g << 1 | g >>> 31 } g = (e << 5 | e >>> 27) + b + d[c]; g = 20 > c ? g + ((f & h | ~f & j) + 1518500249) : 40 > c ? g + ((f ^ h ^ j) + 1859775393) : 60 > c ? g + ((f & h | f & j | h & j) - 1894007588) : g + ((f ^ h ^ j) - 899497514); b = j; j = h; h = f << 30 | f >>> 2; f = e; e = g } a[0] = a[0] + e | 0; a[1] = a[1] + f | 0; a[2] = a[2] + h | 0; a[3] = a[3] + j | 0; a[4] = a[4] + b | 0 }, _doFinalize: function () { var b = this._data, d = b.words, a = 8 * this._nDataBytes, e = 8 * b.sigBytes; d[e >>> 5] |= 128 << 24 - e % 32; d[(e + 64 >>> 9 << 4) + 14] = Math.floor(a / 4294967296); d[(e + 64 >>> 9 << 4) + 15] = a; b.sigBytes = 4 * d.length; this._process(); return this._hash }, clone: function () { var b = l.clone.call(this); b._hash = this._hash.clone(); return b } }); k.SHA1 = l._createHelper(b); k.HmacSHA1 = l._createHmacHelper(b) })();
	(function (k) { for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function (q) { return 4294967296 * (q - (q | 0)) | 0 }, l = 2, b = 0; 64 > b;) { var d; a: { d = l; for (var w = k.sqrt(d), r = 2; r <= w; r++) if (!(d % r)) { d = !1; break a } d = !0 } d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++); l++ } var n = [], h = h.SHA256 = j.extend({ _doReset: function () { this._hash = new v.init(s.slice(0)) }, _doProcessBlock: function (q, h) { for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) { if (16 > e) n[e] = q[h + e] | 0; else { var m = n[e - 15], p = n[e - 2]; n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16] } m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e]; p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b); l = j; j = g; g = f; f = k + m | 0; k = b; b = d; d = c; c = m + p | 0 } a[0] = a[0] + c | 0; a[1] = a[1] + d | 0; a[2] = a[2] + b | 0; a[3] = a[3] + k | 0; a[4] = a[4] + f | 0; a[5] = a[5] + g | 0; a[6] = a[6] + j | 0; a[7] = a[7] + l | 0 }, _doFinalize: function () { var d = this._data, b = d.words, a = 8 * this._nDataBytes, c = 8 * d.sigBytes; b[c >>> 5] |= 128 << 24 - c % 32; b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296); b[(c + 64 >>> 9 << 4) + 15] = a; d.sigBytes = 4 * b.length; this._process(); return this._hash }, clone: function () { var b = j.clone.call(this); b._hash = this._hash.clone(); return b } }); g.SHA256 = j._createHelper(h); g.HmacSHA256 = j._createHmacHelper(h) })(Math);
	(function () { var c = CryptoJS, k = c.enc.Utf8; c.algo.HMAC = c.lib.Base.extend({ init: function (a, b) { a = this._hasher = new a.init; "string" == typeof b && (b = k.parse(b)); var c = a.blockSize, e = 4 * c; b.sigBytes > e && (b = a.finalize(b)); b.clamp(); for (var f = this._oKey = b.clone(), g = this._iKey = b.clone(), h = f.words, j = g.words, d = 0; d < c; d++) h[d] ^= 1549556828, j[d] ^= 909522486; f.sigBytes = g.sigBytes = e; this.reset() }, reset: function () { var a = this._hasher; a.reset(); a.update(this._iKey) }, update: function (a) { this._hasher.update(a); return this }, finalize: function (a) { var b = this._hasher; a = b.finalize(a); b.reset(); return b.finalize(this._oKey.clone().concat(a)) } }) })();
	(function () { var h = CryptoJS, j = h.lib.WordArray; h.enc.Base64 = { stringify: function (b) { var e = b.words, f = b.sigBytes, c = this._map; b.clamp(); b = []; for (var a = 0; a < f; a += 3) for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) b.push(c.charAt(d >>> 6 * (3 - g) & 63)); if (e = c.charAt(64)) for (; b.length % 4;) b.push(e); return b.join("") }, parse: function (b) { var e = b.length, f = this._map, c = f.charAt(64); c && (c = b.indexOf(c), -1 != c && (e = c)); for (var c = [], a = 0, d = 0; d < e; d++) if (d % 4) { var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4), h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4); c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4); a++ } return j.create(c, a) }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" } })();

	hawk.crypto.internals = CryptoJS;


	// Export if used as a module

	if (typeof module !== 'undefined' && module.exports) {
	    module.exports = hawk;
	}

	/* eslint-enable */
	// $lab:coverage:on$


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	
	/*!
	 * knox - auth
	 * Copyright(c) 2010 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	/**
	 * Module dependencies.
	 */

	var crypto = __webpack_require__(52)
	  , parse = __webpack_require__(41).parse
	  ;

	/**
	 * Valid keys.
	 */

	var keys = 
	  [ 'acl'
	  , 'location'
	  , 'logging'
	  , 'notification'
	  , 'partNumber'
	  , 'policy'
	  , 'requestPayment'
	  , 'torrent'
	  , 'uploadId'
	  , 'uploads'
	  , 'versionId'
	  , 'versioning'
	  , 'versions'
	  , 'website'
	  ]

	/**
	 * Return an "Authorization" header value with the given `options`
	 * in the form of "AWS <key>:<signature>"
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function authorization (options) {
	  return 'AWS ' + options.key + ':' + sign(options)
	}

	module.exports = authorization
	module.exports.authorization = authorization

	/**
	 * Simple HMAC-SHA1 Wrapper
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */ 

	function hmacSha1 (options) {
	  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64')
	}

	module.exports.hmacSha1 = hmacSha1

	/**
	 * Create a base64 sha1 HMAC for `options`. 
	 * 
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function sign (options) {
	  options.message = stringToSign(options)
	  return hmacSha1(options)
	}
	module.exports.sign = sign

	/**
	 * Create a base64 sha1 HMAC for `options`. 
	 *
	 * Specifically to be used with S3 presigned URLs
	 * 
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function signQuery (options) {
	  options.message = queryStringToSign(options)
	  return hmacSha1(options)
	}
	module.exports.signQuery= signQuery

	/**
	 * Return a string for sign() with the given `options`.
	 *
	 * Spec:
	 * 
	 *    <verb>\n
	 *    <md5>\n
	 *    <content-type>\n
	 *    <date>\n
	 *    [headers\n]
	 *    <resource>
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function stringToSign (options) {
	  var headers = options.amazonHeaders || ''
	  if (headers) headers += '\n'
	  var r = 
	    [ options.verb
	    , options.md5
	    , options.contentType
	    , options.date ? options.date.toUTCString() : ''
	    , headers + options.resource
	    ]
	  return r.join('\n')
	}
	module.exports.queryStringToSign = stringToSign

	/**
	 * Return a string for sign() with the given `options`, but is meant exclusively
	 * for S3 presigned URLs
	 *
	 * Spec:
	 * 
	 *    <date>\n
	 *    <resource>
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */

	function queryStringToSign (options){
	  return 'GET\n\n\n' + options.date + '\n' + options.resource
	}
	module.exports.queryStringToSign = queryStringToSign

	/**
	 * Perform the following:
	 *
	 *  - ignore non-amazon headers
	 *  - lowercase fields
	 *  - sort lexicographically
	 *  - trim whitespace between ":"
	 *  - join with newline
	 *
	 * @param {Object} headers
	 * @return {String}
	 * @api private
	 */

	function canonicalizeHeaders (headers) {
	  var buf = []
	    , fields = Object.keys(headers)
	    ;
	  for (var i = 0, len = fields.length; i < len; ++i) {
	    var field = fields[i]
	      , val = headers[field]
	      , field = field.toLowerCase()
	      ;
	    if (0 !== field.indexOf('x-amz')) continue
	    buf.push(field + ':' + val)
	  }
	  return buf.sort().join('\n')
	}
	module.exports.canonicalizeHeaders = canonicalizeHeaders

	/**
	 * Perform the following:
	 *
	 *  - ignore non sub-resources
	 *  - sort lexicographically
	 *
	 * @param {String} resource
	 * @return {String}
	 * @api private
	 */

	function canonicalizeResource (resource) {
	  var url = parse(resource, true)
	    , path = url.pathname
	    , buf = []
	    ;

	  Object.keys(url.query).forEach(function(key){
	    if (!~keys.indexOf(key)) return
	    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key])
	    buf.push(key + val)
	  })

	  return path + (buf.length ? '?' + buf.sort().join('&') : '')
	}
	module.exports.canonicalizeResource = canonicalizeResource


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2015 Joyent, Inc.

	var parser = __webpack_require__(296);
	var signer = __webpack_require__(298);
	var verify = __webpack_require__(299);
	var util = __webpack_require__(300);



	///--- API

	module.exports = {

	  parse: parser.parseRequest,
	  parseRequest: parser.parseRequest,

	  sign: signer.signRequest,
	  signRequest: signer.signRequest,

	  sshKeyToPEM: util.sshKeyToPEM,
	  sshKeyFingerprint: util.fingerprint,
	  pemToRsaSSHKey: util.pemToRsaSSHKey,

	  verify: verify.verifySignature,
	  verifySignature: verify.verifySignature,
	  verifyHMAC: verify.verifyHMAC
	};


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Joyent, Inc.  All rights reserved.

	var assert = __webpack_require__(297);
	var util = __webpack_require__(10);



	///--- Globals

	var Algorithms = {
	  'rsa-sha1': true,
	  'rsa-sha256': true,
	  'rsa-sha512': true,
	  'dsa-sha1': true,
	  'hmac-sha1': true,
	  'hmac-sha256': true,
	  'hmac-sha512': true
	};

	var State = {
	  New: 0,
	  Params: 1
	};

	var ParamsState = {
	  Name: 0,
	  Quote: 1,
	  Value: 2,
	  Comma: 3
	};



	///--- Specific Errors

	function HttpSignatureError(message, caller) {
	  if (Error.captureStackTrace)
	    Error.captureStackTrace(this, caller || HttpSignatureError);

	  this.message = message;
	  this.name = caller.name;
	}
	util.inherits(HttpSignatureError, Error);

	function ExpiredRequestError(message) {
	  HttpSignatureError.call(this, message, ExpiredRequestError);
	}
	util.inherits(ExpiredRequestError, HttpSignatureError);


	function InvalidHeaderError(message) {
	  HttpSignatureError.call(this, message, InvalidHeaderError);
	}
	util.inherits(InvalidHeaderError, HttpSignatureError);


	function InvalidParamsError(message) {
	  HttpSignatureError.call(this, message, InvalidParamsError);
	}
	util.inherits(InvalidParamsError, HttpSignatureError);


	function MissingHeaderError(message) {
	  HttpSignatureError.call(this, message, MissingHeaderError);
	}
	util.inherits(MissingHeaderError, HttpSignatureError);



	///--- Exported API

	module.exports = {

	  /**
	   * Parses the 'Authorization' header out of an http.ServerRequest object.
	   *
	   * Note that this API will fully validate the Authorization header, and throw
	   * on any error.  It will not however check the signature, or the keyId format
	   * as those are specific to your environment.  You can use the options object
	   * to pass in extra constraints.
	   *
	   * As a response object you can expect this:
	   *
	   *     {
	   *       "scheme": "Signature",
	   *       "params": {
	   *         "keyId": "foo",
	   *         "algorithm": "rsa-sha256",
	   *         "headers": [
	   *           "date" or "x-date",
	   *           "content-md5"
	   *         ],
	   *         "signature": "base64"
	   *       },
	   *       "signingString": "ready to be passed to crypto.verify()"
	   *     }
	   *
	   * @param {Object} request an http.ServerRequest.
	   * @param {Object} options an optional options object with:
	   *                   - clockSkew: allowed clock skew in seconds (default 300).
	   *                   - headers: required header names (def: date or x-date)
	   *                   - algorithms: algorithms to support (default: all).
	   * @return {Object} parsed out object (see above).
	   * @throws {TypeError} on invalid input.
	   * @throws {InvalidHeaderError} on an invalid Authorization header error.
	   * @throws {InvalidParamsError} if the params in the scheme are invalid.
	   * @throws {MissingHeaderError} if the params indicate a header not present,
	   *                              either in the request headers from the params,
	   *                              or not in the params from a required header
	   *                              in options.
	   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
	   */
	  parseRequest: function parseRequest(request, options) {
	    assert.object(request, 'request');
	    assert.object(request.headers, 'request.headers');
	    if (options === undefined) {
	      options = {};
	    }
	    if (options.headers === undefined) {
	      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
	    }
	    assert.object(options, 'options');
	    assert.arrayOfString(options.headers, 'options.headers');
	    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

	    if (!request.headers.authorization)
	      throw new MissingHeaderError('no authorization header present in ' +
	                                   'the request');

	    options.clockSkew = options.clockSkew || 300;


	    var i = 0;
	    var state = State.New;
	    var substate = ParamsState.Name;
	    var tmpName = '';
	    var tmpValue = '';

	    var parsed = {
	      scheme: '',
	      params: {},
	      signingString: '',

	      get algorithm() {
	        return this.params.algorithm.toUpperCase();
	      },

	      get keyId() {
	        return this.params.keyId;
	      }

	    };

	    var authz = request.headers.authorization;
	    for (i = 0; i < authz.length; i++) {
	      var c = authz.charAt(i);

	      switch (Number(state)) {

	      case State.New:
	        if (c !== ' ') parsed.scheme += c;
	        else state = State.Params;
	        break;

	      case State.Params:
	        switch (Number(substate)) {

	        case ParamsState.Name:
	          var code = c.charCodeAt(0);
	          // restricted name of A-Z / a-z
	          if ((code >= 0x41 && code <= 0x5a) || // A-Z
	              (code >= 0x61 && code <= 0x7a)) { // a-z
	            tmpName += c;
	          } else if (c === '=') {
	            if (tmpName.length === 0)
	              throw new InvalidHeaderError('bad param format');
	            substate = ParamsState.Quote;
	          } else {
	            throw new InvalidHeaderError('bad param format');
	          }
	          break;

	        case ParamsState.Quote:
	          if (c === '"') {
	            tmpValue = '';
	            substate = ParamsState.Value;
	          } else {
	            throw new InvalidHeaderError('bad param format');
	          }
	          break;

	        case ParamsState.Value:
	          if (c === '"') {
	            parsed.params[tmpName] = tmpValue;
	            substate = ParamsState.Comma;
	          } else {
	            tmpValue += c;
	          }
	          break;

	        case ParamsState.Comma:
	          if (c === ',') {
	            tmpName = '';
	            substate = ParamsState.Name;
	          } else {
	            throw new InvalidHeaderError('bad param format');
	          }
	          break;

	        default:
	          throw new Error('Invalid substate');
	        }
	        break;

	      default:
	        throw new Error('Invalid substate');
	      }

	    }

	    if (!parsed.params.headers || parsed.params.headers === '') {
	      if (request.headers['x-date']) {
	        parsed.params.headers = ['x-date'];
	      } else {
	        parsed.params.headers = ['date'];
	      }
	    } else {
	      parsed.params.headers = parsed.params.headers.split(' ');
	    }

	    // Minimally validate the parsed object
	    if (!parsed.scheme || parsed.scheme !== 'Signature')
	      throw new InvalidHeaderError('scheme was not "Signature"');

	    if (!parsed.params.keyId)
	      throw new InvalidHeaderError('keyId was not specified');

	    if (!parsed.params.algorithm)
	      throw new InvalidHeaderError('algorithm was not specified');

	    if (!parsed.params.signature)
	      throw new InvalidHeaderError('signature was not specified');

	    // Check the algorithm against the official list
	    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
	    if (!Algorithms[parsed.params.algorithm])
	      throw new InvalidParamsError(parsed.params.algorithm +
	                                   ' is not supported');

	    // Build the signingString
	    for (i = 0; i < parsed.params.headers.length; i++) {
	      var h = parsed.params.headers[i].toLowerCase();
	      parsed.params.headers[i] = h;

	      if (h !== 'request-line') {
	        var value = request.headers[h];
	        if (!value)
	          throw new MissingHeaderError(h + ' was not in the request');
	        parsed.signingString += h + ': ' + value;
	      } else {
	        parsed.signingString +=
	          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
	      }

	      if ((i + 1) < parsed.params.headers.length)
	        parsed.signingString += '\n';
	    }

	    // Check against the constraints
	    var date;
	    if (request.headers.date || request.headers['x-date']) {
	        if (request.headers['x-date']) {
	          date = new Date(request.headers['x-date']);
	        } else {
	          date = new Date(request.headers.date);
	        }
	      var now = new Date();
	      var skew = Math.abs(now.getTime() - date.getTime());

	      if (skew > options.clockSkew * 1000) {
	        throw new ExpiredRequestError('clock skew of ' +
	                                      (skew / 1000) +
	                                      's was greater than ' +
	                                      options.clockSkew + 's');
	      }
	    }

	    options.headers.forEach(function (hdr) {
	      // Remember that we already checked any headers in the params
	      // were in the request, so if this passes we're good.
	      if (parsed.params.headers.indexOf(hdr) < 0)
	        throw new MissingHeaderError(hdr + ' was not a signed header');
	    });

	    if (options.algorithms) {
	      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
	        throw new InvalidParamsError(parsed.params.algorithm +
	                                     ' is not a supported algorithm');
	    }

	    return parsed;
	  }

	};


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {// Copyright (c) 2012, Mark Cavage. All rights reserved.

	var assert = __webpack_require__(280);
	var Stream = __webpack_require__(21).Stream;
	var util = __webpack_require__(10);



	///--- Globals

	var NDEBUG = process.env.NODE_NDEBUG || false;
	var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;



	///--- Messages

	var ARRAY_TYPE_REQUIRED = '%s ([%s]) required';
	var TYPE_REQUIRED = '%s (%s) is required';



	///--- Internal

	function capitalize(str) {
	        return (str.charAt(0).toUpperCase() + str.slice(1));
	}

	function uncapitalize(str) {
	        return (str.charAt(0).toLowerCase() + str.slice(1));
	}

	function _() {
	        return (util.format.apply(util, arguments));
	}


	function _assert(arg, type, name, stackFunc) {
	        if (!NDEBUG) {
	                name = name || type;
	                stackFunc = stackFunc || _assert.caller;
	                var t = typeof (arg);

	                if (t !== type) {
	                        throw new assert.AssertionError({
	                                message: _(TYPE_REQUIRED, name, type),
	                                actual: t,
	                                expected: type,
	                                operator: '===',
	                                stackStartFunction: stackFunc
	                        });
	                }
	        }
	}


	function _instanceof(arg, type, name, stackFunc) {
	        if (!NDEBUG) {
	                name = name || type;
	                stackFunc = stackFunc || _instanceof.caller;

	                if (!(arg instanceof type)) {
	                        throw new assert.AssertionError({
	                                message: _(TYPE_REQUIRED, name, type.name),
	                                actual: _getClass(arg),
	                                expected: type.name,
	                                operator: 'instanceof',
	                                stackStartFunction: stackFunc
	                        });
	                }
	        }
	}

	function _getClass(object) {
	        return (Object.prototype.toString.call(object).slice(8, -1));
	};



	///--- API

	function array(arr, type, name) {
	        if (!NDEBUG) {
	                name = name || type;

	                if (!Array.isArray(arr)) {
	                        throw new assert.AssertionError({
	                                message: _(ARRAY_TYPE_REQUIRED, name, type),
	                                actual: typeof (arr),
	                                expected: 'array',
	                                operator: 'Array.isArray',
	                                stackStartFunction: array.caller
	                        });
	                }

	                for (var i = 0; i < arr.length; i++) {
	                        _assert(arr[i], type, name, array);
	                }
	        }
	}


	function bool(arg, name) {
	        _assert(arg, 'boolean', name, bool);
	}


	function buffer(arg, name) {
	        if (!Buffer.isBuffer(arg)) {
	                throw new assert.AssertionError({
	                        message: _(TYPE_REQUIRED, name || '', 'Buffer'),
	                        actual: typeof (arg),
	                        expected: 'buffer',
	                        operator: 'Buffer.isBuffer',
	                        stackStartFunction: buffer
	                });
	        }
	}


	function func(arg, name) {
	        _assert(arg, 'function', name);
	}


	function number(arg, name) {
	        _assert(arg, 'number', name);
	        if (!NDEBUG && (isNaN(arg) || !isFinite(arg))) {
	                throw new assert.AssertionError({
	                        message: _(TYPE_REQUIRED, name, 'number'),
	                        actual: arg,
	                        expected: 'number',
	                        operator: 'isNaN',
	                        stackStartFunction: number
	                });
	        }
	}


	function object(arg, name) {
	        _assert(arg, 'object', name);
	}


	function stream(arg, name) {
	        _instanceof(arg, Stream, name);
	}


	function date(arg, name) {
	        _instanceof(arg, Date, name);
	}

	function regexp(arg, name) {
	        _instanceof(arg, RegExp, name);
	}


	function string(arg, name) {
	        _assert(arg, 'string', name);
	}


	function uuid(arg, name) {
	        string(arg, name);
	        if (!NDEBUG && !UUID_REGEXP.test(arg)) {
	                throw new assert.AssertionError({
	                        message: _(TYPE_REQUIRED, name, 'uuid'),
	                        actual: 'string',
	                        expected: 'uuid',
	                        operator: 'test',
	                        stackStartFunction: uuid
	                });
	        }
	}


	///--- Exports

	module.exports = {
	        bool: bool,
	        buffer: buffer,
	        date: date,
	        func: func,
	        number: number,
	        object: object,
	        regexp: regexp,
	        stream: stream,
	        string: string,
	        uuid: uuid
	};


	Object.keys(module.exports).forEach(function (k) {
	        if (k === 'buffer')
	                return;

	        var name = 'arrayOf' + capitalize(k);

	        if (k === 'bool')
	                k = 'boolean';
	        if (k === 'func')
	                k = 'function';
	        module.exports[name] = function (arg, name) {
	                array(arg, k, name);
	        };
	});

	Object.keys(module.exports).forEach(function (k) {
	        var _name = 'optional' + capitalize(k);
	        var s = uncapitalize(k.replace('arrayOf', ''));
	        if (s === 'bool')
	                s = 'boolean';
	        if (s === 'func')
	                s = 'function';

	        if (k.indexOf('arrayOf') !== -1) {
	          module.exports[_name] = function (arg, name) {
	                  if (!NDEBUG && arg !== undefined) {
	                          array(arg, s, name);
	                  }
	          };
	        } else {
	          module.exports[_name] = function (arg, name) {
	                  if (!NDEBUG && arg !== undefined) {
	                          _assert(arg, s, name);
	                  }
	          };
	        }
	});


	// Reexport built-in assertions
	Object.keys(assert).forEach(function (k) {
	        if (k === 'AssertionError') {
	                module.exports[k] = assert[k];
	                return;
	        }

	        module.exports[k] = function () {
	                if (!NDEBUG) {
	                        assert[k].apply(assert[k], arguments);
	                }
	        };
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(5).Buffer))

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Joyent, Inc.  All rights reserved.

	var assert = __webpack_require__(297);
	var crypto = __webpack_require__(52);
	var http = __webpack_require__(18);

	var sprintf = __webpack_require__(10).format;



	///--- Globals

	var Algorithms = {
	  'rsa-sha1': true,
	  'rsa-sha256': true,
	  'rsa-sha512': true,
	  'dsa-sha1': true,
	  'hmac-sha1': true,
	  'hmac-sha256': true,
	  'hmac-sha512': true
	};

	var Authorization =
	  'Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';



	///--- Specific Errors

	function MissingHeaderError(message) {
	    this.name = 'MissingHeaderError';
	    this.message = message;
	    this.stack = (new Error()).stack;
	}
	MissingHeaderError.prototype = new Error();


	function InvalidAlgorithmError(message) {
	    this.name = 'InvalidAlgorithmError';
	    this.message = message;
	    this.stack = (new Error()).stack;
	}
	InvalidAlgorithmError.prototype = new Error();



	///--- Internal Functions

	function _pad(val) {
	  if (parseInt(val, 10) < 10) {
	    val = '0' + val;
	  }
	  return val;
	}


	function _rfc1123() {
	  var date = new Date();

	  var months = ['Jan',
	                'Feb',
	                'Mar',
	                'Apr',
	                'May',
	                'Jun',
	                'Jul',
	                'Aug',
	                'Sep',
	                'Oct',
	                'Nov',
	                'Dec'];
	  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	  return days[date.getUTCDay()] + ', ' +
	    _pad(date.getUTCDate()) + ' ' +
	    months[date.getUTCMonth()] + ' ' +
	    date.getUTCFullYear() + ' ' +
	    _pad(date.getUTCHours()) + ':' +
	    _pad(date.getUTCMinutes()) + ':' +
	    _pad(date.getUTCSeconds()) +
	    ' GMT';
	}



	///--- Exported API

	module.exports = {

	  /**
	   * Adds an 'Authorization' header to an http.ClientRequest object.
	   *
	   * Note that this API will add a Date header if it's not already set. Any
	   * other headers in the options.headers array MUST be present, or this
	   * will throw.
	   *
	   * You shouldn't need to check the return type; it's just there if you want
	   * to be pedantic.
	   *
	   * @param {Object} request an instance of http.ClientRequest.
	   * @param {Object} options signing parameters object:
	   *                   - {String} keyId required.
	   *                   - {String} key required (either a PEM or HMAC key).
	   *                   - {Array} headers optional; defaults to ['date'].
	   *                   - {String} algorithm optional; defaults to 'rsa-sha256'.
	   *                   - {String} httpVersion optional; defaults to '1.1'.
	   * @return {Boolean} true if Authorization (and optionally Date) were added.
	   * @throws {TypeError} on bad parameter types (input).
	   * @throws {InvalidAlgorithmError} if algorithm was bad.
	   * @throws {MissingHeaderError} if a header to be signed was specified but
	   *                              was not present.
	   */
	  signRequest: function signRequest(request, options) {
	    assert.object(request, 'request');
	    assert.object(options, 'options');
	    assert.optionalString(options.algorithm, 'options.algorithm');
	    assert.string(options.keyId, 'options.keyId');
	    assert.optionalArrayOfString(options.headers, 'options.headers');
	    assert.optionalString(options.httpVersion, 'options.httpVersion');

	    if (!request.getHeader('Date'))
	      request.setHeader('Date', _rfc1123());
	    if (!options.headers)
	      options.headers = ['date'];
	    if (!options.algorithm)
	      options.algorithm = 'rsa-sha256';
	    if (!options.httpVersion)
	      options.httpVersion = '1.1';

	    options.algorithm = options.algorithm.toLowerCase();

	    if (!Algorithms[options.algorithm])
	      throw new InvalidAlgorithmError(options.algorithm + ' is not supported');

	    var i;
	    var stringToSign = '';
	    for (i = 0; i < options.headers.length; i++) {
	      if (typeof (options.headers[i]) !== 'string')
	        throw new TypeError('options.headers must be an array of Strings');

	      var h = options.headers[i].toLowerCase();

	      if (h !== 'request-line') {
	        var value = request.getHeader(h);
	        if (!value) {
	          throw new MissingHeaderError(h + ' was not in the request');
	        }
	        stringToSign += h + ': ' + value;
	      } else {
	        stringToSign +=
	          request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;
	      }

	      if ((i + 1) < options.headers.length)
	        stringToSign += '\n';
	    }

	    var alg = options.algorithm.match(/(hmac|rsa)-(\w+)/);
	    var signature;
	    if (alg[1] === 'hmac') {
	      var hmac = crypto.createHmac(alg[2].toUpperCase(), options.key);
	      hmac.update(stringToSign);
	      signature = hmac.digest('base64');
	    } else {
	      var signer = crypto.createSign(options.algorithm.toUpperCase());
	      signer.update(stringToSign);
	      signature = signer.sign(options.key, 'base64');
	    }

	    request.setHeader('Authorization', sprintf(Authorization,
	                                               options.keyId,
	                                               options.algorithm,
	                                               options.headers.join(' '),
	                                               signature));

	    return true;
	  }

	};


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2015 Joyent, Inc.

	var assert = __webpack_require__(297);
	var crypto = __webpack_require__(52);



	///--- Exported API

	module.exports = {
	  /**
	   * Verify RSA/DSA signature against public key.  You are expected to pass in
	   * an object that was returned from `parse()`.
	   *
	   * @param {Object} parsedSignature the object you got from `parse`.
	   * @param {String} pubkey RSA/DSA private key PEM.
	   * @return {Boolean} true if valid, false otherwise.
	   * @throws {TypeError} if you pass in bad arguments.
	   */
	  verifySignature: function verifySignature(parsedSignature, pubkey) {
	    assert.object(parsedSignature, 'parsedSignature');
	    assert.string(pubkey, 'pubkey');

	    var alg = parsedSignature.algorithm.match(/^(RSA|DSA)-(\w+)/);
	    if (!alg || alg.length !== 3)
	      throw new TypeError('parsedSignature: unsupported algorithm ' +
	                          parsedSignature.algorithm);

	    var verify = crypto.createVerify(alg[0]);
	    verify.update(parsedSignature.signingString);
	    return verify.verify(pubkey, parsedSignature.params.signature, 'base64');
	  },

	  /**
	   * Verify HMAC against shared secret.  You are expected to pass in an object
	   * that was returned from `parse()`.
	   *
	   * @param {Object} parsedSignature the object you got from `parse`.
	   * @param {String} secret HMAC shared secret.
	   * @return {Boolean} true if valid, false otherwise.
	   * @throws {TypeError} if you pass in bad arguments.
	   */
	  verifyHMAC: function verifyHMAC(parsedSignature, secret) {
	    assert.object(parsedSignature, 'parsedHMAC');
	    assert.string(secret, 'secret');

	    var alg = parsedSignature.algorithm.match(/^HMAC-(\w+)/);
	    if (!alg || alg.length !== 2)
	      throw new TypeError('parsedSignature: unsupported algorithm ' +
	                          parsedSignature.algorithm);

	    var hmac = crypto.createHmac(alg[1].toUpperCase(), secret);
	    hmac.update(parsedSignature.signingString);
	    return (hmac.digest('base64') === parsedSignature.params.signature);
	  }
	};


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright 2012 Joyent, Inc.  All rights reserved.

	var assert = __webpack_require__(297);
	var crypto = __webpack_require__(52);

	var asn1 = __webpack_require__(301);
	var ctype = __webpack_require__(307);



	///--- Helpers

	function readNext(buffer, offset) {
	  var len = ctype.ruint32(buffer, 'big', offset);
	  offset += 4;

	  var newOffset = offset + len;

	  return {
	    data: buffer.slice(offset, newOffset),
	    offset: newOffset
	  };
	}


	function writeInt(writer, buffer) {
	  writer.writeByte(0x02); // ASN1.Integer
	  writer.writeLength(buffer.length);

	  for (var i = 0; i < buffer.length; i++)
	    writer.writeByte(buffer[i]);

	  return writer;
	}


	function rsaToPEM(key) {
	  var buffer;
	  var der;
	  var exponent;
	  var i;
	  var modulus;
	  var newKey = '';
	  var offset = 0;
	  var type;
	  var tmp;

	  try {
	    buffer = new Buffer(key.split(' ')[1], 'base64');

	    tmp = readNext(buffer, offset);
	    type = tmp.data.toString();
	    offset = tmp.offset;

	    if (type !== 'ssh-rsa')
	      throw new Error('Invalid ssh key type: ' + type);

	    tmp = readNext(buffer, offset);
	    exponent = tmp.data;
	    offset = tmp.offset;

	    tmp = readNext(buffer, offset);
	    modulus = tmp.data;
	  } catch (e) {
	    throw new Error('Invalid ssh key: ' + key);
	  }

	  // DER is a subset of BER
	  der = new asn1.BerWriter();

	  der.startSequence();

	  der.startSequence();
	  der.writeOID('1.2.840.113549.1.1.1');
	  der.writeNull();
	  der.endSequence();

	  der.startSequence(0x03); // bit string
	  der.writeByte(0x00);

	  // Actual key
	  der.startSequence();
	  writeInt(der, modulus);
	  writeInt(der, exponent);
	  der.endSequence();

	  // bit string
	  der.endSequence();

	  der.endSequence();

	  tmp = der.buffer.toString('base64');
	  for (i = 0; i < tmp.length; i++) {
	    if ((i % 64) === 0)
	      newKey += '\n';
	    newKey += tmp.charAt(i);
	  }

	  if (!/\\n$/.test(newKey))
	    newKey += '\n';

	  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\n';
	}


	function dsaToPEM(key) {
	  var buffer;
	  var offset = 0;
	  var tmp;
	  var der;
	  var newKey = '';

	  var type;
	  var p;
	  var q;
	  var g;
	  var y;

	  try {
	    buffer = new Buffer(key.split(' ')[1], 'base64');

	    tmp = readNext(buffer, offset);
	    type = tmp.data.toString();
	    offset = tmp.offset;

	    /* JSSTYLED */
	    if (!/^ssh-ds[as].*/.test(type))
	      throw new Error('Invalid ssh key type: ' + type);

	    tmp = readNext(buffer, offset);
	    p = tmp.data;
	    offset = tmp.offset;

	    tmp = readNext(buffer, offset);
	    q = tmp.data;
	    offset = tmp.offset;

	    tmp = readNext(buffer, offset);
	    g = tmp.data;
	    offset = tmp.offset;

	    tmp = readNext(buffer, offset);
	    y = tmp.data;
	  } catch (e) {
	    console.log(e.stack);
	    throw new Error('Invalid ssh key: ' + key);
	  }

	  // DER is a subset of BER
	  der = new asn1.BerWriter();

	  der.startSequence();

	  der.startSequence();
	  der.writeOID('1.2.840.10040.4.1');

	  der.startSequence();
	  writeInt(der, p);
	  writeInt(der, q);
	  writeInt(der, g);
	  der.endSequence();

	  der.endSequence();

	  der.startSequence(0x03); // bit string
	  der.writeByte(0x00);
	  writeInt(der, y);
	  der.endSequence();

	  der.endSequence();

	  tmp = der.buffer.toString('base64');
	  for (var i = 0; i < tmp.length; i++) {
	    if ((i % 64) === 0)
	      newKey += '\n';
	    newKey += tmp.charAt(i);
	  }

	  if (!/\\n$/.test(newKey))
	    newKey += '\n';

	  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\n';
	}


	///--- API

	module.exports = {

	  /**
	   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.
	   *
	   * The intent of this module is to interoperate with OpenSSL only,
	   * specifically the node crypto module's `verify` method.
	   *
	   * @param {String} key an OpenSSH public key.
	   * @return {String} PEM encoded form of the RSA public key.
	   * @throws {TypeError} on bad input.
	   * @throws {Error} on invalid ssh key formatted data.
	   */
	  sshKeyToPEM: function sshKeyToPEM(key) {
	    assert.string(key, 'ssh_key');

	    /* JSSTYLED */
	    if (/^ssh-rsa.*/.test(key))
	      return rsaToPEM(key);

	    /* JSSTYLED */
	    if (/^ssh-ds[as].*/.test(key))
	      return dsaToPEM(key);

	    throw new Error('Only RSA and DSA public keys are allowed');
	  },


	  /**
	   * Generates an OpenSSH fingerprint from an ssh public key.
	   *
	   * @param {String} key an OpenSSH public key.
	   * @return {String} key fingerprint.
	   * @throws {TypeError} on bad input.
	   * @throws {Error} if what you passed doesn't look like an ssh public key.
	   */
	  fingerprint: function fingerprint(key) {
	    assert.string(key, 'ssh_key');

	    var pieces = key.split(' ');
	    if (!pieces || !pieces.length || pieces.length < 2)
	      throw new Error('invalid ssh key');

	    var data = new Buffer(pieces[1], 'base64');

	    var hash = crypto.createHash('md5');
	    hash.update(data);
	    var digest = hash.digest('hex');

	    var fp = '';
	    for (var i = 0; i < digest.length; i++) {
	      if (i && i % 2 === 0)
	        fp += ':';

	      fp += digest[i];
	    }

	    return fp;
	  },

	  /**
	   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)
	   *
	   * The reverse of the above function.
	   */
	  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {
	    assert.equal('string', typeof (pem), 'typeof pem');

	    // chop off the BEGIN PUBLIC KEY and END PUBLIC KEY portion
	    var cleaned = pem.split('\n').slice(1, -2).join('');

	    var buf = new Buffer(cleaned, 'base64');

	    var der = new asn1.BerReader(buf);

	    der.readSequence();
	    der.readSequence();

	    var oid = der.readOID();
	    assert.equal(oid, '1.2.840.113549.1.1.1', 'pem not in RSA format');

	    // Null -- XXX this probably isn't good practice
	    der.readByte();
	    der.readByte();

	    // bit string sequence
	    der.readSequence(0x03);
	    der.readByte();
	    der.readSequence();

	    // modulus
	    assert.equal(der.peek(), asn1.Ber.Integer, 'modulus not an integer');
	    der._offset = der.readLength(der.offset + 1);
	    var modulus = der._buf.slice(der.offset, der.offset + der.length);
	    der._offset += der.length;

	    // exponent
	    assert.equal(der.peek(), asn1.Ber.Integer, 'exponent not an integer');
	    der._offset = der.readLength(der.offset + 1);
	    var exponent = der._buf.slice(der.offset, der.offset + der.length);
	    der._offset += der.length;

	    // now, make the key
	    var type = new Buffer('ssh-rsa');
	    var buffer = new Buffer(4 + type.length + 4 + modulus.length +
	      4 + exponent.length);
	    var i = 0;
	    buffer.writeUInt32BE(type.length, i);     i += 4;
	    type.copy(buffer, i);                     i += type.length;
	    buffer.writeUInt32BE(exponent.length, i); i += 4;
	    exponent.copy(buffer, i);                 i += exponent.length;
	    buffer.writeUInt32BE(modulus.length, i);  i += 4;
	    modulus.copy(buffer, i);                  i += modulus.length;

	    var s = (type.toString() + ' ' + buffer.toString('base64') + ' ' +
	      (comment || ''));
	    return s;
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

	// If you have no idea what ASN.1 or BER is, see this:
	// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc

	var Ber = __webpack_require__(302);



	///--- Exported API

	module.exports = {

	  Ber: Ber,

	  BerReader: Ber.Reader,

	  BerWriter: Ber.Writer

	};


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

	var errors = __webpack_require__(303);
	var types = __webpack_require__(304);

	var Reader = __webpack_require__(305);
	var Writer = __webpack_require__(306);


	///--- Exports

	module.exports = {

	  Reader: Reader,

	  Writer: Writer

	};

	for (var t in types) {
	  if (types.hasOwnProperty(t))
	    module.exports[t] = types[t];
	}
	for (var e in errors) {
	  if (errors.hasOwnProperty(e))
	    module.exports[e] = errors[e];
	}


/***/ },
/* 303 */
/***/ function(module, exports) {

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


	module.exports = {

	  newInvalidAsn1Error: function(msg) {
	    var e = new Error();
	    e.name = 'InvalidAsn1Error';
	    e.message = msg || '';
	    return e;
	  }

	};


/***/ },
/* 304 */
/***/ function(module, exports) {

	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


	module.exports = {
	  EOC: 0,
	  Boolean: 1,
	  Integer: 2,
	  BitString: 3,
	  OctetString: 4,
	  Null: 5,
	  OID: 6,
	  ObjectDescriptor: 7,
	  External: 8,
	  Real: 9, // float
	  Enumeration: 10,
	  PDV: 11,
	  Utf8String: 12,
	  RelativeOID: 13,
	  Sequence: 16,
	  Set: 17,
	  NumericString: 18,
	  PrintableString: 19,
	  T61String: 20,
	  VideotexString: 21,
	  IA5String: 22,
	  UTCTime: 23,
	  GeneralizedTime: 24,
	  GraphicString: 25,
	  VisibleString: 26,
	  GeneralString: 28,
	  UniversalString: 29,
	  CharacterString: 30,
	  BMPString: 31,
	  Constructor: 32,
	  Context: 128
	};


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

	var assert = __webpack_require__(280);

	var ASN1 = __webpack_require__(304);
	var errors = __webpack_require__(303);


	///--- Globals

	var newInvalidAsn1Error = errors.newInvalidAsn1Error;



	///--- API

	function Reader(data) {
	  if (!data || !Buffer.isBuffer(data))
	    throw new TypeError('data must be a node Buffer');

	  this._buf = data;
	  this._size = data.length;

	  // These hold the "current" state
	  this._len = 0;
	  this._offset = 0;

	  var self = this;
	  this.__defineGetter__('length', function() { return self._len; });
	  this.__defineGetter__('offset', function() { return self._offset; });
	  this.__defineGetter__('remain', function() {
	    return self._size - self._offset;
	  });
	  this.__defineGetter__('buffer', function() {
	    return self._buf.slice(self._offset);
	  });
	}


	/**
	 * Reads a single byte and advances offset; you can pass in `true` to make this
	 * a "peek" operation (i.e., get the byte, but don't advance the offset).
	 *
	 * @param {Boolean} peek true means don't move offset.
	 * @return {Number} the next byte, null if not enough data.
	 */
	Reader.prototype.readByte = function(peek) {
	  if (this._size - this._offset < 1)
	    return null;

	  var b = this._buf[this._offset] & 0xff;

	  if (!peek)
	    this._offset += 1;

	  return b;
	};


	Reader.prototype.peek = function() {
	  return this.readByte(true);
	};


	/**
	 * Reads a (potentially) variable length off the BER buffer.  This call is
	 * not really meant to be called directly, as callers have to manipulate
	 * the internal buffer afterwards.
	 *
	 * As a result of this call, you can call `Reader.length`, until the
	 * next thing called that does a readLength.
	 *
	 * @return {Number} the amount of offset to advance the buffer.
	 * @throws {InvalidAsn1Error} on bad ASN.1
	 */
	Reader.prototype.readLength = function(offset) {
	  if (offset === undefined)
	    offset = this._offset;

	  if (offset >= this._size)
	    return null;

	  var lenB = this._buf[offset++] & 0xff;
	  if (lenB === null)
	    return null;

	  if ((lenB & 0x80) == 0x80) {
	    lenB &= 0x7f;

	    if (lenB == 0)
	      throw newInvalidAsn1Error('Indefinite length not supported');

	    if (lenB > 4)
	      throw newInvalidAsn1Error('encoding too long');

	    if (this._size - offset < lenB)
	      return null;

	    this._len = 0;
	    for (var i = 0; i < lenB; i++)
	      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);

	  } else {
	    // Wasn't a variable length
	    this._len = lenB;
	  }

	  return offset;
	};


	/**
	 * Parses the next sequence in this BER buffer.
	 *
	 * To get the length of the sequence, call `Reader.length`.
	 *
	 * @return {Number} the sequence's tag.
	 */
	Reader.prototype.readSequence = function(tag) {
	  var seq = this.peek();
	  if (seq === null)
	    return null;
	  if (tag !== undefined && tag !== seq)
	    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
	                              ': got 0x' + seq.toString(16));

	  var o = this.readLength(this._offset + 1); // stored in `length`
	  if (o === null)
	    return null;

	  this._offset = o;
	  return seq;
	};


	Reader.prototype.readInt = function() {
	  return this._readTag(ASN1.Integer);
	};


	Reader.prototype.readBoolean = function() {
	  return (this._readTag(ASN1.Boolean) === 0 ? false : true);
	};


	Reader.prototype.readEnumeration = function() {
	  return this._readTag(ASN1.Enumeration);
	};


	Reader.prototype.readString = function(tag, retbuf) {
	  if (!tag)
	    tag = ASN1.OctetString;

	  var b = this.peek();
	  if (b === null)
	    return null;

	  if (b !== tag)
	    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
	                              ': got 0x' + b.toString(16));

	  var o = this.readLength(this._offset + 1); // stored in `length`

	  if (o === null)
	    return null;

	  if (this.length > this._size - o)
	    return null;

	  this._offset = o;

	  if (this.length === 0)
	    return '';

	  var str = this._buf.slice(this._offset, this._offset + this.length);
	  this._offset += this.length;

	  return retbuf ? str : str.toString('utf8');
	};

	Reader.prototype.readOID = function(tag) {
	  if (!tag)
	    tag = ASN1.OID;

	  var b = this.peek();
	  if (b === null)
	    return null;

	  if (b !== tag)
	    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
	                              ': got 0x' + b.toString(16));

	  var o = this.readLength(this._offset + 1); // stored in `length`
	  if (o === null)
	    return null;

	  if (this.length > this._size - o)
	    return null;

	  this._offset = o;

	  var values = [];
	  var value = 0;

	  for (var i = 0; i < this.length; i++) {
	    var byte = this._buf[this._offset++] & 0xff;

	    value <<= 7;
	    value += byte & 0x7f;
	    if ((byte & 0x80) == 0) {
	      values.push(value);
	      value = 0;
	    }
	  }

	  value = values.shift();
	  values.unshift(value % 40);
	  values.unshift((value / 40) >> 0);

	  return values.join('.');
	};


	Reader.prototype._readTag = function(tag) {
	  assert.ok(tag !== undefined);

	  var b = this.peek();

	  if (b === null)
	    return null;

	  if (b !== tag)
	    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
	                              ': got 0x' + b.toString(16));

	  var o = this.readLength(this._offset + 1); // stored in `length`
	  if (o === null)
	    return null;

	  if (this.length > 4)
	    throw newInvalidAsn1Error('Integer too long: ' + this.length);

	  if (this.length > this._size - o)
	    return null;
	  this._offset = o;

	  var fb = this._buf[this._offset++];
	  var value = 0;

	  value = fb & 0x7F;
	  for (var i = 1; i < this.length; i++) {
	    value <<= 8;
	    value |= (this._buf[this._offset++] & 0xff);
	  }

	  if ((fb & 0x80) == 0x80)
	    value = -value;

	  return value;
	};



	///--- Exported API

	module.exports = Reader;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

	var assert = __webpack_require__(280);
	var ASN1 = __webpack_require__(304);
	var errors = __webpack_require__(303);


	///--- Globals

	var newInvalidAsn1Error = errors.newInvalidAsn1Error;

	var DEFAULT_OPTS = {
	  size: 1024,
	  growthFactor: 8
	};


	///--- Helpers

	function merge(from, to) {
	  assert.ok(from);
	  assert.equal(typeof(from), 'object');
	  assert.ok(to);
	  assert.equal(typeof(to), 'object');

	  var keys = Object.getOwnPropertyNames(from);
	  keys.forEach(function(key) {
	    if (to[key])
	      return;

	    var value = Object.getOwnPropertyDescriptor(from, key);
	    Object.defineProperty(to, key, value);
	  });

	  return to;
	}



	///--- API

	function Writer(options) {
	  options = merge(DEFAULT_OPTS, options || {});

	  this._buf = new Buffer(options.size || 1024);
	  this._size = this._buf.length;
	  this._offset = 0;
	  this._options = options;

	  // A list of offsets in the buffer where we need to insert
	  // sequence tag/len pairs.
	  this._seq = [];

	  var self = this;
	  this.__defineGetter__('buffer', function() {
	    if (self._seq.length)
	      throw new InvalidAsn1Error(self._seq.length + ' unended sequence(s)');

	    return self._buf.slice(0, self._offset);
	  });
	}


	Writer.prototype.writeByte = function(b) {
	  if (typeof(b) !== 'number')
	    throw new TypeError('argument must be a Number');

	  this._ensure(1);
	  this._buf[this._offset++] = b;
	};


	Writer.prototype.writeInt = function(i, tag) {
	  if (typeof(i) !== 'number')
	    throw new TypeError('argument must be a Number');
	  if (typeof(tag) !== 'number')
	    tag = ASN1.Integer;

	  var sz = 4;

	  while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000)) &&
	         (sz > 1)) {
	    sz--;
	    i <<= 8;
	  }

	  if (sz > 4)
	    throw new InvalidAsn1Error('BER ints cannot be > 0xffffffff');

	  this._ensure(2 + sz);
	  this._buf[this._offset++] = tag;
	  this._buf[this._offset++] = sz;

	  while (sz-- > 0) {
	    this._buf[this._offset++] = ((i & 0xff000000) >> 24);
	    i <<= 8;
	  }

	};


	Writer.prototype.writeNull = function() {
	  this.writeByte(ASN1.Null);
	  this.writeByte(0x00);
	};


	Writer.prototype.writeEnumeration = function(i, tag) {
	  if (typeof(i) !== 'number')
	    throw new TypeError('argument must be a Number');
	  if (typeof(tag) !== 'number')
	    tag = ASN1.Enumeration;

	  return this.writeInt(i, tag);
	};


	Writer.prototype.writeBoolean = function(b, tag) {
	  if (typeof(b) !== 'boolean')
	    throw new TypeError('argument must be a Boolean');
	  if (typeof(tag) !== 'number')
	    tag = ASN1.Boolean;

	  this._ensure(3);
	  this._buf[this._offset++] = tag;
	  this._buf[this._offset++] = 0x01;
	  this._buf[this._offset++] = b ? 0xff : 0x00;
	};


	Writer.prototype.writeString = function(s, tag) {
	  if (typeof(s) !== 'string')
	    throw new TypeError('argument must be a string (was: ' + typeof(s) + ')');
	  if (typeof(tag) !== 'number')
	    tag = ASN1.OctetString;

	  var len = Buffer.byteLength(s);
	  this.writeByte(tag);
	  this.writeLength(len);
	  if (len) {
	    this._ensure(len);
	    this._buf.write(s, this._offset);
	    this._offset += len;
	  }
	};


	Writer.prototype.writeBuffer = function(buf, tag) {
	  if (typeof(tag) !== 'number')
	    throw new TypeError('tag must be a number');
	  if (!Buffer.isBuffer(buf))
	    throw new TypeError('argument must be a buffer');

	  this.writeByte(tag);
	  this.writeLength(buf.length);
	  this._ensure(buf.length);
	  buf.copy(this._buf, this._offset, 0, buf.length);
	  this._offset += buf.length;
	};


	Writer.prototype.writeStringArray = function(strings) {
	  if ((!strings instanceof Array))
	    throw new TypeError('argument must be an Array[String]');

	  var self = this;
	  strings.forEach(function(s) {
	    self.writeString(s);
	  });
	};

	// This is really to solve DER cases, but whatever for now
	Writer.prototype.writeOID = function(s, tag) {
	  if (typeof(s) !== 'string')
	    throw new TypeError('argument must be a string');
	  if (typeof(tag) !== 'number')
	    tag = ASN1.OID;

	  if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
	    throw new Error('argument is not a valid OID string');

	  function encodeOctet(bytes, octet) {
	    if (octet < 128) {
	        bytes.push(octet);
	    } else if (octet < 16384) {
	        bytes.push((octet >>> 7) | 0x80);
	        bytes.push(octet & 0x7F);
	    } else if (octet < 2097152) {
	      bytes.push((octet >>> 14) | 0x80);
	      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    } else if (octet < 268435456) {
	      bytes.push((octet >>> 21) | 0x80);
	      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    } else {
	      bytes.push(((octet >>> 28) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 21) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
	      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    }
	  }

	  var tmp = s.split('.');
	  var bytes = [];
	  bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
	  tmp.slice(2).forEach(function(b) {
	    encodeOctet(bytes, parseInt(b, 10));
	  });

	  var self = this;
	  this._ensure(2 + bytes.length);
	  this.writeByte(tag);
	  this.writeLength(bytes.length);
	  bytes.forEach(function(b) {
	    self.writeByte(b);
	  });
	};


	Writer.prototype.writeLength = function(len) {
	  if (typeof(len) !== 'number')
	    throw new TypeError('argument must be a Number');

	  this._ensure(4);

	  if (len <= 0x7f) {
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xff) {
	    this._buf[this._offset++] = 0x81;
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xffff) {
	    this._buf[this._offset++] = 0x82;
	    this._buf[this._offset++] = len >> 8;
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xffffff) {
	    this._shift(start, len, 1);
	    this._buf[this._offset++] = 0x83;
	    this._buf[this._offset++] = len >> 16;
	    this._buf[this._offset++] = len >> 8;
	    this._buf[this._offset++] = len;
	  } else {
	    throw new InvalidAsn1ERror('Length too long (> 4 bytes)');
	  }
	};

	Writer.prototype.startSequence = function(tag) {
	  if (typeof(tag) !== 'number')
	    tag = ASN1.Sequence | ASN1.Constructor;

	  this.writeByte(tag);
	  this._seq.push(this._offset);
	  this._ensure(3);
	  this._offset += 3;
	};


	Writer.prototype.endSequence = function() {
	  var seq = this._seq.pop();
	  var start = seq + 3;
	  var len = this._offset - start;

	  if (len <= 0x7f) {
	    this._shift(start, len, -2);
	    this._buf[seq] = len;
	  } else if (len <= 0xff) {
	    this._shift(start, len, -1);
	    this._buf[seq] = 0x81;
	    this._buf[seq + 1] = len;
	  } else if (len <= 0xffff) {
	    this._buf[seq] = 0x82;
	    this._buf[seq + 1] = len >> 8;
	    this._buf[seq + 2] = len;
	  } else if (len <= 0xffffff) {
	    this._shift(start, len, 1);
	    this._buf[seq] = 0x83;
	    this._buf[seq + 1] = len >> 16;
	    this._buf[seq + 2] = len >> 8;
	    this._buf[seq + 3] = len;
	  } else {
	    throw new InvalidAsn1Error('Sequence too long');
	  }
	};


	Writer.prototype._shift = function(start, len, shift) {
	  assert.ok(start !== undefined);
	  assert.ok(len !== undefined);
	  assert.ok(shift);

	  this._buf.copy(this._buf, start + shift, start, start + len);
	  this._offset += shift;
	};

	Writer.prototype._ensure = function(len) {
	  assert.ok(len);

	  if (this._size - this._offset < len) {
	    var sz = this._size * this._options.growthFactor;
	    if (sz - this._offset < len)
	      sz += len;

	    var buf = new Buffer(sz);

	    this._buf.copy(buf, 0, 0, this._offset);
	    this._buf = buf;
	    this._size = sz;
	  }
	};



	///--- Exported API

	module.exports = Writer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * rm - Feb 2011
	 * ctype.js
	 *
	 * This module provides a simple abstraction towards reading and writing
	 * different types of binary data. It is designed to use ctio.js and provide a
	 * richer and more expressive API on top of it.
	 *
	 * By default we support the following as built in basic types:
	 *	int8_t
	 *	int16_t
	 *	int32_t
	 *	uint8_t
	 *	uint16_t
	 *	uint32_t
	 *	uint64_t
	 *	float
	 *	double
	 *	char
	 *	char[]
	 *
	 * Each type is returned as a Number, with the exception of char and char[]
	 * which are returned as Node Buffers. A char is considered a uint8_t.
	 *
	 * Requests to read and write data are specified as an array of JSON objects.
	 * This is also the same way that one declares structs. Even if just a single
	 * value is requested, it must be done as a struct. The array order determines
	 * the order that we try and read values. Each entry has the following format
	 * with values marked with a * being optional.
	 *
	 * { key: { type: /type/, value*: /value/, offset*: /offset/ }
	 *
	 * If offset is defined, we lseek(offset, SEEK_SET) before reading the next
	 * value. Value is defined when we're writing out data, otherwise it's ignored.
	 *
	 */

	var mod_ctf = __webpack_require__(308);
	var mod_ctio = __webpack_require__(309);
	var mod_assert = __webpack_require__(280);

	/*
	 * This is the set of basic types that we support.
	 *
	 *	read		The function to call to read in a value from a buffer
	 *
	 *	write		The function to call to write a value to a buffer
	 *
	 */
	var deftypes = {
	    'uint8_t':  { read: ctReadUint8, write: ctWriteUint8 },
	    'uint16_t': { read: ctReadUint16, write: ctWriteUint16 },
	    'uint32_t': { read: ctReadUint32, write: ctWriteUint32 },
	    'uint64_t': { read: ctReadUint64, write: ctWriteUint64 },
	    'int8_t': { read: ctReadSint8, write: ctWriteSint8 },
	    'int16_t': { read: ctReadSint16, write: ctWriteSint16 },
	    'int32_t': { read: ctReadSint32, write: ctWriteSint32 },
	    'int64_t': { read: ctReadSint64, write: ctWriteSint64 },
	    'float': { read: ctReadFloat, write: ctWriteFloat },
	    'double': { read: ctReadDouble, write: ctWriteDouble },
	    'char': { read: ctReadChar, write: ctWriteChar },
	    'char[]': { read: ctReadCharArray, write: ctWriteCharArray }
	};

	/*
	 * The following are wrappers around the CType IO low level API. They encode
	 * knowledge about the size and return something in the expected format.
	 */
	function ctReadUint8(endian, buffer, offset)
	{
		var val = mod_ctio.ruint8(buffer, endian, offset);
		return ({ value: val, size: 1 });
	}

	function ctReadUint16(endian, buffer, offset)
	{
		var val = mod_ctio.ruint16(buffer, endian, offset);
		return ({ value: val, size: 2 });
	}

	function ctReadUint32(endian, buffer, offset)
	{
		var val = mod_ctio.ruint32(buffer, endian, offset);
		return ({ value: val, size: 4 });
	}

	function ctReadUint64(endian, buffer, offset)
	{
		var val = mod_ctio.ruint64(buffer, endian, offset);
		return ({ value: val, size: 8 });
	}

	function ctReadSint8(endian, buffer, offset)
	{
		var val = mod_ctio.rsint8(buffer, endian, offset);
		return ({ value: val, size: 1 });
	}

	function ctReadSint16(endian, buffer, offset)
	{
		var val = mod_ctio.rsint16(buffer, endian, offset);
		return ({ value: val, size: 2 });
	}

	function ctReadSint32(endian, buffer, offset)
	{
		var val = mod_ctio.rsint32(buffer, endian, offset);
		return ({ value: val, size: 4 });
	}

	function ctReadSint64(endian, buffer, offset)
	{
		var val = mod_ctio.rsint64(buffer, endian, offset);
		return ({ value: val, size: 8 });
	}

	function ctReadFloat(endian, buffer, offset)
	{
		var val = mod_ctio.rfloat(buffer, endian, offset);
		return ({ value: val, size: 4 });
	}

	function ctReadDouble(endian, buffer, offset)
	{
		var val = mod_ctio.rdouble(buffer, endian, offset);
		return ({ value: val, size: 8 });
	}

	/*
	 * Reads a single character into a node buffer
	 */
	function ctReadChar(endian, buffer, offset)
	{
		var res = new Buffer(1);
		res[0] = mod_ctio.ruint8(buffer, endian, offset);
		return ({ value: res, size: 1 });
	}

	function ctReadCharArray(length, endian, buffer, offset)
	{
		var ii;
		var res = new Buffer(length);

		for (ii = 0; ii < length; ii++)
			res[ii] = mod_ctio.ruint8(buffer, endian, offset + ii);

		return ({ value: res, size: length });
	}

	function ctWriteUint8(value, endian, buffer, offset)
	{
		mod_ctio.wuint8(value, endian, buffer, offset);
		return (1);
	}

	function ctWriteUint16(value, endian, buffer, offset)
	{
		mod_ctio.wuint16(value, endian, buffer, offset);
		return (2);
	}

	function ctWriteUint32(value, endian, buffer, offset)
	{
		mod_ctio.wuint32(value, endian, buffer, offset);
		return (4);
	}

	function ctWriteUint64(value, endian, buffer, offset)
	{
		mod_ctio.wuint64(value, endian, buffer, offset);
		return (8);
	}

	function ctWriteSint8(value, endian, buffer, offset)
	{
		mod_ctio.wsint8(value, endian, buffer, offset);
		return (1);
	}

	function ctWriteSint16(value, endian, buffer, offset)
	{
		mod_ctio.wsint16(value, endian, buffer, offset);
		return (2);
	}

	function ctWriteSint32(value, endian, buffer, offset)
	{
		mod_ctio.wsint32(value, endian, buffer, offset);
		return (4);
	}

	function ctWriteSint64(value, endian, buffer, offset)
	{
		mod_ctio.wsint64(value, endian, buffer, offset);
		return (8);
	}

	function ctWriteFloat(value, endian, buffer, offset)
	{
		mod_ctio.wfloat(value, endian, buffer, offset);
		return (4);
	}

	function ctWriteDouble(value, endian, buffer, offset)
	{
		mod_ctio.wdouble(value, endian, buffer, offset);
		return (8);
	}

	/*
	 * Writes a single character into a node buffer
	 */
	function ctWriteChar(value, endian, buffer, offset)
	{
		if (!(value instanceof Buffer))
			throw (new Error('Input must be a buffer'));

		mod_ctio.ruint8(value[0], endian, buffer, offset);
		return (1);
	}

	/*
	 * We're going to write 0s into the buffer if the string is shorter than the
	 * length of the array.
	 */
	function ctWriteCharArray(value, length, endian, buffer, offset)
	{
		var ii;

		if (!(value instanceof Buffer))
			throw (new Error('Input must be a buffer'));

		if (value.length > length)
			throw (new Error('value length greater than array length'));

		for (ii = 0; ii < value.length && ii < length; ii++)
			mod_ctio.wuint8(value[ii], endian, buffer, offset + ii);

		for (; ii < length; ii++)
			mod_ctio.wuint8(0, endian, offset + ii);


		return (length);
	}

	/*
	 * Each parser has their own set of types. We want to make sure that they each
	 * get their own copy as they may need to modify it.
	 */
	function ctGetBasicTypes()
	{
		var ret = {};
		var key;
		for (key in deftypes)
			ret[key] = deftypes[key];

		return (ret);
	}

	/*
	 * Given a string in the form of type[length] we want to split this into an
	 * object that extracts that information. We want to note that we could possibly
	 * have nested arrays so this should only check the furthest one. It may also be
	 * the case that we have no [] pieces, in which case we just return the current
	 * type.
	 */
	function ctParseType(str)
	{
		var begInd, endInd;
		var type, len;
		if (typeof (str) != 'string')
			throw (new Error('type must be a Javascript string'));

		endInd = str.lastIndexOf(']');
		if (endInd == -1) {
			if (str.lastIndexOf('[') != -1)
				throw (new Error('found invalid type with \'[\' but ' +
				    'no corresponding \']\''));

			return ({ type: str });
		}

		begInd = str.lastIndexOf('[');
		if (begInd == -1)
			throw (new Error('found invalid type with \']\' but ' +
			    'no corresponding \'[\''));

		if (begInd >= endInd)
			throw (new Error('malformed type, \']\' appears before \'[\''));

		type = str.substring(0, begInd);
		len = str.substring(begInd + 1, endInd);

		return ({ type: type, len: len });
	}

	/*
	 * Given a request validate that all of the fields for it are valid and make
	 * sense. This includes verifying the following notions:
	 *  - Each type requested is present in types
	 *  - Only allow a name for a field to be specified once
	 *  - If an array is specified, validate that the requested field exists and
	 *    comes before it.
	 *  - If fields is defined, check that each entry has the occurrence of field
	 */
	function ctCheckReq(def, types, fields)
	{
		var ii, jj;
		var req, keys, key;
		var found = {};

		if (!(def instanceof Array))
			throw (new Error('definition is not an array'));

		if (def.length === 0)
			throw (new Error('definition must have at least one element'));

		for (ii = 0; ii < def.length; ii++) {
			req = def[ii];
			if (!(req instanceof Object))
				throw (new Error('definition must be an array of' +
				    'objects'));

			keys = Object.keys(req);
			if (keys.length != 1)
				throw (new Error('definition entry must only have ' +
				    'one key'));

			if (keys[0] in found)
				throw (new Error('Specified name already ' +
				    'specified: ' + keys[0]));

			if (!('type' in req[keys[0]]))
				throw (new Error('missing required type definition'));

			key = ctParseType(req[keys[0]]['type']);

			/*
			 * We may have nested arrays, we need to check the validity of
			 * the types until the len field is undefined in key. However,
			 * each time len is defined we need to verify it is either an
			 * integer or corresponds to an already seen key.
			 */
			while (key['len'] !== undefined) {
				if (isNaN(parseInt(key['len'], 10))) {
					if (!(key['len'] in found))
						throw (new Error('Given an array ' +
						    'length without a matching type'));

				}

				key = ctParseType(key['type']);
			}

			/* Now we can validate if the type is valid */
			if (!(key['type'] in types))
				throw (new Error('type not found or typdefed: ' +
				    key['type']));

			/* Check for any required fields */
			if (fields !== undefined) {
				for (jj = 0; jj < fields.length; jj++) {
					if (!(fields[jj] in req[keys[0]]))
						throw (new Error('Missing required ' +
						    'field: ' + fields[jj]));
				}
			}

			found[keys[0]] = true;
		}
	}


	/*
	 * Create a new instance of the parser. Each parser has its own store of
	 * typedefs and endianness. Conf is an object with the following required
	 * values:
	 *
	 *	endian		Either 'big' or 'little' do determine the endianness we
	 *			want to read from or write to.
	 *
	 * And the following optional values:
	 *
	 * 	char-type	Valid options here are uint8 and int8. If uint8 is
	 * 			specified this changes the default behavior of a single
	 * 			char from being a buffer of a single character to being
	 * 			a uint8_t. If int8, it becomes an int8_t instead.
	 */
	function CTypeParser(conf)
	{
		if (!conf) throw (new Error('missing required argument'));

		if (!('endian' in conf))
			throw (new Error('missing required endian value'));

		if (conf['endian'] != 'big' && conf['endian'] != 'little')
			throw (new Error('Invalid endian type'));

		if ('char-type' in conf && (conf['char-type'] != 'uint8' &&
		    conf['char-type'] != 'int8'))
			throw (new Error('invalid option for char-type: ' +
			    conf['char-type']));

		this.endian = conf['endian'];
		this.types = ctGetBasicTypes();

		/*
		 * There may be a more graceful way to do this, but this will have to
		 * serve.
		 */
		if ('char-type' in conf && conf['char-type'] == 'uint8')
			this.types['char'] = this.types['uint8_t'];

		if ('char-type' in conf && conf['char-type'] == 'int8')
			this.types['char'] = this.types['int8_t'];
	}

	/*
	 * Sets the current endian value for the Parser. If the value is not valid,
	 * throws an Error.
	 *
	 *	endian		Either 'big' or 'little' do determine the endianness we
	 *			want to read from or write to.
	 *
	 */
	CTypeParser.prototype.setEndian = function (endian)
	{
		if (endian != 'big' && endian != 'little')
			throw (new Error('invalid endian type, must be big or ' +
			    'little'));

		this.endian = endian;
	};

	/*
	 * Returns the current value of the endian value for the parser.
	 */
	CTypeParser.prototype.getEndian = function ()
	{
		return (this.endian);
	};

	/*
	 * A user has requested to add a type, let us honor their request. Yet, if their
	 * request doth spurn us, send them unto the Hells which Dante describes.
	 *
	 * 	name		The string for the type definition we're adding
	 *
	 *	value		Either a string that is a type/array name or an object
	 *			that describes a struct.
	 */
	CTypeParser.prototype.typedef = function (name, value)
	{
		var type;

		if (name === undefined)
			throw (new (Error('missing required typedef argument: name')));

		if (value === undefined)
			throw (new (Error('missing required typedef argument: value')));

		if (typeof (name) != 'string')
			throw (new (Error('the name of a type must be a string')));

		type = ctParseType(name);

		if (type['len'] !== undefined)
			throw (new Error('Cannot have an array in the typedef name'));

		if (name in this.types)
			throw (new Error('typedef name already present: ' + name));

		if (typeof (value) != 'string' && !(value instanceof Array))
			throw (new Error('typedef value must either be a string or ' +
			    'struct'));

		if (typeof (value) == 'string') {
			type = ctParseType(value);
			if (type['len'] !== undefined) {
				if (isNaN(parseInt(type['len'], 10)))
					throw (new (Error('typedef value must use ' +
					    'fixed size array when outside of a ' +
					    'struct')));
			}

			this.types[name] = value;
		} else {
			/* We have a struct, validate it */
			ctCheckReq(value, this.types);
			this.types[name] = value;
		}
	};

	/*
	 * Include all of the typedefs, but none of the built in types. This should be
	 * treated as read-only.
	 */
	CTypeParser.prototype.lstypes = function ()
	{
		var key;
		var ret = {};

		for (key in this.types) {
			if (key in deftypes)
				continue;
			ret[key] = this.types[key];
		}

		return (ret);
	};

	/*
	 * Given a type string that may have array types that aren't numbers, try and
	 * fill them in from the values object. The object should be of the format where
	 * indexing into it should return a number for that type.
	 *
	 *	str		The type string
	 *
	 *	values		An object that can be used to fulfill type information
	 */
	function ctResolveArray(str, values)
	{
		var ret = '';
		var type = ctParseType(str);

		while (type['len'] !== undefined) {
			if (isNaN(parseInt(type['len'], 10))) {
				if (typeof (values[type['len']]) != 'number')
					throw (new Error('cannot sawp in non-number ' +
					    'for array value'));
				ret = '[' + values[type['len']] + ']' + ret;
			} else {
				ret = '[' + type['len'] + ']' + ret;
			}
			type = ctParseType(type['type']);
		}

		ret = type['type'] + ret;

		return (ret);
	}

	/*
	 * [private] Either the typedef resolves to another type string or to a struct.
	 * If it resolves to a struct, we just pass it off to read struct. If not, we
	 * can just pass it off to read entry.
	 */
	CTypeParser.prototype.resolveTypedef = function (type, dispatch, buffer,
	    offset, value)
	{
		var pt;

		mod_assert.ok(type in this.types);
		if (typeof (this.types[type]) == 'string') {
			pt = ctParseType(this.types[type]);
			if (dispatch == 'read')
				return (this.readEntry(pt, buffer, offset));
			else if (dispatch == 'write')
				return (this.writeEntry(value, pt, buffer, offset));
			else
				throw (new Error('invalid dispatch type to ' +
				    'resolveTypedef'));
		} else {
			if (dispatch == 'read')
				return (this.readStruct(this.types[type], buffer,
				    offset));
			else if (dispatch == 'write')
				return (this.writeStruct(value, this.types[type],
				    buffer, offset));
			else
				throw (new Error('invalid dispatch type to ' +
				    'resolveTypedef'));
		}

	};

	/*
	 * [private] Try and read in the specific entry.
	 */
	CTypeParser.prototype.readEntry = function (type, buffer, offset)
	{
		var parse, len;

		/*
		 * Because we want to special case char[]s this is unfortunately
		 * a bit uglier than it really should be. We want to special
		 * case char[]s so that we return a node buffer, thus they are a
		 * first class type where as all other arrays just call into a
		 * generic array routine which calls their data-specific routine
		 * the specified number of times.
		 *
		 * The valid dispatch options we have are:
		 *  - Array and char => char[] handler
		 *  - Generic array handler
		 *  - Generic typedef handler
		 *  - Basic type handler
		 */
		if (type['len'] !== undefined) {
			len = parseInt(type['len'], 10);
			if (isNaN(len))
				throw (new Error('somehow got a non-numeric length'));

			if (type['type'] == 'char')
				parse = this.types['char[]']['read'](len,
				    this.endian, buffer, offset);
			else
				parse = this.readArray(type['type'],
				    len, buffer, offset);
		} else {
			if (type['type'] in deftypes)
				parse = this.types[type['type']]['read'](this.endian,
				    buffer, offset);
			else
				parse = this.resolveTypedef(type['type'], 'read',
				    buffer, offset);
		}

		return (parse);
	};

	/*
	 * [private] Read an array of data
	 */
	CTypeParser.prototype.readArray = function (type, length, buffer, offset)
	{
		var ii, ent, pt;
		var baseOffset = offset;
		var ret = new Array(length);
		pt = ctParseType(type);

		for (ii = 0; ii < length; ii++) {
			ent = this.readEntry(pt, buffer, offset);
			offset += ent['size'];
			ret[ii] = ent['value'];
		}

		return ({ value: ret, size: offset - baseOffset });
	};

	/*
	 * [private] Read a single struct in.
	 */
	CTypeParser.prototype.readStruct = function (def, buffer, offset)
	{
		var parse, ii, type, entry, key;
		var baseOffset = offset;
		var ret = {};

		/* Walk it and handle doing what's necessary */
		for (ii = 0; ii < def.length; ii++) {
			key = Object.keys(def[ii])[0];
			entry = def[ii][key];

			/* Resolve all array values */
			type = ctParseType(ctResolveArray(entry['type'], ret));

			if ('offset' in entry)
				offset = baseOffset + entry['offset'];

			parse = this.readEntry(type, buffer, offset);

			offset += parse['size'];
			ret[key] = parse['value'];
		}

		return ({ value: ret, size: (offset-baseOffset)});
	};

	/*
	 * This is what we were born to do. We read the data from a buffer and return it
	 * in an object whose keys match the values from the object.
	 *
	 *	def		The array definition of the data to read in
	 *
	 *	buffer		The buffer to read data from
	 *
	 *	offset		The offset to start writing to
	 *
	 * Returns an object where each key corresponds to an entry in def and the value
	 * is the read value.
	 */
	CTypeParser.prototype.readData = function (def, buffer, offset)
	{
		/* Sanity check for arguments */
		if (def === undefined)
			throw (new Error('missing definition for what we should be' +
			    'parsing'));

		if (buffer === undefined)
			throw (new Error('missing buffer for what we should be ' +
			    'parsing'));

		if (offset === undefined)
			throw (new Error('missing offset for what we should be ' +
			    'parsing'));

		/* Sanity check the object definition */
		ctCheckReq(def, this.types);

		return (this.readStruct(def, buffer, offset)['value']);
	};

	/*
	 * [private] Write out an array of data
	 */
	CTypeParser.prototype.writeArray = function (value, type, length, buffer,
	    offset)
	{
		var ii, pt;
		var baseOffset = offset;
		if (!(value instanceof Array))
			throw (new Error('asked to write an array, but value is not ' +
			    'an array'));

		if (value.length != length)
			throw (new Error('asked to write array of length ' + length +
			    ' but that does not match value length: ' + value.length));

		pt = ctParseType(type);
		for (ii = 0; ii < length; ii++)
			offset += this.writeEntry(value[ii], pt, buffer, offset);

		return (offset - baseOffset);
	};

	/*
	 * [private] Write the specific entry
	 */
	CTypeParser.prototype.writeEntry = function (value, type, buffer, offset)
	{
		var len, ret;

		if (type['len'] !== undefined) {
			len = parseInt(type['len'], 10);
			if (isNaN(len))
				throw (new Error('somehow got a non-numeric length'));

			if (type['type'] == 'char')
				ret = this.types['char[]']['write'](value, len,
				    this.endian, buffer, offset);
			else
				ret = this.writeArray(value, type['type'],
				    len, buffer, offset);
		} else {
			if (type['type'] in deftypes)
				ret = this.types[type['type']]['write'](value,
				    this.endian, buffer, offset);
			else
				ret = this.resolveTypedef(type['type'], 'write',
				    buffer, offset, value);
		}

		return (ret);
	};

	/*
	 * [private] Write a single struct out.
	 */
	CTypeParser.prototype.writeStruct = function (value, def, buffer, offset)
	{
		var ii, entry, type, key;
		var baseOffset = offset;
		var vals = {};

		for (ii = 0; ii < def.length; ii++) {
			key = Object.keys(def[ii])[0];
			entry = def[ii][key];

			type = ctParseType(ctResolveArray(entry['type'], vals));

			if ('offset' in entry)
				offset = baseOffset + entry['offset'];

			offset += this.writeEntry(value[ii], type, buffer, offset);
			/* Now that we've written it out, we can use it for arrays */
			vals[key] = value[ii];
		}

		return (offset);
	};

	/*
	 * Unfortunately, we're stuck with the sins of an initial poor design. Because
	 * of that, we are going to have to support the old way of writing data via
	 * writeData. There we insert the values that you want to write into the
	 * definition. A little baroque. Internally, we use the new model. So we need to
	 * just get those values out of there. But to maintain the principle of least
	 * surprise, we're not going to modify the input data.
	 */
	function getValues(def)
	{
		var ii, out, key;
		out = [];
		for (ii = 0; ii < def.length; ii++) {
			key = Object.keys(def[ii])[0];
			mod_assert.ok('value' in def[ii][key]);
			out.push(def[ii][key]['value']);
		}

		return (out);
	}

	/*
	 * This is the second half of what we were born to do, write out the data
	 * itself. Historically this function required you to put your values in the
	 * definition section. This was not the smartest thing to do and a bit of an
	 * oversight to be honest. As such, this function now takes a values argument.
	 * If values is non-null and non-undefined, it will be used to determine the
	 * values. This means that the old method is still supported, but is no longer
	 * acceptable.
	 *
	 *	def		The array definition of the data to write out with
	 *			values
	 *
	 *	buffer		The buffer to write to
	 *
	 *	offset		The offset in the buffer to write to
	 *
	 *	values		An array of values to write.
	 */
	CTypeParser.prototype.writeData = function (def, buffer, offset, values)
	{
		var hv;

		if (def === undefined)
			throw (new Error('missing definition for what we should be' +
			    'parsing'));

		if (buffer === undefined)
			throw (new Error('missing buffer for what we should be ' +
			    'parsing'));

		if (offset === undefined)
			throw (new Error('missing offset for what we should be ' +
			    'parsing'));

		hv = (values != null && values != undefined);
		if (hv) {
			if (!Array.isArray(values))
				throw (new Error('missing values for writing'));
			ctCheckReq(def, this.types);
		} else {
			ctCheckReq(def, this.types, [ 'value' ]);
		}

		this.writeStruct(hv ? values : getValues(def), def, buffer, offset);
	};

	/*
	 * Functions to go to and from 64 bit numbers in a way that is compatible with
	 * Javascript limitations. There are two sets. One where the user is okay with
	 * an approximation and one where they are definitely not okay with an
	 * approximation.
	 */

	/*
	 * Attempts to convert an array of two integers returned from rsint64 / ruint64
	 * into an absolute 64 bit number. If however the value would exceed 2^52 this
	 * will instead throw an error. The mantissa in a double is a 52 bit number and
	 * rather than potentially give you a value that is an approximation this will
	 * error. If you would rather an approximation, please see toApprox64.
	 *
	 *	val		An array of two 32-bit integers
	 */
	function toAbs64(val)
	{
		if (val === undefined)
			throw (new Error('missing required arg: value'));

		if (!Array.isArray(val))
			throw (new Error('value must be an array'));

		if (val.length != 2)
			throw (new Error('value must be an array of length 2'));

		/* We have 20 bits worth of precision in this range */
		if (val[0] >= 0x100000)
			throw (new Error('value would become approximated'));

		return (val[0] * Math.pow(2, 32) + val[1]);
	}

	/*
	 * Will return the 64 bit value as returned in an array from rsint64 / ruint64
	 * to a value as close as it can. Note that Javascript stores all numbers as a
	 * double and the mantissa only has 52 bits. Thus this version may approximate
	 * the value.
	 *
	 *	val		An array of two 32-bit integers
	 */
	function toApprox64(val)
	{
		if (val === undefined)
			throw (new Error('missing required arg: value'));

		if (!Array.isArray(val))
			throw (new Error('value must be an array'));

		if (val.length != 2)
			throw (new Error('value must be an array of length 2'));

		return (Math.pow(2, 32) * val[0] + val[1]);
	}

	function parseCTF(json, conf)
	{
		var ctype = new CTypeParser(conf);
		mod_ctf.ctfParseJson(json, ctype);

		return (ctype);
	}

	/*
	 * Export the few things we actually want to. Currently this is just the CType
	 * Parser and ctio.
	 */
	exports.Parser = CTypeParser;
	exports.toAbs64 = toAbs64;
	exports.toApprox64 = toApprox64;

	exports.parseCTF = parseCTF;

	exports.ruint8 = mod_ctio.ruint8;
	exports.ruint16 = mod_ctio.ruint16;
	exports.ruint32 = mod_ctio.ruint32;
	exports.ruint64 = mod_ctio.ruint64;
	exports.wuint8 = mod_ctio.wuint8;
	exports.wuint16 = mod_ctio.wuint16;
	exports.wuint32 = mod_ctio.wuint32;
	exports.wuint64 = mod_ctio.wuint64;

	exports.rsint8 = mod_ctio.rsint8;
	exports.rsint16 = mod_ctio.rsint16;
	exports.rsint32 = mod_ctio.rsint32;
	exports.rsint64 = mod_ctio.rsint64;
	exports.wsint8 = mod_ctio.wsint8;
	exports.wsint16 = mod_ctio.wsint16;
	exports.wsint32 = mod_ctio.wsint32;
	exports.wsint64 = mod_ctio.wsint64;

	exports.rfloat = mod_ctio.rfloat;
	exports.rdouble = mod_ctio.rdouble;
	exports.wfloat = mod_ctio.wfloat;
	exports.wdouble = mod_ctio.wdouble;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * ctf.js
	 *
	 * Understand and parse all of the different JSON formats of CTF data and
	 * translate that into a series of node-ctype friendly pieces. The reason for
	 * the abstraction is to handle different changes in the file format.
	 *
	 * We have to be careful here that we don't end up using a name that is already
	 * a built in type.
	 */
	var mod_assert = __webpack_require__(280);
	var ASSERT = mod_assert.ok;

	var ctf_versions = [ '1.0' ];
	var ctf_entries = [ 'integer', 'float', 'typedef', 'struct' ];
	var ctf_deftypes = [ 'int8_t', 'uint8_t', 'int16_t', 'uint16_t', 'int32_t',
	    'uint32_t', 'float', 'double' ];

	function ctfParseInteger(entry, ctype)
	{
		var name, sign, len, type;

		name = entry['name'];
		if (!('signed' in entry['integer']))
			throw (new Error('Malformed CTF JSON: integer missing ' +
			    'signed value'));


		if (!('length' in entry['integer']))
			throw (new Error('Malformed CTF JSON: integer missing ' +
			    'length value'));

		sign = entry['integer']['signed'];
		len = entry['integer']['length'];
		type = null;

		if (sign && len == 1)
			type = 'int8_t';
		else if (len == 1)
			type = 'uint8_t';
		else if (sign && len == 2)
			type = 'int16_t';
		else if (len == 2)
			type = 'uint16_t';
		else if (sign && len == 4)
			type = 'int32_t';
		else if (len == 4)
			type = 'uint32_t';
		else if (sign && len == 8)
			type = 'int64_t';
		else if (len == 8)
			type = 'uint64_t';

		if (type === null)
			throw (new Error('Malformed CTF JSON: integer has ' +
			    'unsupported length and sign - ' + len + '/' + sign));

		/*
		 * This means that this is the same as one of our built in types. If
		 * that's the case defining it would be an error. So instead of trying
		 * to typedef it, we'll return here.
		 */
		if (name == type)
			return;

		if (name == 'char') {
			ASSERT(type == 'int8_t');
			return;
		}

		ctype.typedef(name, type);
	}

	function ctfParseFloat(entry, ctype)
	{
		var name, len;

		name = entry['name'];
		if (!('length' in entry['float']))
			throw (new Error('Malformed CTF JSON: float missing ' +
			    'length value'));

		len = entry['float']['length'];
		if (len != 4 && len != 8)
			throw (new Error('Malformed CTF JSON: float has invalid ' +
			    'length value'));

		if (len == 4) {
			if (name == 'float')
				return;
			ctype.typedef(name, 'float');
		} else if (len == 8) {
			if (name == 'double')
				return;
			ctype.typedef(name, 'double');
		}
	}

	function ctfParseTypedef(entry, ctype)
	{
		var name, type, ii;

		name = entry['name'];
		if (typeof (entry['typedef']) != 'string')
			throw (new Error('Malformed CTF JSON: typedef value in not ' +
			    'a string'));

		type = entry['typedef'];

		/*
		 * We need to ensure that we're not looking at type that's one of our
		 * built in types. Traditionally in C a uint32_t would be a typedef to
		 * some kind of integer. However, those size types are built ins.
		 */
		for (ii = 0; ii < ctf_deftypes.length; ii++) {
			if (name == ctf_deftypes[ii])
				return;
		}

		ctype.typedef(name, type);
	}

	function ctfParseStruct(entry, ctype)
	{
		var name, type, ii, val, index, member, push;

		member = [];
		if (!Array.isArray(entry['struct']))
			throw (new Error('Malformed CTF JSON: struct value is not ' +
			    'an array'));

		for (ii = 0; ii < entry['struct'].length; ii++) {
			val = entry['struct'][ii];
			if (!('name' in val))
				throw (new Error('Malformed CTF JSON: struct member ' +
				    'missing name'));

			if (!('type' in val))
				throw (new Error('Malformed CTF JSON: struct member ' +
				    'missing type'));

			if (typeof (val['name']) != 'string')
				throw (new Error('Malformed CTF JSON: struct member ' +
				    'name isn\'t a string'));

			if (typeof (val['type']) != 'string')
				throw (new Error('Malformed CTF JSON: struct member ' +
				    'type isn\'t a string'));

			/*
			 * CTF version 2 specifies array names as <type> [<num>] where
			 * as node-ctype does this as <type>[<num>].
			 */
			name = val['name'];
			type = val['type'];
			index = type.indexOf(' [');
			if (index != -1) {
				type = type.substring(0, index) +
				    type.substring(index + 1, type.length);
			}
			push = {};
			push[name] = { 'type': type };
			member.push(push);
		}

		name = entry['name'];
		ctype.typedef(name, member);
	}

	function ctfParseEntry(entry, ctype)
	{
		var ii, found;

		if (!('name' in entry))
			throw (new Error('Malformed CTF JSON: entry missing "name" ' +
			    'section'));

		for (ii = 0; ii < ctf_entries.length; ii++) {
			if (ctf_entries[ii] in entry)
				found++;
		}

		if (found === 0)
			throw (new Error('Malformed CTF JSON: found no entries'));

		if (found >= 2)
			throw (new Error('Malformed CTF JSON: found more than one ' +
			    'entry'));

		if ('integer' in entry) {
			ctfParseInteger(entry, ctype);
			return;
		}

		if ('float' in entry) {
			ctfParseFloat(entry, ctype);
			return;
		}

		if ('typedef' in entry) {
			ctfParseTypedef(entry, ctype);
			return;
		}

		if ('struct' in entry) {
			ctfParseStruct(entry, ctype);
			return;
		}

		ASSERT(false, 'shouldn\'t reach here');
	}

	function ctfParseJson(json, ctype)
	{
		var version, ii;

		ASSERT(json);
		ASSERT(ctype);
		if (!('metadata' in json))
			throw (new Error('Invalid CTF JSON: missing metadata section'));

		if (!('ctf2json_version' in json['metadata']))
			throw (new Error('Invalid CTF JSON: missing ctf2json_version'));

		version = json['metadata']['ctf2json_version'];
		for (ii = 0; ii < ctf_versions.length; ii++) {
			if (ctf_versions[ii] == version)
				break;
		}

		if (ii == ctf_versions.length)
			throw (new Error('Unsuported ctf2json_version: ' + version));

		if (!('data' in json))
			throw (new Error('Invalid CTF JSON: missing data section'));

		if (!Array.isArray(json['data']))
			throw (new Error('Malformed CTF JSON: data section is not ' +
			    'an array'));

		for (ii = 0; ii < json['data'].length; ii++)
			ctfParseEntry(json['data'][ii], ctype);
	}

	exports.ctfParseJson = ctfParseJson;


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * rm - Feb 2011
	 * ctio.js:
	 *
	 * A simple way to read and write simple ctypes. Of course, as you'll find the
	 * code isn't as simple as it might appear. The following types are currently
	 * supported in big and little endian formats:
	 *
	 * 	uint8_t			int8_t
	 * 	uint16_t		int16_t
	 * 	uint32_t		int32_t
	 *	float (single precision IEEE 754)
	 *	double (double precision IEEE 754)
	 *
	 * This is designed to work in Node and v8. It may in fact work in other
	 * Javascript interpreters (that'd be pretty neat), but it hasn't been tested.
	 * If you find that it does in fact work, that's pretty cool. Try and pass word
	 * back to the original author.
	 *
	 * Note to the reader: If you're tabstop isn't set to 8, parts of this may look
	 * weird.
	 */

	/*
	 * Numbers in Javascript have a secret: all numbers must be represented with an
	 * IEEE-754 double. The double has a mantissa with a length of 52 bits with an
	 * implicit one. Thus the range of integers that can be represented is limited
	 * to the size of the mantissa, this makes reading and writing 64-bit integers
	 * difficult, but far from impossible.
	 *
	 * Another side effect of this representation is what happens when you use the
	 * bitwise operators, i.e. shift left, shift right, and, or, etc. In Javascript,
	 * each operand and the result is cast to a signed 32-bit number. However, in
	 * the case of >>> the values are cast to an unsigned number.
	 */

	/*
	 * A reminder on endian related issues:
	 *
	 * Big Endian: MSB -> First byte
	 * Little Endian: MSB->Last byte
	 */
	var mod_assert = __webpack_require__(280);

	/*
	 * An 8 bit unsigned integer involves doing no significant work.
	 */
	function ruint8(buffer, endian, offset)
	{
		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		return (buffer[offset]);
	}

	/*
	 * For 16 bit unsigned numbers we can do all the casting that we want to do.
	 */
	function rgint16(buffer, endian, offset)
	{
		var val = 0;

		if (endian == 'big') {
			val = buffer[offset] << 8;
			val |=  buffer[offset+1];
		} else {
			val = buffer[offset];
			val |= buffer[offset+1] << 8;
		}

		return (val);

	}

	function ruint16(buffer, endian, offset)
	{
		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 1 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		return (rgint16(buffer, endian, offset));
	}

	/*
	 * Because most bitshifting is done using signed numbers, if we would go into
	 * the realm where we use that 32nd bit, we'll end up going into the negative
	 * range. i.e.:
	 * > 200 << 24
	 * -939524096
	 *
	 * Not the value you'd expect. To work around this, we end up having to do some
	 * abuse of the JavaScript standard. in this case, we know that a >>> shift is
	 * defined to cast our value to an *unsigned* 32-bit number. Because of that, we
	 * use that instead to save us some additional math, though it does feel a
	 * little weird and it isn't obvious as to why you woul dwant to do this at
	 * first.
	 */
	function rgint32(buffer, endian, offset)
	{
		var val = 0;

		if (endian == 'big') {
			val = buffer[offset+1] << 16;
			val |= buffer[offset+2] << 8;
			val |= buffer[offset+3];
			val = val + (buffer[offset] << 24 >>> 0);
		} else {
			val = buffer[offset+2] << 16;
			val |= buffer[offset+1] << 8;
			val |= buffer[offset];
			val = val + (buffer[offset + 3] << 24 >>> 0);
		}

		return (val);
	}

	function ruint32(buffer, endian, offset)
	{
		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 3 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		return (rgint32(buffer, endian, offset));
	}

	/*
	 * Reads a 64-bit unsigned number. The astue observer will note that this
	 * doesn't quite work. Javascript has chosen to only have numbers that can be
	 * represented by a double. A double only has 52 bits of mantissa with an
	 * implicit 1, thus we have up to 53 bits to represent an integer. However, 2^53
	 * doesn't quite give us what we want. Isn't 53 bits enough for anyone? What
	 * could you have possibly wanted to represent that was larger than that? Oh,
	 * maybe a size? You mean we bypassed the 4 GB limit on file sizes, when did
	 * that happen?
	 *
	 * To get around this egregious language issue, we're going to instead construct
	 * an array of two 32 bit unsigned integers. Where arr[0] << 32 + arr[1] would
	 * give the actual number. However, note that the above code probably won't
	 * produce the desired results because of the way Javascript numbers are
	 * doubles.
	 */
	function rgint64(buffer, endian, offset)
	{
		var val = new Array(2);

		if (endian == 'big') {
			val[0] = ruint32(buffer, endian, offset);
			val[1] = ruint32(buffer, endian, offset+4);
		} else {
			val[0] = ruint32(buffer, endian, offset+4);
			val[1] = ruint32(buffer, endian, offset);
		}

		return (val);
	}

	function ruint64(buffer, endian, offset)
	{
		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 7 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		return (rgint64(buffer, endian, offset));
	}


	/*
	 * Signed integer types, yay team! A reminder on how two's complement actually
	 * works. The first bit is the signed bit, i.e. tells us whether or not the
	 * number should be positive or negative. If the two's complement value is
	 * positive, then we're done, as it's equivalent to the unsigned representation.
	 *
	 * Now if the number is positive, you're pretty much done, you can just leverage
	 * the unsigned translations and return those. Unfortunately, negative numbers
	 * aren't quite that straightforward.
	 *
	 * At first glance, one might be inclined to use the traditional formula to
	 * translate binary numbers between the positive and negative values in two's
	 * complement. (Though it doesn't quite work for the most negative value)
	 * Mainly:
	 *  - invert all the bits
	 *  - add one to the result
	 *
	 * Of course, this doesn't quite work in Javascript. Take for example the value
	 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
	 * course, Javascript will do the following:
	 *
	 * > ~0xff80
	 * -65409
	 *
	 * Whoh there, Javascript, that's not quite right. But wait, according to
	 * Javascript that's perfectly correct. When Javascript ends up seeing the
	 * constant 0xff80, it has no notion that it is actually a signed number. It
	 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
	 * binary negation, it casts it into a signed value, (positive 0xff80). Then
	 * when you perform binary negation on that, it turns it into a negative number.
	 *
	 * Instead, we're going to have to use the following general formula, that works
	 * in a rather Javascript friendly way. I'm glad we don't support this kind of
	 * weird numbering scheme in the kernel.
	 *
	 * (BIT-MAX - (unsigned)val + 1) * -1
	 *
	 * The astute observer, may think that this doesn't make sense for 8-bit numbers
	 * (really it isn't necessary for them). However, when you get 16-bit numbers,
	 * you do. Let's go back to our prior example and see how this will look:
	 *
	 * (0xffff - 0xff80 + 1) * -1
	 * (0x007f + 1) * -1
	 * (0x0080) * -1
	 *
	 * Doing it this way ends up allowing us to treat it appropriately in
	 * Javascript. Sigh, that's really quite ugly for what should just be a few bit
	 * shifts, ~ and &.
	 */

	/*
	 * Endianness doesn't matter for 8-bit signed values. We could in fact optimize
	 * this case because the more traditional methods work, but for consistency,
	 * we'll keep doing this the same way.
	 */
	function rsint8(buffer, endian, offset)
	{
		var neg;

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		neg = buffer[offset] & 0x80;
		if (!neg)
			return (buffer[offset]);

		return ((0xff - buffer[offset] + 1) * -1);
	}

	/*
	 * The 16-bit version requires a bit more effort. In this case, we can leverage
	 * our unsigned code to generate the value we want to return.
	 */
	function rsint16(buffer, endian, offset)
	{
		var neg, val;

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 1 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = rgint16(buffer, endian, offset);
		neg = val & 0x8000;
		if (!neg)
			return (val);

		return ((0xffff - val + 1) * -1);
	}

	/*
	 * We really shouldn't leverage our 32-bit code here and instead utilize the
	 * fact that we know that since these are signed numbers, we can do all the
	 * shifting and binary anding to generate the 32-bit number. But, for
	 * consistency we'll do the same. If we want to do otherwise, we should instead
	 * make the 32 bit unsigned code do the optimization. But as long as there
	 * aren't floats secretly under the hood for that, we /should/ be okay.
	 */
	function rsint32(buffer, endian, offset)
	{
		var neg, val;

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 3 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = rgint32(buffer, endian, offset);
		neg = val & 0x80000000;
		if (!neg)
			return (val);

		return ((0xffffffff - val + 1) * -1);
	}

	/*
	 * The signed version of this code suffers from all of the same problems of the
	 * other 64 bit version.
	 */
	function rsint64(buffer, endian, offset)
	{
		var neg, val;

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 3 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = rgint64(buffer, endian, offset);
		neg = val[0] & 0x80000000;

		if (!neg)
			return (val);

		val[0] = (0xffffffff - val[0]) * -1;
		val[1] = (0xffffffff - val[1] + 1) * -1;

		/*
		 * If we had the key 0x8000000000000000, that would leave the lower 32
		 * bits as 0xffffffff, however, since we're goint to add one, that would
		 * actually leave the lower 32-bits as 0x100000000, which would break
		 * our ability to write back a value that we received. To work around
		 * this, if we actually get that value, we're going to bump the upper
		 * portion by 1 and set this to zero.
		 */
		mod_assert.ok(val[1] <= 0x100000000);
		if (val[1] == -0x100000000) {
			val[1] = 0;
			val[0]--;
		}

		return (val);
	}

	/*
	 * We now move onto IEEE 754: The traditional form for floating point numbers
	 * and what is secretly hiding at the heart of everything in this. I really hope
	 * that someone is actually using this, as otherwise, this effort is probably
	 * going to be more wasted.
	 *
	 * One might be tempted to use parseFloat here, but that wouldn't work at all
	 * for several reasons. Mostly due to the way floats actually work, and
	 * parseFloat only actually works in base 10. I don't see base 10 anywhere near
	 * this file.
	 *
	 * In this case we'll implement the single and double precision versions. The
	 * quadruple precision, while probably useful, wouldn't really be accepted by
	 * Javascript, so let's not even waste our time.
	 *
	 * So let's review how this format looks like. A single precision value is 32
	 * bits and has three parts:
	 *   -  Sign bit
	 *   -  Exponent (Using bias notation)
	 *   -  Mantissa
	 *
	 * |s|eeeeeeee|mmmmmmmmmmmmmmmmmmmmmmmmm|
	 * 31| 30-23  |  22    	-       0       |
	 *
	 * The exponent is stored in a biased input. The bias in this case 127.
	 * Therefore, our exponent is equal to the 8-bit value - 127.
	 *
	 * By default, a number is normalized in IEEE, that means that the mantissa has
	 * an implicit one that we don't see. So really the value stored is 1.m.
	 * However, if the exponent is all zeros, then instead we have to shift
	 * everything to the right one and there is no more implicit one.
	 *
	 * Special values:
	 *  - Positive Infinity:
	 *	Sign:		0
	 *	Exponent: 	All 1s
	 *	Mantissa:	0
	 *  - Negative Infinity:
	 *	Sign:		1
	 *	Exponent: 	All 1s
	 *	Mantissa:	0
	 *  - NaN:
	 *	Sign:		*
	 *	Exponent: 	All 1s
	 *	Mantissa:	non-zero
	 *  - Zero:
	 *	Sign:		*
	 *	Exponent:	All 0s
	 *	Mantissa:	0
	 *
	 * In the case of zero, the sign bit determines whether we get a positive or
	 * negative zero. However, since Javascript cannot determine the difference
	 * between the two: i.e. -0 == 0, we just always return 0.
	 *
	 */
	function rfloat(buffer, endian, offset)
	{
		var bytes = [];
		var sign, exponent, mantissa, val;
		var bias = 127;
		var maxexp = 0xff;

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 3 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		/* Normalize the bytes to be in endian order */
		if (endian == 'big') {
			bytes[0] = buffer[offset];
			bytes[1] = buffer[offset+1];
			bytes[2] = buffer[offset+2];
			bytes[3] = buffer[offset+3];
		} else {
			bytes[3] = buffer[offset];
			bytes[2] = buffer[offset+1];
			bytes[1] = buffer[offset+2];
			bytes[0] = buffer[offset+3];
		}

		sign = bytes[0] & 0x80;
		exponent = (bytes[0] & 0x7f) << 1;
		exponent |= (bytes[1] & 0x80) >>> 7;
		mantissa = (bytes[1] & 0x7f) << 16;
		mantissa |= bytes[2] << 8;
		mantissa |= bytes[3];

		/* Check for special cases before we do general parsing */
		if (!sign && exponent == maxexp && mantissa === 0)
			return (Number.POSITIVE_INFINITY);

		if (sign && exponent == maxexp && mantissa === 0)
			return (Number.NEGATIVE_INFINITY);

		if (exponent == maxexp && mantissa !== 0)
			return (Number.NaN);

		/*
		 * Javascript really doesn't have support for positive or negative zero.
		 * So we're not going to try and give it to you. That would be just
		 * plain weird. Besides -0 == 0.
		 */
		if (exponent === 0 && mantissa === 0)
			return (0);

		/*
		 * Now we can deal with the bias and the determine whether the mantissa
		 * has the implicit one or not.
		 */
		exponent -= bias;
		if (exponent == -bias) {
			exponent++;
			val = 0;
		} else {
			val = 1;
		}

		val = (val + mantissa * Math.pow(2, -23)) * Math.pow(2, exponent);

		if (sign)
			val *= -1;

		return (val);
	}

	/*
	 * Doubles in IEEE 754 are like their brothers except for a few changes and
	 * increases in size:
	 *   - The exponent is now 11 bits
	 *   - The mantissa is now 52 bits
	 *   - The bias is now 1023
	 *
	 * |s|eeeeeeeeeee|mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|
	 * 63| 62 - 52   | 	51		-			0     |
	 * 63| 62 - 52   |      51              -                       0     |
	 *
	 * While the size has increased a fair amount, we're going to end up keeping the
	 * same general formula for calculating the final value. As a reminder, this
	 * formula is:
	 *
	 * (-1)^s * (n + m) * 2^(e-b)
	 *
	 * Where:
	 *	s	is the sign bit
	 *	n	is (exponent > 0) ? 1 : 0 -- Determines whether we're normalized
	 *					     or not
	 *	m	is the mantissa
	 *	e	is the exponent specified
	 *	b	is the bias for the exponent
	 *
	 */
	function rdouble(buffer, endian, offset)
	{
		var bytes = [];
		var sign, exponent, mantissa, val, lowmant;
		var bias = 1023;
		var maxexp = 0x7ff;

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 7 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		/* Normalize the bytes to be in endian order */
		if (endian == 'big') {
			bytes[0] = buffer[offset];
			bytes[1] = buffer[offset+1];
			bytes[2] = buffer[offset+2];
			bytes[3] = buffer[offset+3];
			bytes[4] = buffer[offset+4];
			bytes[5] = buffer[offset+5];
			bytes[6] = buffer[offset+6];
			bytes[7] = buffer[offset+7];
		} else {
			bytes[7] = buffer[offset];
			bytes[6] = buffer[offset+1];
			bytes[5] = buffer[offset+2];
			bytes[4] = buffer[offset+3];
			bytes[3] = buffer[offset+4];
			bytes[2] = buffer[offset+5];
			bytes[1] = buffer[offset+6];
			bytes[0] = buffer[offset+7];
		}

		/*
		 * We can construct the exponent and mantissa the same way as we did in
		 * the case of a float, just increase the range of the exponent.
		 */
		sign = bytes[0] & 0x80;
		exponent = (bytes[0] & 0x7f) << 4;
		exponent |= (bytes[1] & 0xf0) >>> 4;

		/*
		 * This is going to be ugly but then again, we're dealing with IEEE 754.
		 * This could probably be done as a node add on in a few lines of C++,
		 * but oh we'll, we've made it this far so let's be native the rest of
		 * the way...
		 *
		 * What we're going to do is break the mantissa into two parts, the
		 * lower 24 bits and the upper 28 bits. We'll multiply the upper 28 bits
		 * by the appropriate power and then add in the lower 24-bits. Not
		 * really that great. It's pretty much a giant kludge to deal with
		 * Javascript eccentricities around numbers.
		 */
		lowmant = bytes[7];
		lowmant |= bytes[6] << 8;
		lowmant |= bytes[5] << 16;
		mantissa = bytes[4];
		mantissa |= bytes[3] << 8;
		mantissa |= bytes[2] << 16;
		mantissa |= (bytes[1] & 0x0f) << 24;
		mantissa *= Math.pow(2, 24); /* Equivalent to << 24, but JS compat */
		mantissa += lowmant;

		/* Check for special cases before we do general parsing */
		if (!sign && exponent == maxexp && mantissa === 0)
			return (Number.POSITIVE_INFINITY);

		if (sign && exponent == maxexp && mantissa === 0)
			return (Number.NEGATIVE_INFINITY);

		if (exponent == maxexp && mantissa !== 0)
			return (Number.NaN);

		/*
		 * Javascript really doesn't have support for positive or negative zero.
		 * So we're not going to try and give it to you. That would be just
		 * plain weird. Besides -0 == 0.
		 */
		if (exponent === 0 && mantissa === 0)
			return (0);

		/*
		 * Now we can deal with the bias and the determine whether the mantissa
		 * has the implicit one or not.
		 */
		exponent -= bias;
		if (exponent == -bias) {
			exponent++;
			val = 0;
		} else {
			val = 1;
		}

		val = (val + mantissa * Math.pow(2, -52)) * Math.pow(2, exponent);

		if (sign)
			val *= -1;

		return (val);
	}

	/*
	 * Now that we have gone through the pain of reading the individual types, we're
	 * probably going to want some way to write these back. None of this is going to
	 * be good. But since we have Javascript numbers this should certainly be more
	 * interesting. Though we can constrain this end a little bit more in what is
	 * valid. For now, let's go back to our friends the unsigned value.
	 */

	/*
	 * Unsigned numbers seem deceptively easy. Here are the general steps and rules
	 * that we are going to take:
	 *   -  If the number is negative, throw an Error
	 *   -  Truncate any floating point portion
	 *   -  Take the modulus of the number in our base
	 *   -  Write it out to the buffer in the endian format requested at the offset
	 */

	/*
	 * We have to make sure that the value is a valid integer. This means that it is
	 * non-negative. It has no fractional component and that it does not exceed the
	 * maximum allowed value.
	 *
	 *	value		The number to check for validity
	 *
	 *	max		The maximum value
	 */
	function prepuint(value, max)
	{
		if (typeof (value) != 'number')
			throw (new (Error('cannot write a non-number as a number')));

		if (value < 0)
			throw (new Error('specified a negative value for writing an ' +
			    'unsigned value'));

		if (value > max)
			throw (new Error('value is larger than maximum value for ' +
			    'type'));

		if (Math.floor(value) !== value)
			throw (new Error('value has a fractional component'));

		return (value);
	}

	/*
	 * 8-bit version, classy. We can ignore endianness which is good.
	 */
	function wuint8(value, endian, buffer, offset)
	{
		var val;

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = prepuint(value, 0xff);
		buffer[offset] = val;
	}

	/*
	 * Pretty much the same as the 8-bit version, just this time we need to worry
	 * about endian related issues.
	 */
	function wgint16(val, endian, buffer, offset)
	{
		if (endian == 'big') {
			buffer[offset] = (val & 0xff00) >>> 8;
			buffer[offset+1] = val & 0x00ff;
		} else {
			buffer[offset+1] = (val & 0xff00) >>> 8;
			buffer[offset] = val & 0x00ff;
		}
	}

	function wuint16(value, endian, buffer, offset)
	{
		var val;

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 1 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = prepuint(value, 0xffff);
		wgint16(val, endian, buffer, offset);
	}

	/*
	 * The 32-bit version is going to have to be a little different unfortunately.
	 * We can't quite bitshift to get the largest byte, because that would end up
	 * getting us caught by the signed values.
	 *
	 * And yes, we do want to subtract out the lower part by default. This means
	 * that when we do the division, it will be treated as a bit shift and we won't
	 * end up generating a floating point value. If we did generate a floating point
	 * value we'd have to truncate it intelligently, this saves us that problem and
	 * may even be somewhat faster under the hood.
	 */
	function wgint32(val, endian, buffer, offset)
	{
		if (endian == 'big') {
			buffer[offset] = (val - (val & 0x00ffffff)) / Math.pow(2, 24);
			buffer[offset+1] = (val >>> 16) & 0xff;
			buffer[offset+2] = (val >>> 8) & 0xff;
			buffer[offset+3] = val & 0xff;
		} else {
			buffer[offset+3] = (val - (val & 0x00ffffff)) /
			    Math.pow(2, 24);
			buffer[offset+2] = (val >>> 16) & 0xff;
			buffer[offset+1] = (val >>> 8) & 0xff;
			buffer[offset] = val & 0xff;
		}
	}

	function wuint32(value, endian, buffer, offset)
	{
		var val;

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 3 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = prepuint(value, 0xffffffff);
		wgint32(val, endian, buffer, offset);
	}

	/*
	 * Unlike the other versions, we expect the value to be in the form of two
	 * arrays where value[0] << 32 + value[1] would result in the value that we
	 * want.
	 */
	function wgint64(value, endian, buffer, offset)
	{
		if (endian == 'big') {
			wgint32(value[0], endian, buffer, offset);
			wgint32(value[1], endian, buffer, offset+4);
		} else {
			wgint32(value[0], endian, buffer, offset+4);
			wgint32(value[1], endian, buffer, offset);
		}
	}

	function wuint64(value, endian, buffer, offset)
	{
		if (value === undefined)
			throw (new Error('missing value'));

		if (!(value instanceof Array))
			throw (new Error('value must be an array'));

		if (value.length != 2)
			throw (new Error('value must be an array of length 2'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 7 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		prepuint(value[0], 0xffffffff);
		prepuint(value[1], 0xffffffff);
		wgint64(value, endian, buffer, offset);
	}

	/*
	 * We now move onto our friends in the signed number category. Unlike unsigned
	 * numbers, we're going to have to worry a bit more about how we put values into
	 * arrays. Since we are only worrying about signed 32-bit values, we're in
	 * slightly better shape. Unfortunately, we really can't do our favorite binary
	 * & in this system. It really seems to do the wrong thing. For example:
	 *
	 * > -32 & 0xff
	 * 224
	 *
	 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
	 * this aren't treated as a signed number. Ultimately a bad thing.
	 *
	 * What we're going to want to do is basically create the unsigned equivalent of
	 * our representation and pass that off to the wuint* functions. To do that
	 * we're going to do the following:
	 *
	 *  - if the value is positive
	 *	we can pass it directly off to the equivalent wuint
	 *  - if the value is negative
	 *	we do the following computation:
	 *	mb + val + 1, where
	 *	mb	is the maximum unsigned value in that byte size
	 *	val	is the Javascript negative integer
	 *
	 *
	 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
	 * you do out the computations:
	 *
	 * 0xffff - 128 + 1
	 * 0xffff - 127
	 * 0xff80
	 *
	 * You can then encode this value as the signed version. This is really rather
	 * hacky, but it should work and get the job done which is our goal here.
	 *
	 * Thus the overall flow is:
	 *   -  Truncate the floating point part of the number
	 *   -  We don't have to take the modulus, because the unsigned versions will
	 *   	take care of that for us. And we don't have to worry about that
	 *   	potentially causing bad things to happen because of sign extension
	 *   -  Pass it off to the appropriate unsigned version, potentially modifying
	 *	the negative portions as necessary.
	 */

	/*
	 * A series of checks to make sure we actually have a signed 32-bit number
	 */
	function prepsint(value, max, min)
	{
		if (typeof (value) != 'number')
			throw (new (Error('cannot write a non-number as a number')));

		if (value > max)
			throw (new Error('value larger than maximum allowed value'));

		if (value < min)
			throw (new Error('value smaller than minimum allowed value'));

		if (Math.floor(value) !== value)
			throw (new Error('value has a fractional component'));

		return (value);
	}

	/*
	 * The 8-bit version of the signed value. Overall, fairly straightforward.
	 */
	function wsint8(value, endian, buffer, offset)
	{
		var val;

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = prepsint(value, 0x7f, -0x80);
		if (val >= 0)
			wuint8(val, endian, buffer, offset);
		else
			wuint8(0xff + val + 1, endian, buffer, offset);
	}

	/*
	 * The 16-bit version of the signed value. Also, fairly straightforward.
	 */
	function wsint16(value, endian, buffer, offset)
	{
		var val;

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 1 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = prepsint(value, 0x7fff, -0x8000);
		if (val >= 0)
			wgint16(val, endian, buffer, offset);
		else
			wgint16(0xffff + val + 1, endian, buffer, offset);

	}

	/*
	 * We can do this relatively easily by leveraging the code used for 32-bit
	 * unsigned code.
	 */
	function wsint32(value, endian, buffer, offset)
	{
		var val;

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 3 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		val = prepsint(value, 0x7fffffff, -0x80000000);
		if (val >= 0)
			wgint32(val, endian, buffer, offset);
		else
			wgint32(0xffffffff + val + 1, endian, buffer, offset);
	}

	/*
	 * The signed 64 bit integer should by in the same format as when received.
	 * Mainly it should ensure that the value is an array of two integers where
	 * value[0] << 32 + value[1] is the desired number. Furthermore, the two values
	 * need to be equal.
	 */
	function wsint64(value, endian, buffer, offset)
	{
		var vzpos, vopos;
		var vals = new Array(2);

		if (value === undefined)
			throw (new Error('missing value'));

		if (!(value instanceof Array))
			throw (new Error('value must be an array'));

		if (value.length != 2)
			throw (new Error('value must be an array of length 2'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));

		if (offset + 7 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		/*
		 * We need to make sure that we have the same sign on both values. The
		 * hokiest way to to do this is to multiply the number by +inf. If we do
		 * this, we'll get either +/-inf depending on the sign of the value.
		 * Once we have this, we can compare it to +inf to see if the number is
		 * positive or not.
		 */
		vzpos = (value[0] * Number.POSITIVE_INFINITY) ==
		    Number.POSITIVE_INFINITY;
		vopos = (value[1] * Number.POSITIVE_INFINITY) ==
		    Number.POSITIVE_INFINITY;

		/*
		 * If either of these is zero, then we don't actually need this check.
		 */
		if (value[0] != 0 && value[1] != 0 && vzpos != vopos)
			throw (new Error('Both entries in the array must have ' +
			    'the same sign'));

		/*
		 * Doing verification for a signed 64-bit integer is actually a big
		 * trickier than it appears. We can't quite use our standard techniques
		 * because we need to compare both sets of values. The first value is
		 * pretty straightforward. If the first value is beond the extremes than
		 * we error out. However, the valid range of the second value varies
		 * based on the first one. If the first value is negative, and *not* the
		 * largest negative value, than it can be any integer within the range [
		 * 0, 0xffffffff ]. If it is the largest negative number, it must be
		 * zero.
		 *
		 * If the first number is positive, than it doesn't matter what the
		 * value is. We just simply have to make sure we have a valid positive
		 * integer.
		 */
		if (vzpos) {
			prepuint(value[0], 0x7fffffff);
			prepuint(value[1], 0xffffffff);
		} else {
			prepsint(value[0], 0, -0x80000000);
			prepsint(value[1], 0, -0xffffffff);
			if (value[0] == -0x80000000 && value[1] != 0)
				throw (new Error('value smaller than minimum ' +
				    'allowed value'));
		}

		/* Fix negative numbers */
		if (value[0] < 0 || value[1] < 0) {
			vals[0] = 0xffffffff - Math.abs(value[0]);
			vals[1] = 0x100000000 - Math.abs(value[1]);
			if (vals[1] == 0x100000000) {
				vals[1] = 0;
				vals[0]++;
			}
		} else {
			vals[0] = value[0];
			vals[1] = value[1];
		}
		wgint64(vals, endian, buffer, offset);
	}

	/*
	 * Now we are moving onto the weirder of these, the float and double. For this
	 * we're going to just have to do something that's pretty weird. First off, we
	 * have no way to get at the underlying float representation, at least not
	 * easily. But that doesn't mean we can't figure it out, we just have to use our
	 * heads.
	 *
	 * One might propose to use Number.toString(2). Of course, this is not really
	 * that good, because the ECMAScript 262 v3 Standard says the following Section
	 * 15.7.4.2-Number.prototype.toString (radix):
	 *
	 * If radix is an integer from 2 to 36, but not 10, the result is a string, the
	 * choice of which is implementation-dependent.
	 *
	 * Well that doesn't really help us one bit now does it? We could use the
	 * standard base 10 version of the string, but that's just going to create more
	 * errors as we end up trying to convert it back to a binary value. So, really
	 * this just means we have to be non-lazy and parse the structure intelligently.
	 *
	 * First off, we can do the basic checks: NaN, positive and negative infinity.
	 *
	 * Now that those are done we can work backwards to generate the mantissa and
	 * exponent.
	 *
	 * The first thing we need to do is determine the sign bit, easy to do, check
	 * whether the value is less than 0. And convert the number to its absolute
	 * value representation. Next, we need to determine if the value is less than
	 * one or greater than or equal to one and from there determine what power was
	 * used to get there. What follows is now specific to floats, though the general
	 * ideas behind this will hold for doubles as well, but the exact numbers
	 * involved will change.
	 *
	 * Once we have that power we can determine the exponent and the mantissa. Call
	 * the value that has the number of bits to reach the power ebits. In the
	 * general case they have the following values:
	 *
	 *	exponent	127 + ebits
	 *	mantissa	value * 2^(23 - ebits) & 0x7fffff
	 *
	 * In the case where the value of ebits is <= -127 we are now in the case where
	 * we no longer have normalized numbers. In this case the values take on the
	 * following values:
	 *
	 * 	exponent	0
	 *	mantissa	value * 2^149 & 0x7fffff
	 *
	 * Once we have the values for the sign, mantissa, and exponent. We reconstruct
	 * the four bytes as follows:
	 *
	 *	byte0		sign bit and seven most significant bits from the exp
	 *			sign << 7 | (exponent & 0xfe) >>> 1
	 *
	 *	byte1		lsb from the exponent and 7 top bits from the mantissa
	 *			(exponent & 0x01) << 7 | (mantissa & 0x7f0000) >>> 16
	 *
	 *	byte2		bits 8-15 (zero indexing) from mantissa
	 *			mantissa & 0xff00 >> 8
	 *
	 *	byte3		bits 0-7 from mantissa
	 *			mantissa & 0xff
	 *
	 * Once we have this we have to assign them into the buffer in proper endian
	 * order.
	 */

	/*
	 * Compute the log base 2 of the value. Now, someone who remembers basic
	 * properties of logarithms will point out that we could use the change of base
	 * formula for logs, and in fact that would be astute, because that's what we'll
	 * do for now. It feels cleaner, albeit it may be less efficient than just
	 * iterating and dividing by 2. We may want to come back and revisit that some
	 * day.
	 */
	function log2(value)
	{
		return (Math.log(value) / Math.log(2));
	}

	/*
	 * Helper to determine the exponent of the number we're looking at.
	 */
	function intexp(value)
	{
		return (Math.floor(log2(value)));
	}

	/*
	 * Helper to determine the exponent of the fractional part of the value.
	 */
	function fracexp(value)
	{
		return (Math.floor(log2(value)));
	}

	function wfloat(value, endian, buffer, offset)
	{
		var sign, exponent, mantissa, ebits;
		var bytes = [];

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));


		if (offset + 3 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		if (isNaN(value)) {
			sign = 0;
			exponent = 0xff;
			mantissa = 23;
		} else if (value == Number.POSITIVE_INFINITY) {
			sign = 0;
			exponent = 0xff;
			mantissa = 0;
		} else if (value == Number.NEGATIVE_INFINITY) {
			sign = 1;
			exponent = 0xff;
			mantissa = 0;
		} else {
			/* Well we have some work to do */

			/* Thankfully the sign bit is trivial */
			if (value < 0) {
				sign = 1;
				value = Math.abs(value);
			} else {
				sign = 0;
			}

			/* Use the correct function to determine number of bits */
			if (value < 1)
				ebits = fracexp(value);
			else
				ebits = intexp(value);

			/* Time to deal with the issues surrounding normalization */
			if (ebits <= -127) {
				exponent = 0;
				mantissa = (value * Math.pow(2, 149)) & 0x7fffff;
			} else {
				exponent = 127 + ebits;
				mantissa = value * Math.pow(2, 23 - ebits);
				mantissa &= 0x7fffff;
			}
		}

		bytes[0] = sign << 7 | (exponent & 0xfe) >>> 1;
		bytes[1] = (exponent & 0x01) << 7 | (mantissa & 0x7f0000) >>> 16;
		bytes[2] = (mantissa & 0x00ff00) >>> 8;
		bytes[3] = mantissa & 0x0000ff;

		if (endian == 'big') {
			buffer[offset] = bytes[0];
			buffer[offset+1] = bytes[1];
			buffer[offset+2] = bytes[2];
			buffer[offset+3] = bytes[3];
		} else {
			buffer[offset] = bytes[3];
			buffer[offset+1] = bytes[2];
			buffer[offset+2] = bytes[1];
			buffer[offset+3] = bytes[0];
		}
	}

	/*
	 * Now we move onto doubles. Doubles are similar to floats in pretty much all
	 * ways except that the processing isn't quite as straightforward because we
	 * can't always use shifting, i.e. we have > 32 bit values.
	 *
	 * We're going to proceed in an identical fashion to floats and utilize the same
	 * helper functions. All that really is changing are the specific values that we
	 * use to do the calculations. Thus, to review we have to do the following.
	 *
	 * First get the sign bit and convert the value to its absolute value
	 * representation. Next, we determine the number of bits that we used to get to
	 * the value, branching whether the value is greater than or less than 1. Once
	 * we have that value which we will again call ebits, we have to do the
	 * following in the general case:
	 *
	 *	exponent	1023 + ebits
	 *	mantissa	[value * 2^(52 - ebits)] % 2^52
	 *
	 * In the case where the value of ebits <= -1023 we no longer use normalized
	 * numbers, thus like with floats we have to do slightly different processing:
	 *
	 *	exponent	0
	 *	mantissa	[value * 2^1074] % 2^52
	 *
	 * Once we have determined the sign, exponent and mantissa we can construct the
	 * bytes as follows:
	 *
	 *	byte0		sign bit and seven most significant bits form the exp
	 *			sign << 7 | (exponent & 0x7f0) >>> 4
	 *
	 *	byte1		Remaining 4 bits from the exponent and the four most
	 *			significant bits from the mantissa 48-51
	 *			(exponent & 0x00f) << 4 | mantissa >>> 48
	 *
	 *	byte2		Bits 40-47 from the mantissa
	 *			(mantissa >>> 40) & 0xff
	 *
	 *	byte3		Bits 32-39 from the mantissa
	 *			(mantissa >>> 32) & 0xff
	 *
	 *	byte4		Bits 24-31 from the mantissa
	 *			(mantissa >>> 24) & 0xff
	 *
	 *	byte5		Bits 16-23 from the Mantissa
	 *			(mantissa >>> 16) & 0xff
	 *
	 *	byte6		Bits 8-15 from the mantissa
	 *			(mantissa >>> 8) & 0xff
	 *
	 *	byte7		Bits 0-7 from the mantissa
	 *			mantissa & 0xff
	 *
	 * Now we can't quite do the right shifting that we want in bytes 1 - 3, because
	 * we'll have extended too far and we'll lose those values when we try and do
	 * the shift. Instead we have to use an alternate approach. To try and stay out
	 * of floating point, what we'll do is say that mantissa -= bytes[4-7] and then
	 * divide by 2^32. Once we've done that we can use binary arithmetic. Oof,
	 * that's ugly, but it seems to avoid using floating point (just based on how v8
	 * seems to be optimizing for base 2 arithmetic).
	 */
	function wdouble(value, endian, buffer, offset)
	{
		var sign, exponent, mantissa, ebits;
		var bytes = [];

		if (value === undefined)
			throw (new Error('missing value'));

		if (endian === undefined)
			throw (new Error('missing endian'));

		if (buffer === undefined)
			throw (new Error('missing buffer'));

		if (offset === undefined)
			throw (new Error('missing offset'));


		if (offset + 7 >= buffer.length)
			throw (new Error('Trying to read beyond buffer length'));

		if (isNaN(value)) {
			sign = 0;
			exponent = 0x7ff;
			mantissa = 23;
		} else if (value == Number.POSITIVE_INFINITY) {
			sign = 0;
			exponent = 0x7ff;
			mantissa = 0;
		} else if (value == Number.NEGATIVE_INFINITY) {
			sign = 1;
			exponent = 0x7ff;
			mantissa = 0;
		} else {
			/* Well we have some work to do */

			/* Thankfully the sign bit is trivial */
			if (value < 0) {
				sign = 1;
				value = Math.abs(value);
			} else {
				sign = 0;
			}

			/* Use the correct function to determine number of bits */
			if (value < 1)
				ebits = fracexp(value);
			else
				ebits = intexp(value);

			/*
			 * This is a total hack to determine a denormalized value.
			 * Unfortunately, we sometimes do not get a proper value for
			 * ebits, i.e. we lose the values that would get rounded off.
			 *
			 *
			 * The astute observer may wonder why we would be
			 * multiplying by two Math.pows rather than just summing
			 * them. Well, that's to get around a small bug in the
			 * way v8 seems to implement the function. On occasion
			 * doing:
			 *
			 * foo * Math.pow(2, 1023 + 51)
			 *
			 * Causes us to overflow to infinity, where as doing:
			 *
			 * foo * Math.pow(2, 1023) * Math.pow(2, 51)
			 *
			 * Does not cause us to overflow. Go figure.
			 *
			 */
			if (value <= 2.225073858507201e-308 || ebits <= -1023) {
				exponent = 0;
				mantissa = value * Math.pow(2, 1023) * Math.pow(2, 51);
				mantissa %= Math.pow(2, 52);
			} else {
				/*
				 * We might have gotten fucked by our floating point
				 * logarithm magic. This is rather crappy, but that's
				 * our luck. If we just had a log base 2 or access to
				 * the stupid underlying representation this would have
				 * been much easier and we wouldn't have such stupid
				 * kludges or hacks.
				 */
				if (ebits > 1023)
					ebits = 1023;
				exponent = 1023 + ebits;
				mantissa = value * Math.pow(2, -ebits);
				mantissa *= Math.pow(2, 52);
				mantissa %= Math.pow(2, 52);
			}
		}

		/* Fill the bytes in backwards to deal with the size issues */
		bytes[7] = mantissa & 0xff;
		bytes[6] = (mantissa >>> 8) & 0xff;
		bytes[5] = (mantissa >>> 16) & 0xff;
		mantissa = (mantissa - (mantissa & 0xffffff)) / Math.pow(2, 24);
		bytes[4] = mantissa & 0xff;
		bytes[3] = (mantissa >>> 8) & 0xff;
		bytes[2] = (mantissa >>> 16) & 0xff;
		bytes[1] = (exponent & 0x00f) << 4 | mantissa >>> 24;
		bytes[0] = (sign << 7) | (exponent & 0x7f0) >>> 4;

		if (endian == 'big') {
			buffer[offset] = bytes[0];
			buffer[offset+1] = bytes[1];
			buffer[offset+2] = bytes[2];
			buffer[offset+3] = bytes[3];
			buffer[offset+4] = bytes[4];
			buffer[offset+5] = bytes[5];
			buffer[offset+6] = bytes[6];
			buffer[offset+7] = bytes[7];
		} else {
			buffer[offset+7] = bytes[0];
			buffer[offset+6] = bytes[1];
			buffer[offset+5] = bytes[2];
			buffer[offset+4] = bytes[3];
			buffer[offset+3] = bytes[4];
			buffer[offset+2] = bytes[5];
			buffer[offset+1] = bytes[6];
			buffer[offset] = bytes[7];
		}
	}

	/*
	 * Actually export our work above. One might argue that we shouldn't expose
	 * these interfaces and just force people to use the higher level abstractions
	 * around this work. However, unlike say other libraries we've come across, this
	 * interface has several properties: it makes sense, it's simple, and it's
	 * useful.
	 */
	exports.ruint8 = ruint8;
	exports.ruint16 = ruint16;
	exports.ruint32 = ruint32;
	exports.ruint64 = ruint64;
	exports.wuint8 = wuint8;
	exports.wuint16 = wuint16;
	exports.wuint32 = wuint32;
	exports.wuint64 = wuint64;

	exports.rsint8 = rsint8;
	exports.rsint16 = rsint16;
	exports.rsint32 = rsint32;
	exports.rsint64 = rsint64;
	exports.wsint8 = wsint8;
	exports.wsint16 = wsint16;
	exports.wsint32 = wsint32;
	exports.wsint64 = wsint64;

	exports.rfloat = rfloat;
	exports.rdouble = rdouble;
	exports.wfloat = wfloat;
	exports.wdouble = wdouble;


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mime-types
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var db = __webpack_require__(311)
	var extname = __webpack_require__(13).extname

	/**
	 * Module variables.
	 * @private
	 */

	var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/
	var textTypeRegExp = /^text\//i

	/**
	 * Module exports.
	 * @public
	 */

	exports.charset = charset
	exports.charsets = { lookup: charset }
	exports.contentType = contentType
	exports.extension = extension
	exports.extensions = Object.create(null)
	exports.lookup = lookup
	exports.types = Object.create(null)

	// Populate the extensions/types maps
	populateMaps(exports.extensions, exports.types)

	/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function charset(type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type)
	  var mime = match && db[match[1].toLowerCase()]

	  if (mime && mime.charset) {
	    return mime.charset
	  }

	  // default text/* to utf-8
	  if (match && textTypeRegExp.test(match[1])) {
	    return 'UTF-8'
	  }

	  return false
	}

	/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */

	function contentType(str) {
	  // TODO: should this even be in this module?
	  if (!str || typeof str !== 'string') {
	    return false
	  }

	  var mime = str.indexOf('/') === -1
	    ? exports.lookup(str)
	    : str

	  if (!mime) {
	    return false
	  }

	  // TODO: use content-type or other module
	  if (mime.indexOf('charset') === -1) {
	    var charset = exports.charset(mime)
	    if (charset) mime += '; charset=' + charset.toLowerCase()
	  }

	  return mime
	}

	/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function extension(type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type)

	  // get extensions
	  var exts = match && exports.extensions[match[1].toLowerCase()]

	  if (!exts || !exts.length) {
	    return false
	  }

	  return exts[0]
	}

	/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */

	function lookup(path) {
	  if (!path || typeof path !== 'string') {
	    return false
	  }

	  // get the extension ("ext" or ".ext" or full path)
	  var extension = extname('x.' + path)
	    .toLowerCase()
	    .substr(1)

	  if (!extension) {
	    return false
	  }

	  return exports.types[extension] || false
	}

	/**
	 * Populate the extensions and types maps.
	 * @private
	 */

	function populateMaps(extensions, types) {
	  // source preference (least -> most)
	  var preference = ['nginx', 'apache', undefined, 'iana']

	  Object.keys(db).forEach(function forEachMimeType(type) {
	    var mime = db[type]
	    var exts = mime.extensions

	    if (!exts || !exts.length) {
	      return
	    }

	    // mime -> extensions
	    extensions[type] = exts

	    // extension -> mime
	    for (var i = 0; i < exts.length; i++) {
	      var extension = exts[i]

	      if (types[extension]) {
	        var from = preference.indexOf(db[types[extension]].source)
	        var to = preference.indexOf(mime.source)

	        if (types[extension] !== 'application/octet-stream'
	          && from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {
	          // skip the remapping
	          continue
	        }
	      }

	      // set the extension -> mime
	      types[extension] = type
	    }
	  })
	}


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mime-db
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 */

	module.exports = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./db.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))


/***/ },
/* 312 */,
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var util = __webpack_require__(10)
	var Stream = __webpack_require__(21)
	var StringDecoder = __webpack_require__(31).StringDecoder

	module.exports = StringStream
	module.exports.AlignedStringDecoder = AlignedStringDecoder

	function StringStream(from, to) {
	  if (!(this instanceof StringStream)) return new StringStream(from, to)

	  Stream.call(this)

	  if (from == null) from = 'utf8'

	  this.readable = this.writable = true
	  this.paused = false
	  this.toEncoding = (to == null ? from : to)
	  this.fromEncoding = (to == null ? '' : from)
	  this.decoder = new AlignedStringDecoder(this.toEncoding)
	}
	util.inherits(StringStream, Stream)

	StringStream.prototype.write = function(data) {
	  if (!this.writable) {
	    var err = new Error('stream not writable')
	    err.code = 'EPIPE'
	    this.emit('error', err)
	    return false
	  }
	  if (this.fromEncoding) {
	    if (Buffer.isBuffer(data)) data = data.toString()
	    data = new Buffer(data, this.fromEncoding)
	  }
	  var string = this.decoder.write(data)
	  if (string.length) this.emit('data', string)
	  return !this.paused
	}

	StringStream.prototype.flush = function() {
	  if (this.decoder.flush) {
	    var string = this.decoder.flush()
	    if (string.length) this.emit('data', string)
	  }
	}

	StringStream.prototype.end = function() {
	  if (!this.writable && !this.readable) return
	  this.flush()
	  this.emit('end')
	  this.writable = this.readable = false
	  this.destroy()
	}

	StringStream.prototype.destroy = function() {
	  this.decoder = null
	  this.writable = this.readable = false
	  this.emit('close')
	}

	StringStream.prototype.pause = function() {
	  this.paused = true
	}

	StringStream.prototype.resume = function () {
	  if (this.paused) this.emit('drain')
	  this.paused = false
	}

	function AlignedStringDecoder(encoding) {
	  StringDecoder.call(this, encoding)

	  switch (this.encoding) {
	    case 'base64':
	      this.write = alignedWrite
	      this.alignedBuffer = new Buffer(3)
	      this.alignedBytes = 0
	      break
	  }
	}
	util.inherits(AlignedStringDecoder, StringDecoder)

	AlignedStringDecoder.prototype.flush = function() {
	  if (!this.alignedBuffer || !this.alignedBytes) return ''
	  var leftover = this.alignedBuffer.toString(this.encoding, 0, this.alignedBytes)
	  this.alignedBytes = 0
	  return leftover
	}

	function alignedWrite(buffer) {
	  var rem = (this.alignedBytes + buffer.length) % this.alignedBuffer.length
	  if (!rem && !this.alignedBytes) return buffer.toString(this.encoding)

	  var returnBuffer = new Buffer(this.alignedBytes + buffer.length - rem)

	  this.alignedBuffer.copy(returnBuffer, 0, 0, this.alignedBytes)
	  buffer.copy(returnBuffer, this.alignedBytes, 0, buffer.length - rem)

	  buffer.copy(this.alignedBuffer, 0, buffer.length - rem, buffer.length)
	  this.alignedBytes = rem

	  return returnBuffer.toString(this.encoding)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 314 */
/***/ function(module, exports) {

	function Caseless (dict) {
	  this.dict = dict || {}
	}
	Caseless.prototype.set = function (name, value, clobber) {
	  if (typeof name === 'object') {
	    for (var i in name) {
	      this.set(i, name[i], value)
	    }
	  } else {
	    if (typeof clobber === 'undefined') clobber = true
	    var has = this.has(name)

	    if (!clobber && has) this.dict[has] = this.dict[has] + ',' + value
	    else this.dict[has || name] = value
	    return has
	  }
	}
	Caseless.prototype.has = function (name) {
	  var keys = Object.keys(this.dict)
	    , name = name.toLowerCase()
	    ;
	  for (var i=0;i<keys.length;i++) {
	    if (keys[i].toLowerCase() === name) return keys[i]
	  }
	  return false
	}
	Caseless.prototype.get = function (name) {
	  name = name.toLowerCase()
	  var result, _key
	  var headers = this.dict
	  Object.keys(headers).forEach(function (key) {
	    _key = key.toLowerCase()
	    if (name === _key) result = headers[key]
	  })
	  return result
	}
	Caseless.prototype.swap = function (name) {
	  var has = this.has(name)
	  if (!has) throw new Error('There is no header than matches "'+name+'"')
	  this.dict[name] = this.dict[has]
	  delete this.dict[has]
	}
	Caseless.prototype.del = function (name) {
	  var has = this.has(name)
	  return delete this.dict[has || name]
	}

	module.exports = function (dict) {return new Caseless(dict)}
	module.exports.httpify = function (resp, headers) {
	  var c = new Caseless(headers)
	  resp.setHeader = function (key, value, clobber) {
	    if (typeof value === 'undefined') return
	    return c.set(key, value, clobber)
	  }
	  resp.hasHeader = function (key) {
	    return c.has(key)
	  }
	  resp.getHeader = function (key) {
	    return c.get(key)
	  }
	  resp.removeHeader = function (key) {
	    return c.del(key)
	  }
	  resp.headers = c.dict
	  return c
	}


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = ForeverAgent
	ForeverAgent.SSL = ForeverAgentSSL

	var util = __webpack_require__(10)
	  , Agent = __webpack_require__(18).Agent
	  , net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , AgentSSL = __webpack_require__(266).Agent
	  
	function getConnectionName(host, port) {  
	  var name = ''
	  if (typeof host === 'string') {
	    name = host + ':' + port
	  } else {
	    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.
	    name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':')
	  }
	  return name
	}    

	function ForeverAgent(options) {
	  var self = this
	  self.options = options || {}
	  self.requests = {}
	  self.sockets = {}
	  self.freeSockets = {}
	  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets
	  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets
	  self.on('free', function(socket, host, port) {
	    var name = getConnectionName(host, port)

	    if (self.requests[name] && self.requests[name].length) {
	      self.requests[name].shift().onSocket(socket)
	    } else if (self.sockets[name].length < self.minSockets) {
	      if (!self.freeSockets[name]) self.freeSockets[name] = []
	      self.freeSockets[name].push(socket)
	      
	      // if an error happens while we don't use the socket anyway, meh, throw the socket away
	      var onIdleError = function() {
	        socket.destroy()
	      }
	      socket._onIdleError = onIdleError
	      socket.on('error', onIdleError)
	    } else {
	      // If there are no pending requests just destroy the
	      // socket and it will get removed from the pool. This
	      // gets us out of timeout issues and allows us to
	      // default to Connection:keep-alive.
	      socket.destroy()
	    }
	  })

	}
	util.inherits(ForeverAgent, Agent)

	ForeverAgent.defaultMinSockets = 5


	ForeverAgent.prototype.createConnection = net.createConnection
	ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest
	ForeverAgent.prototype.addRequest = function(req, host, port) {
	  var name = getConnectionName(host, port)
	  
	  if (typeof host !== 'string') {
	    var options = host
	    port = options.port
	    host = options.host
	  }

	  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
	    var idleSocket = this.freeSockets[name].pop()
	    idleSocket.removeListener('error', idleSocket._onIdleError)
	    delete idleSocket._onIdleError
	    req._reusedSocket = true
	    req.onSocket(idleSocket)
	  } else {
	    this.addRequestNoreuse(req, host, port)
	  }
	}

	ForeverAgent.prototype.removeSocket = function(s, name, host, port) {
	  if (this.sockets[name]) {
	    var index = this.sockets[name].indexOf(s)
	    if (index !== -1) {
	      this.sockets[name].splice(index, 1)
	    }
	  } else if (this.sockets[name] && this.sockets[name].length === 0) {
	    // don't leak
	    delete this.sockets[name]
	    delete this.requests[name]
	  }
	  
	  if (this.freeSockets[name]) {
	    var index = this.freeSockets[name].indexOf(s)
	    if (index !== -1) {
	      this.freeSockets[name].splice(index, 1)
	      if (this.freeSockets[name].length === 0) {
	        delete this.freeSockets[name]
	      }
	    }
	  }

	  if (this.requests[name] && this.requests[name].length) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createSocket(name, host, port).emit('free')
	  }
	}

	function ForeverAgentSSL (options) {
	  ForeverAgent.call(this, options)
	}
	util.inherits(ForeverAgentSSL, ForeverAgent)

	ForeverAgentSSL.prototype.createConnection = createConnectionSSL
	ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest

	function createConnectionSSL (port, host, options) {
	  if (typeof port === 'object') {
	    options = port;
	  } else if (typeof host === 'object') {
	    options = host;
	  } else if (typeof options === 'object') {
	    options = options;
	  } else {
	    options = {};
	  }

	  if (typeof port === 'number') {
	    options.port = port;
	  }

	  if (typeof host === 'string') {
	    options.host = host;
	  }

	  return tls.connect(options);
	}


/***/ },
/* 316 */
/***/ function(module, exports) {

	module.exports = FormData;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict'

	function formatHostname(hostname) {
	  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
	  return hostname.replace(/^\.*/, '.').toLowerCase()
	}

	function parseNoProxyZone(zone) {
	  zone = zone.trim().toLowerCase()

	  var zoneParts = zone.split(':', 2)
	    , zoneHost = formatHostname(zoneParts[0])
	    , zonePort = zoneParts[1]
	    , hasPort = zone.indexOf(':') > -1

	  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}
	}

	function uriInNoProxy(uri, noProxy) {
	  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')
	    , hostname = formatHostname(uri.hostname)
	    , noProxyList = noProxy.split(',')

	  // iterate through the noProxyList until it finds a match.
	  return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {
	    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)
	      , hostnameMatched = (
	          isMatchedAt > -1 &&
	          (isMatchedAt === hostname.length - noProxyZone.hostname.length)
	        )

	    if (noProxyZone.hasPort) {
	      return (port === noProxyZone.port) && hostnameMatched
	    }

	    return hostnameMatched
	  })
	}

	function getProxyFromURI(uri) {
	  // Decide the proper request proxy to use based on the request URI object and the
	  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
	  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)

	  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''

	  // if the noProxy is a wildcard then return null

	  if (noProxy === '*') {
	    return null
	  }

	  // if the noProxy is not empty and the uri is found return null

	  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {
	    return null
	  }

	  // Check for HTTP or HTTPS Proxy in environment Else default to null

	  if (uri.protocol === 'http:') {
	    return process.env.HTTP_PROXY ||
	           process.env.http_proxy || null
	  }

	  if (uri.protocol === 'https:') {
	    return process.env.HTTPS_PROXY ||
	           process.env.https_proxy ||
	           process.env.HTTP_PROXY  ||
	           process.env.http_proxy  || null
	  }

	  // if none of that works, return null
	  // (What uri protocol are you using then?)

	  return null
	}

	module.exports = getProxyFromURI

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var qs = __webpack_require__(319)
	  , querystring = __webpack_require__(49)


	function Querystring (request) {
	  this.request = request
	  this.lib = null
	  this.useQuerystring = null
	  this.parseOptions = null
	  this.stringifyOptions = null
	}

	Querystring.prototype.init = function (options) {
	  if (this.lib) {return}

	  this.useQuerystring = options.useQuerystring
	  this.lib = (this.useQuerystring ? querystring : qs)

	  this.parseOptions = options.qsParseOptions || {}
	  this.stringifyOptions = options.qsStringifyOptions || {}
	}

	Querystring.prototype.stringify = function (obj) {
	  return (this.useQuerystring)
	    ? this.rfc3986(this.lib.stringify(obj,
	      this.stringifyOptions.sep || null,
	      this.stringifyOptions.eq || null,
	      this.stringifyOptions))
	    : this.lib.stringify(obj, this.stringifyOptions)
	}

	Querystring.prototype.parse = function (str) {
	  return (this.useQuerystring)
	    ? this.lib.parse(str,
	      this.parseOptions.sep || null,
	      this.parseOptions.eq || null,
	      this.parseOptions)
	    : this.lib.parse(str, this.parseOptions)
	}

	Querystring.prototype.rfc3986 = function (str) {
	  return str.replace(/[!'()*]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	Querystring.prototype.unescape = querystring.unescape

	exports.Querystring = Querystring


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(320);
	var Parse = __webpack_require__(322);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(321);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {

	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {

	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {

	            return prefix;
	        }
	    },
	    strictNullHandling: false,
	    skipNulls: false,
	    encode: true
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter) {

	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    }
	    else if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        if (strictNullHandling) {
	            return encode ? Utils.encode(prefix) : prefix;
	        }

	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        if (encode) {
	            return [Utils.encode(prefix) + '=' + Utils.encode(obj)];
	        }
	        return [prefix + '=' + obj];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Array.isArray(filter) ? filter : Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];

	        if (skipNulls &&
	            obj[key] === null) {

	            continue;
	        }

	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
	    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;
	    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : internals.skipNulls;
	    var encode = typeof options.encode === 'boolean' ? options.encode : internals.encode;
	    var objKeys;
	    var filter;
	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    }
	    else if (Array.isArray(options.filter)) {
	        objKeys = filter = options.filter;
	    }

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }

	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];

	        if (skipNulls &&
	            obj[key] === null) {

	            continue;
	        }

	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 321 */
/***/ function(module, exports) {

	// Load modules


	// Declare internals

	var internals = {};
	internals.hexTable = new Array(256);
	for (var h = 0; h < 256; ++h) {
	    internals.hexTable[h] = '%' + ((h < 16 ? '0' : '') + h.toString(16)).toUpperCase();
	}


	exports.arrayToObject = function (source, options) {

	    var obj = options.plainObjects ? Object.create(null) : {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source, options) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else if (typeof target === 'object') {
	            target[source] = true;
	        }
	        else {
	            target = [target, source];
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target, options);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!Object.prototype.hasOwnProperty.call(target, key)) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value, options);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};

	exports.encode = function (str) {

	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }

	    if (typeof str !== 'string') {
	        str = '' + str;
	    }

	    var out = '';
	    for (var i = 0, il = str.length; i < il; ++i) {
	        var c = str.charCodeAt(i);

	        if (c === 0x2D || // -
	            c === 0x2E || // .
	            c === 0x5F || // _
	            c === 0x7E || // ~
	            (c >= 0x30 && c <= 0x39) || // 0-9
	            (c >= 0x41 && c <= 0x5A) || // a-z
	            (c >= 0x61 && c <= 0x7A)) { // A-Z

	            out += str[i];
	            continue;
	        }

	        if (c < 0x80) {
	            out += internals.hexTable[c];
	            continue;
	        }

	        if (c < 0x800) {
	            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];
	            continue;
	        }

	        if (c < 0xD800 || c >= 0xE000) {
	            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];
	            continue;
	        }

	        ++i;
	        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));
	        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];
	    }

	    return out;
	};

	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {

	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	              obj.constructor.isBuffer &&
	              obj.constructor.isBuffer(obj));
	};


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(321);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000,
	    strictNullHandling: false,
	    plainObjects: false,
	    allowPrototypes: false,
	    allowDots: false
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';

	            if (options.strictNullHandling) {
	                obj[Utils.decode(part)] = null;
	            }
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (!Object.prototype.hasOwnProperty.call(obj, key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj;
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        obj = options.plainObjects ? Object.create(null) : {};
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            (options.parseArrays &&
	             index <= options.arrayLimit)) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // Transform dot notation to bracket notation

	    if (options.allowDots) {
	        key = key.replace(/\.([^\.\[]+)/g, '[$1]');
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        // If we aren't using plain objects, optionally prefix keys
	        // that would overwrite object prototype properties
	        if (!options.plainObjects &&
	            Object.prototype.hasOwnProperty(segment[1])) {

	            if (!options.allowPrototypes) {
	                return;
	            }
	        }

	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!options.plainObjects &&
	            Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {

	            if (!options.allowPrototypes) {
	                continue;
	            }
	        }
	        keys.push(segment[1]);
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parseArrays = options.parseArrays !== false;
	    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : internals.allowDots;
	    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : internals.plainObjects;
	    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : internals.allowPrototypes;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;
	    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return options.plainObjects ? Object.create(null) : {};
	    }

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj, options);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	var qs = __webpack_require__(49)
	var validate = __webpack_require__(324)
	var util = __webpack_require__(10)

	function Har (request) {
	  this.request = request
	}

	Har.prototype.reducer = function (obj, pair) {
	  // new property ?
	  if (obj[pair.name] === undefined) {
	    obj[pair.name] = pair.value
	    return obj
	  }

	  // existing? convert to array
	  var arr = [
	    obj[pair.name],
	    pair.value
	  ]

	  obj[pair.name] = arr

	  return obj
	}

	Har.prototype.prep = function (data) {
	  // construct utility properties
	  data.queryObj = {}
	  data.headersObj = {}
	  data.postData.jsonObj = false
	  data.postData.paramsObj = false

	  // construct query objects
	  if (data.queryString && data.queryString.length) {
	    data.queryObj = data.queryString.reduce(this.reducer, {})
	  }

	  // construct headers objects
	  if (data.headers && data.headers.length) {
	    // loweCase header keys
	    data.headersObj = data.headers.reduceRight(function (headers, header) {
	      headers[header.name] = header.value
	      return headers
	    }, {})
	  }

	  // construct Cookie header
	  if (data.cookies && data.cookies.length) {
	    var cookies = data.cookies.map(function (cookie) {
	      return cookie.name + '=' + cookie.value
	    })

	    if (cookies.length) {
	      data.headersObj.cookie = cookies.join('; ')
	    }
	  }

	  // prep body
	  switch (data.postData.mimeType) {
	    case 'multipart/mixed':
	    case 'multipart/related':
	    case 'multipart/form-data':
	    case 'multipart/alternative':
	      // reset values
	      data.postData.mimeType = 'multipart/form-data'
	      break

	    case 'application/x-www-form-urlencoded':
	      if (!data.postData.params) {
	        data.postData.text = ''
	      } else {
	        data.postData.paramsObj = data.postData.params.reduce(this.reducer, {})

	        // always overwrite
	        data.postData.text = qs.stringify(data.postData.paramsObj)
	      }
	      break

	    case 'text/json':
	    case 'text/x-json':
	    case 'application/json':
	    case 'application/x-json':
	      data.postData.mimeType = 'application/json'

	      if (data.postData.text) {
	        try {
	          data.postData.jsonObj = JSON.parse(data.postData.text)
	        } catch (e) {
	          this.request.debug(e)

	          // force back to text/plain
	          data.postData.mimeType = 'text/plain'
	        }
	      }
	      break
	  }

	  return data
	}

	Har.prototype.options = function (options) {
	  // skip if no har property defined
	  if (!options.har) {
	    return options
	  }

	  var har = util._extend({}, options.har)

	  // only process the first entry
	  if (har.log && har.log.entries) {
	    har = har.log.entries[0]
	  }

	  // add optional properties to make validation successful
	  har.url = har.url || options.url || options.uri || options.baseUrl || '/'
	  har.httpVersion = har.httpVersion || 'HTTP/1.1'
	  har.queryString = har.queryString || []
	  har.headers = har.headers || []
	  har.cookies = har.cookies || []
	  har.postData = har.postData || {}
	  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream'

	  har.bodySize = 0
	  har.headersSize = 0
	  har.postData.size = 0

	  if (!validate.request(har)) {
	    return options
	  }

	  // clean up and get some utility properties
	  var req = this.prep(har)

	  // construct new options
	  if (req.url) {
	    options.url = req.url
	  }

	  if (req.method) {
	    options.method = req.method
	  }

	  if (Object.keys(req.queryObj).length) {
	    options.qs = req.queryObj
	  }

	  if (Object.keys(req.headersObj).length) {
	    options.headers = req.headersObj
	  }

	  switch (req.postData.mimeType) {
	    case 'application/x-www-form-urlencoded':
	      options.form = req.postData.paramsObj
	      break

	    case 'application/json':
	      if (req.postData.jsonObj) {
	        options.body = req.postData.jsonObj
	        options.json = true
	      }
	      break

	    case 'multipart/form-data':
	      options.formData = {}

	      req.postData.params.forEach(function (param) {
	        var attachment = {}

	        if (!param.fileName && !param.fileName && !param.contentType) {
	          options.formData[param.name] = param.value
	          return
	        }

	        // attempt to read from disk!
	        if (param.fileName && !param.value) {
	          attachment.value = fs.createReadStream(param.fileName)
	        } else if (param.value) {
	          attachment.value = param.value
	        }

	        if (param.fileName) {
	          attachment.options = {
	            filename: param.fileName,
	            contentType: param.contentType ? param.contentType : null
	          }
	        }

	        options.formData[param.name] = attachment
	      })
	      break

	    default:
	      if (req.postData.text) {
	        options.body = req.postData.text
	      }
	  }

	  return options
	}

	exports.Har = Har


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var schemas = __webpack_require__(325)
	var ValidationError = __webpack_require__(341)
	var validator = __webpack_require__(342)

	var runner = function (schema, data, cb) {
	  var validate = validator(schema, {
	    greedy: true,
	    verbose: true,
	    schemas: schemas
	  })

	  var valid = false

	  if (data !== undefined) {
	    // execute is-my-json-valid
	    valid = validate(data)
	  }

	  // callback?
	  if (!cb) {
	    return valid
	  } else {
	    return cb(validate.errors ? new ValidationError(validate.errors) : null, valid)
	  }

	  return valid
	}

	module.exports = function (data, cb) {
	  return runner(schemas.har, data, cb)
	}

	Object.keys(schemas).map(function (name) {
	  module.exports[name] = function (data, cb) {
	    return runner(schemas[name], data, cb)
	  }
	})


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var schemas = {
	  cache: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./cache.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  cacheEntry: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./cacheEntry.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  content: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./content.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  cookie: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./cookie.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  creator: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./creator.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  entry: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./entry.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  har: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./har.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  log: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./log.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  page: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./page.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  pageTimings: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./pageTimings.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  postData: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./postData.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  record: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./record.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  request: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./request.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  response: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./response.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  timings: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./timings.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	}

	// is-my-json-valid does not provide meaningful error messages for external schemas
	// this is a workaround
	schemas.cache.properties.beforeRequest = schemas.cacheEntry
	schemas.cache.properties.afterRequest = schemas.cacheEntry

	schemas.page.properties.pageTimings = schemas.pageTimings

	schemas.request.properties.cookies.items = schemas.cookie
	schemas.request.properties.headers.items = schemas.record
	schemas.request.properties.queryString.items = schemas.record
	schemas.request.properties.postData = schemas.postData

	schemas.response.properties.cookies.items = schemas.cookie
	schemas.response.properties.headers.items = schemas.record
	schemas.response.properties.content = schemas.content

	schemas.entry.properties.request = schemas.request
	schemas.entry.properties.response = schemas.response
	schemas.entry.properties.cache = schemas.cache
	schemas.entry.properties.timings = schemas.timings

	schemas.log.properties.creator = schemas.creator
	schemas.log.properties.browser = schemas.creator
	schemas.log.properties.pages.items = schemas.page
	schemas.log.properties.entries.items = schemas.entry

	schemas.har.properties.log = schemas.log

	module.exports = schemas


/***/ },
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */
/***/ function(module, exports) {

	'use strict'

	function ValidationError (errors) {
	  this.name = 'ValidationError'
	  this.errors = errors
	}

	ValidationError.prototype = Error.prototype

	module.exports = ValidationError


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var genobj = __webpack_require__(343)
	var genfun = __webpack_require__(345)
	var jsonpointer = __webpack_require__(346)
	var xtend = __webpack_require__(347)
	var formats = __webpack_require__(348)

	var get = function(obj, additionalSchemas, ptr) {
	  if (/^https?:\/\//.test(ptr)) return null

	  var visit = function(sub) {
	    if (sub && sub.id === ptr) return sub
	    if (typeof sub !== 'object' || !sub) return null
	    return Object.keys(sub).reduce(function(res, k) {
	      return res || visit(sub[k])
	    }, null)
	  }

	  var res = visit(obj)
	  if (res) return res

	  ptr = ptr.replace(/^#/, '')
	  ptr = ptr.replace(/\/$/, '')

	  try {
	    return jsonpointer.get(obj, decodeURI(ptr))
	  } catch (err) {
	    var end = ptr.indexOf('#')
	    var other
	    // external reference
	    if (end !== 0) {
	      // fragment doesn't exist.
	      if (end === -1) {
	        other = additionalSchemas[ptr]
	      } else {
	        var ext = ptr.slice(0, end)
	        other = additionalSchemas[ext]
	        var fragment = ptr.slice(end).replace(/^#/, '')
	        try {
	          return jsonpointer.get(other, fragment)
	        } catch (err) {}
	      }
	    } else {
	      other = additionalSchemas[ptr]
	    }
	    return other || null
	  }
	}

	var formatName = function(field) {
	  field = JSON.stringify(field)
	  var pattern = /\[([^\[\]"]+)\]/
	  while (pattern.test(field)) field = field.replace(pattern, '."+$1+"')
	  return field
	}

	var types = {}

	types.any = function() {
	  return 'true'
	}

	types.null = function(name) {
	  return name+' === null'
	}

	types.boolean = function(name) {
	  return 'typeof '+name+' === "boolean"'
	}

	types.array = function(name) {
	  return 'Array.isArray('+name+')'
	}

	types.object = function(name) {
	  return 'typeof '+name+' === "object" && '+name+' && !Array.isArray('+name+')'
	}

	types.number = function(name) {
	  return 'typeof '+name+' === "number"'
	}

	types.integer = function(name) {
	  return 'typeof '+name+' === "number" && (Math.floor('+name+') === '+name+' || '+name+' > 9007199254740992 || '+name+' < -9007199254740992)'
	}

	types.string = function(name) {
	  return 'typeof '+name+' === "string"'
	}

	var unique = function(array) {
	  var list = []
	  for (var i = 0; i < array.length; i++) {
	    list.push(typeof array[i] === 'object' ? JSON.stringify(array[i]) : array[i])
	  }
	  for (var i = 1; i < list.length; i++) {
	    if (list.indexOf(list[i]) !== i) return false
	  }
	  return true
	}

	var toType = function(node) {
	  return node.type
	}

	var compile = function(schema, cache, root, reporter, opts) {
	  var fmts = opts ? xtend(formats, opts.formats) : formats
	  var scope = {unique:unique, formats:fmts}
	  var verbose = opts ? !!opts.verbose : false;
	  var greedy = opts && opts.greedy !== undefined ?
	    opts.greedy : false;

	  var syms = {}
	  var gensym = function(name) {
	    return name+(syms[name] = (syms[name] || 0)+1)
	  }

	  var reversePatterns = {}
	  var patterns = function(p) {
	    if (reversePatterns[p]) return reversePatterns[p]
	    var n = gensym('pattern')
	    scope[n] = new RegExp(p)
	    reversePatterns[p] = n
	    return n
	  }

	  var vars = ['i','j','k','l','m','n','o','p','q','r','s','t','u','v','x','y','z']
	  var genloop = function() {
	    var v = vars.shift()
	    vars.push(v+v[0])
	    return v
	  }

	  var visit = function(name, node, reporter, filter) {
	    var properties = node.properties
	    var type = node.type
	    var tuple = false

	    if (Array.isArray(node.items)) { // tuple type
	      properties = {}
	      node.items.forEach(function(item, i) {
	        properties[i] = item
	      })
	      type = 'array'
	      tuple = true
	    }

	    var indent = 0
	    var error = function(msg, prop, value) {
	      validate('errors++')
	      if (reporter === true) {
	        validate('if (validate.errors === null) validate.errors = []')
	        if (verbose) {
	          validate('validate.errors.push({field:%s,message:%s,value:%s})', formatName(prop || name), JSON.stringify(msg), value || name)
	        } else {
	          validate('validate.errors.push({field:%s,message:%s})', formatName(prop || name), JSON.stringify(msg))
	        }
	      }
	    }

	    if (node.required === true) {
	      indent++
	      validate('if (%s === undefined) {', name)
	      error('is required')
	      validate('} else {')
	    } else {
	      indent++
	      validate('if (%s !== undefined) {', name)
	    }

	    var valid = [].concat(type)
	      .map(function(t) {
	        return types[t || 'any'](name)
	      })
	      .join(' || ') || 'true'

	    if (valid !== 'true') {
	      indent++
	      validate('if (!(%s)) {', valid)
	      error('is the wrong type')
	      validate('} else {')
	    }

	    if (tuple) {
	      if (node.additionalItems === false) {
	        validate('if (%s.length > %d) {', name, node.items.length)
	        error('has additional items')
	        validate('}')
	      } else if (node.additionalItems) {
	        var i = genloop()
	        validate('for (var %s = %d; %s < %s.length; %s++) {', i, node.items.length, i, name, i)
	        visit(name+'['+i+']', node.additionalItems, reporter, filter)
	        validate('}')
	      }   
	    }

	    if (node.format && fmts[node.format]) {
	      if (type !== 'string' && formats[node.format]) validate('if (%s) {', types.string(name))
	      var n = gensym('format')
	      scope[n] = fmts[node.format]

	      if (typeof scope[n] === 'function') validate('if (!%s(%s)) {', n, name)
	      else validate('if (!%s.test(%s)) {', n, name)
	      error('must be '+node.format+' format')
	      validate('}')
	      if (type !== 'string' && formats[node.format]) validate('}')
	    }

	    if (Array.isArray(node.required)) {
	      var isUndefined = function(req) {
	        return genobj(name, req) + ' === undefined'
	      }

	      var checkRequired = function (req) {
	        var prop = genobj(name, req);
	        validate('if (%s === undefined) {', prop)
	        error('is required', prop)
	        validate('missing++')
	        validate('}')
	      }
	      validate('if ((%s)) {', type !== 'object' ? types.object(name) : 'true')
	      validate('var missing = 0')
	      node.required.map(checkRequired)
	      validate('}');
	      if (!greedy) {
	        validate('if (missing === 0) {')
	        indent++
	      }
	    }

	    if (node.uniqueItems) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))
	      validate('if (!(unique(%s))) {', name)
	      error('must be unique')
	      validate('}')
	      if (type !== 'array') validate('}')
	    }

	    if (node.enum) {
	      var complex = node.enum.some(function(e) {
	        return typeof e === 'object'
	      })

	      var compare = complex ?
	        function(e) {
	          return 'JSON.stringify('+name+')'+' !== JSON.stringify('+JSON.stringify(e)+')'
	        } :
	        function(e) {
	          return name+' !== '+JSON.stringify(e)
	        }

	      validate('if (%s) {', node.enum.map(compare).join(' && ') || 'false')
	      error('must be an enum value')
	      validate('}')
	    }

	    if (node.dependencies) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))

	      Object.keys(node.dependencies).forEach(function(key) {
	        var deps = node.dependencies[key]
	        if (typeof deps === 'string') deps = [deps]

	        var exists = function(k) {
	          return genobj(name, k) + ' !== undefined'
	        }

	        if (Array.isArray(deps)) {
	          validate('if (%s !== undefined && !(%s)) {', genobj(name, key), deps.map(exists).join(' && ') || 'true')
	          error('dependencies not set')
	          validate('}')
	        }
	        if (typeof deps === 'object') {
	          validate('if (%s !== undefined) {', genobj(name, key))
	          visit(name, deps, reporter, filter)
	          validate('}')
	        }
	      })

	      if (type !== 'object') validate('}')
	    }

	    if (node.additionalProperties || node.additionalProperties === false) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))

	      var i = genloop()
	      var keys = gensym('keys')

	      var toCompare = function(p) {
	        return keys+'['+i+'] !== '+JSON.stringify(p)
	      }

	      var toTest = function(p) {
	        return '!'+patterns(p)+'.test('+keys+'['+i+'])'
	      }

	      var additionalProp = Object.keys(properties || {}).map(toCompare)
	        .concat(Object.keys(node.patternProperties || {}).map(toTest))
	        .join(' && ') || 'true'

	      validate('var %s = Object.keys(%s)', keys, name)
	        ('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i)
	          ('if (%s) {', additionalProp)

	      if (node.additionalProperties === false) {
	        if (filter) validate('delete %s', name+'['+keys+'['+i+']]')
	        error('has additional properties', null, JSON.stringify(name+'.') + ' + ' + keys + '['+i+']')
	      } else {
	        visit(name+'['+keys+'['+i+']]', node.additionalProperties, reporter, filter)
	      }

	      validate
	          ('}')
	        ('}')

	      if (type !== 'object') validate('}')
	    }

	    if (node.$ref) {
	      var sub = get(root, opts && opts.schemas || {}, node.$ref)
	      if (sub) {
	        var fn = cache[node.$ref]
	        if (!fn) {
	          cache[node.$ref] = function proxy(data) {
	            return fn(data)
	          }
	          fn = compile(sub, cache, root, false, opts)
	        }
	        var n = gensym('ref')
	        scope[n] = fn
	        validate('if (!(%s(%s))) {', n, name)
	        error('referenced schema does not match')
	        validate('}')
	      }
	    }

	    if (node.not) {
	      var prev = gensym('prev')
	      validate('var %s = errors', prev)
	      visit(name, node.not, false, filter)
	      validate('if (%s === errors) {', prev)
	      error('negative schema matches')
	      validate('} else {')
	        ('errors = %s', prev)
	      ('}')
	    }

	    if (node.items && !tuple) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))

	      var i = genloop()
	      validate('for (var %s = 0; %s < %s.length; %s++) {', i, i, name, i)
	      visit(name+'['+i+']', node.items, reporter, filter)
	      validate('}')

	      if (type !== 'array') validate('}')
	    }

	    if (node.patternProperties) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))
	      var keys = gensym('keys')
	      var i = genloop()
	      validate
	        ('var %s = Object.keys(%s)', keys, name)
	        ('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i)

	      Object.keys(node.patternProperties).forEach(function(key) {
	        var p = patterns(key)
	        validate('if (%s.test(%s)) {', p, keys+'['+i+']')
	        visit(name+'['+keys+'['+i+']]', node.patternProperties[key], reporter, filter)
	        validate('}')
	      })

	      validate('}')
	      if (type !== 'object') validate('}')
	    }

	    if (node.pattern) {
	      var p = patterns(node.pattern)
	      if (type !== 'string') validate('if (%s) {', types.string(name))
	      validate('if (!(%s.test(%s))) {', p, name)
	      error('pattern mismatch')
	      validate('}')
	      if (type !== 'string') validate('}')
	    }

	    if (node.allOf) {
	      node.allOf.forEach(function(sch) {
	        visit(name, sch, reporter, filter)
	      })
	    }

	    if (node.anyOf && node.anyOf.length) {
	      var prev = gensym('prev')

	      node.anyOf.forEach(function(sch, i) {
	        if (i === 0) {
	          validate('var %s = errors', prev)
	        } else {          
	          validate('if (errors !== %s) {', prev)
	            ('errors = %s', prev)
	        }
	        visit(name, sch, false, false)
	      })
	      node.anyOf.forEach(function(sch, i) {
	        if (i) validate('}')
	      })
	      validate('if (%s !== errors) {', prev)
	      error('no schemas match')
	      validate('}')
	    }

	    if (node.oneOf && node.oneOf.length) {
	      var prev = gensym('prev')
	      var passes = gensym('passes')

	      validate
	        ('var %s = errors', prev)
	        ('var %s = 0', passes)

	      node.oneOf.forEach(function(sch, i) {
	        visit(name, sch, false, false)
	        validate('if (%s === errors) {', prev)
	          ('%s++', passes)
	        ('} else {')
	          ('errors = %s', prev)
	        ('}')
	      })

	      validate('if (%s !== 1) {', passes)
	      error('no (or more than one) schemas match')
	      validate('}')
	    }

	    if (node.multipleOf !== undefined) {
	      if (type !== 'number' && type !== 'integer') validate('if (%s) {', types.number(name))

	      var factor = ((node.multipleOf | 0) !== node.multipleOf) ? Math.pow(10, node.multipleOf.toString().split('.').pop().length) : 1
	      if (factor > 1) validate('if ((%d*%s) % %d) {', factor, name, factor*node.multipleOf)
	      else validate('if (%s % %d) {', name, node.multipleOf)

	      error('has a remainder')
	      validate('}')

	      if (type !== 'number' && type !== 'integer') validate('}')
	    }

	    if (node.maxProperties !== undefined) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))
	      
	      validate('if (Object.keys(%s).length > %d) {', name, node.maxProperties)
	      error('has more properties than allowed')
	      validate('}')

	      if (type !== 'object') validate('}')
	    }

	    if (node.minProperties !== undefined) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))
	      
	      validate('if (Object.keys(%s).length < %d) {', name, node.minProperties)
	      error('has less properties than allowed')
	      validate('}')

	      if (type !== 'object') validate('}')
	    }

	    if (node.maxItems !== undefined) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))
	      
	      validate('if (%s.length > %d) {', name, node.maxItems)
	      error('has more items than allowed')
	      validate('}')

	      if (type !== 'array') validate('}')
	    }

	    if (node.minItems !== undefined) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))
	      
	      validate('if (%s.length < %d) {', name, node.minItems)
	      error('has less items than allowed')
	      validate('}')

	      if (type !== 'array') validate('}')
	    }

	    if (node.maxLength !== undefined) {
	      if (type !== 'string') validate('if (%s) {', types.string(name))

	      validate('if (%s.length > %d) {', name, node.maxLength)
	      error('has longer length than allowed')
	      validate('}')

	      if (type !== 'string') validate('}')
	    }

	    if (node.minLength !== undefined) {
	      if (type !== 'string') validate('if (%s) {', types.string(name))

	      validate('if (%s.length < %d) {', name, node.minLength)
	      error('has less length than allowed')
	      validate('}')

	      if (type !== 'string') validate('}')
	    }

	    if (node.minimum !== undefined) {
	      validate('if (%s %s %d) {', name, node.exclusiveMinimum ? '<=' : '<', node.minimum)
	      error('is less than minimum')
	      validate('}')
	    }

	    if (node.maximum !== undefined) {
	      validate('if (%s %s %d) {', name, node.exclusiveMaximum ? '>=' : '>', node.maximum)
	      error('is more than maximum')
	      validate('}')
	    }

	    if (properties) {
	      Object.keys(properties).forEach(function(p) {
	        if (Array.isArray(type) && type.indexOf('null') !== -1) validate('if (%s !== null) {', name)

	        visit(genobj(name, p), properties[p], reporter, filter)

	        if (Array.isArray(type) && type.indexOf('null') !== -1) validate('}')
	      })
	    }

	    while (indent--) validate('}')
	  }

	  var validate = genfun
	    ('function validate(data) {')
	      ('validate.errors = null')
	      ('var errors = 0')

	  visit('data', schema, reporter, opts && opts.filter)

	  validate
	      ('return errors === 0')
	    ('}')

	  validate = validate.toFunction(scope)
	  validate.errors = null

	  validate.__defineGetter__('error', function() {
	    if (!validate.errors) return ''
	    return validate.errors
	      .map(function(err) {
	        return err.field+' '+err.message
	      })
	      .join('\n')
	  })

	  validate.toJSON = function() {
	    return schema
	  }

	  return validate
	}

	module.exports = function(schema, opts) {
	  if (typeof schema === 'string') schema = JSON.parse(schema)
	  return compile(schema, {}, schema, true, opts)
	}

	module.exports.filter = function(schema, opts) {
	  var validate = module.exports(schema, xtend(opts, {filter: true}))
	  return function(sch) {
	    validate(sch)
	    return sch
	  }
	}


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var isProperty = __webpack_require__(344)

	var gen = function(obj, prop) {
	  return isProperty(prop) ? obj+'.'+prop : obj+'['+JSON.stringify(prop)+']'
	}

	gen.valid = isProperty
	gen.property = function (prop) {
	 return isProperty(prop) ? prop : JSON.stringify(prop)
	}

	module.exports = gen


/***/ },
/* 344 */
/***/ function(module, exports) {

	"use strict"
	function isProperty(str) {
	  return /^[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]*$/.test(str)
	}
	module.exports = isProperty

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(10)

	var INDENT_START = /[\{\[]/
	var INDENT_END = /[\}\]]/

	module.exports = function() {
	  var lines = []
	  var indent = 0

	  var push = function(str) {
	    var spaces = ''
	    while (spaces.length < indent*2) spaces += '  '
	    lines.push(spaces+str)
	  }

	  var line = function(fmt) {
	    if (!fmt) return line

	    if (INDENT_END.test(fmt.trim()[0]) && INDENT_START.test(fmt[fmt.length-1])) {
	      indent--
	      push(util.format.apply(util, arguments))
	      indent++
	      return line
	    }
	    if (INDENT_START.test(fmt[fmt.length-1])) {
	      push(util.format.apply(util, arguments))
	      indent++
	      return line
	    }
	    if (INDENT_END.test(fmt.trim()[0])) {
	      indent--
	      push(util.format.apply(util, arguments))
	      return line
	    }

	    push(util.format.apply(util, arguments))
	    return line
	  }

	  line.toString = function() {
	    return lines.join('\n')
	  }

	  line.toFunction = function(scope) {
	    var src = 'return ('+line.toString()+')'

	    var keys = Object.keys(scope || {}).map(function(key) {
	      return key
	    })

	    var vals = keys.map(function(key) {
	      return scope[key]
	    })

	    return Function.apply(null, keys.concat(src)).apply(null, vals)
	  }

	  if (arguments.length) line.apply(null, arguments)

	  return line
	}


/***/ },
/* 346 */
/***/ function(module, exports) {

	var untilde = function(str) {
	  return str.replace(/~./g, function(m) {
	    switch (m) {
	      case "~0":
	        return "~";
	      case "~1":
	        return "/";
	    }
	    throw new Error("Invalid tilde escape: " + m);
	  });
	}

	var traverse = function(obj, pointer, value) {
	  // assert(isArray(pointer))
	  var part = untilde(pointer.shift());
	  if(!obj.hasOwnProperty(part)) {
	    return null;
	  }
	  if(pointer.length !== 0) { // keep traversin!
	    return traverse(obj[part], pointer, value);
	  }
	  // we're done
	  if(typeof value === "undefined") {
	    // just reading
	    return obj[part];
	  }
	  // set new value, return old value
	  var old_value = obj[part];
	  if(value === null) {
	    delete obj[part];
	  } else {
	    obj[part] = value;
	  }
	  return old_value;
	}

	var validate_input = function(obj, pointer) {
	  if(typeof obj !== "object") {
	    throw new Error("Invalid input object.");
	  }

	  if(pointer === "") {
	    return [];
	  }

	  if(!pointer) {
	    throw new Error("Invalid JSON pointer.");
	  }

	  pointer = pointer.split("/");
	  var first = pointer.shift();
	  if (first !== "") {
	    throw new Error("Invalid JSON pointer.");
	  }

	  return pointer;
	}

	var get = function(obj, pointer) {
	  pointer = validate_input(obj, pointer);
	  if (pointer.length === 0) {
	    return obj;
	  }
	  return traverse(obj, pointer);
	}

	var set = function(obj, pointer, value) {
	  pointer = validate_input(obj, pointer);
	  if (pointer.length === 0) {
	    throw new Error("Invalid JSON pointer for set.")
	  }
	  return traverse(obj, pointer, value);
	}

	exports.get = get
	exports.set = set


/***/ },
/* 347 */
/***/ function(module, exports) {

	module.exports = extend

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 348 */
/***/ function(module, exports) {

	exports['date-time'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}[tT ]\d{2}:\d{2}:\d{2}(\.\d+)?([zZ]|[+-]\d{2}:\d{2})$/
	exports['date'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}$/
	exports['time'] = /^\d{2}:\d{2}:\d{2}$/
	exports['email'] = /^\S+@\S+$/
	exports['ip-address'] = exports['ipv4'] = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
	exports['ipv6'] = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
	exports['uri'] = /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/
	exports['color'] = /(#?([0-9A-Fa-f]{3,6})\b)|(aqua)|(black)|(blue)|(fuchsia)|(gray)|(green)|(lime)|(maroon)|(navy)|(olive)|(orange)|(purple)|(red)|(silver)|(teal)|(white)|(yellow)|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\))/
	exports['hostname'] = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$/
	exports['alpha'] = /^[a-zA-Z]+$/
	exports['alphanumeric'] = /^[a-zA-Z0-9]+$/
	exports['style'] = /\s*(.+?):\s*([^;]+);?/g
	exports['phone'] = /^\+(?:[0-9] ?){6,14}[0-9]$/
	exports['utc-millisec'] = /^[0-9]+(\.?[0-9]+)?$/


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var caseless = __webpack_require__(314)
	  , uuid = __webpack_require__(350)
	  , helpers = __webpack_require__(263)

	var md5 = helpers.md5
	  , toBase64 = helpers.toBase64


	function Auth (request) {
	  // define all public properties here
	  this.request = request
	  this.hasAuth = false
	  this.sentAuth = false
	  this.bearerToken = null
	  this.user = null
	  this.pass = null
	}

	Auth.prototype.basic = function (user, pass, sendImmediately) {
	  var self = this
	  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
	    self.request.emit('error', new Error('auth() received invalid user or password'))
	  }
	  self.user = user
	  self.pass = pass
	  self.hasAuth = true
	  var header = user + ':' + (pass || '')
	  if (sendImmediately || typeof sendImmediately === 'undefined') {
	    var authHeader = 'Basic ' + toBase64(header)
	    self.sentAuth = true
	    return authHeader
	  }
	}

	Auth.prototype.bearer = function (bearer, sendImmediately) {
	  var self = this
	  self.bearerToken = bearer
	  self.hasAuth = true
	  if (sendImmediately || typeof sendImmediately === 'undefined') {
	    if (typeof bearer === 'function') {
	      bearer = bearer()
	    }
	    var authHeader = 'Bearer ' + (bearer || '')
	    self.sentAuth = true
	    return authHeader
	  }
	}

	Auth.prototype.digest = function (method, path, authHeader) {
	  // TODO: More complete implementation of RFC 2617.
	  //   - check challenge.algorithm
	  //   - support algorithm="MD5-sess"
	  //   - handle challenge.domain
	  //   - support qop="auth-int" only
	  //   - handle Authentication-Info (not necessarily?)
	  //   - check challenge.stale (not necessarily?)
	  //   - increase nc (not necessarily?)
	  // For reference:
	  // http://tools.ietf.org/html/rfc2617#section-3
	  // https://github.com/bagder/curl/blob/master/lib/http_digest.c

	  var self = this

	  var challenge = {}
	  var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi
	  for (;;) {
	    var match = re.exec(authHeader)
	    if (!match) {
	      break
	    }
	    challenge[match[1]] = match[2] || match[3]
	  }

	  var ha1 = md5(self.user + ':' + challenge.realm + ':' + self.pass)
	  var ha2 = md5(method + ':' + path)
	  var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth'
	  var nc = qop && '00000001'
	  var cnonce = qop && uuid().replace(/-/g, '')
	  var digestResponse = qop
	    ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)
	    : md5(ha1 + ':' + challenge.nonce + ':' + ha2)
	  var authValues = {
	    username: self.user,
	    realm: challenge.realm,
	    nonce: challenge.nonce,
	    uri: path,
	    qop: qop,
	    response: digestResponse,
	    nc: nc,
	    cnonce: cnonce,
	    algorithm: challenge.algorithm,
	    opaque: challenge.opaque
	  }

	  authHeader = []
	  for (var k in authValues) {
	    if (authValues[k]) {
	      if (k === 'qop' || k === 'nc' || k === 'algorithm') {
	        authHeader.push(k + '=' + authValues[k])
	      } else {
	        authHeader.push(k + '="' + authValues[k] + '"')
	      }
	    }
	  }
	  authHeader = 'Digest ' + authHeader.join(', ')
	  self.sentAuth = true
	  return authHeader
	}

	Auth.prototype.onRequest = function (user, pass, sendImmediately, bearer) {
	  var self = this
	    , request = self.request

	  var authHeader
	  if (bearer === undefined && user === undefined) {
	    self.request.emit('error', new Error('no auth mechanism defined'))
	  } else if (bearer !== undefined) {
	    authHeader = self.bearer(bearer, sendImmediately)
	  } else {
	    authHeader = self.basic(user, pass, sendImmediately)
	  }
	  if (authHeader) {
	    request.setHeader('authorization', authHeader)
	  }
	}

	Auth.prototype.onResponse = function (response) {
	  var self = this
	    , request = self.request

	  if (!self.hasAuth || self.sentAuth) { return null }

	  var c = caseless(response.headers)

	  var authHeader = c.get('www-authenticate')
	  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase()
	  request.debug('reauth', authVerb)

	  switch (authVerb) {
	    case 'basic':
	      return self.basic(self.user, self.pass, true)

	    case 'bearer':
	      return self.bearer(self.bearerToken, true)

	    case 'digest':
	      return self.digest(request.method, request.path, authHeader)
	  }
	}

	exports.Auth = Auth


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	(function() {
	  var _global = this;

	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required
	  var _rng;

	  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
	  //
	  // Moderately fast, high quality
	  if (typeof(_global.require) == 'function') {
	    try {
	      var _rb = _global.require('crypto').randomBytes;
	      _rng = _rb && function() {return _rb(16);};
	    } catch(e) {}
	  }

	  if (!_rng && _global.crypto && crypto.getRandomValues) {
	    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	    //
	    // Moderately fast, high quality
	    var _rnds8 = new Uint8Array(16);
	    _rng = function whatwgRNG() {
	      crypto.getRandomValues(_rnds8);
	      return _rnds8;
	    };
	  }

	  if (!_rng) {
	    // Math.random()-based (RNG)
	    //
	    // If all else fails, use Math.random().  It's fast, but is of unspecified
	    // quality.
	    var  _rnds = new Array(16);
	    _rng = function() {
	      for (var i = 0, r; i < 16; i++) {
	        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	      }

	      return _rnds;
	    };
	  }

	  // Buffer class to use
	  var BufferClass = typeof(_global.Buffer) == 'function' ? _global.Buffer : Array;

	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }

	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = (buf && offset) || 0, ii = 0;

	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	      if (ii < 16) { // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });

	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }

	    return buf;
	  }

	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0, bth = _byteToHex;
	    return  bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]];
	  }

	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html

	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();

	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [
	    _seedBytes[0] | 0x01,
	    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	  ];

	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	  // Previous uuid creation time
	  var _lastMSecs = 0, _lastNSecs = 0;

	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];

	    options = options || {};

	    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;

	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = options.msecs != null ? options.msecs : new Date().getTime();

	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;

	    // Time since last uuid creation (in msecs)
	    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq == null) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }

	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
	      nsecs = 0;
	    }

	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }

	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;

	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;

	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;

	    // `time_mid`
	    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;

	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;

	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;

	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;

	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }

	    return buf ? buf : unparse(b);
	  }

	  // **`v4()` - Generate random UUID**

	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;

	    if (typeof(options) == 'string') {
	      buf = options == 'binary' ? new BufferClass(16) : null;
	      options = null;
	    }
	    options = options || {};

	    var rnds = options.random || (options.rng || _rng)();

	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = (rnds[6] & 0x0f) | 0x40;
	    rnds[8] = (rnds[8] & 0x3f) | 0x80;

	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }

	    return buf || unparse(rnds);
	  }

	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;
	  uuid.BufferClass = BufferClass;

	  if (typeof(module) != 'undefined' && module.exports) {
	    // Publish as node.js module
	    module.exports = uuid;
	  } else  if (true) {
	    // Publish as AMD module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {return uuid;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	 

	  } else {
	    // Publish as global (in browsers)
	    var _previousRoot = _global.uuid;

	    // **`noConflict()` - (browser only) to reset global 'uuid' var**
	    uuid.noConflict = function() {
	      _global.uuid = _previousRoot;
	      return uuid;
	    };

	    _global.uuid = uuid;
	  }
	}).call(this);


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'

	var url = __webpack_require__(41)
	  , qs = __webpack_require__(319)
	  , caseless = __webpack_require__(314)
	  , uuid = __webpack_require__(350)
	  , oauth = __webpack_require__(352)
	  , crypto = __webpack_require__(52)


	function OAuth (request) {
	  this.request = request
	  this.params = null
	}

	OAuth.prototype.buildParams = function (_oauth, uri, method, query, form, qsLib) {
	  var oa = {}
	  for (var i in _oauth) {
	    oa['oauth_' + i] = _oauth[i]
	  }
	  if (!oa.oauth_version) {
	    oa.oauth_version = '1.0'
	  }
	  if (!oa.oauth_timestamp) {
	    oa.oauth_timestamp = Math.floor( Date.now() / 1000 ).toString()
	  }
	  if (!oa.oauth_nonce) {
	    oa.oauth_nonce = uuid().replace(/-/g, '')
	  }
	  if (!oa.oauth_signature_method) {
	    oa.oauth_signature_method = 'HMAC-SHA1'
	  }

	  var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key
	  delete oa.oauth_consumer_secret
	  delete oa.oauth_private_key

	  var token_secret = oa.oauth_token_secret
	  delete oa.oauth_token_secret

	  var realm = oa.oauth_realm
	  delete oa.oauth_realm
	  delete oa.oauth_transport_method

	  var baseurl = uri.protocol + '//' + uri.host + uri.pathname
	  var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'))

	  oa.oauth_signature = oauth.sign(
	    oa.oauth_signature_method,
	    method,
	    baseurl,
	    params,
	    consumer_secret_or_private_key,
	    token_secret)

	  if (realm) {
	    oa.realm = realm
	  }

	  return oa
	}

	OAuth.prototype.buildBodyHash = function(_oauth, body) {
	  if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {
	    this.request.emit('error', new Error('oauth: ' + _oauth.signature_method +
	      ' signature_method not supported with body_hash signing.'))
	  }

	  var shasum = crypto.createHash('sha1')
	  shasum.update(body || '')
	  var sha1 = shasum.digest('hex')

	  return new Buffer(sha1).toString('base64')
	}

	OAuth.prototype.concatParams = function (oa, sep, wrap) {
	  wrap = wrap || ''

	  var params = Object.keys(oa).filter(function (i) {
	    return i !== 'realm' && i !== 'oauth_signature'
	  }).sort()

	  if (oa.realm) {
	    params.splice(0, 0, 'realm')
	  }
	  params.push('oauth_signature')

	  return params.map(function (i) {
	    return i + '=' + wrap + oauth.rfc3986(oa[i]) + wrap
	  }).join(sep)
	}

	OAuth.prototype.onRequest = function (_oauth) {
	  var self = this
	  self.params = _oauth

	  var uri = self.request.uri || {}
	    , method = self.request.method || ''
	    , headers = caseless(self.request.headers)
	    , body = self.request.body || ''
	    , qsLib = self.request.qsLib || qs

	  var form
	    , query
	    , contentType = headers.get('content-type') || ''
	    , formContentType = 'application/x-www-form-urlencoded'
	    , transport = _oauth.transport_method || 'header'

	  if (contentType.slice(0, formContentType.length) === formContentType) {
	    contentType = formContentType
	    form = body
	  }
	  if (uri.query) {
	    query = uri.query
	  }
	  if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {
	    self.request.emit('error', new Error('oauth: transport_method of body requires POST ' +
	      'and content-type ' + formContentType))
	  }

	  if (!form && typeof _oauth.body_hash === 'boolean') {
	    _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString())
	  }

	  var oa = self.buildParams(_oauth, uri, method, query, form, qsLib)

	  switch (transport) {
	    case 'header':
	      self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '"'))
	      break

	    case 'query':
	      var href = self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&')
	      self.request.uri = url.parse(href)
	      self.request.path = self.request.uri.path
	      break

	    case 'body':
	      self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&')
	      break

	    default:
	      self.request.emit('error', new Error('oauth: transport_method invalid'))
	  }
	}

	exports.OAuth = OAuth

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	var crypto = __webpack_require__(52)
	  , qs = __webpack_require__(49)
	  ;

	function sha1 (key, body) {
	  return crypto.createHmac('sha1', key).update(body).digest('base64')
	}

	function rsa (key, body) {
	  return crypto.createSign("RSA-SHA1").update(body).sign(key, 'base64');
	}

	function rfc3986 (str) {
	  return encodeURIComponent(str)
	    .replace(/!/g,'%21')
	    .replace(/\*/g,'%2A')
	    .replace(/\(/g,'%28')
	    .replace(/\)/g,'%29')
	    .replace(/'/g,'%27')
	    ;
	}

	// Maps object to bi-dimensional array
	// Converts { foo: 'A', bar: [ 'b', 'B' ]} to
	// [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]
	function map (obj) {
	  var key, val, arr = []
	  for (key in obj) {
	    val = obj[key]
	    if (Array.isArray(val))
	      for (var i = 0; i < val.length; i++)
	        arr.push([key, val[i]])
	    else if (typeof val === "object")
	      for (var prop in val)
	        arr.push([key + '[' + prop + ']', val[prop]]);
	    else
	      arr.push([key, val])
	  }
	  return arr
	}

	// Compare function for sort
	function compare (a, b) {
	  return a > b ? 1 : a < b ? -1 : 0
	}

	function generateBase (httpMethod, base_uri, params) {
	  // adapted from https://dev.twitter.com/docs/auth/oauth and 
	  // https://dev.twitter.com/docs/auth/creating-signature

	  // Parameter normalization
	  // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
	  var normalized = map(params)
	  // 1.  First, the name and value of each parameter are encoded
	  .map(function (p) {
	    return [ rfc3986(p[0]), rfc3986(p[1] || '') ]
	  })
	  // 2.  The parameters are sorted by name, using ascending byte value
	  //     ordering.  If two or more parameters share the same name, they
	  //     are sorted by their value.
	  .sort(function (a, b) {
	    return compare(a[0], b[0]) || compare(a[1], b[1])
	  })
	  // 3.  The name of each parameter is concatenated to its corresponding
	  //     value using an "=" character (ASCII code 61) as a separator, even
	  //     if the value is empty.
	  .map(function (p) { return p.join('=') })
	   // 4.  The sorted name/value pairs are concatenated together into a
	   //     single string by using an "&" character (ASCII code 38) as
	   //     separator.
	  .join('&')

	  var base = [
	    rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'),
	    rfc3986(base_uri),
	    rfc3986(normalized)
	  ].join('&')

	  return base
	}

	function hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret) {
	  var base = generateBase(httpMethod, base_uri, params)
	  var key = [
	    consumer_secret || '',
	    token_secret || ''
	  ].map(rfc3986).join('&')

	  return sha1(key, base)
	}

	function rsasign (httpMethod, base_uri, params, private_key, token_secret) {
	  var base = generateBase(httpMethod, base_uri, params)
	  var key = private_key || ''

	  return rsa(key, base)
	}

	function plaintext (consumer_secret, token_secret) {
	  var key = [
	    consumer_secret || '',
	    token_secret || ''
	  ].map(rfc3986).join('&')

	  return key
	}

	function sign (signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {
	  var method
	  var skipArgs = 1

	  switch (signMethod) {
	    case 'RSA-SHA1':
	      method = rsasign
	      break
	    case 'HMAC-SHA1':
	      method = hmacsign
	      break
	    case 'PLAINTEXT':
	      method = plaintext
	      skipArgs = 4
	      break
	    default:
	     throw new Error("Signature method not supported: " + signMethod)
	  }

	  return method.apply(null, [].slice.call(arguments, skipArgs))
	}

	exports.hmacsign = hmacsign
	exports.rsasign = rsasign
	exports.plaintext = plaintext
	exports.sign = sign
	exports.rfc3986 = rfc3986


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'

	var uuid = __webpack_require__(350)
	  , CombinedStream = __webpack_require__(354)
	  , isstream = __webpack_require__(356)


	function Multipart (request) {
	  this.request = request
	  this.boundary = uuid()
	  this.chunked = false
	  this.body = null
	}

	Multipart.prototype.isChunked = function (options) {
	  var self = this
	    , chunked = false
	    , parts = options.data || options

	  if (!parts.forEach) {
	    self.request.emit('error', new Error('Argument error, options.multipart.'))
	  }

	  if (options.chunked !== undefined) {
	    chunked = options.chunked
	  }

	  if (self.request.getHeader('transfer-encoding') === 'chunked') {
	    chunked = true
	  }

	  if (!chunked) {
	    parts.forEach(function (part) {
	      if (typeof part.body === 'undefined') {
	        self.request.emit('error', new Error('Body attribute missing in multipart.'))
	      }
	      if (isstream(part.body)) {
	        chunked = true
	      }
	    })
	  }

	  return chunked
	}

	Multipart.prototype.setHeaders = function (chunked) {
	  var self = this

	  if (chunked && !self.request.hasHeader('transfer-encoding')) {
	    self.request.setHeader('transfer-encoding', 'chunked')
	  }

	  var header = self.request.getHeader('content-type')

	  if (!header || header.indexOf('multipart') === -1) {
	    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary)
	  } else {
	    if (header.indexOf('boundary') !== -1) {
	      self.boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1')
	    } else {
	      self.request.setHeader('content-type', header + '; boundary=' + self.boundary)
	    }
	  }
	}

	Multipart.prototype.build = function (parts, chunked) {
	  var self = this
	  var body = chunked ? new CombinedStream() : []

	  function add (part) {
	    return chunked ? body.append(part) : body.push(new Buffer(part))
	  }

	  if (self.request.preambleCRLF) {
	    add('\r\n')
	  }

	  parts.forEach(function (part) {
	    var preamble = '--' + self.boundary + '\r\n'
	    Object.keys(part).forEach(function (key) {
	      if (key === 'body') { return }
	      preamble += key + ': ' + part[key] + '\r\n'
	    })
	    preamble += '\r\n'
	    add(preamble)
	    add(part.body)
	    add('\r\n')
	  })
	  add('--' + self.boundary + '--')

	  if (self.request.postambleCRLF) {
	    add('\r\n')
	  }

	  return body
	}

	Multipart.prototype.onRequest = function (options) {
	  var self = this

	  var chunked = self.isChunked(options)
	    , parts = options.data || options

	  self.setHeaders(chunked)
	  self.chunked = chunked
	  self.body = self.build(parts, chunked)
	}

	exports.Multipart = Multipart

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var util = __webpack_require__(10);
	var Stream = __webpack_require__(21).Stream;
	var DelayedStream = __webpack_require__(355);

	module.exports = CombinedStream;
	function CombinedStream() {
	  this.writable = false;
	  this.readable = true;
	  this.dataSize = 0;
	  this.maxDataSize = 2 * 1024 * 1024;
	  this.pauseStreams = true;

	  this._released = false;
	  this._streams = [];
	  this._currentStream = null;
	}
	util.inherits(CombinedStream, Stream);

	CombinedStream.create = function(options) {
	  var combinedStream = new this();

	  options = options || {};
	  for (var option in options) {
	    combinedStream[option] = options[option];
	  }

	  return combinedStream;
	};

	CombinedStream.isStreamLike = function(stream) {
	  return (typeof stream !== 'function')
	    && (typeof stream !== 'string')
	    && (typeof stream !== 'boolean')
	    && (typeof stream !== 'number')
	    && (!Buffer.isBuffer(stream));
	};

	CombinedStream.prototype.append = function(stream) {
	  var isStreamLike = CombinedStream.isStreamLike(stream);

	  if (isStreamLike) {
	    if (!(stream instanceof DelayedStream)) {
	      var newStream = DelayedStream.create(stream, {
	        maxDataSize: Infinity,
	        pauseStream: this.pauseStreams,
	      });
	      stream.on('data', this._checkDataSize.bind(this));
	      stream = newStream;
	    }

	    this._handleErrors(stream);

	    if (this.pauseStreams) {
	      stream.pause();
	    }
	  }

	  this._streams.push(stream);
	  return this;
	};

	CombinedStream.prototype.pipe = function(dest, options) {
	  Stream.prototype.pipe.call(this, dest, options);
	  this.resume();
	  return dest;
	};

	CombinedStream.prototype._getNext = function() {
	  this._currentStream = null;
	  var stream = this._streams.shift();


	  if (typeof stream == 'undefined') {
	    this.end();
	    return;
	  }

	  if (typeof stream !== 'function') {
	    this._pipeNext(stream);
	    return;
	  }

	  var getStream = stream;
	  getStream(function(stream) {
	    var isStreamLike = CombinedStream.isStreamLike(stream);
	    if (isStreamLike) {
	      stream.on('data', this._checkDataSize.bind(this));
	      this._handleErrors(stream);
	    }

	    this._pipeNext(stream);
	  }.bind(this));
	};

	CombinedStream.prototype._pipeNext = function(stream) {
	  this._currentStream = stream;

	  var isStreamLike = CombinedStream.isStreamLike(stream);
	  if (isStreamLike) {
	    stream.on('end', this._getNext.bind(this));
	    stream.pipe(this, {end: false});
	    return;
	  }

	  var value = stream;
	  this.write(value);
	  this._getNext();
	};

	CombinedStream.prototype._handleErrors = function(stream) {
	  var self = this;
	  stream.on('error', function(err) {
	    self._emitError(err);
	  });
	};

	CombinedStream.prototype.write = function(data) {
	  this.emit('data', data);
	};

	CombinedStream.prototype.pause = function() {
	  if (!this.pauseStreams) {
	    return;
	  }

	  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
	  this.emit('pause');
	};

	CombinedStream.prototype.resume = function() {
	  if (!this._released) {
	    this._released = true;
	    this.writable = true;
	    this._getNext();
	  }

	  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
	  this.emit('resume');
	};

	CombinedStream.prototype.end = function() {
	  this._reset();
	  this.emit('end');
	};

	CombinedStream.prototype.destroy = function() {
	  this._reset();
	  this.emit('close');
	};

	CombinedStream.prototype._reset = function() {
	  this.writable = false;
	  this._streams = [];
	  this._currentStream = null;
	};

	CombinedStream.prototype._checkDataSize = function() {
	  this._updateDataSize();
	  if (this.dataSize <= this.maxDataSize) {
	    return;
	  }

	  var message =
	    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
	  this._emitError(new Error(message));
	};

	CombinedStream.prototype._updateDataSize = function() {
	  this.dataSize = 0;

	  var self = this;
	  this._streams.forEach(function(stream) {
	    if (!stream.dataSize) {
	      return;
	    }

	    self.dataSize += stream.dataSize;
	  });

	  if (this._currentStream && this._currentStream.dataSize) {
	    this.dataSize += this._currentStream.dataSize;
	  }
	};

	CombinedStream.prototype._emitError = function(err) {
	  this._reset();
	  this.emit('error', err);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(21).Stream;
	var util = __webpack_require__(10);

	module.exports = DelayedStream;
	function DelayedStream() {
	  this.source = null;
	  this.dataSize = 0;
	  this.maxDataSize = 1024 * 1024;
	  this.pauseStream = true;

	  this._maxDataSizeExceeded = false;
	  this._released = false;
	  this._bufferedEvents = [];
	}
	util.inherits(DelayedStream, Stream);

	DelayedStream.create = function(source, options) {
	  var delayedStream = new this();

	  options = options || {};
	  for (var option in options) {
	    delayedStream[option] = options[option];
	  }

	  delayedStream.source = source;

	  var realEmit = source.emit;
	  source.emit = function() {
	    delayedStream._handleEmit(arguments);
	    return realEmit.apply(source, arguments);
	  };

	  source.on('error', function() {});
	  if (delayedStream.pauseStream) {
	    source.pause();
	  }

	  return delayedStream;
	};

	Object.defineProperty(DelayedStream.prototype, 'readable', {
	  configurable: true,
	  enumerable: true,
	  get: function() {
	    return this.source.readable;
	  }
	});

	DelayedStream.prototype.setEncoding = function() {
	  return this.source.setEncoding.apply(this.source, arguments);
	};

	DelayedStream.prototype.resume = function() {
	  if (!this._released) {
	    this.release();
	  }

	  this.source.resume();
	};

	DelayedStream.prototype.pause = function() {
	  this.source.pause();
	};

	DelayedStream.prototype.release = function() {
	  this._released = true;

	  this._bufferedEvents.forEach(function(args) {
	    this.emit.apply(this, args);
	  }.bind(this));
	  this._bufferedEvents = [];
	};

	DelayedStream.prototype.pipe = function() {
	  var r = Stream.prototype.pipe.apply(this, arguments);
	  this.resume();
	  return r;
	};

	DelayedStream.prototype._handleEmit = function(args) {
	  if (this._released) {
	    this.emit.apply(this, args);
	    return;
	  }

	  if (args[0] === 'data') {
	    this.dataSize += args[1].length;
	    this._checkIfMaxDataSizeExceeded();
	  }

	  this._bufferedEvents.push(args);
	};

	DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
	  if (this._maxDataSizeExceeded) {
	    return;
	  }

	  if (this.dataSize <= this.maxDataSize) {
	    return;
	  }

	  this._maxDataSizeExceeded = true;
	  var message =
	    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
	  this.emit('error', new Error(message));
	};


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var stream = __webpack_require__(21)


	function isStream (obj) {
	  return obj instanceof stream.Stream
	}


	function isReadable (obj) {
	  return isStream(obj) && typeof obj._read == 'function' && typeof obj._readableState == 'object'
	}


	function isWritable (obj) {
	  return isStream(obj) && typeof obj._write == 'function' && typeof obj._writableState == 'object'
	}


	function isDuplex (obj) {
	  return isReadable(obj) && isWritable(obj)
	}


	module.exports            = isStream
	module.exports.isReadable = isReadable
	module.exports.isWritable = isWritable
	module.exports.isDuplex   = isDuplex


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var url = __webpack_require__(41)
	var isUrl = /^https?:/

	function Redirect (request) {
	  this.request = request
	  this.followRedirect = true
	  this.followRedirects = true
	  this.followAllRedirects = false
	  this.allowRedirect = function () {return true}
	  this.maxRedirects = 10
	  this.redirects = []
	  this.redirectsFollowed = 0
	  this.removeRefererHeader = false
	}

	Redirect.prototype.onRequest = function (options) {
	  var self = this

	  if (options.maxRedirects !== undefined) {
	    self.maxRedirects = options.maxRedirects
	  }
	  if (typeof options.followRedirect === 'function') {
	    self.allowRedirect = options.followRedirect
	  }
	  if (options.followRedirect !== undefined) {
	    self.followRedirects = !!options.followRedirect
	  }
	  if (options.followAllRedirects !== undefined) {
	    self.followAllRedirects = options.followAllRedirects
	  }
	  if (self.followRedirects || self.followAllRedirects) {
	    self.redirects = self.redirects || []
	  }
	  if (options.removeRefererHeader !== undefined) {
	    self.removeRefererHeader = options.removeRefererHeader
	  }
	}

	Redirect.prototype.redirectTo = function (response) {
	  var self = this
	    , request = self.request

	  var redirectTo = null
	  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {
	    var location = response.caseless.get('location')
	    request.debug('redirect', location)

	    if (self.followAllRedirects) {
	      redirectTo = location
	    } else if (self.followRedirects) {
	      switch (request.method) {
	        case 'PATCH':
	        case 'PUT':
	        case 'POST':
	        case 'DELETE':
	          // Do not follow redirects
	          break
	        default:
	          redirectTo = location
	          break
	      }
	    }
	  } else if (response.statusCode === 401) {
	    var authHeader = request._auth.onResponse(response)
	    if (authHeader) {
	      request.setHeader('authorization', authHeader)
	      redirectTo = request.uri
	    }
	  }
	  return redirectTo
	}

	Redirect.prototype.onResponse = function (response) {
	  var self = this
	    , request = self.request

	  var redirectTo = self.redirectTo(response)
	  if (!redirectTo || !self.allowRedirect.call(request, response)) {
	    return false
	  }

	  request.debug('redirect to', redirectTo)

	  // ignore any potential response body.  it cannot possibly be useful
	  // to us at this point.
	  // response.resume should be defined, but check anyway before calling. Workaround for browserify.
	  if (response.resume) {
	    response.resume()
	  }

	  if (self.redirectsFollowed >= self.maxRedirects) {
	    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))
	    return false
	  }
	  self.redirectsFollowed += 1

	  if (!isUrl.test(redirectTo)) {
	    redirectTo = url.resolve(request.uri.href, redirectTo)
	  }

	  var uriPrev = request.uri
	  request.uri = url.parse(redirectTo)

	  // handle the case where we change protocol from https to http or vice versa
	  if (request.uri.protocol !== uriPrev.protocol) {
	    request._updateProtocol()
	  }

	  self.redirects.push(
	    { statusCode : response.statusCode
	    , redirectUri: redirectTo
	    }
	  )
	  if (self.followAllRedirects && request.method !== 'HEAD'
	    && response.statusCode !== 401 && response.statusCode !== 307) {
	    request.method = 'GET'
	  }
	  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215
	  delete request.src
	  delete request.req
	  delete request.agent
	  delete request._started
	  if (response.statusCode !== 401 && response.statusCode !== 307) {
	    // Remove parameters from the previous response, unless this is the second request
	    // for a server that requires digest authentication.
	    delete request.body
	    delete request._form
	    if (request.headers) {
	      request.removeHeader('host')
	      request.removeHeader('content-type')
	      request.removeHeader('content-length')
	      if (request.uri.hostname !== request.originalHost.split(':')[0]) {
	        // Remove authorization if changing hostnames (but not if just
	        // changing ports or protocols).  This matches the behavior of curl:
	        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710
	        request.removeHeader('authorization')
	      }
	    }
	  }

	  if (!self.removeRefererHeader) {
	    request.setHeader('referer', request.uri.href)
	  }

	  request.emit('redirect')

	  request.init()

	  return true
	}

	exports.Redirect = Redirect


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var url = __webpack_require__(41)
	  , tunnel = __webpack_require__(359)

	var defaultProxyHeaderWhiteList = [
	  'accept',
	  'accept-charset',
	  'accept-encoding',
	  'accept-language',
	  'accept-ranges',
	  'cache-control',
	  'content-encoding',
	  'content-language',
	  'content-length',
	  'content-location',
	  'content-md5',
	  'content-range',
	  'content-type',
	  'connection',
	  'date',
	  'expect',
	  'max-forwards',
	  'pragma',
	  'referer',
	  'te',
	  'transfer-encoding',
	  'user-agent',
	  'via'
	]

	var defaultProxyHeaderExclusiveList = [
	  'proxy-authorization'
	]

	function constructProxyHost(uriObject) {
	  var port = uriObject.portA
	    , protocol = uriObject.protocol
	    , proxyHost = uriObject.hostname + ':'

	  if (port) {
	    proxyHost += port
	  } else if (protocol === 'https:') {
	    proxyHost += '443'
	  } else {
	    proxyHost += '80'
	  }

	  return proxyHost
	}

	function constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {
	  var whiteList = proxyHeaderWhiteList
	    .reduce(function (set, header) {
	      set[header.toLowerCase()] = true
	      return set
	    }, {})

	  return Object.keys(headers)
	    .filter(function (header) {
	      return whiteList[header.toLowerCase()]
	    })
	    .reduce(function (set, header) {
	      set[header] = headers[header]
	      return set
	    }, {})
	}

	function constructTunnelOptions (request, proxyHeaders) {
	  var proxy = request.proxy

	  var tunnelOptions = {
	    proxy : {
	      host      : proxy.hostname,
	      port      : +proxy.port,
	      proxyAuth : proxy.auth,
	      headers   : proxyHeaders
	    },
	    headers            : request.headers,
	    ca                 : request.ca,
	    cert               : request.cert,
	    key                : request.key,
	    passphrase         : request.passphrase,
	    pfx                : request.pfx,
	    ciphers            : request.ciphers,
	    rejectUnauthorized : request.rejectUnauthorized,
	    secureOptions      : request.secureOptions,
	    secureProtocol     : request.secureProtocol
	  }

	  return tunnelOptions
	}

	function constructTunnelFnName(uri, proxy) {
	  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')
	  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')
	  return [uriProtocol, proxyProtocol].join('Over')
	}

	function getTunnelFn(request) {
	  var uri = request.uri
	  var proxy = request.proxy
	  var tunnelFnName = constructTunnelFnName(uri, proxy)
	  return tunnel[tunnelFnName]
	}


	function Tunnel (request) {
	  this.request = request
	  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList
	  this.proxyHeaderExclusiveList = []
	}

	Tunnel.prototype.isEnabled = function (options) {
	  var request = this.request
	  // Tunnel HTTPS by default, or if a previous request in the redirect chain
	  // was tunneled.  Allow the user to override this setting.

	  // If self.tunnel is already set (because this is a redirect), use the
	  // existing value.
	  if (typeof request.tunnel !== 'undefined') {
	    return request.tunnel
	  }

	  // If options.tunnel is set (the user specified a value), use it.
	  if (typeof options.tunnel !== 'undefined') {
	    return options.tunnel
	  }

	  // If the destination is HTTPS, tunnel.
	  if (request.uri.protocol === 'https:') {
	    return true
	  }

	  // Otherwise, leave tunnel unset, because if a later request in the redirect
	  // chain is HTTPS then that request (and any subsequent ones) should be
	  // tunneled.
	  return undefined
	}

	Tunnel.prototype.setup = function (options) {
	  var self = this
	    , request = self.request

	  options = options || {}

	  if (typeof request.proxy === 'string') {
	    request.proxy = url.parse(request.proxy)
	  }

	  if (!request.proxy || !request.tunnel) {
	    return false
	  }

	  // Setup Proxy Header Exclusive List and White List
	  if (options.proxyHeaderWhiteList) {
	    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList
	  }
	  if (options.proxyHeaderExclusiveList) {
	    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList
	  }

	  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)
	  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)

	  // Setup Proxy Headers and Proxy Headers Host
	  // Only send the Proxy White Listed Header names
	  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)
	  proxyHeaders.host = constructProxyHost(request.uri)

	  proxyHeaderExclusiveList.forEach(request.removeHeader, request)

	  // Set Agent from Tunnel Data
	  var tunnelFn = getTunnelFn(request)
	  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)
	  request.agent = tunnelFn(tunnelOptions)

	  return true
	}

	Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList
	Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList
	exports.Tunnel = Tunnel


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {'use strict'

	var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , http = __webpack_require__(18)
	  , https = __webpack_require__(266)
	  , events = __webpack_require__(19)
	  , assert = __webpack_require__(280)
	  , util = __webpack_require__(10)
	  ;

	exports.httpOverHttp = httpOverHttp
	exports.httpsOverHttp = httpsOverHttp
	exports.httpOverHttps = httpOverHttps
	exports.httpsOverHttps = httpsOverHttps


	function httpOverHttp(options) {
	  var agent = new TunnelingAgent(options)
	  agent.request = http.request
	  return agent
	}

	function httpsOverHttp(options) {
	  var agent = new TunnelingAgent(options)
	  agent.request = http.request
	  agent.createSocket = createSecureSocket
	  return agent
	}

	function httpOverHttps(options) {
	  var agent = new TunnelingAgent(options)
	  agent.request = https.request
	  return agent
	}

	function httpsOverHttps(options) {
	  var agent = new TunnelingAgent(options)
	  agent.request = https.request
	  agent.createSocket = createSecureSocket
	  return agent
	}


	function TunnelingAgent(options) {
	  var self = this
	  self.options = options || {}
	  self.proxyOptions = self.options.proxy || {}
	  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
	  self.requests = []
	  self.sockets = []

	  self.on('free', function onFree(socket, host, port) {
	    for (var i = 0, len = self.requests.length; i < len; ++i) {
	      var pending = self.requests[i]
	      if (pending.host === host && pending.port === port) {
	        // Detect the request to connect same origin server,
	        // reuse the connection.
	        self.requests.splice(i, 1)
	        pending.request.onSocket(socket)
	        return
	      }
	    }
	    socket.destroy()
	    self.removeSocket(socket)
	  })
	}
	util.inherits(TunnelingAgent, events.EventEmitter)

	TunnelingAgent.prototype.addRequest = function addRequest(req, options) {
	  var self = this

	   // Legacy API: addRequest(req, host, port, path)
	  if (typeof options === 'string') {
	    options = {
	      host: options,
	      port: arguments[2],
	      path: arguments[3]
	    };
	  }

	  if (self.sockets.length >= this.maxSockets) {
	    // We are over limit so we'll add it to the queue.
	    self.requests.push({host: options.host, port: options.port, request: req})
	    return
	  }

	  // If we are under maxSockets create a new one.
	  self.createConnection({host: options.host, port: options.port, request: req})
	}

	TunnelingAgent.prototype.createConnection = function createConnection(pending) {
	  var self = this

	  self.createSocket(pending, function(socket) {
	    socket.on('free', onFree)
	    socket.on('close', onCloseOrRemove)
	    socket.on('agentRemove', onCloseOrRemove)
	    pending.request.onSocket(socket)

	    function onFree() {
	      self.emit('free', socket, pending.host, pending.port)
	    }

	    function onCloseOrRemove(err) {
	      self.removeSocket(socket)
	      socket.removeListener('free', onFree)
	      socket.removeListener('close', onCloseOrRemove)
	      socket.removeListener('agentRemove', onCloseOrRemove)
	    }
	  })
	}

	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
	  var self = this
	  var placeholder = {}
	  self.sockets.push(placeholder)

	  var connectOptions = mergeOptions({}, self.proxyOptions, 
	    { method: 'CONNECT'
	    , path: options.host + ':' + options.port
	    , agent: false
	    }
	  )
	  if (connectOptions.proxyAuth) {
	    connectOptions.headers = connectOptions.headers || {}
	    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
	        new Buffer(connectOptions.proxyAuth).toString('base64')
	  }

	  debug('making CONNECT request')
	  var connectReq = self.request(connectOptions)
	  connectReq.useChunkedEncodingByDefault = false // for v0.6
	  connectReq.once('response', onResponse) // for v0.6
	  connectReq.once('upgrade', onUpgrade)   // for v0.6
	  connectReq.once('connect', onConnect)   // for v0.7 or later
	  connectReq.once('error', onError)
	  connectReq.end()

	  function onResponse(res) {
	    // Very hacky. This is necessary to avoid http-parser leaks.
	    res.upgrade = true
	  }

	  function onUpgrade(res, socket, head) {
	    // Hacky.
	    process.nextTick(function() {
	      onConnect(res, socket, head)
	    })
	  }

	  function onConnect(res, socket, head) {
	    connectReq.removeAllListeners()
	    socket.removeAllListeners()

	    if (res.statusCode === 200) {
	      assert.equal(head.length, 0)
	      debug('tunneling connection has established')
	      self.sockets[self.sockets.indexOf(placeholder)] = socket
	      cb(socket)
	    } else {
	      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
	      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
	      error.code = 'ECONNRESET'
	      options.request.emit('error', error)
	      self.removeSocket(placeholder)
	    }
	  }

	  function onError(cause) {
	    connectReq.removeAllListeners()

	    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
	    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
	    error.code = 'ECONNRESET'
	    options.request.emit('error', error)
	    self.removeSocket(placeholder)
	  }
	}

	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
	  var pos = this.sockets.indexOf(socket)
	  if (pos === -1) return
	  
	  this.sockets.splice(pos, 1)

	  var pending = this.requests.shift()
	  if (pending) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createConnection(pending)
	  }
	}

	function createSecureSocket(options, cb) {
	  var self = this
	  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
	    // 0 is dummy port for v0.6
	    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
	      { servername: options.host
	      , socket: socket
	      }
	    ))
	    self.sockets[self.sockets.indexOf(socket)] = secureSocket
	    cb(secureSocket)
	  })
	}


	function mergeOptions(target) {
	  for (var i = 1, len = arguments.length; i < len; ++i) {
	    var overrides = arguments[i]
	    if (typeof overrides === 'object') {
	      var keys = Object.keys(overrides)
	      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
	        var k = keys[j]
	        if (overrides[k] !== undefined) {
	          target[k] = overrides[k]
	        }
	      }
	    }
	  }
	  return target
	}


	var debug
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
	  debug = function() {
	    var args = Array.prototype.slice.call(arguments)
	    if (typeof args[0] === 'string') {
	      args[0] = 'TUNNEL: ' + args[0]
	    } else {
	      args.unshift('TUNNEL:')
	    }
	    console.error.apply(console, args)
	  }
	} else {
	  debug = function() {}
	}
	exports.debug = debug // for test

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer, __webpack_require__(4)))

/***/ }
/******/ ]);